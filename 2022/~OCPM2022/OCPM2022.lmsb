DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VS1_M
DATAF VS2_M
DATAF VK_M
DATAF VV_M
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VBLACK_M
DATAF VX_M
DATAF VX2_M
DATAF VX3_M
DATAF VY_M
DATAF VCOLOR_M
DATAF VC_M
DATAF VPY_M
DATAF VU_M
DATAF VI_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VPY_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VPY_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    CALL MOTOR.INVERT 'B'
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 2.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 3.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.3 VK_M
    MOVEF_F 35.0 VV_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 30.0 VBLACK_M
    MOVEF_F 2.0 VX_M
    MOVEF_F 3.0 VX2_M
    MOVEF_F 1.0 VX3_M
    MOVEF_F 4.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    CALL MOTOR.STOP 'BC' 'true'
  while120:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile120
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile120
  whilebody120:
    WRITE32 ENDSUB_LINE:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB123:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and124
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody120
  and124:
  endwhile120:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 40.0 0.0 'true' 

	DATA8 layer128
	DATA8 nos128
	DATA8 busy128
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer128 nos128
	JR_EQ8 0 nos128 motornotbusy128
  motorwaiting128:
	OUTPUT_TEST layer128 nos128 busy128
	JR_EQ8 busy128 0 motornotbusy128
	SLEEP
	JR motorwaiting128
  motornotbusy128:
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 180.0 0.0 'TRUE' 

	DATA8 layer129
	DATA8 nos129
	DATA8 busy129
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer129 nos129
	JR_EQ8 0 nos129 motornotbusy129
  motorwaiting129:
	OUTPUT_TEST layer129 nos129 busy129
	JR_EQ8 busy129 0 motornotbusy129
	SLEEP
	JR motorwaiting129
  motornotbusy129:
    MOVEF_F 1.0 VC_M
    MOVEF_F 3.0 VX_M
    MOVEF_F 1.0 VI_M
  for130:
    JR_GTF VI_M VX_M endfor130
  forbody130:
  while131:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile131
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile131
  whilebody131:
    WRITE32 ENDSUB_LINE:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB134:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and135
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody131
  and135:
  endwhile131:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while140:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf144
    DATA8 flag144
    DIVF F.1 2.0 tmpf144
    CP_EQF 0.0 2.0 flag144
    SELECTF flag144 0.0 tmpf144 F.0

    JR_GTEQF F.0 30.0 endwhile140
  whilebody140:
    WRITE32 ENDSUB_LINE:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB145:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf149
    DATA8 flag149
    DIVF F.1 2.0 tmpf149
    CP_EQF 0.0 2.0 flag149
    SELECTF flag149 0.0 tmpf149 F.0

    JR_LTF F.0 30.0 whilebody140
  endwhile140:
    CALL MOTOR.STOP 'BC' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX_M forbody130
  endfor130:
    JR_NEQF VY_M 3.0 else152_1
    WRITE32 ENDSUB_GETCOL:CALLSUB153 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB153:
    JR endif152
  else152_1:
    JR_GTEQF VY_M 3.0 else152_2
    WRITE32 ENDSUB_LEFT:CALLSUB154 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB154:
    MOVEF_F 1.0 VV_M
  for155:
    JR_GTF VV_M VPY_M endfor155
  forbody155:
  while156:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 or157
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile156
  or157:
  whilebody156:
    WRITE32 ENDSUB_LINE:CALLSUB160 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB160:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 whilebody156
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody156
  endwhile156:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while165:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf169
    DATA8 flag169
    DIVF F.1 2.0 tmpf169
    CP_EQF 0.0 2.0 flag169
    SELECTF flag169 0.0 tmpf169 F.0

    JR_GTEQF F.0 30.0 endwhile165
  whilebody165:
    WRITE32 ENDSUB_LINE:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB170:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf174
    DATA8 flag174
    DIVF F.1 2.0 tmpf174
    CP_EQF 0.0 2.0 flag174
    SELECTF flag174 0.0 tmpf174 F.0

    JR_LTF F.0 30.0 whilebody165
  endwhile165:
    CALL MOTOR.STOP 'BC' 'true'
    ADDF VV_M 1.0 VV_M
    JR_LTEQF VV_M VPY_M forbody155
  endfor155:
    WRITE32 ENDSUB_GETCOL:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB177:
    WRITE32 ENDSUB_AROUND:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB178:
    MOVEF_F 1.0 VI_M
  for179:
    JR_GTF VI_M VPY_M endfor179
  forbody179:
  while180:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 or181
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile180
  or181:
  whilebody180:
    WRITE32 ENDSUB_LINE:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB184:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 whilebody180
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody180
  endwhile180:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer188
	DATA8 nos188
	DATA8 busy188
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer188 nos188
	JR_EQ8 0 nos188 motornotbusy188
  motorwaiting188:
	OUTPUT_TEST layer188 nos188 busy188
	JR_EQ8 busy188 0 motornotbusy188
	SLEEP
	JR motorwaiting188
  motornotbusy188:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody179
  endfor179:
    WRITE32 ENDSUB_RIGHT:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB190:
    JR endif152
  else152_2:
    JR_LTEQF VY_M 3.0 else152_3
    WRITE32 ENDSUB_RIGHT:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB191:
    MOVEF_F 1.0 VV_M
  for192:
    JR_GTF VV_M VPY_M endfor192
  forbody192:
  while193:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 or194
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile193
  or194:
  whilebody193:
    WRITE32 ENDSUB_LINE:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB197:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 whilebody193
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody193
  endwhile193:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer201
	DATA8 nos201
	DATA8 busy201
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer201 nos201
	JR_EQ8 0 nos201 motornotbusy201
  motorwaiting201:
	OUTPUT_TEST layer201 nos201 busy201
	JR_EQ8 busy201 0 motornotbusy201
	SLEEP
	JR motorwaiting201
  motornotbusy201:
    ADDF VV_M 1.0 VV_M
    JR_LTEQF VV_M VPY_M forbody192
  endfor192:
    WRITE32 ENDSUB_GETCOL:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB203:
    WRITE32 ENDSUB_AROUND:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB204:
    MOVEF_F 1.0 VI_M
  for205:
    JR_GTF VI_M VPY_M endfor205
  forbody205:
  while206:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 or207
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile206
  or207:
  whilebody206:
    WRITE32 ENDSUB_LINE:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB210:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 whilebody206
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody206
  endwhile206:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer214
	DATA8 nos214
	DATA8 busy214
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer214 nos214
	JR_EQ8 0 nos214 motornotbusy214
  motorwaiting214:
	OUTPUT_TEST layer214 nos214 busy214
	JR_EQ8 busy214 0 motornotbusy214
	SLEEP
	JR motorwaiting214
  motornotbusy214:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody205
  endfor205:
    WRITE32 ENDSUB_LEFT:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB216:
  else152_3:
  endif152:
    MOVEF_F 1.0 VI_M
  for217:
    JR_GTF VI_M VX_M endfor217
  forbody217:
  while218:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile218
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile218
  whilebody218:
    WRITE32 ENDSUB_LINE:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB221:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and222
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody218
  and222:
  endwhile218:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer226
	DATA8 nos226
	DATA8 busy226
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer226 nos226
	JR_EQ8 0 nos226 motornotbusy226
  motorwaiting226:
	OUTPUT_TEST layer226 nos226 busy226
	JR_EQ8 busy226 0 motornotbusy226
	SLEEP
	JR motorwaiting226
  motornotbusy226:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX_M forbody217
  endfor217:
    WRITE32 ENDSUB_AROUND:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB228:
    DATA32 milliseconds229
	MOVEF_32 5000.0 milliseconds229
	DATA32 timer229
	TIMER_WAIT milliseconds229 timer229
	TIMER_READY timer229
    MOVEF_F 6.0 VX2_M
    MOVEF_F 1.0 VI_M
  for230:
    JR_GTF VI_M VX2_M endfor230
  forbody230:
  while231:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile231
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile231
  whilebody231:
    WRITE32 ENDSUB_LINE:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB234:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and235
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody231
  and235:
  endwhile231:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer239
	DATA8 nos239
	DATA8 busy239
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer239 nos239
	JR_EQ8 0 nos239 motornotbusy239
  motorwaiting239:
	OUTPUT_TEST layer239 nos239 busy239
	JR_EQ8 busy239 0 motornotbusy239
	SLEEP
	JR motorwaiting239
  motornotbusy239:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX2_M forbody230
  endfor230:
    JR_NEQF VY_M 3.0 else241_1
    WRITE32 ENDSUB_GETCOL:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB242:
    JR endif241
  else241_1:
    JR_GTEQF VY_M 3.0 else241_2
    WRITE32 ENDSUB_LEFT:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB243:
    MOVEF_F 1.0 VI_M
  for244:
    JR_GTF VI_M VPY_M endfor244
  forbody244:
  while245:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile245
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile245
  whilebody245:
    WRITE32 ENDSUB_LINE:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB248:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and249
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody245
  and249:
  endwhile245:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer253
	DATA8 nos253
	DATA8 busy253
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer253 nos253
	JR_EQ8 0 nos253 motornotbusy253
  motorwaiting253:
	OUTPUT_TEST layer253 nos253 busy253
	JR_EQ8 busy253 0 motornotbusy253
	SLEEP
	JR motorwaiting253
  motornotbusy253:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody244
  endfor244:
    WRITE32 ENDSUB_GETCOL:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB255:
    WRITE32 ENDSUB_AROUND:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB256:
    MOVEF_F 1.0 VI_M
  for257:
    JR_GTF VI_M VPY_M endfor257
  forbody257:
  while258:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile258
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile258
  whilebody258:
    WRITE32 ENDSUB_LINE:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB261:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and262
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody258
  and262:
  endwhile258:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer266
	DATA8 nos266
	DATA8 busy266
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer266 nos266
	JR_EQ8 0 nos266 motornotbusy266
  motorwaiting266:
	OUTPUT_TEST layer266 nos266 busy266
	JR_EQ8 busy266 0 motornotbusy266
	SLEEP
	JR motorwaiting266
  motornotbusy266:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody257
  endfor257:
    WRITE32 ENDSUB_RIGHT:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB268:
    JR endif241
  else241_2:
    JR_LTEQF VY_M 3.0 else241_3
    WRITE32 ENDSUB_RIGHT:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB269:
    MOVEF_F 1.0 VI_M
  for270:
    JR_GTF VI_M VPY_M endfor270
  forbody270:
  while271:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile271
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile271
  whilebody271:
    WRITE32 ENDSUB_LINE:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB274:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and275
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody271
  and275:
  endwhile271:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer279
	DATA8 nos279
	DATA8 busy279
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer279 nos279
	JR_EQ8 0 nos279 motornotbusy279
  motorwaiting279:
	OUTPUT_TEST layer279 nos279 busy279
	JR_EQ8 busy279 0 motornotbusy279
	SLEEP
	JR motorwaiting279
  motornotbusy279:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody270
  endfor270:
    WRITE32 ENDSUB_GETCOL:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB281:
    WRITE32 ENDSUB_AROUND:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB282:
    MOVEF_F 1.0 VI_M
  for283:
    JR_GTF VI_M VPY_M endfor283
  forbody283:
  while284:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile284
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile284
  whilebody284:
    WRITE32 ENDSUB_LINE:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB287:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and288
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody284
  and288:
  endwhile284:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer292
	DATA8 nos292
	DATA8 busy292
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer292 nos292
	JR_EQ8 0 nos292 motornotbusy292
  motorwaiting292:
	OUTPUT_TEST layer292 nos292 busy292
	JR_EQ8 busy292 0 motornotbusy292
	SLEEP
	JR motorwaiting292
  motornotbusy292:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody283
  endfor283:
    WRITE32 ENDSUB_LEFT:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB294:
  else241_3:
  endif241:
    MOVEF_F 1.0 VI_M
  for295:
    JR_GTF VI_M VX2_M endfor295
  forbody295:
  while296:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile296
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile296
  whilebody296:
    WRITE32 ENDSUB_LINE:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB299:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and300
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody296
  and300:
  endwhile296:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer304
	DATA8 nos304
	DATA8 busy304
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer304 nos304
	JR_EQ8 0 nos304 motornotbusy304
  motorwaiting304:
	OUTPUT_TEST layer304 nos304 busy304
	JR_EQ8 busy304 0 motornotbusy304
	SLEEP
	JR motorwaiting304
  motornotbusy304:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX2_M forbody295
  endfor295:
    WRITE32 ENDSUB_AROUND:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB306:
    DATA32 milliseconds307
	MOVEF_32 5000.0 milliseconds307
	DATA32 timer307
	TIMER_WAIT milliseconds307 timer307
	TIMER_READY timer307
    MOVEF_F 4.0 VX3_M
    MOVEF_F 1.0 VI_M
  for308:
    JR_GTF VI_M VX3_M endfor308
  forbody308:
  while309:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile309
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile309
  whilebody309:
    WRITE32 ENDSUB_LINE:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB312:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and313
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody309
  and313:
  endwhile309:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer317
	DATA8 nos317
	DATA8 busy317
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer317 nos317
	JR_EQ8 0 nos317 motornotbusy317
  motorwaiting317:
	OUTPUT_TEST layer317 nos317 busy317
	JR_EQ8 busy317 0 motornotbusy317
	SLEEP
	JR motorwaiting317
  motornotbusy317:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX3_M forbody308
  endfor308:
    JR_NEQF VY_M 3.0 else319_1
    WRITE32 ENDSUB_GETCOL:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB320:
    JR endif319
  else319_1:
    JR_GTEQF VY_M 3.0 else319_2
    WRITE32 ENDSUB_LEFT:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB321:
    MOVEF_F 1.0 VI_M
  for322:
    JR_GTF VI_M VPY_M endfor322
  forbody322:
  while323:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile323
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile323
  whilebody323:
    WRITE32 ENDSUB_LINE:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB326:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and327
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody323
  and327:
  endwhile323:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer331
	DATA8 nos331
	DATA8 busy331
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer331 nos331
	JR_EQ8 0 nos331 motornotbusy331
  motorwaiting331:
	OUTPUT_TEST layer331 nos331 busy331
	JR_EQ8 busy331 0 motornotbusy331
	SLEEP
	JR motorwaiting331
  motornotbusy331:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody322
  endfor322:
    WRITE32 ENDSUB_GETCOL:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB333:
    WRITE32 ENDSUB_AROUND:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB334:
    MOVEF_F 1.0 VI_M
  for335:
    JR_GTF VI_M VPY_M endfor335
  forbody335:
  while336:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile336
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile336
  whilebody336:
    WRITE32 ENDSUB_LINE:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB339:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and340
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody336
  and340:
  endwhile336:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer344
	DATA8 nos344
	DATA8 busy344
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer344 nos344
	JR_EQ8 0 nos344 motornotbusy344
  motorwaiting344:
	OUTPUT_TEST layer344 nos344 busy344
	JR_EQ8 busy344 0 motornotbusy344
	SLEEP
	JR motorwaiting344
  motornotbusy344:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody335
  endfor335:
    WRITE32 ENDSUB_RIGHT:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB346:
    JR endif319
  else319_2:
    JR_LTEQF VY_M 3.0 else319_3
    WRITE32 ENDSUB_RIGHT:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB347:
    MOVEF_F 1.0 VI_M
  for348:
    JR_GTF VI_M VPY_M endfor348
  forbody348:
  while349:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile349
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile349
  whilebody349:
    WRITE32 ENDSUB_LINE:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB352:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and353
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody349
  and353:
  endwhile349:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer357
	DATA8 nos357
	DATA8 busy357
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer357 nos357
	JR_EQ8 0 nos357 motornotbusy357
  motorwaiting357:
	OUTPUT_TEST layer357 nos357 busy357
	JR_EQ8 busy357 0 motornotbusy357
	SLEEP
	JR motorwaiting357
  motornotbusy357:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody348
  endfor348:
    WRITE32 ENDSUB_GETCOL:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB359:
    WRITE32 ENDSUB_AROUND:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB360:
    MOVEF_F 1.0 VI_M
  for361:
    JR_GTF VI_M VPY_M endfor361
  forbody361:
  while362:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile362
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile362
  whilebody362:
    WRITE32 ENDSUB_LINE:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB365:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and366
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody362
  and366:
  endwhile362:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer370
	DATA8 nos370
	DATA8 busy370
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer370 nos370
	JR_EQ8 0 nos370 motornotbusy370
  motorwaiting370:
	OUTPUT_TEST layer370 nos370 busy370
	JR_EQ8 busy370 0 motornotbusy370
	SLEEP
	JR motorwaiting370
  motornotbusy370:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody361
  endfor361:
    WRITE32 ENDSUB_LEFT:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB372:
  else319_3:
  endif319:
    MOVEF_F 1.0 VI_M
  for373:
    JR_GTF VI_M VX3_M endfor373
  forbody373:
  while374:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 endwhile374
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile374
  whilebody374:
    WRITE32 ENDSUB_LINE:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB377:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 12.0 and378
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody374
  and378:
  endwhile374:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer382
	DATA8 nos382
	DATA8 busy382
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer382 nos382
	JR_EQ8 0 nos382 motornotbusy382
  motorwaiting382:
	OUTPUT_TEST layer382 nos382 busy382
	JR_EQ8 busy382 0 motornotbusy382
	SLEEP
	JR motorwaiting382
  motornotbusy382:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX3_M forbody373
  endfor373:
    WRITE32 ENDSUB_AROUND:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB384:
    DATA32 milliseconds385
	MOVEF_32 5000.0 milliseconds385
	DATA32 timer385
	TIMER_WAIT milliseconds385 timer385
	TIMER_READY timer385
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf9
    DATA8 flag9
    DIVF F.0 F.1 tmpf9
    CP_EQF 0.0 F.1 flag9
    SELECTF flag9 0.0 tmpf9 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.0 F.1 tmpf14
    CP_EQF 0.0 F.1 flag14
    SELECTF flag14 0.0 tmpf14 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_GETCOL:
    CALL SENSOR.READRAWVALUE 1.0 0.0 VCOLOR_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 105.0 1.0 S.0
    DATA32 milliseconds19
	MOVEF_32 1000.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
    JR_NEQF VCOLOR_M 5.0 else20_1
    MOVEF_F 1.0 VY_M
    MOVEF_F 2.0 VPY_M
    JR endif20
  else20_1:
    JR_EQF VCOLOR_M 4.0 or21
    JR_NEQF VCOLOR_M 7.0 else20_2
  or21:
    MOVEF_F 2.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_2:
    JR_NEQF VCOLOR_M 3.0 else20_3
    MOVEF_F 3.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_3:
    JR_NEQF VCOLOR_M 2.0 else20_4
    MOVEF_F 4.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_4:
    JR_NEQF VCOLOR_M 6.0 else20_5
    MOVEF_F 5.0 VY_M
    MOVEF_F 2.0 VPY_M
  else20_5:
  endif20:
    WRITE32 ENDSUB_CUBE:CALLSUB22 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB22:
RETSUB_GETCOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_GETCOL:
SUB_LEFT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 7.0 0.0 'true' 

	DATA8 layer23
	DATA8 nos23
	DATA8 busy23
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer23 nos23
	JR_EQ8 0 nos23 motornotbusy23
  motorwaiting23:
	OUTPUT_TEST layer23 nos23 busy23
	JR_EQ8 busy23 0 motornotbusy23
	SLEEP
	JR motorwaiting23
  motornotbusy23:
    CALL MOTOR.RESETCOUNT 'BC'
  while25:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf29
    DATA8 flag29
    DIVF F.1 2.0 tmpf29
    CP_EQF 0.0 2.0 flag29
    SELECTF flag29 0.0 tmpf29 F.0

    JR_GTEQF F.0 20.0 endwhile25
  whilebody25:
    WRITE32 ENDSUB_LINE:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB30:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf34
    DATA8 flag34
    DIVF F.1 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.0

    JR_LTF F.0 20.0 whilebody25
  endwhile25:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 150.0 'true'

	DATA8 layer36
	DATA8 nos36
	DATA8 busy36
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer36 nos36
	JR_EQ8 0 nos36 motornotbusy36
  motorwaiting36:
	OUTPUT_TEST layer36 nos36 busy36
	JR_EQ8 busy36 0 motornotbusy36
	SLEEP
	JR motorwaiting36
  motornotbusy36:
  while37:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile37
  whilebody37:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody37
  endwhile37:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while43:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.1 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 F.0

    JR_GTEQF F.0 100.0 endwhile43
  whilebody43:
    WRITE32 ENDSUB_LINE:CALLSUB48 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB48:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.1 2.0 tmpf52
    CP_EQF 0.0 2.0 flag52
    SELECTF flag52 0.0 tmpf52 F.0

    JR_LTF F.0 100.0 whilebody43
  endwhile43:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 7.0 0.0 'true' 

	DATA8 layer54
	DATA8 nos54
	DATA8 busy54
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer54 nos54
	JR_EQ8 0 nos54 motornotbusy54
  motorwaiting54:
	OUTPUT_TEST layer54 nos54 busy54
	JR_EQ8 busy54 0 motornotbusy54
	SLEEP
	JR motorwaiting54
  motornotbusy54:
    CALL MOTOR.RESETCOUNT 'BC'
  while56:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf60
    DATA8 flag60
    DIVF F.1 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    JR_GTEQF F.0 20.0 endwhile56
  whilebody56:
    WRITE32 ENDSUB_LINE:CALLSUB61 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB61:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_LTF F.0 20.0 whilebody56
  endwhile56:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 150.0 'true'

	DATA8 layer67
	DATA8 nos67
	DATA8 busy67
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer67 nos67
	JR_EQ8 0 nos67 motornotbusy67
  motorwaiting67:
	OUTPUT_TEST layer67 nos67 busy67
	JR_EQ8 busy67 0 motornotbusy67
	SLEEP
	JR motorwaiting67
  motornotbusy67:
  while68:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile68
  whilebody68:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody68
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while74:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf78
    DATA8 flag78
    DIVF F.1 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 F.0

    JR_GTEQF F.0 100.0 endwhile74
  whilebody74:
    WRITE32 ENDSUB_LINE:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB79:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf83
    DATA8 flag83
    DIVF F.1 2.0 tmpf83
    CP_EQF 0.0 2.0 flag83
    SELECTF flag83 0.0 tmpf83 F.0

    JR_LTF F.0 100.0 whilebody74
  endwhile74:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 280.0 'true'

	DATA8 layer85
	DATA8 nos85
	DATA8 busy85
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer85 nos85
	JR_EQ8 0 nos85 motornotbusy85
  motorwaiting85:
	OUTPUT_TEST layer85 nos85 busy85
	JR_EQ8 busy85 0 motornotbusy85
	SLEEP
	JR motorwaiting85
  motornotbusy85:
  while86:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile86
  whilebody86:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody86
  endwhile86:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while92:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf96
    DATA8 flag96
    DIVF F.1 2.0 tmpf96
    CP_EQF 0.0 2.0 flag96
    SELECTF flag96 0.0 tmpf96 F.0

    JR_GTEQF F.0 100.0 endwhile92
  whilebody92:
    WRITE32 ENDSUB_LINE:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB97:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf101
    DATA8 flag101
    DIVF F.1 2.0 tmpf101
    CP_EQF 0.0 2.0 flag101
    SELECTF flag101 0.0 tmpf101 F.0

    JR_LTF F.0 100.0 whilebody92
  endwhile92:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB103:
    WRITE32 ENDSUB_SEN2:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB104:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_CUBE:
    JR_NEQF VC_M 0.0 else112_1
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer113
	DATA8 nos113
	DATA8 busy113
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer113 nos113
	JR_EQ8 0 nos113 motornotbusy113
  motorwaiting113:
	OUTPUT_TEST layer113 nos113 busy113
	JR_EQ8 busy113 0 motornotbusy113
	SLEEP
	JR motorwaiting113
  motornotbusy113:
    MOVEF_F 1.0 VC_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
    JR endif112
  else112_1:
    CALL MOTOR.SCHEDULE 'A' -10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer116
	DATA8 nos116
	DATA8 busy116
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer116 nos116
	JR_EQ8 0 nos116 motornotbusy116
  motorwaiting116:
	OUTPUT_TEST layer116 nos116 busy116
	JR_EQ8 busy116 0 motornotbusy116
	SLEEP
	JR motorwaiting116
  motornotbusy116:
    MOVEF_F 0.0 VC_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer117
	DATA8 nos117
	DATA8 busy117
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer117 nos117
	JR_EQ8 0 nos117 motornotbusy117
  motorwaiting117:
	OUTPUT_TEST layer117 nos117 busy117
	JR_EQ8 busy117 0 motornotbusy117
	SLEEP
	JR motorwaiting117
  motornotbusy117:
    CALL MOTOR.SCHEDULE 'A' -10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer118
	DATA8 nos118
	DATA8 busy118
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer118 nos118
	JR_EQ8 0 nos118 motornotbusy118
  motorwaiting118:
	OUTPUT_TEST layer118 nos118 busy118
	JR_EQ8 busy118 0 motornotbusy118
	SLEEP
	JR motorwaiting118
  motornotbusy118:
  else112_2:
  endif112:
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer119
	DATA8 nos119
	DATA8 busy119
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer119 nos119
	JR_EQ8 0 nos119 motornotbusy119
  motorwaiting119:
	OUTPUT_TEST layer119 nos119 busy119
	JR_EQ8 busy119 0 motornotbusy119
	SLEEP
	JR motorwaiting119
  motornotbusy119:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
