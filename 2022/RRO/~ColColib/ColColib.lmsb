DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VMIN3_M
DATAF VMAX3_M
DATAF VMIN4_M
DATAF VMAX4_M
DATAF VSUM1_M
DATAF VSUM2_M
DATAF VSUM3_M
DATAF VSUM4_M
DATAF VA_M
DATAF VI_M
DATAF VF_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN4_M
    MOVEF_F 0.0 VMAX4_M
    MOVEF_F 0.0 VSUM1_M
    MOVEF_F 0.0 VSUM2_M
    MOVEF_F 0.0 VSUM3_M
    MOVEF_F 0.0 VSUM4_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VF_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN4_M
    MOVEF_F 0.0 VMAX4_M
    MOVEF_F 0.0 VSUM1_M
    MOVEF_F 0.0 VSUM2_M
    MOVEF_F 0.0 VSUM3_M
    MOVEF_F 0.0 VSUM4_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VF_M
    DATA8 layer0
	DATA8 no0
	DATA8 mode80
	
	MOVEF_8 1.0 no0
	SUB8 no0 1 no0
	DIV8 no0 4 layer0
	MATH MOD8 no0 4 no0

	MOVEF_8 0.0 mode80
	
	INPUT_DEVICE READY_RAW layer0 no0 0 mode80 0
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 4.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN3_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 100.0 VMIN4_M
    MOVEF_F 0.0 VMAX4_M
    MOVEF_F 0.0 VSUM1_M
    MOVEF_F 0.0 VSUM2_M
    MOVEF_F 0.0 VSUM3_M
    MOVEF_F 0.0 VSUM4_M
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 'Red'
    WRITE32 ENDSUB_FRZ:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB10:
    MOVEF_F 1.0 VI_M
  for11:
    JR_GTF VI_M 10.0 endfor11
  forbody11:
    WRITE32 ENDSUB_COLOR:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB12:
    JR_LTEQF VA_M VMAX1_M else13_1
    MOVEF_F VA_M VMAX1_M
  else13_1:
  endif13:
    JR_GTEQF VA_M VMIN1_M else14_1
    MOVEF_F VA_M VMIN1_M
  else14_1:
  endif14:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 10.0 forbody11
  endfor11:
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 'White'
    WRITE32 ENDSUB_FRZ:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB18:
    MOVEF_F 1.0 VI_M
  for19:
    JR_GTF VI_M 10.0 endfor19
  forbody19:
    WRITE32 ENDSUB_COLOR:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB20:
    JR_LTEQF VA_M VMAX2_M else21_1
    MOVEF_F VA_M VMAX2_M
  else21_1:
  endif21:
    JR_GTEQF VA_M VMIN2_M else22_1
    MOVEF_F VA_M VMIN2_M
  else22_1:
  endif22:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 10.0 forbody19
  endfor19:
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 'Black'
    WRITE32 ENDSUB_FRZ:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB26:
    MOVEF_F 1.0 VI_M
  for27:
    JR_GTF VI_M 10.0 endfor27
  forbody27:
    WRITE32 ENDSUB_COLOR:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB28:
    JR_LTEQF VA_M VMAX3_M else29_1
    MOVEF_F VA_M VMAX3_M
  else29_1:
  endif29:
    JR_GTEQF VA_M VMIN3_M else30_1
    MOVEF_F VA_M VMIN3_M
  else30_1:
  endif30:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 10.0 forbody27
  endfor27:
    CALL SPEAKER.NOTE 70.0 'B7' 500.0
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 '-'
    WRITE32 ENDSUB_FRZ:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB35:
    CALL EV3FILE.OPENWRITE 'RROtesting/col1.txt' VF_M
    STRINGS VALUE_FORMATTED VMAX1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMIN1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAX2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMIN2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAX3_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMIN3_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
ENDTHREAD:
    RETURN
SUB_COLOR:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.0
    DATAF tmpf3
    DATA8 flag3
    DIVF F.0 100.0 tmpf3
    CP_EQF 0.0 100.0 flag3
    SELECTF flag3 0.0 tmpf3 VA_M

RETSUB_COLOR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
