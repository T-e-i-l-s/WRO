DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VF_M
DATAF VMIN1_M
DATAF VMIN2_M
DATAF VMAX1_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VMAXR_M
DATAF VMINR_M
DATAF VMAXW_M
DATAF VMINW_M
DATAF VMAXB_M
DATAF VMINB_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VEVCOL_M
DATAF VEVGRE_M
DATAF VRD_M
DATAF VZN1_M
DATAF VZN2_M
DATAF VNIGA_M
DATAF VCOL_M
DATAF VZONE_M
ARRAY16 VZONES_M 2
DATAF VFIN_M
DATAF VQ_M
DATAF VZN_M
DATAF VTIME_M
DATAF VL_1
DATAF VNSP_1
DATAF VSP_1
DATAF VA_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VNSP_3
DATAF VL_3
DATAF VDEL_3
DATAF VSP_3
DATAF VGRAD_4
DATAF VNSP_4
DATAF VL_4
DATAF VDEL_4
DATAF VSP_4
DATAF VGRAD_5
DATAF VNSP_5
DATAF VL_5
DATAF VDEL_5
DATAF VSP_5
DATAF VU_5
DATAF VGRAD_6
DATAF VNSP_6
DATAF VL_6
DATAF VDEL_6
DATAF VSP_6
DATAF VU_6
DATAF VPORT_7
DATAF VCOL_7
DATAF VH_7
DATAF VJ_7
ARRAY16 VA_7 2
DATAF VSRED_7
DATAF VSGREEN_7
DATAF VSBLUE_7
DATAF VMAX_7
DATAF VMIN_7
DATAF VS_7
DATAF VV_7
DATAF VSTART_8
DATAF VFINISH_8
DATAF VSP_9
DATAF VSTIME_9
DATAF VSTRT_M
DATAF VFINISH_M
DATA32 RUNCOUNTER_SLOWTOPNIGA
DATA32 RUNCOUNTER_WATER
DATA32 RUNCOUNTER_DOWNNIGA
DATA32 RUNCOUNTER_RESETD
DATA32 RUNCOUNTER_TOPNIGA

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYCREATE_FLOAT VZONES_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYCREATE_FLOAT VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    MOVEF_F 0.0 VSTRT_M
    MOVEF_F 0.0 VFINISH_M
    MOVE32_32 0 RUNCOUNTER_SLOWTOPNIGA
    MOVE32_32 0 RUNCOUNTER_WATER
    MOVE32_32 0 RUNCOUNTER_DOWNNIGA
    MOVE32_32 0 RUNCOUNTER_RESETD
    MOVE32_32 0 RUNCOUNTER_TOPNIGA
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TSLOWTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_SLOWTOPNIGA 0
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA -1 RUNCOUNTER_SLOWTOPNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TWATER
{
    DATA32 tmp
  launch:
    CALL PROGRAM_WATER 1
    CALL GETANDINC32 RUNCOUNTER_WATER -1 RUNCOUNTER_WATER tmp
    JR_GT32 tmp 1 launch
}
vmthread TDOWNNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWNNIGA 2
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA -1 RUNCOUNTER_DOWNNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TRESETD
{
    DATA32 tmp
  launch:
    CALL PROGRAM_RESETD 3
    CALL GETANDINC32 RUNCOUNTER_RESETD -1 RUNCOUNTER_RESETD tmp
    JR_GT32 tmp 1 launch
}
vmthread TTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TOPNIGA 4
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA -1 RUNCOUNTER_TOPNIGA tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_SLOWTOPNIGA
subcall PROGRAM_WATER
subcall PROGRAM_DOWNNIGA
subcall PROGRAM_RESETD
subcall PROGRAM_TOPNIGA
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1012
    WRITE32 ENDSUB_SLOWTOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SLOWTOPNIGA
  dispatch1012:
    JR_NEQ32 SUBPROGRAM 1 dispatch1013
    WRITE32 ENDSUB_WATER:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
  dispatch1013:
    JR_NEQ32 SUBPROGRAM 2 dispatch1014
    WRITE32 ENDSUB_DOWNNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
  dispatch1014:
    JR_NEQ32 SUBPROGRAM 3 dispatch1015
    WRITE32 ENDSUB_RESETD:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RESETD
  dispatch1015:
    JR_NEQ32 SUBPROGRAM 4 dispatch1016
    WRITE32 ENDSUB_TOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
  dispatch1016:
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VZONES_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    TIMER_READ timeMC1
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL EV3FILE.OPENREAD 'colib.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    CALL EV3FILE.OPENREAD 'RROtesting/col1.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXB_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINB_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VID_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.0 VRD_M
    CALL MOTOR.RESETCOUNT 'D'
    DATA8 layer496
	DATA8 no496
	DATA8 mode8496
	
	MOVEF_8 1.0 no496
	SUB8 no496 1 no496
	DIV8 no496 4 layer496
	MATH MOD8 no496 4 no496

	MOVEF_8 4.0 mode8496
	
	INPUT_DEVICE READY_RAW layer496 no496 0 mode8496 0
    DATA8 layer497
	DATA8 no497
	DATA8 mode8497
	
	MOVEF_8 4.0 no497
	SUB8 no497 1 no497
	DIV8 no497 4 layer497
	MATH MOD8 no497 4 no497

	MOVEF_8 4.0 mode8497
	
	INPUT_DEVICE READY_RAW layer497 no497 0 mode8497 0
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VCOL_M
    DATA32 tmp662
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp662
    JR_NEQ32 0 tmp662 alreadylaunched662
    OBJECT_START TDOWNNIGA
  alreadylaunched662:
    MOVEF_F 2.0 VSTART_8
    WRITE32 ENDSUB_START_2:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_2
CALLSUB663:
    MOVEF_F VFINISH_8 VFIN_M
    MOVEF_F 900.0 VL_1
    MOVEF_F 90.0 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB664:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VSP_M
  while666:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or667
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile666
  or667:
  whilebody666:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody666
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody666
  endwhile666:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 110.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB682:
    MOVEF_F 94.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB683:
    MOVEF_F -80.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB684:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB685:
    MOVEF_F 80.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB686:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while688:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or689
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile688
  or689:
  whilebody688:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody688
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody688
  endwhile688:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB704:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while706:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or707
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile706
  or707:
  whilebody706:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody706
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody706
  endwhile706:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB722:
    CALL MOTOR.RESETCOUNT 'BC'
  while724:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf728
    DATA8 flag728
    DIVF F.1 2.0 tmpf728
    CP_EQF 0.0 2.0 flag728
    SELECTF flag728 0.0 tmpf728 F.0

    JR_GTEQF F.0 50.0 endwhile724
  whilebody724:
    WRITE32 ENDSUB_LINE:CALLSUB729 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB729:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf733
    DATA8 flag733
    DIVF F.1 2.0 tmpf733
    CP_EQF 0.0 2.0 flag733
    SELECTF flag733 0.0 tmpf733 F.0

    JR_LTF F.0 50.0 whilebody724
  endwhile724:
  while734:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile734
  whilebody734:
    WRITE32 ENDSUB_LINE:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB736:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody734
  endwhile734:
    WRITE32 ENDSUB_LEFT:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB738:
    CALL MOTOR.RESETCOUNT 'BC'
  while740:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf744
    DATA8 flag744
    DIVF F.1 2.0 tmpf744
    CP_EQF 0.0 2.0 flag744
    SELECTF flag744 0.0 tmpf744 F.0

    JR_GTEQF F.0 170.0 endwhile740
  whilebody740:
    WRITE32 ENDSUB_SEN1:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB745:
    SUBF VS1_M 24.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf756
    DATA8 flag756
    DIVF F.1 2.0 tmpf756
    CP_EQF 0.0 2.0 flag756
    SELECTF flag756 0.0 tmpf756 F.0

    JR_LTF F.0 170.0 whilebody740
  endwhile740:
  while757:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or758
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile757
  or758:
  whilebody757:
    WRITE32 ENDSUB_SEN1:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB761:
    SUBF VS1_M 24.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody757
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody757
  endwhile757:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 225.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB772:
    WRITE32 ENDSUB_CUBE:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB773:
    MOVEF_F 380.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB774:
    WRITE32 ENDSUB_CUBE:CALLSUB775 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB775:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB776 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB776:
    WRITE32 ENDSUB_CUBE:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB777:
    MOVEF_F 113.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB778 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB778:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB779:
    MOVEF_F -40.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB780 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB780:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB781 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB781:
    WRITE32 ENDSUB_CUBE:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB782:
    MOVEF_F 405.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB783 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB783:
    WRITE32 ENDSUB_CUBE:CALLSUB784 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB784:
    MOVEF_F 395.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB785 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB785:
    WRITE32 ENDSUB_CUBE:CALLSUB786 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB786:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB787:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB788 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB788:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB789 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB789:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB790 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB790:
    MOVEF_F 81.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB791 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB791:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB792:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB793 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB793:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB794 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB794:
    WRITE32 ENDSUB_CUBE:CALLSUB795 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB795:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB796:
    WRITE32 ENDSUB_CUBE:CALLSUB797 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB797:
    MOVEF_F 114.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB798 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB798:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB799:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB800 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB800:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB801 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB801:
    WRITE32 ENDSUB_CUBE:CALLSUB802 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB802:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB803 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB803:
    WRITE32 ENDSUB_CUBE:CALLSUB804 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB804:
    JR_LTF VRD_M 2.0 or806
    JR_NEQF VNIGA_M 1.0 or806
    JR_EQF VZN1_M 0.0 or806
    JR_NEQF VZN2_M 0.0 else805_1
  or806:
    MOVEF_F 33.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB807 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB807:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB808:
    MOVEF_F 350.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB809 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB809:
    WRITE32 ENDSUB_CUBE:CALLSUB810 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB810:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB811 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB811:
    WRITE32 ENDSUB_CUBE:CALLSUB812 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB812:
    MOVEF_F 17.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB813 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB813:
    MOVEF_F 15.0 VGRAD_3
    MOVEF_F -90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB814 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB814:
    MOVEF_F 730.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB815 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB815:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB816:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB817:
    JR endif805
  else805_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB818 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB818:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB819:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB820 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB820:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB821:
  else805_2:
  endif805:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB822:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
  while823:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 or824
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile823
  or824:
  whilebody823:
    WRITE32 ENDSUB_LINE:CALLSUB827 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB827:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody823
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody823
  endwhile823:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.6 VK_M
    MOVEF_F 60.0 VV_M
  while831:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or832
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile831
  or832:
  whilebody831:
    WRITE32 ENDSUB_LINE:CALLSUB835 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB835:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody831
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody831
  endwhile831:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB839 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB839:
    DATA32 tmp840
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp840
    JR_NEQ32 0 tmp840 alreadylaunched840
    OBJECT_START TDOWNNIGA
  alreadylaunched840:
  while841:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or842
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile841
  or842:
  whilebody841:
    WRITE32 ENDSUB_LINE:CALLSUB845 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB845:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody841
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody841
  endwhile841:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB849 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB849:
    MOVEF_F 100.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB850 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB850:
    DATA32 tmp851
    CALL GETANDINC32 RUNCOUNTER_RESETD 1  RUNCOUNTER_RESETD tmp851
    JR_NEQ32 0 tmp851 alreadylaunched851
    OBJECT_START TRESETD
  alreadylaunched851:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB852:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB853 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB853:
    MOVEF_F 100.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB854 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB854:
    MOVEF_F 800.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB855 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB855:
    MOVEF_F 50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB856 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB856:
    MOVEF_F 30.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB857 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB857:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN1_M 0.0 else858_1
  while859:
    JR_EQF VQ_M 1.0 endwhile859
  whilebody859:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN1_M
    CALL ARRAYGET_FLOAT VZN1_M F.0 VZONES_M
    JR_EQF F.0 1.0 else861_1
    MOVEF_F 1.0 VQ_M
  else861_1:
  endif861:
    JR_NEQF VQ_M 1.0 whilebody859
  endwhile859:
  else858_1:
  endif858:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN2_M 0.0 else863_1
  while864:
    JR_EQF VQ_M 1.0 endwhile864
  whilebody864:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN2_M
    CALL ARRAYGET_FLOAT VZN2_M F.0 VZONES_M
    JR_EQF F.0 1.0 else866_1
    MOVEF_F 1.0 VQ_M
  else866_1:
  endif866:
    JR_NEQF VQ_M 1.0 whilebody864
  endwhile864:
  else863_1:
  endif863:
    MOVEF_F 186.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB868:
    DATA32 tmp869
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp869
    JR_NEQ32 0 tmp869 alreadylaunched869
    OBJECT_START TTOPNIGA
  alreadylaunched869:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB870 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB870:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB871 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB871:
    MOVEF_F 226.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB872 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB872:
    DATA32 tmp873
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp873
    JR_NEQ32 0 tmp873 alreadylaunched873
    OBJECT_START TDOWNNIGA
  alreadylaunched873:
    JR_EQF VZN1_M 1.0 or875
    JR_NEQF VZN2_M 1.0 else874_1
  or875:
    WRITE32 ENDSUB_Z1:CALLSUB876 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB876:
    MOVEF_F 1.0 VZONE1_M
    JR endif874
  else874_1:
    JR_EQF VZN1_M 6.0 or877
    JR_NEQF VZN2_M 6.0 else874_2
  or877:
    WRITE32 ENDSUB_Z6:CALLSUB878 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB878:
    MOVEF_F 6.0 VZONE1_M
    JR endif874
  else874_2:
    JR_EQF VZN1_M 5.0 or879
    JR_NEQF VZN2_M 5.0 else874_3
  or879:
    WRITE32 ENDSUB_Z5:CALLSUB880 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB880:
    MOVEF_F 5.0 VZONE1_M
    JR endif874
  else874_3:
    JR_EQF VZN1_M 2.0 or881
    JR_NEQF VZN2_M 2.0 else874_4
  or881:
    WRITE32 ENDSUB_Z2:CALLSUB882 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB882:
    MOVEF_F 2.0 VZONE1_M
    JR endif874
  else874_4:
    JR_EQF VZN1_M 3.0 or883
    JR_NEQF VZN2_M 3.0 else874_5
  or883:
    WRITE32 ENDSUB_Z3:CALLSUB884 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB884:
    MOVEF_F 3.0 VZONE1_M
    JR endif874
  else874_5:
    JR_EQF VZN1_M 4.0 or885
    JR_NEQF VZN2_M 4.0 else874_6
  or885:
    WRITE32 ENDSUB_Z4:CALLSUB886 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB886:
    MOVEF_F 4.0 VZONE1_M
  else874_6:
  endif874:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while888:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile888
  whilebody888:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody888
  endwhile888:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB892:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while894:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 14.0 endwhile894
  whilebody894:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 14.0 whilebody894
  endwhile894:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER 'B' 40.0
  while899:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 11.0 endwhile899
  whilebody899:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 11.0 whilebody899
  endwhile899:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf904
    DATA8 flag904
    DIVF VMM_M 257.48 tmpf904
    CP_EQF 0.0 257.48 flag904
    SELECTF flag904 0.0 tmpf904 F.0

    MULF F.0 360.0 VL_M
  while906:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf912
    DATA8 flag912
    DIVF F.1 2.0 tmpf912
    CP_EQF 0.0 2.0 flag912
    SELECTF flag912 0.0 tmpf912 F.0

    JR_GTF F.0 VL_M endwhile906
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile906
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile906
  whilebody906:
    WRITE32 ENDSUB_SEN2:CALLSUB915 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB915:
    SUBF VS2_M 14.0 VU_M
    MULF VU_M 1.7 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.7 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf929
    DATA8 flag929
    DIVF F.1 2.0 tmpf929
    CP_EQF 0.0 2.0 flag929
    SELECTF flag929 0.0 tmpf929 F.0

    JR_GTF F.0 VL_M and923
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and923
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody906
  and923:
  endwhile906:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB933 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB933:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB934 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB934:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB935 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB935:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB936 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB936:
    DATA32 milliseconds937
	MOVEF_32 200.0 milliseconds937
	DATA32 timer937
	TIMER_WAIT milliseconds937 timer937
	TIMER_READY timer937
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F -80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB938 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB938:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB939 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB939:
    MOVEF_F 346.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB940 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB940:
    JR_NEQF VZONE1_M VZN1_M else941_1
    MOVEF_F VZN2_M VZN_M
    JR endif941
  else941_1:
    JR_NEQF VZONE1_M VZN2_M else941_2
    MOVEF_F VZN1_M VZN_M
  else941_2:
  endif941:
    JR_NEQF VZN_M 1.0 else942_1
    WRITE32 ENDSUB_Z1:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB943:
    MOVEF_F 1.0 VZONE1_M
    JR endif942
  else942_1:
    JR_NEQF VZN_M 6.0 else942_2
    WRITE32 ENDSUB_Z6:CALLSUB944 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB944:
    MOVEF_F 6.0 VZONE1_M
    JR endif942
  else942_2:
    JR_NEQF VZN_M 5.0 else942_3
    WRITE32 ENDSUB_Z5:CALLSUB945 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB945:
    MOVEF_F 5.0 VZONE1_M
    JR endif942
  else942_3:
    JR_NEQF VZN_M 2.0 else942_4
    WRITE32 ENDSUB_Z2:CALLSUB946 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB946:
    MOVEF_F 2.0 VZONE1_M
    JR endif942
  else942_4:
    JR_NEQF VZN_M 3.0 else942_5
    WRITE32 ENDSUB_Z3:CALLSUB947 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB947:
    MOVEF_F 3.0 VZONE1_M
    JR endif942
  else942_5:
    JR_NEQF VZN_M 4.0 else942_6
    WRITE32 ENDSUB_Z4:CALLSUB948 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB948:
    MOVEF_F 4.0 VZONE1_M
  else942_6:
  endif942:
    DATA32 tmp949
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp949
    JR_NEQ32 0 tmp949 alreadylaunched949
    OBJECT_START TDOWNNIGA
  alreadylaunched949:
    JR_NEQF VFIN_M 1.0 else950_1
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB951:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB952 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB952:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB953 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB953:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB954 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB954:
    JR endif950
  else950_1:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while956:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile956
  whilebody956:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody956
  endwhile956:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB960 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB960:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while962:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 14.0 endwhile962
  whilebody962:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 14.0 whilebody962
  endwhile962:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER 'B' 40.0
  while967:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 11.0 endwhile967
  whilebody967:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 11.0 whilebody967
  endwhile967:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf972
    DATA8 flag972
    DIVF VMM_M 257.48 tmpf972
    CP_EQF 0.0 257.48 flag972
    SELECTF flag972 0.0 tmpf972 F.0

    MULF F.0 360.0 VL_M
  while974:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf980
    DATA8 flag980
    DIVF F.1 2.0 tmpf980
    CP_EQF 0.0 2.0 flag980
    SELECTF flag980 0.0 tmpf980 F.0

    JR_GTF F.0 VL_M endwhile974
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile974
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile974
  whilebody974:
    WRITE32 ENDSUB_SEN2:CALLSUB983 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB983:
    SUBF VS2_M 14.0 VU_M
    MULF VU_M 1.7 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.7 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf997
    DATA8 flag997
    DIVF F.1 2.0 tmpf997
    CP_EQF 0.0 2.0 flag997
    SELECTF flag997 0.0 tmpf997 F.0

    JR_GTF F.0 VL_M and991
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and991
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody974
  and991:
  endwhile974:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1001 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1001:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1002 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1002:
    MOVEF_F 93.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB1003 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB1003:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1004 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1004:
  else950_2:
  endif950:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    DATAF tmpf1006
    DATA8 flag1006
    DIVF F.0 1000.0 tmpf1006
    CP_EQF 0.0 1000.0 flag1006
    SELECTF flag1006 0.0 tmpf1006 VTIME_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VTIME_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 2.0 S.0
    CALL SPEAKER.NOTE 70.0 'B7' 600.0
    WRITE32 ENDSUB_FRZ:CALLSUB1011 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB1011:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf48
    DATA8 flag48
    DIVF F.0 F.1 tmpf48
    CP_EQF 0.0 F.1 flag48
    SELECTF flag48 0.0 tmpf48 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf53
    DATA8 flag53
    DIVF F.0 F.1 tmpf53
    CP_EQF 0.0 F.1 flag53
    SELECTF flag53 0.0 tmpf53 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB54:
    WRITE32 ENDSUB_SEN2:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB55:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_1
  while64:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf70
    DATA8 flag70
    DIVF F.1 2.0 tmpf70
    CP_EQF 0.0 2.0 flag70
    SELECTF flag70 0.0 tmpf70 F.0

    JR_GTF F.0 VL_1 endwhile64
  whilebody64:
    MOVEF_F 125.835016311947 VA_1
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    CALL MOTOR.GETCOUNT 'B' F.5
    MATH ABS F.5 F.4
    ADDF F.3 F.4 F.2
    DATAF tmpf77
    DATA8 flag77
    DIVF F.2 2.0 tmpf77
    CP_EQF 0.0 2.0 flag77
    SELECTF flag77 0.0 tmpf77 F.1

    SUBF VL_1 F.1 F.0
    JR_GTEQF F.0 VA_1 else71_1
    JR_LTEQF VSP_1 35.0 else71_1
    SUBF VSP_1 0.9 VSP_1
    JR_GTEQF VNSP_1 0.0 else80_1
    SUBF 0.0 VSP_1 VSP_1
  else80_1:
  endif80:
  else71_1:
  endif71:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf89
    DATA8 flag89
    DIVF F.1 2.0 tmpf89
    CP_EQF 0.0 2.0 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    JR_LTF F.0 VA_1 or83
    JR_GTEQF VSP_1 VNSP_1 else82_1
  or83:
    MATH ABS VSP_1 F.0
    ADDF F.0 0.3 VSP_1
    JR_GTEQF VNSP_1 0.0 else92_1
    SUBF 0.0 VSP_1 VSP_1
  else92_1:
  endif92:
  else82_1:
  endif82:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 10.0 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 10.0 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_LTEQF F.0 VL_1 whilebody64
  endwhile64:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf110
    DATA8 flag110
    DIVF VMM_2 257.48 tmpf110
    CP_EQF 0.0 257.48 flag110
    SELECTF flag110 0.0 tmpf110 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB113:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 130.0 'true'

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
  while116:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 21.0 endwhile116
  whilebody116:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 21.0 whilebody116
  endwhile116:
    CALL MOTOR.STOP 'bc' 'true'
  while121:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile121
  whilebody121:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB126:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 88.0845114183626 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer127
	DATA8 nos127
	DATA8 busy127
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer127 nos127
	JR_EQ8 0 nos127 motornotbusy127
  motorwaiting127:
	OUTPUT_TEST layer127 nos127 busy127
	JR_EQ8 busy127 0 motornotbusy127
	SLEEP
	JR motorwaiting127
  motornotbusy127:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer128
	DATA8 nos128
	DATA8 busy128
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer128 nos128
	JR_EQ8 0 nos128 motornotbusy128
  motorwaiting128:
	OUTPUT_TEST layer128 nos128 busy128
	JR_EQ8 busy128 0 motornotbusy128
	SLEEP
	JR motorwaiting128
  motornotbusy128:
  while129:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 21.0 endwhile129
  whilebody129:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 whilebody129
  endwhile129:
    CALL MOTOR.STOP 'bc' 'true'
  while134:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile134
  whilebody134:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody134
  endwhile134:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB139:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_2:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf141
    DATA8 flag141
    DIVF F.0 360.0 tmpf141
    CP_EQF 0.0 360.0 flag141
    SELECTF flag141 0.0 tmpf141 VL_3

    DATAF tmpf142
    DATA8 flag142
    DIVF VL_3 257.48 tmpf142
    CP_EQF 0.0 257.48 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    MULF F.0 360.0 VL_3
    DATAF tmpf144
    DATA8 flag144
    DIVF VL_3 3.0 tmpf144
    CP_EQF 0.0 3.0 flag144
    SELECTF flag144 0.0 tmpf144 VDEL_3

    MOVEF_F VNSP_3 VSP_3
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while147:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile147
  whilebody147:
    CALL MOTOR.STARTPOWER 'C' VSP_3
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody147
  endwhile147:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_3
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1142.96 VGRAD_4 F.0
    DATAF tmpf155
    DATA8 flag155
    DIVF F.0 360.0 tmpf155
    CP_EQF 0.0 360.0 flag155
    SELECTF flag155 0.0 tmpf155 VL_4

    DATAF tmpf156
    DATA8 flag156
    DIVF VL_4 257.48 tmpf156
    CP_EQF 0.0 257.48 flag156
    SELECTF flag156 0.0 tmpf156 F.0

    MULF F.0 360.0 VL_4
    DATAF tmpf158
    DATA8 flag158
    DIVF VL_4 3.0 tmpf158
    CP_EQF 0.0 3.0 flag158
    SELECTF flag158 0.0 tmpf158 VDEL_4

    MOVEF_F VNSP_4 VSP_4
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while161:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile161
  whilebody161:
    CALL MOTOR.STARTPOWER 'B' VSP_4
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody161
  endwhile161:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_4
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_5 F.1
    DATAF tmpf172
    DATA8 flag172
    DIVF F.1 360.0 tmpf172
    CP_EQF 0.0 360.0 flag172
    SELECTF flag172 0.0 tmpf172 F.0

    DATAF tmpf173
    DATA8 flag173
    DIVF F.0 2.0 tmpf173
    CP_EQF 0.0 2.0 flag173
    SELECTF flag173 0.0 tmpf173 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF VL_5 F.1 tmpf176
    CP_EQF 0.0 F.1 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    MULF F.0 360.0 VL_5
    DATAF tmpf178
    DATA8 flag178
    DIVF VL_5 3.0 tmpf178
    CP_EQF 0.0 3.0 flag178
    SELECTF flag178 0.0 tmpf178 VDEL_5

    MOVEF_F 30.0 VSP_5
    CALL MOTOR.RESETCOUNT 'BC'
  while180:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile180
  whilebody180:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_5
    MULF VU_5 0.8 F.2
    SUBF VSP_5 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_5 0.8 F.1
    ADDF VSP_5 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_5 else194_1
    JR_GTEQF VSP_5 VNSP_5 else194_1
    ADDF VSP_5 2.0 VSP_5
    JR endif194
  else194_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_5 2.0 F.1
    JR_LTEQF F.0 F.1 else194_2
    JR_LTEQF VSP_5 30.0 else194_2
    SUBF VSP_5 5.0 VSP_5
  else194_2:
  endif194:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody180
  endwhile180:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_5
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_6 F.1
    DATAF tmpf209
    DATA8 flag209
    DIVF F.1 360.0 tmpf209
    CP_EQF 0.0 360.0 flag209
    SELECTF flag209 0.0 tmpf209 F.0

    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 2.0 tmpf210
    CP_EQF 0.0 2.0 flag210
    SELECTF flag210 0.0 tmpf210 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf213
    DATA8 flag213
    DIVF VL_6 F.1 tmpf213
    CP_EQF 0.0 F.1 flag213
    SELECTF flag213 0.0 tmpf213 F.0

    MULF F.0 360.0 VL_6
    DATAF tmpf215
    DATA8 flag215
    DIVF VL_6 3.0 tmpf215
    CP_EQF 0.0 3.0 flag215
    SELECTF flag215 0.0 tmpf215 VDEL_6

    MOVEF_F 30.0 VSP_6
    CALL MOTOR.RESETCOUNT 'BC'
  while217:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_6 endwhile217
  whilebody217:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VU_6
    MULF VU_6 0.8 F.1
    SUBF VSP_6 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_6 0.8 F.2
    ADDF VSP_6 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_6 else231_1
    JR_GTEQF VSP_6 VNSP_6 else231_1
    ADDF VSP_6 2.0 VSP_6
    JR endif231
  else231_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_6 2.0 F.1
    JR_LTEQF F.0 F.1 else231_2
    JR_LTEQF VSP_6 30.0 else231_2
    SUBF VSP_6 5.0 VSP_6
  else231_2:
  endif231:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_6 whilebody217
  endwhile217:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_6
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_CLOSE:
    CALL MOTOR.STARTPOWER 'A' 80.0
    DATA32 milliseconds247
	MOVEF_32 300.0 milliseconds247
	DATA32 timer247
	TIMER_WAIT milliseconds247 timer247
	TIMER_READY timer247
  while248:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 10.0 endwhile248
  whilebody248:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 10.0 whilebody248
  endwhile248:
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_LINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB251:
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB252:
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_BLINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB253:
RETSUB_BLINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE1:
SUB_BLINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB254 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB254:
RETSUB_BLINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE2:
SUB_STOLB1:
    WRITE32 ENDSUB_LEFT:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB255:
    CALL MOTOR.RESETCOUNT 'BC'
  while257:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf261
    DATA8 flag261
    DIVF F.1 2.0 tmpf261
    CP_EQF 0.0 2.0 flag261
    SELECTF flag261 0.0 tmpf261 F.0

    JR_GTEQF F.0 50.0 endwhile257
  whilebody257:
    WRITE32 ENDSUB_LINE:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB262:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf266
    DATA8 flag266
    DIVF F.1 2.0 tmpf266
    CP_EQF 0.0 2.0 flag266
    SELECTF flag266 0.0 tmpf266 F.0

    JR_LTF F.0 50.0 whilebody257
  endwhile257:
  while267:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile267
  whilebody267:
    WRITE32 ENDSUB_LINE:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB269:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody267
  endwhile267:
    WRITE32 ENDSUB_RIGHT:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB271:
    CALL MOTOR.RESETCOUNT 'BC'
  while273:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf277
    DATA8 flag277
    DIVF F.1 2.0 tmpf277
    CP_EQF 0.0 2.0 flag277
    SELECTF flag277 0.0 tmpf277 F.0

    JR_GTEQF F.0 170.0 endwhile273
  whilebody273:
    WRITE32 ENDSUB_LINE:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB278:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf282
    DATA8 flag282
    DIVF F.1 2.0 tmpf282
    CP_EQF 0.0 2.0 flag282
    SELECTF flag282 0.0 tmpf282 F.0

    JR_LTF F.0 170.0 whilebody273
  endwhile273:
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
  while283:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or284
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile283
  or284:
  whilebody283:
    WRITE32 ENDSUB_LINE:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB287:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody283
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody283
  endwhile283:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB1:
SUB_STOLB2:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB291:
    MOVEF_F 250.0 VMM_M
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
    DATAF tmpf292
    DATA8 flag292
    DIVF VMM_M 257.48 tmpf292
    CP_EQF 0.0 257.48 flag292
    SELECTF flag292 0.0 tmpf292 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while295:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile295
  whilebody295:
    WRITE32 ENDSUB_LINE:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB297:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody295
  endwhile295:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB299:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB2:
SUB_STOLB3:
    WRITE32 ENDSUB_RIGHT:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB300:
    CALL MOTOR.RESETCOUNT 'BC'
  while302:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf306
    DATA8 flag306
    DIVF F.1 2.0 tmpf306
    CP_EQF 0.0 2.0 flag306
    SELECTF flag306 0.0 tmpf306 F.0

    JR_GTEQF F.0 50.0 endwhile302
  whilebody302:
    WRITE32 ENDSUB_LINE:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB307:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf311
    DATA8 flag311
    DIVF F.1 2.0 tmpf311
    CP_EQF 0.0 2.0 flag311
    SELECTF flag311 0.0 tmpf311 F.0

    JR_LTF F.0 50.0 whilebody302
  endwhile302:
  while312:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile312
  whilebody312:
    WRITE32 ENDSUB_LINE:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB314:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody312
  endwhile312:
    WRITE32 ENDSUB_LEFT:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB316:
    CALL MOTOR.RESETCOUNT 'BC'
  while318:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf322
    DATA8 flag322
    DIVF F.1 2.0 tmpf322
    CP_EQF 0.0 2.0 flag322
    SELECTF flag322 0.0 tmpf322 F.0

    JR_GTEQF F.0 170.0 endwhile318
  whilebody318:
    WRITE32 ENDSUB_LINE:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB323:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf327
    DATA8 flag327
    DIVF F.1 2.0 tmpf327
    CP_EQF 0.0 2.0 flag327
    SELECTF flag327 0.0 tmpf327 F.0

    JR_LTF F.0 170.0 whilebody318
  endwhile318:
    MOVEF_F 1.0 VK_M
    MOVEF_F 35.0 VV_M
  while328:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or329
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile328
  or329:
  whilebody328:
    WRITE32 ENDSUB_LINE:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB332:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody328
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody328
  endwhile328:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB3:
SUB_BSTOLB1:
  while336:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or337
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile336
  or337:
  whilebody336:
    WRITE32 ENDSUB_LINE:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB340:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody336
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody336
  endwhile336:
    WRITE32 ENDSUB_LEFT:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB343:
  while344:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or345
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile344
  or345:
  whilebody344:
    WRITE32 ENDSUB_LINE:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB348:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody344
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody344
  endwhile344:
    WRITE32 ENDSUB_RIGHT:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB351:
RETSUB_BSTOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB1:
SUB_BSTOLB2:
  while352:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or353
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile352
  or353:
  whilebody352:
    WRITE32 ENDSUB_LINE:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB356:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody352
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody352
  endwhile352:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB359:
RETSUB_BSTOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB2:
SUB_BSTOLB3:
  while360:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or361
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile360
  or361:
  whilebody360:
    WRITE32 ENDSUB_LINE:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB364:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody360
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody360
  endwhile360:
    WRITE32 ENDSUB_RIGHT:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB367:
  while368:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or369
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile368
  or369:
  whilebody368:
    WRITE32 ENDSUB_LINE:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB372:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody368
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody368
  endwhile368:
    WRITE32 ENDSUB_LEFT:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB375:
RETSUB_BSTOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB3:
SUB_ZONETOLINE:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while377:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or378
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile377
  or378:
  whilebody377:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody377
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody377
  endwhile377:
  while383:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 or384
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile383
  or384:
  whilebody383:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 whilebody383
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody383
  endwhile383:
    WRITE32 ENDSUB_LEFT:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB389:
RETSUB_ZONETOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZONETOLINE:
SUB_TOPRIGHT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB390:
    MOVEF_F 47.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB391:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB392:
    DATA32 tmp393
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp393
    JR_NEQ32 0 tmp393 alreadylaunched393
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched393:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB394:
    MOVEF_F 57.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB395:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB396:
    WRITE32 ENDSUB_FRZ:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB397:
RETSUB_TOPRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPRIGHT:
SUB_TOPLEFT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB398:
    MOVEF_F 49.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB399:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB400:
    DATA32 tmp401
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp401
    JR_NEQ32 0 tmp401 alreadylaunched401
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched401:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB402:
    MOVEF_F 55.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB403:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB404:
    WRITE32 ENDSUB_FRZ:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB405:
RETSUB_TOPLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPLEFT:
SUB_DOWNRIGHT:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB406:
    MOVEF_F 121.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB407:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB408:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB409:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB410:
    MOVEF_F 131.6 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB411:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB412:
RETSUB_DOWNRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNRIGHT:
SUB_DOWNLEFT:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB413:
    MOVEF_F 121.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB414:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB415:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB416:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB417:
    MOVEF_F 131.6 VGRAD_6
    MOVEF_F 70.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB418:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB419:
RETSUB_DOWNLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNLEFT:
SUB_WRITEF:
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVCOL_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVGRE_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
RETSUB_WRITEF:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WRITEF:
SUB_TOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -60.0
    DATA32 milliseconds443
	MOVEF_32 300.0 milliseconds443
	DATA32 timer443
	TIMER_WAIT milliseconds443 timer443
	TIMER_READY timer443
  while444:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -2.0 endwhile444
  whilebody444:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -2.0 whilebody444
  endwhile444:
    CALL MOTOR.START 'A' -10.0
RETSUB_TOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPNIGA:
SUB_DOWNNIGA:
    CALL MOTOR.STARTPOWER 'A' 60.0
    DATA32 milliseconds449
	MOVEF_32 300.0 milliseconds449
	DATA32 timer449
	TIMER_WAIT milliseconds449 timer449
	TIMER_READY timer449
  while450:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 2.0 endwhile450
  whilebody450:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 2.0 whilebody450
  endwhile450:
    CALL MOTOR.STOP 'A' 'true'
RETSUB_DOWNNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNNIGA:
SUB_SLOWTOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -20.0
    DATA32 milliseconds455
	MOVEF_32 200.0 milliseconds455
	DATA32 timer455
	TIMER_WAIT milliseconds455 timer455
	TIMER_READY timer455
  while456:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile456
  whilebody456:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody456
  endwhile456:
    CALL MOTOR.START 'A' -10.0
RETSUB_SLOWTOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SLOWTOPNIGA:
SUB_WATER:
    CALL MOTOR.SCHEDULE 'D' 20.0 0.0 95.0 0.0 'true' 

	DATA8 layer460
	DATA8 nos460
	DATA8 busy460
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer460 nos460
	JR_EQ8 0 nos460 motornotbusy460
  motorwaiting460:
	OUTPUT_TEST layer460 nos460 busy460
	JR_EQ8 busy460 0 motornotbusy460
	SLEEP
	JR motorwaiting460
  motornotbusy460:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_RESETD:
    CALL MOTOR.GETCOUNT 'D' F.0
    CALL MOTOR.SCHEDULE 'D' -100.0 0.0 F.0 0.0 'true' 

	DATA8 layer463
	DATA8 nos463
	DATA8 busy463
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer463 nos463
	JR_EQ8 0 nos463 motornotbusy463
  motorwaiting463:
	OUTPUT_TEST layer463 nos463 busy463
	JR_EQ8 busy463 0 motornotbusy463
	SLEEP
	JR motorwaiting463
  motornotbusy463:
RETSUB_RESETD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RESETD:
SUB_LEFTNIGA:
    MOVEF_F 135.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB464:
    MOVEF_F 142.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB465:
    DATA32 tmp466
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp466
    JR_NEQ32 0 tmp466 alreadylaunched466
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched466:
    MOVEF_F 142.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB467:
    MOVEF_F 127.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB468:
RETSUB_LEFTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFTNIGA:
SUB_RIGHTNIGA:
    MOVEF_F 121.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB469:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB470:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB471:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB472:
    MOVEF_F 131.6 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB473:
RETSUB_RIGHTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHTNIGA:
SUB_TZ:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F 40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB474:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB475:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB476:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F -40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB477:
RETSUB_TZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TZ:
SUB_Z1:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 35.0 700.0 'true'

	DATA8 layer478
	DATA8 nos478
	DATA8 busy478
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer478 nos478
	JR_EQ8 0 nos478 motornotbusy478
  motorwaiting478:
	OUTPUT_TEST layer478 nos478 busy478
	JR_EQ8 busy478 0 motornotbusy478
	SLEEP
	JR motorwaiting478
  motornotbusy478:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB479:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -35.0 700.0 'true'

	DATA8 layer480
	DATA8 nos480
	DATA8 busy480
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer480 nos480
	JR_EQ8 0 nos480 motornotbusy480
  motorwaiting480:
	OUTPUT_TEST layer480 nos480 busy480
	JR_EQ8 busy480 0 motornotbusy480
	SLEEP
	JR motorwaiting480
  motornotbusy480:
RETSUB_Z1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z1:
SUB_Z2:
    CALL MOTOR.SCHEDULESYNC 'BC' 56.0 38.0 480.0 'true'

	DATA8 layer481
	DATA8 nos481
	DATA8 busy481
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer481 nos481
	JR_EQ8 0 nos481 motornotbusy481
  motorwaiting481:
	OUTPUT_TEST layer481 nos481 busy481
	JR_EQ8 busy481 0 motornotbusy481
	SLEEP
	JR motorwaiting481
  motornotbusy481:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB482:
    CALL MOTOR.SCHEDULESYNC 'BC' -56.0 -38.0 480.0 'true'

	DATA8 layer483
	DATA8 nos483
	DATA8 busy483
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer483 nos483
	JR_EQ8 0 nos483 motornotbusy483
  motorwaiting483:
	OUTPUT_TEST layer483 nos483 busy483
	JR_EQ8 busy483 0 motornotbusy483
	SLEEP
	JR motorwaiting483
  motornotbusy483:
RETSUB_Z2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z2:
SUB_Z3:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 23.0 350.0 'true'

	DATA8 layer484
	DATA8 nos484
	DATA8 busy484
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer484 nos484
	JR_EQ8 0 nos484 motornotbusy484
  motorwaiting484:
	OUTPUT_TEST layer484 nos484 busy484
	JR_EQ8 busy484 0 motornotbusy484
	SLEEP
	JR motorwaiting484
  motornotbusy484:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB485:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -23.0 350.0 'true'

	DATA8 layer486
	DATA8 nos486
	DATA8 busy486
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer486 nos486
	JR_EQ8 0 nos486 motornotbusy486
  motorwaiting486:
	OUTPUT_TEST layer486 nos486 busy486
	JR_EQ8 busy486 0 motornotbusy486
	SLEEP
	JR motorwaiting486
  motornotbusy486:
RETSUB_Z3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z3:
SUB_Z4:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -25.0 270.0 'true'

	DATA8 layer487
	DATA8 nos487
	DATA8 busy487
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer487 nos487
	JR_EQ8 0 nos487 motornotbusy487
  motorwaiting487:
	OUTPUT_TEST layer487 nos487 busy487
	JR_EQ8 busy487 0 motornotbusy487
	SLEEP
	JR motorwaiting487
  motornotbusy487:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB488:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 25.0 270.0 'true'

	DATA8 layer489
	DATA8 nos489
	DATA8 busy489
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer489 nos489
	JR_EQ8 0 nos489 motornotbusy489
  motorwaiting489:
	OUTPUT_TEST layer489 nos489 busy489
	JR_EQ8 busy489 0 motornotbusy489
	SLEEP
	JR motorwaiting489
  motornotbusy489:
RETSUB_Z4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z4:
SUB_Z5:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 4.0 550.0 'true'

	DATA8 layer490
	DATA8 nos490
	DATA8 busy490
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer490 nos490
	JR_EQ8 0 nos490 motornotbusy490
  motorwaiting490:
	OUTPUT_TEST layer490 nos490 busy490
	JR_EQ8 busy490 0 motornotbusy490
	SLEEP
	JR motorwaiting490
  motornotbusy490:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB491:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -4.0 550.0 'true'

	DATA8 layer492
	DATA8 nos492
	DATA8 busy492
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer492 nos492
	JR_EQ8 0 nos492 motornotbusy492
  motorwaiting492:
	OUTPUT_TEST layer492 nos492 busy492
	JR_EQ8 busy492 0 motornotbusy492
	SLEEP
	JR motorwaiting492
  motornotbusy492:
RETSUB_Z5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z5:
SUB_Z6:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 24.0 580.0 'true'

	DATA8 layer493
	DATA8 nos493
	DATA8 busy493
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer493 nos493
	JR_EQ8 0 nos493 motornotbusy493
  motorwaiting493:
	OUTPUT_TEST layer493 nos493 busy493
	JR_EQ8 busy493 0 motornotbusy493
	SLEEP
	JR motorwaiting493
  motornotbusy493:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB494:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -24.0 580.0 'true'

	DATA8 layer495
	DATA8 nos495
	DATA8 busy495
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer495 nos495
	JR_EQ8 0 nos495 motornotbusy495
  motorwaiting495:
	OUTPUT_TEST layer495 nos495 busy495
	JR_EQ8 busy495 0 motornotbusy495
	SLEEP
	JR motorwaiting495
  motornotbusy495:
RETSUB_Z6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z6:
SUB_COLOR_2:
    MOVEF_F 120.0 VH_7
    MOVEF_F 0.0 VJ_7
  while498:
    JR_NEQF VH_7 120.0 endwhile498
    JR_GTEQF VJ_7 20.0 endwhile498
  whilebody498:
    CALL SENSOR.READRAW VPORT_7 2.0 VA_7
    CALL ARRAYGET_FLOAT 0.0 VSRED_7 VA_7
    CALL ARRAYGET_FLOAT 1.0 VSGREEN_7 VA_7
    CALL ARRAYGET_FLOAT 2.0 VSBLUE_7 VA_7
    JR_LTEQF VSRED_7 VSGREEN_7 else503_1
    JR_LTEQF VSRED_7 VSBLUE_7 else503_1
    MOVEF_F VSRED_7 VMAX_7
    JR endif503
  else503_1:
    JR_LTEQF VSGREEN_7 VSRED_7 else503_2
    JR_LTEQF VSGREEN_7 VSBLUE_7 else503_2
    MOVEF_F VSGREEN_7 VMAX_7
    JR endif503
  else503_2:
    JR_LTEQF VSBLUE_7 VSRED_7 else503_3
    JR_LTEQF VSBLUE_7 VSGREEN_7 else503_3
    MOVEF_F VSBLUE_7 VMAX_7
  else503_3:
  endif503:
    JR_GTEQF VSRED_7 VSGREEN_7 else504_1
    JR_GTEQF VSRED_7 VSBLUE_7 else504_1
    MOVEF_F VSRED_7 VMIN_7
    JR endif504
  else504_1:
    JR_GTEQF VSGREEN_7 VSRED_7 else504_2
    JR_GTEQF VSGREEN_7 VSBLUE_7 else504_2
    MOVEF_F VSGREEN_7 VMIN_7
    JR endif504
  else504_2:
    JR_GTEQF VSBLUE_7 VSRED_7 else504_3
    JR_GTEQF VSBLUE_7 VSGREEN_7 else504_3
    MOVEF_F VSBLUE_7 VMIN_7
  else504_3:
  endif504:
    JR_NEQF VMAX_7 VMIN_7 else505_1
    MOVEF_F 0.0 VH_7
    JR endif505
  else505_1:
    JR_NEQF VSRED_7 VMAX_7 else506_1
    JR_LTF VSGREEN_7 VSBLUE_7 else507_1
    SUBF VSGREEN_7 VSBLUE_7 F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_7 VMIN_7 F.1
    DATAF tmpf511
    DATA8 flag511
    DIVF F.0 F.1 tmpf511
    CP_EQF 0.0 F.1 flag511
    SELECTF flag511 0.0 tmpf511 VH_7

    JR endif507
  else507_1:
    SUBF VSGREEN_7 VSBLUE_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf515
    DATA8 flag515
    DIVF F.1 F.2 tmpf515
    CP_EQF 0.0 F.2 flag515
    SELECTF flag515 0.0 tmpf515 F.0

    ADDF F.0 360.0 VH_7
  else507_2:
  endif507:
    JR endif506
  else506_1:
    JR_NEQF VMAX_7 VSGREEN_7 else517_1
    SUBF VSBLUE_7 VSRED_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf521
    DATA8 flag521
    DIVF F.1 F.2 tmpf521
    CP_EQF 0.0 F.2 flag521
    SELECTF flag521 0.0 tmpf521 F.0

    ADDF F.0 120.0 VH_7
    JR endif517
  else517_1:
    SUBF VSRED_7 VSGREEN_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf526
    DATA8 flag526
    DIVF F.1 F.2 tmpf526
    CP_EQF 0.0 F.2 flag526
    SELECTF flag526 0.0 tmpf526 F.0

    ADDF F.0 240.0 VH_7
  else517_2:
  endif517:
  else506_2:
  endif506:
  else505_2:
  endif505:
    ADDF VJ_7 1.0 VJ_7
    JR_NEQF VH_7 120.0 and529
    JR_LTF VJ_7 20.0 whilebody498
  and529:
  endwhile498:
    JR_NEQF VMAX_7 0.0 else530_1
    MOVEF_F 0.0 VS_7
    JR endif530
  else530_1:
    DATAF tmpf531
    DATA8 flag531
    DIVF VMIN_7 VMAX_7 tmpf531
    CP_EQF 0.0 VMAX_7 flag531
    SELECTF flag531 0.0 tmpf531 F.0

    SUBF 1.0 F.0 VS_7
  else530_2:
  endif530:
    MOVEF_F VMAX_7 VV_7
    JR_LTEQF VSGREEN_7 7.0 else533_1
    JR_GTEQF VSRED_7 20.0 else533_1
    JR_EQF VNIGA_M 1.0 else534_1
    MOVEF_F 1.0 VCOL_7
  else534_1:
  endif534:
    JR endif533
  else533_1:
    JR_LTEQF VH_7 10.0 else533_2
    JR_GTEQF VH_7 35.0 else533_2
    JR_LTEQF VV_7 10.0 else533_2
    MOVEF_F 5.0 VCOL_7
    JR endif533
  else533_2:
    JR_LTEQF VH_7 35.0 else533_3
    JR_GTEQF VH_7 90.0 else533_3
    JR_LTEQF VV_7 10.0 else533_3
    MOVEF_F 6.0 VCOL_7
    JR endif533
  else533_3:
    MOVEF_F 0.0 VCOL_7
  else533_4:
  endif533:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VV_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 2.0 S.0
    STRINGS VALUE_FORMATTED VSGREEN_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 100.0 2.0 S.0
    JR_NEQF VCOL_7 1.0 else542_1
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif542
  else542_1:
    JR_NEQF VCOL_7 5.0 else542_2
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif542
  else542_2:
    JR_NEQF VCOL_7 6.0 else542_3
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif542
  else542_3:
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
  else542_4:
  endif542:
RETSUB_COLOR_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_2:
SUB_START_2:
    MOVEF_F VSTART_8 VSTRT_M
    JR_NEQF VSTART_8 1.0 else547_1
    MOVEF_F 2.0 VFINISH_M
    JR endif547
  else547_1:
    MOVEF_F 1.0 VFINISH_M
  else547_2:
  endif547:
    JR_NEQF VSTART_8 1.0 else548_1
    MOVEF_F 145.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB549:
    MOVEF_F 40.0 VGRAD_3
    MOVEF_F 80.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB550:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB551:
    MOVEF_F 840.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB552:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB553:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB554:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB555:
    MOVEF_F 270.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB556:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB557:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB558:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB559:
    JR endif548
  else548_1:
    MOVEF_F 60.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB560:
    MOVEF_F 50.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB561:
    MOVEF_F 1.0 VFINISH_8
  else548_2:
  endif548:
RETSUB_START_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_2:
SUB_CUBE:
    DATA32 milliseconds562
	MOVEF_32 300.0 milliseconds562
	DATA32 timer562
	TIMER_WAIT milliseconds562 timer562
	TIMER_READY timer562
    ADDF VID_M 1.0 VID_M
    JR_EQF VID_M 1.0 or565
    JR_NEQF VID_M 2.0 else564_1
  or565:
    MOVEF_F 1.0 VZONE_M
    JR endif564
  else564_1:
    JR_EQF VID_M 3.0 or566
    JR_NEQF VID_M 4.0 else564_2
  or566:
    MOVEF_F 2.0 VZONE_M
    JR endif564
  else564_2:
    JR_EQF VID_M 5.0 or567
    JR_NEQF VID_M 12.0 else564_3
  or567:
    MOVEF_F 3.0 VZONE_M
    JR endif564
  else564_3:
    JR_EQF VID_M 6.0 or568
    JR_NEQF VID_M 7.0 else564_4
  or568:
    MOVEF_F 4.0 VZONE_M
    JR endif564
  else564_4:
    JR_EQF VID_M 8.0 or569
    JR_NEQF VID_M 9.0 else564_5
  or569:
    MOVEF_F 5.0 VZONE_M
    JR endif564
  else564_5:
    JR_EQF VID_M 10.0 or570
    JR_NEQF VID_M 11.0 else564_6
  or570:
    MOVEF_F 6.0 VZONE_M
  else564_6:
  endif564:
    JR_EQF VID_M 1.0 or572
    JR_EQF VID_M 2.0 or572
    JR_EQF VID_M 3.0 or572
    JR_EQF VID_M 4.0 or572
    JR_EQF VID_M 5.0 or572
    JR_EQF VID_M 6.0 or572
    JR_EQF VID_M 7.0 or572
    JR_EQF VID_M 9.0 or572
    JR_NEQF VID_M 10.0 else571_1
  or572:
    MOVEF_F 4.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB573:
    MOVEF_F VCOL_7 VCOL_M
    JR endif571
  else571_1:
    MOVEF_F 1.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB574:
    MOVEF_F VCOL_7 VCOL_M
  else571_2:
  endif571:
    JR_EQF VCOL_M 0.0 else575_1
    CALL ARRAYSTORE_FLOAT VZONE_M 1.0 VZONES_M
  else575_1:
  endif575:
    JR_NEQF VCOL_M 1.0 else577_1
    JR_EQF VNIGA_M 1.0 else578_1
    JR_EQF VID_M 1.0 or580
    JR_EQF VID_M 3.0 or580
    JR_EQF VID_M 4.0 or580
    JR_EQF VID_M 5.0 or580
    JR_EQF VID_M 6.0 or580
    JR_EQF VID_M 7.0 or580
    JR_NEQF VID_M 10.0 else579_1
  or580:
    WRITE32 ENDSUB_RIGHTNIGA:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHTNIGA
CALLSUB581:
    JR endif579
  else579_1:
    JR_EQF VID_M 12.0 or582
    JR_NEQF VID_M 8.0 else579_2
  or582:
    MOVEF_F 125.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB583:
    MOVEF_F 112.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB584:
    DATA32 tmp585
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp585
    JR_NEQ32 0 tmp585 alreadylaunched585
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched585:
    MOVEF_F 112.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB586:
    MOVEF_F 125.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB587:
    JR endif579
  else579_2:
    JR_NEQF VID_M 11.0 else579_3
    MOVEF_F 215.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB588:
    MOVEF_F 57.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB589:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB590:
    DATA32 tmp591
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp591
    JR_NEQ32 0 tmp591 alreadylaunched591
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched591:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB592:
    MOVEF_F 53.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB593:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB594:
    JR endif579
  else579_3:
    JR_NEQF VID_M 9.0 else579_4
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB595:
    MOVEF_F 57.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB596:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB597:
    DATA32 tmp598
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp598
    JR_NEQ32 0 tmp598 alreadylaunched598
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched598:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB599:
    MOVEF_F 50.5 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB600:
    MOVEF_F 237.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB601:
    JR endif579
  else579_4:
    MOVEF_F 110.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB602:
    MOVEF_F 84.0 VGRAD_6
    MOVEF_F 70.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB603:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB604:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB605:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB606:
    MOVEF_F 83.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB607:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB608:
  else579_5:
  endif579:
    MOVEF_F 1.0 VNIGA_M
    JR_EQF VID_M 4.0 or610
    JR_NEQF VID_M 7.0 else609_1
  or610:
    MOVEF_F -55.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB611:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB612:
  else609_1:
  endif609:
  else578_1:
  endif578:
    JR endif577
  else577_1:
    JR_NEQF VCOL_M 5.0 else577_2
    JR_NEQF VID_M 12.0 else613_1
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB614:
    MOVEF_F 35.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB615:
    WRITE32 ENDSUB_WATER:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB616:
    MOVEF_F 35.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB617:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB618:
    JR endif613
  else613_1:
    JR_NEQF VID_M 11.0 else613_2
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB619:
    MOVEF_F 45.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB620:
    WRITE32 ENDSUB_WATER:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB621:
    MOVEF_F 45.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB622:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB623:
    JR endif613
  else613_2:
    JR_EQF VID_M 2.0 or624
    JR_NEQF VID_M 9.0 else613_3
  or624:
    WRITE32 ENDSUB_WATER:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB625:
    JR endif613
  else613_3:
    DATA32 tmp626
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp626
    JR_NEQ32 0 tmp626 alreadylaunched626
    OBJECT_START TWATER
  alreadylaunched626:
  else613_4:
  endif613:
    ADDF VRD_M 1.0 VRD_M
    JR endif577
  else577_2:
    JR_NEQF VCOL_M 6.0 else577_3
    JR_NEQF VZN1_M 0.0 else628_1
    MOVEF_F VZONE_M VZN1_M
    JR endif628
  else628_1:
    JR_NEQF VZN2_M 0.0 else628_2
    JR_EQF VZONE_M VZN1_M else629_1
    MOVEF_F VZONE_M VZN2_M
  else629_1:
  endif629:
  else628_2:
  endif628:
  else577_3:
  endif577:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_VIRAV_1:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VSTIME_9
    DATA32 milliseconds632
	MOVEF_32 300.0 milliseconds632
	DATA32 timer632
	TIMER_WAIT milliseconds632 timer632
	TIMER_READY timer632
  while633:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or634
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile633
  or634:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_GTEQF F.0 6000.0 endwhile633
  whilebody633:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or646
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 and645
  or646:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_LTF F.0 6000.0 whilebody633
  and645:
  endwhile633:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VSP_9 0.0 else658_1
    MOVEF_F -60.0 VSP_9
    JR endif658
  else658_1:
    MOVEF_F 60.0 VSP_9
  else658_2:
  endif658:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds660
	MOVEF_32 300.0 milliseconds660
	DATA32 timer660
	TIMER_WAIT milliseconds660 timer660
	TIMER_READY timer660
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_VIRAV_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall EV3FILE.OPENAPPEND       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_APPEND fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAW            // FFA
{
	IN_F port
	IN_F values
	IN_16 resultarray
	
	DATA8 layer
	DATA8 no
	DATA32 values32
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 values values32

	JR_LTEQ32 values32 0 arrayempty
	ARRAY RESIZE resultarray values32

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 i
	DATA32 rawtmp
	MOVE32_32 0 i
loop:
	DATA8 tmp8
	DATAF tmpf

	MOVEF_F 0.0 tmpf
	JR_GTEQ32 i 8 nomoredata

	MOVE32_8 i tmp8
	READ32 rawvalue0 tmp8 rawtmp
	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp tmpf

nomoredata:	
	ARRAY_WRITE resultarray i tmpf

	ADD32 i 1 i
	JR_LT32 i values32 loop
	RETURN

arrayempty:
	ARRAY RESIZE resultarray 0
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MATH.GETRANDOMNUMBER   // FF
{
	IN_F range
	OUT_F result
	
	DATA16 range_16
	DATA16 value
	MOVEF_16 range range_16
	
	RANDOM 1 range_16 value
	MOVE16_F value result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
