DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VF_M
DATAF VMIN1_M
DATAF VMIN2_M
DATAF VMAX1_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VMAXR_M
DATAF VMINR_M
DATAF VMAXW_M
DATAF VMINW_M
DATAF VMAXB_M
DATAF VMINB_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VEVCOL_M
DATAF VEVGRE_M
DATAF VRD_M
DATAF VZN1_M
DATAF VZN2_M
DATAF VNIGA_M
DATAF VCOL_M
DATAF VZONE_M
DATAF VFIN_M
DATAF VZN_M
DATAF VTIME_M
DATAF VL_1
DATAF VNSP_1
DATAF VSP_1
DATAF VA_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VNSP_3
DATAF VL_3
DATAF VDEL_3
DATAF VSP_3
DATAF VGRAD_4
DATAF VNSP_4
DATAF VL_4
DATAF VDEL_4
DATAF VSP_4
DATAF VGRAD_5
DATAF VNSP_5
DATAF VL_5
DATAF VDEL_5
DATAF VSP_5
DATAF VU_5
DATAF VGRAD_6
DATAF VNSP_6
DATAF VL_6
DATAF VDEL_6
DATAF VSP_6
DATAF VU_6
DATAF VPORT_7
DATAF VCOL_7
DATAF VEVCOL_7
ARRAY16 VA_7 2
DATAF VR_7
DATAF VG_7
DATAF VB_7
DATAF VSTART_8
DATAF VFINISH_8
DATAF VSP_9
DATAF VSTRT_M
DATAF VFINISH_M
DATA32 RUNCOUNTER_SLOWTOPNIGA
DATA32 RUNCOUNTER_WATER
DATA32 RUNCOUNTER_DOWNNIGA
DATA32 RUNCOUNTER_RESETD
DATA32 RUNCOUNTER_TOPNIGA

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VEVCOL_7
    CALL ARRAYCREATE_FLOAT VA_7
    MOVEF_F 0.0 VR_7
    MOVEF_F 0.0 VG_7
    MOVEF_F 0.0 VB_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTRT_M
    MOVEF_F 0.0 VFINISH_M
    MOVE32_32 0 RUNCOUNTER_SLOWTOPNIGA
    MOVE32_32 0 RUNCOUNTER_WATER
    MOVE32_32 0 RUNCOUNTER_DOWNNIGA
    MOVE32_32 0 RUNCOUNTER_RESETD
    MOVE32_32 0 RUNCOUNTER_TOPNIGA
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TSLOWTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_SLOWTOPNIGA 0
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA -1 RUNCOUNTER_SLOWTOPNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TWATER
{
    DATA32 tmp
  launch:
    CALL PROGRAM_WATER 1
    CALL GETANDINC32 RUNCOUNTER_WATER -1 RUNCOUNTER_WATER tmp
    JR_GT32 tmp 1 launch
}
vmthread TDOWNNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWNNIGA 2
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA -1 RUNCOUNTER_DOWNNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TRESETD
{
    DATA32 tmp
  launch:
    CALL PROGRAM_RESETD 3
    CALL GETANDINC32 RUNCOUNTER_RESETD -1 RUNCOUNTER_RESETD tmp
    JR_GT32 tmp 1 launch
}
vmthread TTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TOPNIGA 4
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA -1 RUNCOUNTER_TOPNIGA tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_SLOWTOPNIGA
subcall PROGRAM_WATER
subcall PROGRAM_DOWNNIGA
subcall PROGRAM_RESETD
subcall PROGRAM_TOPNIGA
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch832
    WRITE32 ENDSUB_SLOWTOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SLOWTOPNIGA
  dispatch832:
    JR_NEQ32 SUBPROGRAM 1 dispatch833
    WRITE32 ENDSUB_WATER:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
  dispatch833:
    JR_NEQ32 SUBPROGRAM 2 dispatch834
    WRITE32 ENDSUB_DOWNNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
  dispatch834:
    JR_NEQ32 SUBPROGRAM 3 dispatch835
    WRITE32 ENDSUB_RESETD:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RESETD
  dispatch835:
    JR_NEQ32 SUBPROGRAM 4 dispatch836
    WRITE32 ENDSUB_TOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
  dispatch836:
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VEVCOL_7
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_7
    MOVEF_F 0.0 VR_7
    MOVEF_F 0.0 VG_7
    MOVEF_F 0.0 VB_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    CALL EV3FILE.OPENREAD 'colib.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    CALL EV3FILE.OPENREAD 'RROtesting/col1.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXB_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINB_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VID_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.0 VRD_M
    CALL MOTOR.RESETCOUNT 'D'
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VCOL_M
    DATA32 tmp536
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp536
    JR_NEQ32 0 tmp536 alreadylaunched536
    OBJECT_START TDOWNNIGA
  alreadylaunched536:
    MOVEF_F 1.0 VSTART_8
    WRITE32 ENDSUB_START_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_2
CALLSUB537:
    MOVEF_F VFINISH_8 VFIN_M
    MOVEF_F 900.0 VL_1
    MOVEF_F 90.0 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB538:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VSP_M
  while540:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or541
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile540
  or541:
  whilebody540:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody540
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody540
  endwhile540:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 150.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB556:
    MOVEF_F 105.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB557:
    MOVEF_F -80.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB558:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB559:
    MOVEF_F 80.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB560:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while562:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or563
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile562
  or563:
  whilebody562:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody562
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody562
  endwhile562:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB578:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while580:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or581
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile580
  or581:
  whilebody580:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody580
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody580
  endwhile580:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB596:
    CALL MOTOR.RESETCOUNT 'BC'
  while598:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf602
    DATA8 flag602
    DIVF F.1 2.0 tmpf602
    CP_EQF 0.0 2.0 flag602
    SELECTF flag602 0.0 tmpf602 F.0

    JR_GTEQF F.0 50.0 endwhile598
  whilebody598:
    WRITE32 ENDSUB_LINE:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB603:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf607
    DATA8 flag607
    DIVF F.1 2.0 tmpf607
    CP_EQF 0.0 2.0 flag607
    SELECTF flag607 0.0 tmpf607 F.0

    JR_LTF F.0 50.0 whilebody598
  endwhile598:
  while608:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile608
  whilebody608:
    WRITE32 ENDSUB_LINE:CALLSUB610 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB610:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody608
  endwhile608:
    WRITE32 ENDSUB_LEFT:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB612:
    CALL MOTOR.RESETCOUNT 'BC'
  while614:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf618
    DATA8 flag618
    DIVF F.1 2.0 tmpf618
    CP_EQF 0.0 2.0 flag618
    SELECTF flag618 0.0 tmpf618 F.0

    JR_GTEQF F.0 170.0 endwhile614
  whilebody614:
    WRITE32 ENDSUB_SEN1:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB619:
    SUBF VS1_M 15.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf630
    DATA8 flag630
    DIVF F.1 2.0 tmpf630
    CP_EQF 0.0 2.0 flag630
    SELECTF flag630 0.0 tmpf630 F.0

    JR_LTF F.0 170.0 whilebody614
  endwhile614:
  while631:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or632
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile631
  or632:
  whilebody631:
    WRITE32 ENDSUB_SEN1:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB635:
    SUBF VS1_M 15.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody631
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody631
  endwhile631:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 225.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB646:
    WRITE32 ENDSUB_CUBE:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB647:
    MOVEF_F 380.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB648:
    WRITE32 ENDSUB_CUBE:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB649:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB650:
    WRITE32 ENDSUB_CUBE:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB651:
    MOVEF_F 122.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB652:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB653 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB653:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB654:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB655:
    WRITE32 ENDSUB_CUBE:CALLSUB656 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB656:
    MOVEF_F 410.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB657:
    WRITE32 ENDSUB_CUBE:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB658:
    MOVEF_F 400.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB659:
    WRITE32 ENDSUB_CUBE:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB660:
    MOVEF_F 28.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB661:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB662:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB663:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB664:
    WRITE32 ENDSUB_CUBE:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB665:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB666:
    WRITE32 ENDSUB_CUBE:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB667:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB668:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB669:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB670 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB670:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB671:
    WRITE32 ENDSUB_CUBE:CALLSUB672 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB672:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB673:
    WRITE32 ENDSUB_CUBE:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB674:
    JR_LTF VRD_M 2.0 or676
    JR_NEQF VNIGA_M 1.0 or676
    JR_EQF VZN1_M 0.0 or676
    JR_NEQF VZN2_M 0.0 else675_1
  or676:
    MOVEF_F 27.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB677:
    MOVEF_F 93.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB678:
    MOVEF_F 360.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB679:
    WRITE32 ENDSUB_CUBE:CALLSUB680 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB680:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB681:
    WRITE32 ENDSUB_CUBE:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB682:
    MOVEF_F 17.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB683:
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F -90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB684:
    MOVEF_F 730.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB685:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB686:
    JR endif675
  else675_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB687:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB688:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB689:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB690:
  else675_2:
  endif675:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while692:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 25.0 or693
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 25.0 endwhile692
  or693:
  whilebody692:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 25.0 whilebody692
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 25.0 whilebody692
  endwhile692:
  while698:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or699
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile698
  or699:
  whilebody698:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody698
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody698
  endwhile698:
    WRITE32 ENDSUB_LEFT:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB704:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
  while705:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 or706
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile705
  or706:
  whilebody705:
    WRITE32 ENDSUB_LINE:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB709:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody705
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody705
  endwhile705:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.6 VK_M
    MOVEF_F 60.0 VV_M
  while713:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or714
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile713
  or714:
  whilebody713:
    WRITE32 ENDSUB_LINE:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB717:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody713
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody713
  endwhile713:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB721 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB721:
    DATA32 tmp722
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp722
    JR_NEQ32 0 tmp722 alreadylaunched722
    OBJECT_START TDOWNNIGA
  alreadylaunched722:
  while723:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or724
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile723
  or724:
  whilebody723:
    WRITE32 ENDSUB_LINE:CALLSUB727 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB727:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody723
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody723
  endwhile723:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB731:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB732:
    DATA32 tmp733
    CALL GETANDINC32 RUNCOUNTER_RESETD 1  RUNCOUNTER_RESETD tmp733
    JR_NEQ32 0 tmp733 alreadylaunched733
    OBJECT_START TRESETD
  alreadylaunched733:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB734:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB735:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB736:
    MOVEF_F 800.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB737 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB737:
    MOVEF_F 50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB738:
    MOVEF_F 2.0 VFIN_M
    JR_NEQF VZN1_M 0.0 else739_1
    CALL MATH.GETRANDOMNUMBER 6.0 VZN1_M
  else739_1:
  endif739:
    JR_NEQF VZN2_M 0.0 else741_1
    MOVEF_F VZN1_M VZN2_M
  while742:
    JR_NEQF VZN2_M VZN1_M endwhile742
  whilebody742:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN2_M
    JR_EQF VZN2_M VZN1_M whilebody742
  endwhile742:
  else741_1:
  endif741:
    MOVEF_F 225.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB744:
    DATA32 tmp745
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp745
    JR_NEQ32 0 tmp745 alreadylaunched745
    OBJECT_START TTOPNIGA
  alreadylaunched745:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB746:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB747:
    MOVEF_F 226.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB748:
    DATA32 tmp749
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp749
    JR_NEQ32 0 tmp749 alreadylaunched749
    OBJECT_START TDOWNNIGA
  alreadylaunched749:
    JR_EQF VZN1_M 1.0 or751
    JR_NEQF VZN2_M 1.0 else750_1
  or751:
    WRITE32 ENDSUB_Z1:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB752:
    MOVEF_F 1.0 VZONE1_M
    JR endif750
  else750_1:
    JR_EQF VZN1_M 6.0 or753
    JR_NEQF VZN2_M 6.0 else750_2
  or753:
    WRITE32 ENDSUB_Z6:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB754:
    MOVEF_F 6.0 VZONE1_M
    JR endif750
  else750_2:
    JR_EQF VZN1_M 5.0 or755
    JR_NEQF VZN2_M 5.0 else750_3
  or755:
    WRITE32 ENDSUB_Z5:CALLSUB756 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB756:
    MOVEF_F 5.0 VZONE1_M
    JR endif750
  else750_3:
    JR_EQF VZN1_M 2.0 or757
    JR_NEQF VZN2_M 2.0 else750_4
  or757:
    WRITE32 ENDSUB_Z2:CALLSUB758 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB758:
    MOVEF_F 2.0 VZONE1_M
    JR endif750
  else750_4:
    JR_EQF VZN1_M 3.0 or759
    JR_NEQF VZN2_M 3.0 else750_5
  or759:
    WRITE32 ENDSUB_Z3:CALLSUB760 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB760:
    MOVEF_F 3.0 VZONE1_M
    JR endif750
  else750_5:
    JR_EQF VZN1_M 4.0 or761
    JR_NEQF VZN2_M 4.0 else750_6
  or761:
    WRITE32 ENDSUB_Z4:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB762:
    MOVEF_F 4.0 VZONE1_M
  else750_6:
  endif750:
    MOVEF_F 28.0 VGRAD_3
    MOVEF_F 50.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB763 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB763:
    MOVEF_F 28.0 VGRAD_4
    MOVEF_F 50.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB764:
    CALL MOTOR.STARTPOWER 'B' 40.0
  while766:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile766
  whilebody766:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody766
  endwhile766:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf771
    DATA8 flag771
    DIVF VMM_M 257.48 tmpf771
    CP_EQF 0.0 257.48 flag771
    SELECTF flag771 0.0 tmpf771 F.0

    MULF F.0 360.0 VL_M
  while773:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf779
    DATA8 flag779
    DIVF F.1 2.0 tmpf779
    CP_EQF 0.0 2.0 flag779
    SELECTF flag779 0.0 tmpf779 F.0

    JR_GTF F.0 VL_M endwhile773
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile773
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile773
  whilebody773:
    WRITE32 ENDSUB_SEN2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB782:
    SUBF VS2_M 9.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf796
    DATA8 flag796
    DIVF F.1 2.0 tmpf796
    CP_EQF 0.0 2.0 flag796
    SELECTF flag796 0.0 tmpf796 F.0

    JR_GTF F.0 VL_M and790
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and790
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody773
  and790:
  endwhile773:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB800 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB800:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB801 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB801:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB802 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB802:
    DATA32 milliseconds803
	MOVEF_32 200.0 milliseconds803
	DATA32 timer803
	TIMER_WAIT milliseconds803 timer803
	TIMER_READY timer803
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F -80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB804 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB804:
    MOVEF_F 346.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB805:
    JR_NEQF VZONE1_M VZN1_M else806_1
    MOVEF_F VZN2_M VZN_M
    JR endif806
  else806_1:
    JR_NEQF VZONE1_M VZN2_M else806_2
    MOVEF_F VZN1_M VZN_M
  else806_2:
  endif806:
    JR_NEQF VZN_M 1.0 else807_1
    WRITE32 ENDSUB_Z1:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB808:
    MOVEF_F 1.0 VZONE1_M
    JR endif807
  else807_1:
    JR_NEQF VZN_M 6.0 else807_2
    WRITE32 ENDSUB_Z6:CALLSUB809 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB809:
    MOVEF_F 6.0 VZONE1_M
    JR endif807
  else807_2:
    JR_NEQF VZN_M 5.0 else807_3
    WRITE32 ENDSUB_Z5:CALLSUB810 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB810:
    MOVEF_F 5.0 VZONE1_M
    JR endif807
  else807_3:
    JR_NEQF VZN_M 2.0 else807_4
    WRITE32 ENDSUB_Z2:CALLSUB811 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB811:
    MOVEF_F 2.0 VZONE1_M
    JR endif807
  else807_4:
    JR_NEQF VZN_M 3.0 else807_5
    WRITE32 ENDSUB_Z3:CALLSUB812 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB812:
    MOVEF_F 3.0 VZONE1_M
    JR endif807
  else807_5:
    JR_NEQF VZN_M 4.0 else807_6
    WRITE32 ENDSUB_Z4:CALLSUB813 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB813:
    MOVEF_F 4.0 VZONE1_M
  else807_6:
  endif807:
    DATA32 tmp814
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp814
    JR_NEQ32 0 tmp814 alreadylaunched814
    OBJECT_START TDOWNNIGA
  alreadylaunched814:
    JR_NEQF VFIN_M 1.0 else815_1
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB816:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB817:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB818 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB818:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB819:
    JR endif815
  else815_1:
    MOVEF_F 600.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB820 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB820:
    MOVEF_F 70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB821:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB822:
    MOVEF_F 93.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB823:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB824 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB824:
  else815_2:
  endif815:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    DATAF tmpf826
    DATA8 flag826
    DIVF F.0 1000.0 tmpf826
    CP_EQF 0.0 1000.0 flag826
    SELECTF flag826 0.0 tmpf826 VTIME_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VTIME_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 2.0 S.0
    CALL SPEAKER.NOTE 70.0 'B7' 600.0
    WRITE32 ENDSUB_FRZ:CALLSUB831 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB831:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 F.1 tmpf47
    CP_EQF 0.0 F.1 flag47
    SELECTF flag47 0.0 tmpf47 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.0 F.1 tmpf52
    CP_EQF 0.0 F.1 flag52
    SELECTF flag52 0.0 tmpf52 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB53:
    WRITE32 ENDSUB_SEN2:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB54:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_1
  while63:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTF F.0 VL_1 endwhile63
  whilebody63:
    MOVEF_F 125.835016311947 VA_1
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    CALL MOTOR.GETCOUNT 'B' F.5
    MATH ABS F.5 F.4
    ADDF F.3 F.4 F.2
    DATAF tmpf76
    DATA8 flag76
    DIVF F.2 2.0 tmpf76
    CP_EQF 0.0 2.0 flag76
    SELECTF flag76 0.0 tmpf76 F.1

    SUBF VL_1 F.1 F.0
    JR_GTEQF F.0 VA_1 else70_1
    JR_LTEQF VSP_1 25.0 else70_1
    SUBF VSP_1 0.9 VSP_1
    JR_GTEQF VNSP_1 0.0 else79_1
    SUBF 0.0 VSP_1 VSP_1
  else79_1:
  endif79:
  else70_1:
  endif70:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    JR_LTF F.0 VA_1 or82
    JR_GTEQF VSP_1 VNSP_1 else81_1
  or82:
    MATH ABS VSP_1 F.0
    ADDF F.0 0.3 VSP_1
    JR_GTEQF VNSP_1 0.0 else91_1
    SUBF 0.0 VSP_1 VSP_1
  else91_1:
  endif91:
  else81_1:
  endif81:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 10.0 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 10.0 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf107
    DATA8 flag107
    DIVF F.1 2.0 tmpf107
    CP_EQF 0.0 2.0 flag107
    SELECTF flag107 0.0 tmpf107 F.0

    JR_LTEQF F.0 VL_1 whilebody63
  endwhile63:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf109
    DATA8 flag109
    DIVF VMM_2 257.48 tmpf109
    CP_EQF 0.0 257.48 flag109
    SELECTF flag109 0.0 tmpf109 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB112 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB112:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer113
	DATA8 nos113
	DATA8 busy113
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer113 nos113
	JR_EQ8 0 nos113 motornotbusy113
  motorwaiting113:
	OUTPUT_TEST layer113 nos113 busy113
	JR_EQ8 busy113 0 motornotbusy113
	SLEEP
	JR motorwaiting113
  motornotbusy113:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 130.0 'true'

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
  while115:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 21.0 endwhile115
  whilebody115:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 21.0 whilebody115
  endwhile115:
    CALL MOTOR.STOP 'bc' 'true'
  while120:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile120
  whilebody120:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody120
  endwhile120:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB125:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 88.0845114183626 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer126
	DATA8 nos126
	DATA8 busy126
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer126 nos126
	JR_EQ8 0 nos126 motornotbusy126
  motorwaiting126:
	OUTPUT_TEST layer126 nos126 busy126
	JR_EQ8 busy126 0 motornotbusy126
	SLEEP
	JR motorwaiting126
  motornotbusy126:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer127
	DATA8 nos127
	DATA8 busy127
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer127 nos127
	JR_EQ8 0 nos127 motornotbusy127
  motorwaiting127:
	OUTPUT_TEST layer127 nos127 busy127
	JR_EQ8 busy127 0 motornotbusy127
	SLEEP
	JR motorwaiting127
  motornotbusy127:
  while128:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 21.0 endwhile128
  whilebody128:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 whilebody128
  endwhile128:
    CALL MOTOR.STOP 'bc' 'true'
  while133:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile133
  whilebody133:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody133
  endwhile133:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB138:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_2:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf140
    DATA8 flag140
    DIVF F.0 360.0 tmpf140
    CP_EQF 0.0 360.0 flag140
    SELECTF flag140 0.0 tmpf140 VL_3

    DATAF tmpf141
    DATA8 flag141
    DIVF VL_3 257.48 tmpf141
    CP_EQF 0.0 257.48 flag141
    SELECTF flag141 0.0 tmpf141 F.0

    MULF F.0 360.0 VL_3
    DATAF tmpf143
    DATA8 flag143
    DIVF VL_3 3.0 tmpf143
    CP_EQF 0.0 3.0 flag143
    SELECTF flag143 0.0 tmpf143 VDEL_3

    MOVEF_F VNSP_3 VSP_3
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while146:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile146
  whilebody146:
    CALL MOTOR.STARTPOWER 'C' VSP_3
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_3
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1142.96 VGRAD_4 F.0
    DATAF tmpf154
    DATA8 flag154
    DIVF F.0 360.0 tmpf154
    CP_EQF 0.0 360.0 flag154
    SELECTF flag154 0.0 tmpf154 VL_4

    DATAF tmpf155
    DATA8 flag155
    DIVF VL_4 257.48 tmpf155
    CP_EQF 0.0 257.48 flag155
    SELECTF flag155 0.0 tmpf155 F.0

    MULF F.0 360.0 VL_4
    DATAF tmpf157
    DATA8 flag157
    DIVF VL_4 3.0 tmpf157
    CP_EQF 0.0 3.0 flag157
    SELECTF flag157 0.0 tmpf157 VDEL_4

    MOVEF_F VNSP_4 VSP_4
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while160:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile160
  whilebody160:
    CALL MOTOR.STARTPOWER 'B' VSP_4
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody160
  endwhile160:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_4
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_5 F.1
    DATAF tmpf171
    DATA8 flag171
    DIVF F.1 360.0 tmpf171
    CP_EQF 0.0 360.0 flag171
    SELECTF flag171 0.0 tmpf171 F.0

    DATAF tmpf172
    DATA8 flag172
    DIVF F.0 2.0 tmpf172
    CP_EQF 0.0 2.0 flag172
    SELECTF flag172 0.0 tmpf172 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 82.0 F.1
    DATAF tmpf175
    DATA8 flag175
    DIVF VL_5 F.1 tmpf175
    CP_EQF 0.0 F.1 flag175
    SELECTF flag175 0.0 tmpf175 F.0

    MULF F.0 360.0 VL_5
    DATAF tmpf177
    DATA8 flag177
    DIVF VL_5 3.0 tmpf177
    CP_EQF 0.0 3.0 flag177
    SELECTF flag177 0.0 tmpf177 VDEL_5

    MOVEF_F 30.0 VSP_5
    CALL MOTOR.RESETCOUNT 'BC'
  while179:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile179
  whilebody179:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_5
    MULF VU_5 0.8 F.2
    SUBF VSP_5 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_5 0.8 F.1
    ADDF VSP_5 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_5 else193_1
    JR_GTEQF VSP_5 VNSP_5 else193_1
    ADDF VSP_5 2.0 VSP_5
    JR endif193
  else193_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_5 2.0 F.1
    JR_LTEQF F.0 F.1 else193_2
    JR_LTEQF VSP_5 30.0 else193_2
    SUBF VSP_5 5.0 VSP_5
  else193_2:
  endif193:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody179
  endwhile179:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_5
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 186.0 F.2
    MULF F.2 VGRAD_6 F.1
    DATAF tmpf208
    DATA8 flag208
    DIVF F.1 360.0 tmpf208
    CP_EQF 0.0 360.0 flag208
    SELECTF flag208 0.0 tmpf208 F.0

    DATAF tmpf209
    DATA8 flag209
    DIVF F.0 2.0 tmpf209
    CP_EQF 0.0 2.0 flag209
    SELECTF flag209 0.0 tmpf209 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 82.0 F.1
    DATAF tmpf212
    DATA8 flag212
    DIVF VL_6 F.1 tmpf212
    CP_EQF 0.0 F.1 flag212
    SELECTF flag212 0.0 tmpf212 F.0

    MULF F.0 360.0 VL_6
    DATAF tmpf214
    DATA8 flag214
    DIVF VL_6 3.0 tmpf214
    CP_EQF 0.0 3.0 flag214
    SELECTF flag214 0.0 tmpf214 VDEL_6

    MOVEF_F 30.0 VSP_6
    CALL MOTOR.RESETCOUNT 'BC'
  while216:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_6 endwhile216
  whilebody216:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VU_6
    MULF VU_6 0.8 F.1
    SUBF VSP_6 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_6 0.8 F.2
    ADDF VSP_6 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_6 else230_1
    JR_GTEQF VSP_6 VNSP_6 else230_1
    ADDF VSP_6 2.0 VSP_6
    JR endif230
  else230_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_6 2.0 F.1
    JR_LTEQF F.0 F.1 else230_2
    JR_LTEQF VSP_6 30.0 else230_2
    SUBF VSP_6 5.0 VSP_6
  else230_2:
  endif230:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_6 whilebody216
  endwhile216:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_6
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_WRITEF:
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVCOL_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVGRE_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
RETSUB_WRITEF:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WRITEF:
SUB_TOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -60.0
    DATA32 milliseconds268
	MOVEF_32 300.0 milliseconds268
	DATA32 timer268
	TIMER_WAIT milliseconds268 timer268
	TIMER_READY timer268
  while269:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -2.0 endwhile269
  whilebody269:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -2.0 whilebody269
  endwhile269:
    CALL MOTOR.START 'A' -10.0
RETSUB_TOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPNIGA:
SUB_DOWNNIGA:
    CALL MOTOR.STARTPOWER 'A' 60.0
    DATA32 milliseconds274
	MOVEF_32 300.0 milliseconds274
	DATA32 timer274
	TIMER_WAIT milliseconds274 timer274
	TIMER_READY timer274
  while275:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 2.0 endwhile275
  whilebody275:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 2.0 whilebody275
  endwhile275:
    CALL MOTOR.STOP 'A' 'true'
RETSUB_DOWNNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNNIGA:
SUB_SLOWTOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -20.0
    DATA32 milliseconds280
	MOVEF_32 200.0 milliseconds280
	DATA32 timer280
	TIMER_WAIT milliseconds280 timer280
	TIMER_READY timer280
  while281:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile281
  whilebody281:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody281
  endwhile281:
    CALL MOTOR.START 'A' -10.0
RETSUB_SLOWTOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SLOWTOPNIGA:
SUB_WATER:
    CALL MOTOR.SCHEDULE 'D' 20.0 0.0 95.0 0.0 'true' 

	DATA8 layer285
	DATA8 nos285
	DATA8 busy285
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer285 nos285
	JR_EQ8 0 nos285 motornotbusy285
  motorwaiting285:
	OUTPUT_TEST layer285 nos285 busy285
	JR_EQ8 busy285 0 motornotbusy285
	SLEEP
	JR motorwaiting285
  motornotbusy285:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_RESETD:
    CALL MOTOR.GETCOUNT 'D' F.0
    CALL MOTOR.SCHEDULE 'D' -100.0 0.0 F.0 0.0 'true' 

	DATA8 layer288
	DATA8 nos288
	DATA8 busy288
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer288 nos288
	JR_EQ8 0 nos288 motornotbusy288
  motorwaiting288:
	OUTPUT_TEST layer288 nos288 busy288
	JR_EQ8 busy288 0 motornotbusy288
	SLEEP
	JR motorwaiting288
  motornotbusy288:
RETSUB_RESETD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RESETD:
SUB_LEFTNIGA:
    MOVEF_F 135.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB289:
    MOVEF_F 142.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB290:
    DATA32 tmp291
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp291
    JR_NEQ32 0 tmp291 alreadylaunched291
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched291:
    MOVEF_F 142.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB292:
    MOVEF_F 127.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB293:
RETSUB_LEFTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFTNIGA:
SUB_RIGHTNIGA:
    MOVEF_F 117.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB294:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB295:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB296:
    MOVEF_F 115.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB297:
    MOVEF_F 125.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB298:
RETSUB_RIGHTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHTNIGA:
SUB_TZ:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F 40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB299:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB300:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB301:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F -40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB302:
RETSUB_TZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TZ:
SUB_Z1:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 36.0 700.0 'true'

	DATA8 layer303
	DATA8 nos303
	DATA8 busy303
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer303 nos303
	JR_EQ8 0 nos303 motornotbusy303
  motorwaiting303:
	OUTPUT_TEST layer303 nos303 busy303
	JR_EQ8 busy303 0 motornotbusy303
	SLEEP
	JR motorwaiting303
  motornotbusy303:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB304:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -36.0 700.0 'true'

	DATA8 layer305
	DATA8 nos305
	DATA8 busy305
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer305 nos305
	JR_EQ8 0 nos305 motornotbusy305
  motorwaiting305:
	OUTPUT_TEST layer305 nos305 busy305
	JR_EQ8 busy305 0 motornotbusy305
	SLEEP
	JR motorwaiting305
  motornotbusy305:
RETSUB_Z1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z1:
SUB_Z2:
    CALL MOTOR.SCHEDULESYNC 'BC' 56.0 42.0 520.0 'true'

	DATA8 layer306
	DATA8 nos306
	DATA8 busy306
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer306 nos306
	JR_EQ8 0 nos306 motornotbusy306
  motorwaiting306:
	OUTPUT_TEST layer306 nos306 busy306
	JR_EQ8 busy306 0 motornotbusy306
	SLEEP
	JR motorwaiting306
  motornotbusy306:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB307:
    CALL MOTOR.SCHEDULESYNC 'BC' -56.0 -42.0 520.0 'true'

	DATA8 layer308
	DATA8 nos308
	DATA8 busy308
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer308 nos308
	JR_EQ8 0 nos308 motornotbusy308
  motorwaiting308:
	OUTPUT_TEST layer308 nos308 busy308
	JR_EQ8 busy308 0 motornotbusy308
	SLEEP
	JR motorwaiting308
  motornotbusy308:
RETSUB_Z2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z2:
SUB_Z3:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 30.0 410.0 'true'

	DATA8 layer309
	DATA8 nos309
	DATA8 busy309
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer309 nos309
	JR_EQ8 0 nos309 motornotbusy309
  motorwaiting309:
	OUTPUT_TEST layer309 nos309 busy309
	JR_EQ8 busy309 0 motornotbusy309
	SLEEP
	JR motorwaiting309
  motornotbusy309:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB310:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -30.0 410.0 'true'

	DATA8 layer311
	DATA8 nos311
	DATA8 busy311
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer311 nos311
	JR_EQ8 0 nos311 motornotbusy311
  motorwaiting311:
	OUTPUT_TEST layer311 nos311 busy311
	JR_EQ8 busy311 0 motornotbusy311
	SLEEP
	JR motorwaiting311
  motornotbusy311:
RETSUB_Z3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z3:
SUB_Z4:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -25.0 270.0 'true'

	DATA8 layer312
	DATA8 nos312
	DATA8 busy312
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer312 nos312
	JR_EQ8 0 nos312 motornotbusy312
  motorwaiting312:
	OUTPUT_TEST layer312 nos312 busy312
	JR_EQ8 busy312 0 motornotbusy312
	SLEEP
	JR motorwaiting312
  motornotbusy312:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB313:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 25.0 270.0 'true'

	DATA8 layer314
	DATA8 nos314
	DATA8 busy314
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer314 nos314
	JR_EQ8 0 nos314 motornotbusy314
  motorwaiting314:
	OUTPUT_TEST layer314 nos314 busy314
	JR_EQ8 busy314 0 motornotbusy314
	SLEEP
	JR motorwaiting314
  motornotbusy314:
RETSUB_Z4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z4:
SUB_Z5:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 4.0 550.0 'true'

	DATA8 layer315
	DATA8 nos315
	DATA8 busy315
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer315 nos315
	JR_EQ8 0 nos315 motornotbusy315
  motorwaiting315:
	OUTPUT_TEST layer315 nos315 busy315
	JR_EQ8 busy315 0 motornotbusy315
	SLEEP
	JR motorwaiting315
  motornotbusy315:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB316:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -4.0 550.0 'true'

	DATA8 layer317
	DATA8 nos317
	DATA8 busy317
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer317 nos317
	JR_EQ8 0 nos317 motornotbusy317
  motorwaiting317:
	OUTPUT_TEST layer317 nos317 busy317
	JR_EQ8 busy317 0 motornotbusy317
	SLEEP
	JR motorwaiting317
  motornotbusy317:
RETSUB_Z5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z5:
SUB_Z6:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 24.0 580.0 'true'

	DATA8 layer318
	DATA8 nos318
	DATA8 busy318
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer318 nos318
	JR_EQ8 0 nos318 motornotbusy318
  motorwaiting318:
	OUTPUT_TEST layer318 nos318 busy318
	JR_EQ8 busy318 0 motornotbusy318
	SLEEP
	JR motorwaiting318
  motornotbusy318:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB319:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -24.0 580.0 'true'

	DATA8 layer320
	DATA8 nos320
	DATA8 busy320
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer320 nos320
	JR_EQ8 0 nos320 motornotbusy320
  motorwaiting320:
	OUTPUT_TEST layer320 nos320 busy320
	JR_EQ8 busy320 0 motornotbusy320
	SLEEP
	JR motorwaiting320
  motornotbusy320:
RETSUB_Z6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z6:
SUB_CLOSE:
    CALL MOTOR.STARTPOWER 'A' 80.0
    DATA32 milliseconds322
	MOVEF_32 300.0 milliseconds322
	DATA32 timer322
	TIMER_WAIT milliseconds322 timer322
	TIMER_READY timer322
  while323:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 10.0 endwhile323
  whilebody323:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 10.0 whilebody323
  endwhile323:
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_LINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB326:
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB327:
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_STOLB1:
    WRITE32 ENDSUB_LEFT:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB328:
    CALL MOTOR.RESETCOUNT 'BC'
  while330:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf334
    DATA8 flag334
    DIVF F.1 2.0 tmpf334
    CP_EQF 0.0 2.0 flag334
    SELECTF flag334 0.0 tmpf334 F.0

    JR_GTEQF F.0 50.0 endwhile330
  whilebody330:
    WRITE32 ENDSUB_LINE:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB335:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf339
    DATA8 flag339
    DIVF F.1 2.0 tmpf339
    CP_EQF 0.0 2.0 flag339
    SELECTF flag339 0.0 tmpf339 F.0

    JR_LTF F.0 50.0 whilebody330
  endwhile330:
  while340:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile340
  whilebody340:
    WRITE32 ENDSUB_LINE:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB342:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody340
  endwhile340:
    WRITE32 ENDSUB_RIGHT:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB344:
    CALL MOTOR.RESETCOUNT 'BC'
  while346:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf350
    DATA8 flag350
    DIVF F.1 2.0 tmpf350
    CP_EQF 0.0 2.0 flag350
    SELECTF flag350 0.0 tmpf350 F.0

    JR_GTEQF F.0 170.0 endwhile346
  whilebody346:
    WRITE32 ENDSUB_LINE:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB351:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf355
    DATA8 flag355
    DIVF F.1 2.0 tmpf355
    CP_EQF 0.0 2.0 flag355
    SELECTF flag355 0.0 tmpf355 F.0

    JR_LTF F.0 170.0 whilebody346
  endwhile346:
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
  while356:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or357
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile356
  or357:
  whilebody356:
    WRITE32 ENDSUB_LINE:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB360:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody356
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody356
  endwhile356:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB1:
SUB_STOLB2:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB364:
    MOVEF_F 250.0 VMM_M
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
    DATAF tmpf365
    DATA8 flag365
    DIVF VMM_M 257.48 tmpf365
    CP_EQF 0.0 257.48 flag365
    SELECTF flag365 0.0 tmpf365 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while368:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile368
  whilebody368:
    WRITE32 ENDSUB_LINE:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB370:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody368
  endwhile368:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB2:
SUB_STOLB3:
    WRITE32 ENDSUB_RIGHT:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB373:
    CALL MOTOR.RESETCOUNT 'BC'
  while375:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf379
    DATA8 flag379
    DIVF F.1 2.0 tmpf379
    CP_EQF 0.0 2.0 flag379
    SELECTF flag379 0.0 tmpf379 F.0

    JR_GTEQF F.0 50.0 endwhile375
  whilebody375:
    WRITE32 ENDSUB_LINE:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB380:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf384
    DATA8 flag384
    DIVF F.1 2.0 tmpf384
    CP_EQF 0.0 2.0 flag384
    SELECTF flag384 0.0 tmpf384 F.0

    JR_LTF F.0 50.0 whilebody375
  endwhile375:
  while385:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile385
  whilebody385:
    WRITE32 ENDSUB_LINE:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB387:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody385
  endwhile385:
    WRITE32 ENDSUB_LEFT:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB389:
    CALL MOTOR.RESETCOUNT 'BC'
  while391:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 2.0 tmpf395
    CP_EQF 0.0 2.0 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    JR_GTEQF F.0 170.0 endwhile391
  whilebody391:
    WRITE32 ENDSUB_LINE:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB396:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf400
    DATA8 flag400
    DIVF F.1 2.0 tmpf400
    CP_EQF 0.0 2.0 flag400
    SELECTF flag400 0.0 tmpf400 F.0

    JR_LTF F.0 170.0 whilebody391
  endwhile391:
    MOVEF_F 1.0 VK_M
    MOVEF_F 35.0 VV_M
  while401:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or402
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile401
  or402:
  whilebody401:
    WRITE32 ENDSUB_LINE:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody401
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody401
  endwhile401:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB3:
SUB_TOPRIGHT:
    MOVEF_F 37.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB409:
    MOVEF_F 75.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB410:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB411:
    WRITE32 ENDSUB_CLOSE:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB412:
    MOVEF_F 10.0 VMM_2
    MOVEF_F 25.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB413:
    MOVEF_F 75.0 VGRAD_4
    MOVEF_F -30.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB414:
    MOVEF_F 37.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB415:
RETSUB_TOPRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPRIGHT:
SUB_TOPLEFT:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB416:
    MOVEF_F 77.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB417:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB418:
    WRITE32 ENDSUB_CLOSE:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB419:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 25.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB420:
    MOVEF_F 77.0 VGRAD_3
    MOVEF_F -30.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB421:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB422:
RETSUB_TOPLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPLEFT:
SUB_COLOR_2:
    DATA8 layer423
	DATA8 no423
	DATA8 mode8423
	
	MOVEF_8 VPORT_7 no423
	SUB8 no423 1 no423
	DIV8 no423 4 layer423
	MATH MOD8 no423 4 no423

	MOVEF_8 2.0 mode8423
	
	INPUT_DEVICE READY_RAW layer423 no423 0 mode8423 0
    DATA32 milliseconds424
	MOVEF_32 200.0 milliseconds424
	DATA32 timer424
	TIMER_WAIT milliseconds424 timer424
	TIMER_READY timer424
    CALL SENSOR.READRAWVALUE VPORT_7 0.0 VEVCOL_7
    DATA8 layer426
	DATA8 no426
	DATA8 mode8426
	
	MOVEF_8 VPORT_7 no426
	SUB8 no426 1 no426
	DIV8 no426 4 layer426
	MATH MOD8 no426 4 no426

	MOVEF_8 4.0 mode8426
	
	INPUT_DEVICE READY_RAW layer426 no426 0 mode8426 0
    DATA32 milliseconds427
	MOVEF_32 200.0 milliseconds427
	DATA32 timer427
	TIMER_WAIT milliseconds427 timer427
	TIMER_READY timer427
    CALL SENSOR.READRAW VPORT_7 2.0 VA_7
    CALL ARRAYGET_FLOAT 0.0 F.0 VA_7
    DATAF tmpf430
    DATA8 flag430
    DIVF F.0 255.0 tmpf430
    CP_EQF 0.0 255.0 flag430
    SELECTF flag430 0.0 tmpf430 VR_7

    CALL ARRAYGET_FLOAT 1.0 F.0 VA_7
    DATAF tmpf432
    DATA8 flag432
    DIVF F.0 255.0 tmpf432
    CP_EQF 0.0 255.0 flag432
    SELECTF flag432 0.0 tmpf432 VG_7

    CALL ARRAYGET_FLOAT 2.0 VB_7 VA_7
    WRITE32 ENDSUB_WRITEF:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WRITEF
CALLSUB434:
    JR_EQF VEVCOL_7 5.0 else435_1
    JR_LTEQF VG_7 0.016 else435_1
    JR_GTEQF VG_7 0.025 else435_1
    MOVEF_F 1.0 VCOL_7
    JR endif435
  else435_1:
    JR_EQF VEVCOL_7 5.0 else435_2
    JR_LTEQF VG_7 0.025 else435_2
    MOVEF_F 6.0 VCOL_7
    JR endif435
  else435_2:
    JR_NEQF VEVCOL_7 5.0 else435_3
    MOVEF_F 5.0 VCOL_7
    JR endif435
  else435_3:
    MOVEF_F 0.0 VCOL_7
  else435_4:
  endif435:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VR_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VG_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 2.0 S.0
    STRINGS VALUE_FORMATTED VEVCOL_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 100.0 2.0 S.0
    JR_NEQF VCOL_7 1.0 else443_1
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif443
  else443_1:
    JR_NEQF VCOL_7 5.0 else443_2
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif443
  else443_2:
    JR_NEQF VCOL_7 6.0 else443_3
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif443
  else443_3:
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
  else443_4:
  endif443:
RETSUB_COLOR_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_2:
SUB_START_2:
    MOVEF_F VSTART_8 VSTRT_M
    JR_NEQF VSTART_8 1.0 else448_1
    MOVEF_F 2.0 VFINISH_M
    JR endif448
  else448_1:
    MOVEF_F 1.0 VFINISH_M
  else448_2:
  endif448:
    JR_NEQF VSTART_8 1.0 else449_1
    MOVEF_F 145.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB450:
    MOVEF_F 45.0 VGRAD_3
    MOVEF_F 80.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB451:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB452:
    MOVEF_F 900.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB453:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB454:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB455:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB456:
    MOVEF_F 270.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB457:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB458:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB459:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB460:
    JR endif449
  else449_1:
    MOVEF_F 60.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB461:
    MOVEF_F 60.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB462:
    MOVEF_F 1.0 VFINISH_8
  else449_2:
  endif449:
RETSUB_START_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_2:
SUB_CUBE:
    DATA32 milliseconds463
	MOVEF_32 300.0 milliseconds463
	DATA32 timer463
	TIMER_WAIT milliseconds463 timer463
	TIMER_READY timer463
    ADDF VID_M 1.0 VID_M
    JR_EQF VID_M 1.0 or466
    JR_EQF VID_M 2.0 or466
    JR_EQF VID_M 3.0 or466
    JR_EQF VID_M 4.0 or466
    JR_EQF VID_M 5.0 or466
    JR_EQF VID_M 6.0 or466
    JR_EQF VID_M 7.0 or466
    JR_EQF VID_M 9.0 or466
    JR_NEQF VID_M 10.0 else465_1
  or466:
    MOVEF_F 4.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB467:
    MOVEF_F VCOL_7 VCOL_M
    JR endif465
  else465_1:
    MOVEF_F 1.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB468:
    MOVEF_F VCOL_7 VCOL_M
  else465_2:
  endif465:
    JR_NEQF VCOL_M 1.0 else469_1
    JR_EQF VNIGA_M 1.0 else470_1
    JR_EQF VID_M 1.0 or472
    JR_EQF VID_M 3.0 or472
    JR_EQF VID_M 4.0 or472
    JR_EQF VID_M 5.0 or472
    JR_EQF VID_M 6.0 or472
    JR_EQF VID_M 7.0 or472
    JR_NEQF VID_M 10.0 else471_1
  or472:
    WRITE32 ENDSUB_RIGHTNIGA:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHTNIGA
CALLSUB473:
    JR endif471
  else471_1:
    JR_EQF VID_M 12.0 or474
    JR_NEQF VID_M 8.0 else471_2
  or474:
    MOVEF_F 125.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB475:
    MOVEF_F 112.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB476:
    DATA32 tmp477
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp477
    JR_NEQ32 0 tmp477 alreadylaunched477
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched477:
    MOVEF_F 112.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB478:
    MOVEF_F 125.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB479:
    JR endif471
  else471_2:
    JR_NEQF VID_M 11.0 else471_3
    MOVEF_F 240.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB480:
    MOVEF_F 52.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB481:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB482:
    DATA32 tmp483
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp483
    JR_NEQ32 0 tmp483 alreadylaunched483
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched483:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB484:
    MOVEF_F 44.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB485:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB486:
    JR endif471
  else471_3:
    MOVEF_F 95.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB487:
    MOVEF_F 90.0 VGRAD_6
    MOVEF_F 50.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB488:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB489:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB490:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB491:
    MOVEF_F 97.0 VGRAD_5
    MOVEF_F 50.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB492:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB493:
  else471_4:
  endif471:
    MOVEF_F 1.0 VNIGA_M
  else470_1:
  endif470:
    JR endif469
  else469_1:
    JR_NEQF VCOL_M 5.0 else469_2
    JR_EQF VID_M 12.0 or495
    JR_NEQF VID_M 11.0 else494_1
  or495:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB496:
    MOVEF_F 45.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB497:
    WRITE32 ENDSUB_WATER:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB498:
    MOVEF_F 45.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB499:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB500:
    JR endif494
  else494_1:
    JR_EQF VID_M 2.0 or501
    JR_NEQF VID_M 9.0 else494_2
  or501:
    WRITE32 ENDSUB_WATER:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB502:
    JR endif494
  else494_2:
    DATA32 tmp503
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp503
    JR_NEQ32 0 tmp503 alreadylaunched503
    OBJECT_START TWATER
  alreadylaunched503:
  else494_3:
  endif494:
    ADDF VRD_M 1.0 VRD_M
    JR endif469
  else469_2:
    JR_NEQF VCOL_M 6.0 else469_3
    JR_EQF VID_M 1.0 or506
    JR_NEQF VID_M 2.0 else505_1
  or506:
    MOVEF_F 1.0 VZONE_M
    JR endif505
  else505_1:
    JR_EQF VID_M 3.0 or507
    JR_NEQF VID_M 4.0 else505_2
  or507:
    MOVEF_F 2.0 VZONE_M
    JR endif505
  else505_2:
    JR_EQF VID_M 5.0 or508
    JR_NEQF VID_M 12.0 else505_3
  or508:
    MOVEF_F 3.0 VZONE_M
    JR endif505
  else505_3:
    JR_EQF VID_M 6.0 or509
    JR_NEQF VID_M 7.0 else505_4
  or509:
    MOVEF_F 4.0 VZONE_M
    JR endif505
  else505_4:
    JR_EQF VID_M 8.0 or510
    JR_NEQF VID_M 9.0 else505_5
  or510:
    MOVEF_F 5.0 VZONE_M
    JR endif505
  else505_5:
    JR_EQF VID_M 10.0 or511
    JR_NEQF VID_M 11.0 else505_6
  or511:
    MOVEF_F 6.0 VZONE_M
  else505_6:
  endif505:
    JR_NEQF VZN1_M 0.0 else512_1
    MOVEF_F VZONE_M VZN1_M
    JR endif512
  else512_1:
    JR_NEQF VZN2_M 0.0 else512_2
    JR_EQF VZONE_M VZN1_M else513_1
    MOVEF_F VZONE_M VZN2_M
  else513_1:
  endif513:
  else512_2:
  endif512:
  else469_3:
  endif469:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_VIRAV_1:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds515
	MOVEF_32 300.0 milliseconds515
	DATA32 timer515
	TIMER_WAIT milliseconds515 timer515
	TIMER_READY timer515
  while516:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or517
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile516
  or517:
  whilebody516:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody516
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody516
  endwhile516:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VSP_9 0.0 else535_1
    MOVEF_F -20.0 VSP_9
    JR endif535
  else535_1:
    MOVEF_F 20.0 VSP_9
  else535_2:
  endif535:
RETSUB_VIRAV_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENAPPEND       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_APPEND fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall SENSOR.READRAW            // FFA
{
	IN_F port
	IN_F values
	IN_16 resultarray
	
	DATA8 layer
	DATA8 no
	DATA32 values32
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 values values32

	JR_LTEQ32 values32 0 arrayempty
	ARRAY RESIZE resultarray values32

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 i
	DATA32 rawtmp
	MOVE32_32 0 i
loop:
	DATA8 tmp8
	DATAF tmpf

	MOVEF_F 0.0 tmpf
	JR_GTEQ32 i 8 nomoredata

	MOVE32_8 i tmp8
	READ32 rawvalue0 tmp8 rawtmp
	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp tmpf

nomoredata:	
	ARRAY_WRITE resultarray i tmpf

	ADD32 i 1 i
	JR_LT32 i values32 loop
	RETURN

arrayempty:
	ARRAY RESIZE resultarray 0
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MATH.GETRANDOMNUMBER   // FF
{
	IN_F range
	OUT_F result
	
	DATA16 range_16
	DATA16 value
	MOVEF_16 range range_16
	
	RANDOM 1 range_16 value
	MOVE16_F value result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
