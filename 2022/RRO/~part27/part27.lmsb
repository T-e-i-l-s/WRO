DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VF_M
DATAF VMIN1_M
DATAF VMIN2_M
DATAF VMAX1_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VMAXR_M
DATAF VMINR_M
DATAF VMAXW_M
DATAF VMINW_M
DATAF VMAXB_M
DATAF VMINB_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VEVCOL_M
DATAF VEVGRE_M
DATAF VRD_M
DATAF VZN1_M
DATAF VZN2_M
DATAF VNIGA_M
DATAF VCOL_M
DATAF VZONE_M
ARRAY16 VZONES_M 2
DATAF VDPZN_M
DATAF VFIN_M
DATAF VQ_M
DATAF VZN_M
DATAF VTIME_M
DATAF VL_1
DATAF VNSP_1
DATAF VSP_1
DATAF VA_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VNSP_3
DATAF VL_3
DATAF VDEL_3
DATAF VSP_3
DATAF VGRAD_4
DATAF VNSP_4
DATAF VL_4
DATAF VDEL_4
DATAF VSP_4
DATAF VGRAD_5
DATAF VNSP_5
DATAF VL_5
DATAF VDEL_5
DATAF VSP_5
DATAF VU_5
DATAF VGRAD_6
DATAF VNSP_6
DATAF VL_6
DATAF VDEL_6
DATAF VSP_6
DATAF VU_6
DATAF VPORT_7
DATAF VCOL_7
DATAF VH_7
DATAF VJ_7
ARRAY16 VA_7 2
DATAF VSRED_7
DATAF VSGREEN_7
DATAF VSBLUE_7
DATAF VMAX_7
DATAF VMIN_7
DATAF VS_7
DATAF VV_7
DATAF VSTART_8
DATAF VFINISH_8
DATAF VSP_9
DATAF VSTIME_9
DATAF VSTRT_M
DATAF VFINISH_M
DATA32 RUNCOUNTER_SLOWTOPNIGA
DATA32 RUNCOUNTER_WATER
DATA32 RUNCOUNTER_DOWNNIGA
DATA32 RUNCOUNTER_RESETD
DATA32 RUNCOUNTER_TOPNIGA

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYCREATE_FLOAT VZONES_M
    MOVEF_F 0.0 VDPZN_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYCREATE_FLOAT VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    MOVEF_F 0.0 VSTRT_M
    MOVEF_F 0.0 VFINISH_M
    MOVE32_32 0 RUNCOUNTER_SLOWTOPNIGA
    MOVE32_32 0 RUNCOUNTER_WATER
    MOVE32_32 0 RUNCOUNTER_DOWNNIGA
    MOVE32_32 0 RUNCOUNTER_RESETD
    MOVE32_32 0 RUNCOUNTER_TOPNIGA
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TSLOWTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_SLOWTOPNIGA 0
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA -1 RUNCOUNTER_SLOWTOPNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TWATER
{
    DATA32 tmp
  launch:
    CALL PROGRAM_WATER 1
    CALL GETANDINC32 RUNCOUNTER_WATER -1 RUNCOUNTER_WATER tmp
    JR_GT32 tmp 1 launch
}
vmthread TDOWNNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWNNIGA 2
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA -1 RUNCOUNTER_DOWNNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TRESETD
{
    DATA32 tmp
  launch:
    CALL PROGRAM_RESETD 3
    CALL GETANDINC32 RUNCOUNTER_RESETD -1 RUNCOUNTER_RESETD tmp
    JR_GT32 tmp 1 launch
}
vmthread TTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TOPNIGA 4
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA -1 RUNCOUNTER_TOPNIGA tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_SLOWTOPNIGA
subcall PROGRAM_WATER
subcall PROGRAM_DOWNNIGA
subcall PROGRAM_RESETD
subcall PROGRAM_TOPNIGA
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1024
    WRITE32 ENDSUB_SLOWTOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SLOWTOPNIGA
  dispatch1024:
    JR_NEQ32 SUBPROGRAM 1 dispatch1025
    WRITE32 ENDSUB_WATER:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
  dispatch1025:
    JR_NEQ32 SUBPROGRAM 2 dispatch1026
    WRITE32 ENDSUB_DOWNNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
  dispatch1026:
    JR_NEQ32 SUBPROGRAM 3 dispatch1027
    WRITE32 ENDSUB_RESETD:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RESETD
  dispatch1027:
    JR_NEQ32 SUBPROGRAM 4 dispatch1028
    WRITE32 ENDSUB_TOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
  dispatch1028:
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VZONES_M
    MOVEF_F 0.0 VDPZN_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    TIMER_READ timeMC1
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL EV3FILE.OPENREAD 'colib.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    CALL EV3FILE.OPENREAD 'RROtesting/col1.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXB_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINB_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VID_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.0 VRD_M
    CALL MOTOR.RESETCOUNT 'D'
    DATA8 layer428
	DATA8 no428
	DATA8 mode8428
	
	MOVEF_8 1.0 no428
	SUB8 no428 1 no428
	DIV8 no428 4 layer428
	MATH MOD8 no428 4 no428

	MOVEF_8 4.0 mode8428
	
	INPUT_DEVICE READY_RAW layer428 no428 0 mode8428 0
    DATA8 layer429
	DATA8 no429
	DATA8 mode8429
	
	MOVEF_8 4.0 no429
	SUB8 no429 1 no429
	DIV8 no429 4 layer429
	MATH MOD8 no429 4 no429

	MOVEF_8 4.0 mode8429
	
	INPUT_DEVICE READY_RAW layer429 no429 0 mode8429 0
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VCOL_M
    DATA32 tmp595
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp595
    JR_NEQ32 0 tmp595 alreadylaunched595
    OBJECT_START TDOWNNIGA
  alreadylaunched595:
    MOVEF_F 2.0 VSTART_8
    WRITE32 ENDSUB_START_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_2
CALLSUB596:
    MOVEF_F VFINISH_8 VFIN_M
    MOVEF_F 900.0 VL_1
    MOVEF_F 90.0 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB597:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VSP_M
  while599:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or600
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile599
  or600:
  whilebody599:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody599
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody599
  endwhile599:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 110.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB615:
    MOVEF_F 94.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB616:
    MOVEF_F -80.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB617:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB618:
    MOVEF_F 80.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB619:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while621:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or622
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile621
  or622:
  whilebody621:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody621
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody621
  endwhile621:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB637:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while639:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or640
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile639
  or640:
  whilebody639:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody639
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody639
  endwhile639:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB655:
    CALL MOTOR.RESETCOUNT 'BC'
  while657:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf661
    DATA8 flag661
    DIVF F.1 2.0 tmpf661
    CP_EQF 0.0 2.0 flag661
    SELECTF flag661 0.0 tmpf661 F.0

    JR_GTEQF F.0 50.0 endwhile657
  whilebody657:
    WRITE32 ENDSUB_LINE:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB662:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf666
    DATA8 flag666
    DIVF F.1 2.0 tmpf666
    CP_EQF 0.0 2.0 flag666
    SELECTF flag666 0.0 tmpf666 F.0

    JR_LTF F.0 50.0 whilebody657
  endwhile657:
  while667:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile667
  whilebody667:
    WRITE32 ENDSUB_LINE:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB669:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody667
  endwhile667:
    WRITE32 ENDSUB_LEFT:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB671:
    CALL MOTOR.RESETCOUNT 'BC'
  while673:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf677
    DATA8 flag677
    DIVF F.1 2.0 tmpf677
    CP_EQF 0.0 2.0 flag677
    SELECTF flag677 0.0 tmpf677 F.0

    JR_GTEQF F.0 170.0 endwhile673
  whilebody673:
    WRITE32 ENDSUB_SEN1:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB678:
    SUBF VS1_M 24.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf689
    DATA8 flag689
    DIVF F.1 2.0 tmpf689
    CP_EQF 0.0 2.0 flag689
    SELECTF flag689 0.0 tmpf689 F.0

    JR_LTF F.0 170.0 whilebody673
  endwhile673:
  while690:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or691
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile690
  or691:
  whilebody690:
    WRITE32 ENDSUB_SEN1:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB694:
    SUBF VS1_M 24.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody690
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody690
  endwhile690:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 225.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB705 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB705:
    WRITE32 ENDSUB_CUBE:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB706:
    MOVEF_F 380.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB707:
    WRITE32 ENDSUB_CUBE:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB708:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB709:
    WRITE32 ENDSUB_CUBE:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB710:
    MOVEF_F 113.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB711:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB712:
    MOVEF_F -40.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB713:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB714:
    WRITE32 ENDSUB_CUBE:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB715:
    MOVEF_F 405.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB716 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB716:
    WRITE32 ENDSUB_CUBE:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB717:
    MOVEF_F 395.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB718:
    WRITE32 ENDSUB_CUBE:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB719:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB720 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB720:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB721 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB721:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB722:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB723:
    MOVEF_F 81.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB724:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB725:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB726:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB727 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB727:
    WRITE32 ENDSUB_CUBE:CALLSUB728 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB728:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB729 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB729:
    WRITE32 ENDSUB_CUBE:CALLSUB730 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB730:
    MOVEF_F 114.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB731:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB732:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB733:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB734:
    WRITE32 ENDSUB_CUBE:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB735:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB736:
    WRITE32 ENDSUB_CUBE:CALLSUB737 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB737:
    JR_LTF VRD_M 2.0 or739
    JR_NEQF VNIGA_M 1.0 or739
    JR_EQF VZN1_M 0.0 or739
    JR_NEQF VZN2_M 0.0 else738_1
  or739:
    MOVEF_F 33.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB740:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB741:
    MOVEF_F 350.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB742:
    WRITE32 ENDSUB_CUBE:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB743:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB744:
    WRITE32 ENDSUB_CUBE:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB745:
    MOVEF_F 17.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB746:
    MOVEF_F 15.0 VGRAD_3
    MOVEF_F -90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB747:
    MOVEF_F 730.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB748:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB749:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB750 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB750:
    JR endif738
  else738_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB751 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB751:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB752:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB753:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB754:
  else738_2:
  endif738:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while756:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or757
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile756
  or757:
  whilebody756:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody756
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody756
  endwhile756:
  while762:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 or763
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile762
  or763:
  whilebody762:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 whilebody762
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody762
  endwhile762:
    WRITE32 ENDSUB_LEFT:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB768:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
  while769:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 or770
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile769
  or770:
  whilebody769:
    WRITE32 ENDSUB_LINE:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB773:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody769
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody769
  endwhile769:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.6 VK_M
    MOVEF_F 60.0 VV_M
  while777:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or778
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile777
  or778:
  whilebody777:
    WRITE32 ENDSUB_LINE:CALLSUB781 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB781:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody777
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody777
  endwhile777:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB785 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB785:
    DATA32 tmp786
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp786
    JR_NEQ32 0 tmp786 alreadylaunched786
    OBJECT_START TDOWNNIGA
  alreadylaunched786:
  while787:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or788
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile787
  or788:
  whilebody787:
    WRITE32 ENDSUB_LINE:CALLSUB791 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB791:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody787
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody787
  endwhile787:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB795 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB795:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB796:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while798:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or799
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile798
  or799:
  whilebody798:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody798
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody798
  endwhile798:
  while804:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 or805
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile804
  or805:
  whilebody804:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 whilebody804
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody804
  endwhile804:
    WRITE32 ENDSUB_LEFT:CALLSUB810 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB810:
  while811:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or812
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile811
  or812:
  whilebody811:
    WRITE32 ENDSUB_LINE:CALLSUB815 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB815:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody811
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody811
  endwhile811:
    CALL MOTOR.STOP 'BC' 'true'
    JR_EQF VDPZN_M 1.0 or820
    JR_NEQF VDPZN_M 2.0 else819_1
  or820:
    WRITE32 ENDSUB_STOLB3:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB3
CALLSUB821:
    JR endif819
  else819_1:
    JR_EQF VDPZN_M 6.0 or822
    JR_NEQF VDPZN_M 3.0 else819_2
  or822:
    WRITE32 ENDSUB_STOLB2:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB2
CALLSUB823:
    JR endif819
  else819_2:
    JR_EQF VDPZN_M 4.0 or824
    JR_NEQF VDPZN_M 5.0 else819_3
  or824:
    WRITE32 ENDSUB_STOLB1:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB1
CALLSUB825:
  else819_3:
  endif819:
    JR_EQF VDPZN_M 2.0 or827
    JR_EQF VDPZN_M 3.0 or827
    JR_NEQF VDPZN_M 4.0 else826_1
  or827:
    WRITE32 ENDSUB_LINE2:CALLSUB828 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB828:
    JR endif826
  else826_1:
    WRITE32 ENDSUB_LINE1:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB829:
  else826_2:
  endif826:
    WRITE32 ENDSUB_TOPLEFT:CALLSUB830 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPLEFT
CALLSUB830:
    JR_EQF VDPZN_M 2.0 or832
    JR_EQF VDPZN_M 3.0 or832
    JR_NEQF VDPZN_M 4.0 else831_1
  or832:
    WRITE32 ENDSUB_BLINE2:CALLSUB833 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE2
CALLSUB833:
    JR endif831
  else831_1:
    WRITE32 ENDSUB_BLINE1:CALLSUB834 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE1
CALLSUB834:
  else831_2:
  endif831:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB835 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB835:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while837:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or838
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile837
  or838:
  whilebody837:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody837
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody837
  endwhile837:
  while843:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 or844
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile843
  or844:
  whilebody843:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 whilebody843
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody843
  endwhile843:
    WRITE32 ENDSUB_LEFT:CALLSUB849 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB849:
    JR_EQF VDPZN_M 1.0 or851
    JR_NEQF VDPZN_M 2.0 else850_1
  or851:
  while852:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or853
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile852
  or853:
  whilebody852:
    WRITE32 ENDSUB_LINE:CALLSUB856 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB856:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody852
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody852
  endwhile852:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_LEFT:CALLSUB860 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB860:
  while861:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or862
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile861
  or862:
  whilebody861:
    WRITE32 ENDSUB_LINE:CALLSUB865 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB865:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody861
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody861
  endwhile861:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB869 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB869:
    JR endif850
  else850_1:
    JR_EQF VDPZN_M 6.0 or870
    JR_NEQF VDPZN_M 3.0 else850_2
  or870:
  while871:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or872
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile871
  or872:
  whilebody871:
    WRITE32 ENDSUB_LINE:CALLSUB875 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB875:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody871
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody871
  endwhile871:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB879 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB879:
    JR endif850
  else850_2:
    JR_EQF VDPZN_M 4.0 or880
    JR_NEQF VDPZN_M 5.0 else850_3
  or880:
  while881:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or882
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile881
  or882:
  whilebody881:
    WRITE32 ENDSUB_LINE:CALLSUB885 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB885:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody881
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody881
  endwhile881:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB889 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB889:
  while890:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or891
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile890
  or891:
  whilebody890:
    WRITE32 ENDSUB_LINE:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB894:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody890
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody890
  endwhile890:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_LEFT:CALLSUB898 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB898:
  else850_3:
  endif850:
    DATA32 tmp899
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp899
    JR_NEQ32 0 tmp899 alreadylaunched899
    OBJECT_START TDOWNNIGA
  alreadylaunched899:
  while900:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or901
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile900
  or901:
  whilebody900:
    WRITE32 ENDSUB_LINE:CALLSUB904 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB904:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody900
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody900
  endwhile900:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB908:
    MOVEF_F 100.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB909 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB909:
    DATA32 tmp910
    CALL GETANDINC32 RUNCOUNTER_RESETD 1  RUNCOUNTER_RESETD tmp910
    JR_NEQ32 0 tmp910 alreadylaunched910
    OBJECT_START TRESETD
  alreadylaunched910:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB911 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB911:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB912 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB912:
    MOVEF_F 100.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB913 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB913:
    MOVEF_F 800.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB914 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB914:
    MOVEF_F 50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB915 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB915:
    MOVEF_F 30.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB916 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB916:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN1_M 0.0 else917_1
  while918:
    JR_EQF VQ_M 1.0 endwhile918
  whilebody918:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN1_M
    CALL ARRAYGET_FLOAT VZN1_M F.0 VZONES_M
    JR_EQF F.0 1.0 else920_1
    MOVEF_F 1.0 VQ_M
  else920_1:
  endif920:
    JR_NEQF VQ_M 1.0 whilebody918
  endwhile918:
  else917_1:
  endif917:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN2_M 0.0 else922_1
  while923:
    JR_EQF VQ_M 1.0 endwhile923
  whilebody923:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN2_M
    CALL ARRAYGET_FLOAT VZN2_M F.0 VZONES_M
    JR_EQF F.0 1.0 else925_1
    MOVEF_F 1.0 VQ_M
  else925_1:
  endif925:
    JR_NEQF VQ_M 1.0 whilebody923
  endwhile923:
  else922_1:
  endif922:
    MOVEF_F 186.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB927 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB927:
    DATA32 tmp928
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp928
    JR_NEQ32 0 tmp928 alreadylaunched928
    OBJECT_START TTOPNIGA
  alreadylaunched928:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB929 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB929:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB930 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB930:
    MOVEF_F 226.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB931 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB931:
    DATA32 tmp932
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp932
    JR_NEQ32 0 tmp932 alreadylaunched932
    OBJECT_START TDOWNNIGA
  alreadylaunched932:
    JR_EQF VZN1_M 1.0 or934
    JR_NEQF VZN2_M 1.0 else933_1
  or934:
    WRITE32 ENDSUB_Z1:CALLSUB935 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB935:
    MOVEF_F 1.0 VZONE1_M
    JR endif933
  else933_1:
    JR_EQF VZN1_M 6.0 or936
    JR_NEQF VZN2_M 6.0 else933_2
  or936:
    WRITE32 ENDSUB_Z6:CALLSUB937 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB937:
    MOVEF_F 6.0 VZONE1_M
    JR endif933
  else933_2:
    JR_EQF VZN1_M 5.0 or938
    JR_NEQF VZN2_M 5.0 else933_3
  or938:
    WRITE32 ENDSUB_Z5:CALLSUB939 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB939:
    MOVEF_F 5.0 VZONE1_M
    JR endif933
  else933_3:
    JR_EQF VZN1_M 2.0 or940
    JR_NEQF VZN2_M 2.0 else933_4
  or940:
    WRITE32 ENDSUB_Z2:CALLSUB941 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB941:
    MOVEF_F 2.0 VZONE1_M
    JR endif933
  else933_4:
    JR_EQF VZN1_M 3.0 or942
    JR_NEQF VZN2_M 3.0 else933_5
  or942:
    WRITE32 ENDSUB_Z3:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB943:
    MOVEF_F 3.0 VZONE1_M
    JR endif933
  else933_5:
    JR_EQF VZN1_M 4.0 or944
    JR_NEQF VZN2_M 4.0 else933_6
  or944:
    WRITE32 ENDSUB_Z4:CALLSUB945 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB945:
    MOVEF_F 4.0 VZONE1_M
  else933_6:
  endif933:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while947:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile947
  whilebody947:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody947
  endwhile947:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB951:
    CALL MOTOR.STARTPOWER 'C' 40.0
  while953:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 14.0 endwhile953
  whilebody953:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 14.0 whilebody953
  endwhile953:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER 'B' 40.0
  while958:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 11.0 endwhile958
  whilebody958:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 11.0 whilebody958
  endwhile958:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf963
    DATA8 flag963
    DIVF VMM_M 257.48 tmpf963
    CP_EQF 0.0 257.48 flag963
    SELECTF flag963 0.0 tmpf963 F.0

    MULF F.0 360.0 VL_M
  while965:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf971
    DATA8 flag971
    DIVF F.1 2.0 tmpf971
    CP_EQF 0.0 2.0 flag971
    SELECTF flag971 0.0 tmpf971 F.0

    JR_GTF F.0 VL_M endwhile965
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile965
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile965
  whilebody965:
    WRITE32 ENDSUB_SEN2:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB974:
    SUBF VS2_M 14.0 VU_M
    MULF VU_M 1.7 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.7 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf988
    DATA8 flag988
    DIVF F.1 2.0 tmpf988
    CP_EQF 0.0 2.0 flag988
    SELECTF flag988 0.0 tmpf988 F.0

    JR_GTF F.0 VL_M and982
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and982
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody965
  and982:
  endwhile965:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB992 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB992:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB993 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB993:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB994 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB994:
    DATA32 milliseconds995
	MOVEF_32 200.0 milliseconds995
	DATA32 timer995
	TIMER_WAIT milliseconds995 timer995
	TIMER_READY timer995
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F -80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB996 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB996:
    MOVEF_F 346.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB997 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB997:
    JR_NEQF VZONE1_M VZN1_M else998_1
    MOVEF_F VZN2_M VZN_M
    JR endif998
  else998_1:
    JR_NEQF VZONE1_M VZN2_M else998_2
    MOVEF_F VZN1_M VZN_M
  else998_2:
  endif998:
    JR_NEQF VZN_M 1.0 else999_1
    WRITE32 ENDSUB_Z1:CALLSUB1000 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB1000:
    MOVEF_F 1.0 VZONE1_M
    JR endif999
  else999_1:
    JR_NEQF VZN_M 6.0 else999_2
    WRITE32 ENDSUB_Z6:CALLSUB1001 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB1001:
    MOVEF_F 6.0 VZONE1_M
    JR endif999
  else999_2:
    JR_NEQF VZN_M 5.0 else999_3
    WRITE32 ENDSUB_Z5:CALLSUB1002 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB1002:
    MOVEF_F 5.0 VZONE1_M
    JR endif999
  else999_3:
    JR_NEQF VZN_M 2.0 else999_4
    WRITE32 ENDSUB_Z2:CALLSUB1003 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB1003:
    MOVEF_F 2.0 VZONE1_M
    JR endif999
  else999_4:
    JR_NEQF VZN_M 3.0 else999_5
    WRITE32 ENDSUB_Z3:CALLSUB1004 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB1004:
    MOVEF_F 3.0 VZONE1_M
    JR endif999
  else999_5:
    JR_NEQF VZN_M 4.0 else999_6
    WRITE32 ENDSUB_Z4:CALLSUB1005 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB1005:
    MOVEF_F 4.0 VZONE1_M
  else999_6:
  endif999:
    DATA32 tmp1006
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp1006
    JR_NEQ32 0 tmp1006 alreadylaunched1006
    OBJECT_START TDOWNNIGA
  alreadylaunched1006:
    JR_NEQF VFIN_M 1.0 else1007_1
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1008 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1008:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1009 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1009:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB1010 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB1010:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1011 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1011:
    JR endif1007
  else1007_1:
    MOVEF_F 600.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1012 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1012:
    MOVEF_F 70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1013 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1013:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1014 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1014:
    MOVEF_F 93.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB1015 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB1015:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB1016 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB1016:
  else1007_2:
  endif1007:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    DATAF tmpf1018
    DATA8 flag1018
    DIVF F.0 1000.0 tmpf1018
    CP_EQF 0.0 1000.0 flag1018
    SELECTF flag1018 0.0 tmpf1018 VTIME_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VTIME_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 2.0 S.0
    CALL SPEAKER.NOTE 70.0 'B7' 600.0
    WRITE32 ENDSUB_FRZ:CALLSUB1023 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB1023:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf48
    DATA8 flag48
    DIVF F.0 F.1 tmpf48
    CP_EQF 0.0 F.1 flag48
    SELECTF flag48 0.0 tmpf48 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf53
    DATA8 flag53
    DIVF F.0 F.1 tmpf53
    CP_EQF 0.0 F.1 flag53
    SELECTF flag53 0.0 tmpf53 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB54:
    WRITE32 ENDSUB_SEN2:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB55:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_1
  while64:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf70
    DATA8 flag70
    DIVF F.1 2.0 tmpf70
    CP_EQF 0.0 2.0 flag70
    SELECTF flag70 0.0 tmpf70 F.0

    JR_GTF F.0 VL_1 endwhile64
  whilebody64:
    MOVEF_F 125.835016311947 VA_1
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    CALL MOTOR.GETCOUNT 'B' F.5
    MATH ABS F.5 F.4
    ADDF F.3 F.4 F.2
    DATAF tmpf77
    DATA8 flag77
    DIVF F.2 2.0 tmpf77
    CP_EQF 0.0 2.0 flag77
    SELECTF flag77 0.0 tmpf77 F.1

    SUBF VL_1 F.1 F.0
    JR_GTEQF F.0 VA_1 else71_1
    JR_LTEQF VSP_1 35.0 else71_1
    SUBF VSP_1 0.9 VSP_1
    JR_GTEQF VNSP_1 0.0 else80_1
    SUBF 0.0 VSP_1 VSP_1
  else80_1:
  endif80:
  else71_1:
  endif71:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf89
    DATA8 flag89
    DIVF F.1 2.0 tmpf89
    CP_EQF 0.0 2.0 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    JR_LTF F.0 VA_1 or83
    JR_GTEQF VSP_1 VNSP_1 else82_1
  or83:
    MATH ABS VSP_1 F.0
    ADDF F.0 0.3 VSP_1
    JR_GTEQF VNSP_1 0.0 else92_1
    SUBF 0.0 VSP_1 VSP_1
  else92_1:
  endif92:
  else82_1:
  endif82:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 10.0 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 10.0 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_LTEQF F.0 VL_1 whilebody64
  endwhile64:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf110
    DATA8 flag110
    DIVF VMM_2 257.48 tmpf110
    CP_EQF 0.0 257.48 flag110
    SELECTF flag110 0.0 tmpf110 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB113:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 130.0 'true'

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
  while116:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 21.0 endwhile116
  whilebody116:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 21.0 whilebody116
  endwhile116:
    CALL MOTOR.STOP 'bc' 'true'
  while121:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile121
  whilebody121:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB126:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 88.0845114183626 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer127
	DATA8 nos127
	DATA8 busy127
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer127 nos127
	JR_EQ8 0 nos127 motornotbusy127
  motorwaiting127:
	OUTPUT_TEST layer127 nos127 busy127
	JR_EQ8 busy127 0 motornotbusy127
	SLEEP
	JR motorwaiting127
  motornotbusy127:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer128
	DATA8 nos128
	DATA8 busy128
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer128 nos128
	JR_EQ8 0 nos128 motornotbusy128
  motorwaiting128:
	OUTPUT_TEST layer128 nos128 busy128
	JR_EQ8 busy128 0 motornotbusy128
	SLEEP
	JR motorwaiting128
  motornotbusy128:
  while129:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 21.0 endwhile129
  whilebody129:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 whilebody129
  endwhile129:
    CALL MOTOR.STOP 'bc' 'true'
  while134:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile134
  whilebody134:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody134
  endwhile134:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB139:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_2:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf141
    DATA8 flag141
    DIVF F.0 360.0 tmpf141
    CP_EQF 0.0 360.0 flag141
    SELECTF flag141 0.0 tmpf141 VL_3

    DATAF tmpf142
    DATA8 flag142
    DIVF VL_3 257.48 tmpf142
    CP_EQF 0.0 257.48 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    MULF F.0 360.0 VL_3
    DATAF tmpf144
    DATA8 flag144
    DIVF VL_3 3.0 tmpf144
    CP_EQF 0.0 3.0 flag144
    SELECTF flag144 0.0 tmpf144 VDEL_3

    MOVEF_F VNSP_3 VSP_3
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while147:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile147
  whilebody147:
    CALL MOTOR.STARTPOWER 'C' VSP_3
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody147
  endwhile147:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_3
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1142.96 VGRAD_4 F.0
    DATAF tmpf155
    DATA8 flag155
    DIVF F.0 360.0 tmpf155
    CP_EQF 0.0 360.0 flag155
    SELECTF flag155 0.0 tmpf155 VL_4

    DATAF tmpf156
    DATA8 flag156
    DIVF VL_4 257.48 tmpf156
    CP_EQF 0.0 257.48 flag156
    SELECTF flag156 0.0 tmpf156 F.0

    MULF F.0 360.0 VL_4
    DATAF tmpf158
    DATA8 flag158
    DIVF VL_4 3.0 tmpf158
    CP_EQF 0.0 3.0 flag158
    SELECTF flag158 0.0 tmpf158 VDEL_4

    MOVEF_F VNSP_4 VSP_4
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while161:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile161
  whilebody161:
    CALL MOTOR.STARTPOWER 'B' VSP_4
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody161
  endwhile161:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_4
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_5 F.1
    DATAF tmpf172
    DATA8 flag172
    DIVF F.1 360.0 tmpf172
    CP_EQF 0.0 360.0 flag172
    SELECTF flag172 0.0 tmpf172 F.0

    DATAF tmpf173
    DATA8 flag173
    DIVF F.0 2.0 tmpf173
    CP_EQF 0.0 2.0 flag173
    SELECTF flag173 0.0 tmpf173 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF VL_5 F.1 tmpf176
    CP_EQF 0.0 F.1 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    MULF F.0 360.0 VL_5
    DATAF tmpf178
    DATA8 flag178
    DIVF VL_5 3.0 tmpf178
    CP_EQF 0.0 3.0 flag178
    SELECTF flag178 0.0 tmpf178 VDEL_5

    MOVEF_F 30.0 VSP_5
    CALL MOTOR.RESETCOUNT 'BC'
  while180:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile180
  whilebody180:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_5
    MULF VU_5 0.8 F.2
    SUBF VSP_5 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_5 0.8 F.1
    ADDF VSP_5 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_5 else194_1
    JR_GTEQF VSP_5 VNSP_5 else194_1
    ADDF VSP_5 2.0 VSP_5
    JR endif194
  else194_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_5 2.0 F.1
    JR_LTEQF F.0 F.1 else194_2
    JR_LTEQF VSP_5 30.0 else194_2
    SUBF VSP_5 5.0 VSP_5
  else194_2:
  endif194:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody180
  endwhile180:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_5
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_6 F.1
    DATAF tmpf209
    DATA8 flag209
    DIVF F.1 360.0 tmpf209
    CP_EQF 0.0 360.0 flag209
    SELECTF flag209 0.0 tmpf209 F.0

    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 2.0 tmpf210
    CP_EQF 0.0 2.0 flag210
    SELECTF flag210 0.0 tmpf210 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf213
    DATA8 flag213
    DIVF VL_6 F.1 tmpf213
    CP_EQF 0.0 F.1 flag213
    SELECTF flag213 0.0 tmpf213 F.0

    MULF F.0 360.0 VL_6
    DATAF tmpf215
    DATA8 flag215
    DIVF VL_6 3.0 tmpf215
    CP_EQF 0.0 3.0 flag215
    SELECTF flag215 0.0 tmpf215 VDEL_6

    MOVEF_F 30.0 VSP_6
    CALL MOTOR.RESETCOUNT 'BC'
  while217:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_6 endwhile217
  whilebody217:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VU_6
    MULF VU_6 0.8 F.1
    SUBF VSP_6 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_6 0.8 F.2
    ADDF VSP_6 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_6 else231_1
    JR_GTEQF VSP_6 VNSP_6 else231_1
    ADDF VSP_6 2.0 VSP_6
    JR endif231
  else231_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_6 2.0 F.1
    JR_LTEQF F.0 F.1 else231_2
    JR_LTEQF VSP_6 30.0 else231_2
    SUBF VSP_6 5.0 VSP_6
  else231_2:
  endif231:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_6 whilebody217
  endwhile217:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_6
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_WRITEF:
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVCOL_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVGRE_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
RETSUB_WRITEF:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WRITEF:
SUB_TOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -60.0
    DATA32 milliseconds269
	MOVEF_32 300.0 milliseconds269
	DATA32 timer269
	TIMER_WAIT milliseconds269 timer269
	TIMER_READY timer269
  while270:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -2.0 endwhile270
  whilebody270:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -2.0 whilebody270
  endwhile270:
    CALL MOTOR.START 'A' -10.0
RETSUB_TOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPNIGA:
SUB_DOWNNIGA:
    CALL MOTOR.STARTPOWER 'A' 60.0
    DATA32 milliseconds275
	MOVEF_32 300.0 milliseconds275
	DATA32 timer275
	TIMER_WAIT milliseconds275 timer275
	TIMER_READY timer275
  while276:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 2.0 endwhile276
  whilebody276:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 2.0 whilebody276
  endwhile276:
    CALL MOTOR.STOP 'A' 'true'
RETSUB_DOWNNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNNIGA:
SUB_SLOWTOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -20.0
    DATA32 milliseconds281
	MOVEF_32 200.0 milliseconds281
	DATA32 timer281
	TIMER_WAIT milliseconds281 timer281
	TIMER_READY timer281
  while282:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile282
  whilebody282:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody282
  endwhile282:
    CALL MOTOR.START 'A' -10.0
RETSUB_SLOWTOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SLOWTOPNIGA:
SUB_WATER:
    CALL MOTOR.SCHEDULE 'D' 20.0 0.0 95.0 0.0 'true' 

	DATA8 layer286
	DATA8 nos286
	DATA8 busy286
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer286 nos286
	JR_EQ8 0 nos286 motornotbusy286
  motorwaiting286:
	OUTPUT_TEST layer286 nos286 busy286
	JR_EQ8 busy286 0 motornotbusy286
	SLEEP
	JR motorwaiting286
  motornotbusy286:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_RESETD:
    CALL MOTOR.GETCOUNT 'D' F.0
    CALL MOTOR.SCHEDULE 'D' -100.0 0.0 F.0 0.0 'true' 

	DATA8 layer289
	DATA8 nos289
	DATA8 busy289
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer289 nos289
	JR_EQ8 0 nos289 motornotbusy289
  motorwaiting289:
	OUTPUT_TEST layer289 nos289 busy289
	JR_EQ8 busy289 0 motornotbusy289
	SLEEP
	JR motorwaiting289
  motornotbusy289:
RETSUB_RESETD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RESETD:
SUB_LEFTNIGA:
    MOVEF_F 135.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB290:
    MOVEF_F 142.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB291:
    DATA32 tmp292
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp292
    JR_NEQ32 0 tmp292 alreadylaunched292
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched292:
    MOVEF_F 142.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB293:
    MOVEF_F 127.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB294:
RETSUB_LEFTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFTNIGA:
SUB_RIGHTNIGA:
    MOVEF_F 121.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB295:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB296:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB297:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB298:
    MOVEF_F 131.6 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB299:
RETSUB_RIGHTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHTNIGA:
SUB_TZ:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F 40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB300:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB301:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB302:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F -40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB303:
RETSUB_TZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TZ:
SUB_Z1:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 35.0 700.0 'true'

	DATA8 layer304
	DATA8 nos304
	DATA8 busy304
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer304 nos304
	JR_EQ8 0 nos304 motornotbusy304
  motorwaiting304:
	OUTPUT_TEST layer304 nos304 busy304
	JR_EQ8 busy304 0 motornotbusy304
	SLEEP
	JR motorwaiting304
  motornotbusy304:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB305:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -35.0 700.0 'true'

	DATA8 layer306
	DATA8 nos306
	DATA8 busy306
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer306 nos306
	JR_EQ8 0 nos306 motornotbusy306
  motorwaiting306:
	OUTPUT_TEST layer306 nos306 busy306
	JR_EQ8 busy306 0 motornotbusy306
	SLEEP
	JR motorwaiting306
  motornotbusy306:
RETSUB_Z1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z1:
SUB_Z2:
    CALL MOTOR.SCHEDULESYNC 'BC' 56.0 38.0 480.0 'true'

	DATA8 layer307
	DATA8 nos307
	DATA8 busy307
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer307 nos307
	JR_EQ8 0 nos307 motornotbusy307
  motorwaiting307:
	OUTPUT_TEST layer307 nos307 busy307
	JR_EQ8 busy307 0 motornotbusy307
	SLEEP
	JR motorwaiting307
  motornotbusy307:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB308:
    CALL MOTOR.SCHEDULESYNC 'BC' -56.0 -38.0 480.0 'true'

	DATA8 layer309
	DATA8 nos309
	DATA8 busy309
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer309 nos309
	JR_EQ8 0 nos309 motornotbusy309
  motorwaiting309:
	OUTPUT_TEST layer309 nos309 busy309
	JR_EQ8 busy309 0 motornotbusy309
	SLEEP
	JR motorwaiting309
  motornotbusy309:
RETSUB_Z2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z2:
SUB_Z3:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 23.0 350.0 'true'

	DATA8 layer310
	DATA8 nos310
	DATA8 busy310
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer310 nos310
	JR_EQ8 0 nos310 motornotbusy310
  motorwaiting310:
	OUTPUT_TEST layer310 nos310 busy310
	JR_EQ8 busy310 0 motornotbusy310
	SLEEP
	JR motorwaiting310
  motornotbusy310:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB311:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -23.0 350.0 'true'

	DATA8 layer312
	DATA8 nos312
	DATA8 busy312
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer312 nos312
	JR_EQ8 0 nos312 motornotbusy312
  motorwaiting312:
	OUTPUT_TEST layer312 nos312 busy312
	JR_EQ8 busy312 0 motornotbusy312
	SLEEP
	JR motorwaiting312
  motornotbusy312:
RETSUB_Z3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z3:
SUB_Z4:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -25.0 270.0 'true'

	DATA8 layer313
	DATA8 nos313
	DATA8 busy313
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer313 nos313
	JR_EQ8 0 nos313 motornotbusy313
  motorwaiting313:
	OUTPUT_TEST layer313 nos313 busy313
	JR_EQ8 busy313 0 motornotbusy313
	SLEEP
	JR motorwaiting313
  motornotbusy313:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB314:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 25.0 270.0 'true'

	DATA8 layer315
	DATA8 nos315
	DATA8 busy315
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer315 nos315
	JR_EQ8 0 nos315 motornotbusy315
  motorwaiting315:
	OUTPUT_TEST layer315 nos315 busy315
	JR_EQ8 busy315 0 motornotbusy315
	SLEEP
	JR motorwaiting315
  motornotbusy315:
RETSUB_Z4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z4:
SUB_Z5:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 4.0 550.0 'true'

	DATA8 layer316
	DATA8 nos316
	DATA8 busy316
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer316 nos316
	JR_EQ8 0 nos316 motornotbusy316
  motorwaiting316:
	OUTPUT_TEST layer316 nos316 busy316
	JR_EQ8 busy316 0 motornotbusy316
	SLEEP
	JR motorwaiting316
  motornotbusy316:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB317:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -4.0 550.0 'true'

	DATA8 layer318
	DATA8 nos318
	DATA8 busy318
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer318 nos318
	JR_EQ8 0 nos318 motornotbusy318
  motorwaiting318:
	OUTPUT_TEST layer318 nos318 busy318
	JR_EQ8 busy318 0 motornotbusy318
	SLEEP
	JR motorwaiting318
  motornotbusy318:
RETSUB_Z5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z5:
SUB_Z6:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 24.0 580.0 'true'

	DATA8 layer319
	DATA8 nos319
	DATA8 busy319
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer319 nos319
	JR_EQ8 0 nos319 motornotbusy319
  motorwaiting319:
	OUTPUT_TEST layer319 nos319 busy319
	JR_EQ8 busy319 0 motornotbusy319
	SLEEP
	JR motorwaiting319
  motornotbusy319:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB320:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -24.0 580.0 'true'

	DATA8 layer321
	DATA8 nos321
	DATA8 busy321
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer321 nos321
	JR_EQ8 0 nos321 motornotbusy321
  motorwaiting321:
	OUTPUT_TEST layer321 nos321 busy321
	JR_EQ8 busy321 0 motornotbusy321
	SLEEP
	JR motorwaiting321
  motornotbusy321:
RETSUB_Z6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z6:
SUB_CLOSE:
    CALL MOTOR.STARTPOWER 'A' 80.0
    DATA32 milliseconds323
	MOVEF_32 300.0 milliseconds323
	DATA32 timer323
	TIMER_WAIT milliseconds323 timer323
	TIMER_READY timer323
  while324:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 10.0 endwhile324
  whilebody324:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 10.0 whilebody324
  endwhile324:
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_LINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB327:
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB328:
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_BLINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB329:
RETSUB_BLINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE1:
SUB_BLINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB330:
RETSUB_BLINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE2:
SUB_STOLB1:
    WRITE32 ENDSUB_LEFT:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB331:
    CALL MOTOR.RESETCOUNT 'BC'
  while333:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf337
    DATA8 flag337
    DIVF F.1 2.0 tmpf337
    CP_EQF 0.0 2.0 flag337
    SELECTF flag337 0.0 tmpf337 F.0

    JR_GTEQF F.0 50.0 endwhile333
  whilebody333:
    WRITE32 ENDSUB_LINE:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB338:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf342
    DATA8 flag342
    DIVF F.1 2.0 tmpf342
    CP_EQF 0.0 2.0 flag342
    SELECTF flag342 0.0 tmpf342 F.0

    JR_LTF F.0 50.0 whilebody333
  endwhile333:
  while343:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile343
  whilebody343:
    WRITE32 ENDSUB_LINE:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB345:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody343
  endwhile343:
    WRITE32 ENDSUB_RIGHT:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB347:
    CALL MOTOR.RESETCOUNT 'BC'
  while349:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf353
    DATA8 flag353
    DIVF F.1 2.0 tmpf353
    CP_EQF 0.0 2.0 flag353
    SELECTF flag353 0.0 tmpf353 F.0

    JR_GTEQF F.0 170.0 endwhile349
  whilebody349:
    WRITE32 ENDSUB_LINE:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB354:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf358
    DATA8 flag358
    DIVF F.1 2.0 tmpf358
    CP_EQF 0.0 2.0 flag358
    SELECTF flag358 0.0 tmpf358 F.0

    JR_LTF F.0 170.0 whilebody349
  endwhile349:
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
  while359:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or360
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile359
  or360:
  whilebody359:
    WRITE32 ENDSUB_LINE:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB363:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody359
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody359
  endwhile359:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB1:
SUB_STOLB2:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB367:
    MOVEF_F 250.0 VMM_M
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
    DATAF tmpf368
    DATA8 flag368
    DIVF VMM_M 257.48 tmpf368
    CP_EQF 0.0 257.48 flag368
    SELECTF flag368 0.0 tmpf368 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while371:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile371
  whilebody371:
    WRITE32 ENDSUB_LINE:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB373:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody371
  endwhile371:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB375:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB2:
SUB_STOLB3:
    WRITE32 ENDSUB_RIGHT:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB376:
    CALL MOTOR.RESETCOUNT 'BC'
  while378:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf382
    DATA8 flag382
    DIVF F.1 2.0 tmpf382
    CP_EQF 0.0 2.0 flag382
    SELECTF flag382 0.0 tmpf382 F.0

    JR_GTEQF F.0 50.0 endwhile378
  whilebody378:
    WRITE32 ENDSUB_LINE:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB383:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf387
    DATA8 flag387
    DIVF F.1 2.0 tmpf387
    CP_EQF 0.0 2.0 flag387
    SELECTF flag387 0.0 tmpf387 F.0

    JR_LTF F.0 50.0 whilebody378
  endwhile378:
  while388:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile388
  whilebody388:
    WRITE32 ENDSUB_LINE:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB390:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody388
  endwhile388:
    WRITE32 ENDSUB_LEFT:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB392:
    CALL MOTOR.RESETCOUNT 'BC'
  while394:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf398
    DATA8 flag398
    DIVF F.1 2.0 tmpf398
    CP_EQF 0.0 2.0 flag398
    SELECTF flag398 0.0 tmpf398 F.0

    JR_GTEQF F.0 170.0 endwhile394
  whilebody394:
    WRITE32 ENDSUB_LINE:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB399:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf403
    DATA8 flag403
    DIVF F.1 2.0 tmpf403
    CP_EQF 0.0 2.0 flag403
    SELECTF flag403 0.0 tmpf403 F.0

    JR_LTF F.0 170.0 whilebody394
  endwhile394:
    MOVEF_F 1.0 VK_M
    MOVEF_F 35.0 VV_M
  while404:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or405
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile404
  or405:
  whilebody404:
    WRITE32 ENDSUB_LINE:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB408:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody404
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody404
  endwhile404:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB3:
SUB_TOPRIGHT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB412:
    MOVEF_F 47.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB413:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB414:
    DATA32 tmp415
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp415
    JR_NEQ32 0 tmp415 alreadylaunched415
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched415:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB416:
    MOVEF_F 57.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB417:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB418:
    WRITE32 ENDSUB_FRZ:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB419:
RETSUB_TOPRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPRIGHT:
SUB_TOPLEFT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB420:
    MOVEF_F 49.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB421:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB422:
    DATA32 tmp423
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp423
    JR_NEQ32 0 tmp423 alreadylaunched423
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched423:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB424:
    MOVEF_F 55.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB425:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB426:
    WRITE32 ENDSUB_FRZ:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB427:
RETSUB_TOPLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPLEFT:
SUB_COLOR_2:
    MOVEF_F 120.0 VH_7
    MOVEF_F 0.0 VJ_7
  while430:
    JR_NEQF VH_7 120.0 endwhile430
    JR_GTEQF VJ_7 20.0 endwhile430
  whilebody430:
    CALL SENSOR.READRAW VPORT_7 2.0 VA_7
    CALL ARRAYGET_FLOAT 0.0 VSRED_7 VA_7
    CALL ARRAYGET_FLOAT 1.0 VSGREEN_7 VA_7
    CALL ARRAYGET_FLOAT 2.0 VSBLUE_7 VA_7
    JR_LTEQF VSRED_7 VSGREEN_7 else435_1
    JR_LTEQF VSRED_7 VSBLUE_7 else435_1
    MOVEF_F VSRED_7 VMAX_7
    JR endif435
  else435_1:
    JR_LTEQF VSGREEN_7 VSRED_7 else435_2
    JR_LTEQF VSGREEN_7 VSBLUE_7 else435_2
    MOVEF_F VSGREEN_7 VMAX_7
    JR endif435
  else435_2:
    JR_LTEQF VSBLUE_7 VSRED_7 else435_3
    JR_LTEQF VSBLUE_7 VSGREEN_7 else435_3
    MOVEF_F VSBLUE_7 VMAX_7
  else435_3:
  endif435:
    JR_GTEQF VSRED_7 VSGREEN_7 else436_1
    JR_GTEQF VSRED_7 VSBLUE_7 else436_1
    MOVEF_F VSRED_7 VMIN_7
    JR endif436
  else436_1:
    JR_GTEQF VSGREEN_7 VSRED_7 else436_2
    JR_GTEQF VSGREEN_7 VSBLUE_7 else436_2
    MOVEF_F VSGREEN_7 VMIN_7
    JR endif436
  else436_2:
    JR_GTEQF VSBLUE_7 VSRED_7 else436_3
    JR_GTEQF VSBLUE_7 VSGREEN_7 else436_3
    MOVEF_F VSBLUE_7 VMIN_7
  else436_3:
  endif436:
    JR_NEQF VMAX_7 VMIN_7 else437_1
    MOVEF_F 0.0 VH_7
    JR endif437
  else437_1:
    JR_NEQF VSRED_7 VMAX_7 else438_1
    JR_LTF VSGREEN_7 VSBLUE_7 else439_1
    SUBF VSGREEN_7 VSBLUE_7 F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_7 VMIN_7 F.1
    DATAF tmpf443
    DATA8 flag443
    DIVF F.0 F.1 tmpf443
    CP_EQF 0.0 F.1 flag443
    SELECTF flag443 0.0 tmpf443 VH_7

    JR endif439
  else439_1:
    SUBF VSGREEN_7 VSBLUE_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf447
    DATA8 flag447
    DIVF F.1 F.2 tmpf447
    CP_EQF 0.0 F.2 flag447
    SELECTF flag447 0.0 tmpf447 F.0

    ADDF F.0 360.0 VH_7
  else439_2:
  endif439:
    JR endif438
  else438_1:
    JR_NEQF VMAX_7 VSGREEN_7 else449_1
    SUBF VSBLUE_7 VSRED_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf453
    DATA8 flag453
    DIVF F.1 F.2 tmpf453
    CP_EQF 0.0 F.2 flag453
    SELECTF flag453 0.0 tmpf453 F.0

    ADDF F.0 120.0 VH_7
    JR endif449
  else449_1:
    SUBF VSRED_7 VSGREEN_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf458
    DATA8 flag458
    DIVF F.1 F.2 tmpf458
    CP_EQF 0.0 F.2 flag458
    SELECTF flag458 0.0 tmpf458 F.0

    ADDF F.0 240.0 VH_7
  else449_2:
  endif449:
  else438_2:
  endif438:
  else437_2:
  endif437:
    ADDF VJ_7 1.0 VJ_7
    JR_NEQF VH_7 120.0 and461
    JR_LTF VJ_7 20.0 whilebody430
  and461:
  endwhile430:
    JR_NEQF VMAX_7 0.0 else462_1
    MOVEF_F 0.0 VS_7
    JR endif462
  else462_1:
    DATAF tmpf463
    DATA8 flag463
    DIVF VMIN_7 VMAX_7 tmpf463
    CP_EQF 0.0 VMAX_7 flag463
    SELECTF flag463 0.0 tmpf463 F.0

    SUBF 1.0 F.0 VS_7
  else462_2:
  endif462:
    MOVEF_F VMAX_7 VV_7
    JR_LTEQF VSRED_7 40.0 else465_1
    JR_GTEQF VSRED_7 60.0 else465_1
    MOVEF_F 4.0 VCOL_7
    JR endif465
  else465_1:
    JR_LTEQF VSGREEN_7 6.0 else465_2
    JR_GTEQF VSRED_7 25.0 else465_2
    JR_EQF VNIGA_M 1.0 else466_1
    MOVEF_F 1.0 VCOL_7
  else466_1:
  endif466:
    JR endif465
  else465_2:
    JR_LTEQF VH_7 10.0 else465_3
    JR_GTEQF VH_7 35.0 else465_3
    JR_LTEQF VV_7 10.0 else465_3
    MOVEF_F 5.0 VCOL_7
    JR endif465
  else465_3:
    JR_LTEQF VH_7 35.0 else465_4
    JR_GTEQF VH_7 90.0 else465_4
    JR_LTEQF VV_7 10.0 else465_4
    MOVEF_F 6.0 VCOL_7
    JR endif465
  else465_4:
    MOVEF_F 0.0 VCOL_7
  else465_5:
  endif465:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VV_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 2.0 S.0
    STRINGS VALUE_FORMATTED VSGREEN_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 100.0 2.0 S.0
    JR_NEQF VCOL_7 1.0 else474_1
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif474
  else474_1:
    JR_NEQF VCOL_7 5.0 else474_2
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif474
  else474_2:
    JR_NEQF VCOL_7 6.0 else474_3
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif474
  else474_3:
    JR_NEQF VCOL_7 4.0 else474_4
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
    JR endif474
  else474_4:
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
  else474_5:
  endif474:
RETSUB_COLOR_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_2:
SUB_START_2:
    MOVEF_F VSTART_8 VSTRT_M
    JR_NEQF VSTART_8 1.0 else480_1
    MOVEF_F 2.0 VFINISH_M
    JR endif480
  else480_1:
    MOVEF_F 1.0 VFINISH_M
  else480_2:
  endif480:
    JR_NEQF VSTART_8 1.0 else481_1
    MOVEF_F 145.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB482:
    MOVEF_F 40.0 VGRAD_3
    MOVEF_F 80.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB483:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB484:
    MOVEF_F 840.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB485:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 60.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB486:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 60.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB487:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB488:
    MOVEF_F 270.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB489:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB490:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB491:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB492:
    JR endif481
  else481_1:
    MOVEF_F 60.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB493:
    MOVEF_F 50.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB494:
    MOVEF_F 1.0 VFINISH_8
  else481_2:
  endif481:
RETSUB_START_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_2:
SUB_CUBE:
    DATA32 milliseconds495
	MOVEF_32 300.0 milliseconds495
	DATA32 timer495
	TIMER_WAIT milliseconds495 timer495
	TIMER_READY timer495
    ADDF VID_M 1.0 VID_M
    JR_EQF VID_M 1.0 or498
    JR_NEQF VID_M 2.0 else497_1
  or498:
    MOVEF_F 1.0 VZONE_M
    JR endif497
  else497_1:
    JR_EQF VID_M 3.0 or499
    JR_NEQF VID_M 4.0 else497_2
  or499:
    MOVEF_F 2.0 VZONE_M
    JR endif497
  else497_2:
    JR_EQF VID_M 5.0 or500
    JR_NEQF VID_M 12.0 else497_3
  or500:
    MOVEF_F 3.0 VZONE_M
    JR endif497
  else497_3:
    JR_EQF VID_M 6.0 or501
    JR_NEQF VID_M 7.0 else497_4
  or501:
    MOVEF_F 4.0 VZONE_M
    JR endif497
  else497_4:
    JR_EQF VID_M 8.0 or502
    JR_NEQF VID_M 9.0 else497_5
  or502:
    MOVEF_F 5.0 VZONE_M
    JR endif497
  else497_5:
    JR_EQF VID_M 10.0 or503
    JR_NEQF VID_M 11.0 else497_6
  or503:
    MOVEF_F 6.0 VZONE_M
  else497_6:
  endif497:
    JR_EQF VID_M 1.0 or505
    JR_EQF VID_M 2.0 or505
    JR_EQF VID_M 3.0 or505
    JR_EQF VID_M 4.0 or505
    JR_EQF VID_M 5.0 or505
    JR_EQF VID_M 6.0 or505
    JR_EQF VID_M 7.0 or505
    JR_EQF VID_M 9.0 or505
    JR_NEQF VID_M 10.0 else504_1
  or505:
    MOVEF_F 4.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB506:
    MOVEF_F VCOL_7 VCOL_M
    JR endif504
  else504_1:
    MOVEF_F 1.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB507:
    MOVEF_F VCOL_7 VCOL_M
  else504_2:
  endif504:
    JR_EQF VCOL_M 0.0 else508_1
    CALL ARRAYSTORE_FLOAT VZONE_M 1.0 VZONES_M
  else508_1:
  endif508:
    JR_NEQF VCOL_M 1.0 else510_1
    JR_EQF VNIGA_M 1.0 else511_1
    JR_EQF VID_M 1.0 or513
    JR_EQF VID_M 3.0 or513
    JR_EQF VID_M 4.0 or513
    JR_EQF VID_M 5.0 or513
    JR_EQF VID_M 6.0 or513
    JR_EQF VID_M 7.0 or513
    JR_NEQF VID_M 10.0 else512_1
  or513:
    WRITE32 ENDSUB_RIGHTNIGA:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHTNIGA
CALLSUB514:
    JR endif512
  else512_1:
    JR_EQF VID_M 12.0 or515
    JR_NEQF VID_M 8.0 else512_2
  or515:
    MOVEF_F 125.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB516:
    MOVEF_F 112.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB517:
    DATA32 tmp518
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp518
    JR_NEQ32 0 tmp518 alreadylaunched518
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched518:
    MOVEF_F 112.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB519:
    MOVEF_F 125.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB520:
    JR endif512
  else512_2:
    JR_NEQF VID_M 11.0 else512_3
    MOVEF_F 215.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB521:
    MOVEF_F 57.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB522:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB523:
    DATA32 tmp524
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp524
    JR_NEQ32 0 tmp524 alreadylaunched524
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched524:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB525:
    MOVEF_F 53.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB526:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB527:
    JR endif512
  else512_3:
    JR_NEQF VID_M 9.0 else512_4
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB528:
    MOVEF_F 57.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB529:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB530:
    DATA32 tmp531
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp531
    JR_NEQ32 0 tmp531 alreadylaunched531
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched531:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB532:
    MOVEF_F 50.5 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB533:
    MOVEF_F 237.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB534:
    JR endif512
  else512_4:
    MOVEF_F 110.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB535:
    MOVEF_F 84.0 VGRAD_6
    MOVEF_F 70.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB536:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB537:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB538:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB539:
    MOVEF_F 83.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB540:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB541:
  else512_5:
  endif512:
    MOVEF_F 1.0 VNIGA_M
    JR_EQF VID_M 4.0 or543
    JR_NEQF VID_M 7.0 else542_1
  or543:
    MOVEF_F -55.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB544:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB545:
  else542_1:
  endif542:
  else511_1:
  endif511:
    JR endif510
  else510_1:
    JR_NEQF VCOL_M 5.0 else510_2
    JR_NEQF VID_M 12.0 else546_1
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB547:
    MOVEF_F 35.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB548:
    WRITE32 ENDSUB_WATER:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB549:
    MOVEF_F 35.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB550:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB551:
    JR endif546
  else546_1:
    JR_NEQF VID_M 11.0 else546_2
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB552:
    MOVEF_F 45.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB553:
    WRITE32 ENDSUB_WATER:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB554:
    MOVEF_F 45.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB555:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB556:
    JR endif546
  else546_2:
    JR_EQF VID_M 2.0 or557
    JR_NEQF VID_M 9.0 else546_3
  or557:
    WRITE32 ENDSUB_WATER:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB558:
    JR endif546
  else546_3:
    DATA32 tmp559
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp559
    JR_NEQ32 0 tmp559 alreadylaunched559
    OBJECT_START TWATER
  alreadylaunched559:
  else546_4:
  endif546:
    ADDF VRD_M 1.0 VRD_M
    JR endif510
  else510_2:
    JR_NEQF VCOL_M 6.0 else510_3
    JR_NEQF VZN1_M 0.0 else561_1
    MOVEF_F VZONE_M VZN1_M
    JR endif561
  else561_1:
    JR_NEQF VZN2_M 0.0 else561_2
    JR_EQF VZONE_M VZN1_M else562_1
    MOVEF_F VZONE_M VZN2_M
  else562_1:
  endif562:
  else561_2:
  endif561:
    JR endif510
  else510_3:
    JR_NEQF VCOL_M 4.0 else510_4
    MOVEF_F VZONE_M VDPZN_M
  else510_4:
  endif510:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_VIRAV_1:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VSTIME_9
    DATA32 milliseconds565
	MOVEF_32 300.0 milliseconds565
	DATA32 timer565
	TIMER_WAIT milliseconds565 timer565
	TIMER_READY timer565
  while566:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or567
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile566
  or567:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_GTEQF F.0 6000.0 endwhile566
  whilebody566:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or579
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 and578
  or579:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_LTF F.0 6000.0 whilebody566
  and578:
  endwhile566:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VSP_9 0.0 else591_1
    MOVEF_F -60.0 VSP_9
    JR endif591
  else591_1:
    MOVEF_F 60.0 VSP_9
  else591_2:
  endif591:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds593
	MOVEF_32 300.0 milliseconds593
	DATA32 timer593
	TIMER_WAIT milliseconds593 timer593
	TIMER_READY timer593
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_VIRAV_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENAPPEND       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_APPEND fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAW            // FFA
{
	IN_F port
	IN_F values
	IN_16 resultarray
	
	DATA8 layer
	DATA8 no
	DATA32 values32
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 values values32

	JR_LTEQ32 values32 0 arrayempty
	ARRAY RESIZE resultarray values32

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 i
	DATA32 rawtmp
	MOVE32_32 0 i
loop:
	DATA8 tmp8
	DATAF tmpf

	MOVEF_F 0.0 tmpf
	JR_GTEQ32 i 8 nomoredata

	MOVE32_8 i tmp8
	READ32 rawvalue0 tmp8 rawtmp
	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp tmpf

nomoredata:	
	ARRAY_WRITE resultarray i tmpf

	ADD32 i 1 i
	JR_LT32 i values32 loop
	RETURN

arrayempty:
	ARRAY RESIZE resultarray 0
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MATH.GETRANDOMNUMBER   // FF
{
	IN_F range
	OUT_F result
	
	DATA16 range_16
	DATA16 value
	MOVEF_16 range range_16
	
	RANDOM 1 range_16 value
	MOVE16_F value result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
