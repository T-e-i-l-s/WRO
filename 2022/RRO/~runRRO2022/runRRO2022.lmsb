DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VDOP_M
DATAF VF_M
DATAF VMIN1_M
DATAF VMIN2_M
DATAF VMAX1_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VMAXR_M
DATAF VMINR_M
DATAF VMAXW_M
DATAF VMINW_M
DATAF VMAXB_M
DATAF VMINB_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VEVCOL_M
DATAF VEVGRE_M
DATAF VRD_M
DATAF VWHITE1_M
DATAF VWHITE2_M
DATAF VZN1_M
DATAF VZN2_M
DATAF VNIGA_M
DATAF VCOL_M
DATAF VZONE_M
ARRAY16 VZONES_M 2
DATAF VDOPZONE_M
DATAF VWTR_M
DATAF VI_M
DATAF VFREEZONE_M
DATAF VFIN_M
DATAF VQ_M
DATAF VZN_M
DATAF VL_1
DATAF VNSP_1
DATAF VSP_1
DATAF VA_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VNSP_3
DATAF VL_3
DATAF VDEL_3
DATAF VSP_3
DATAF VGRAD_4
DATAF VNSP_4
DATAF VL_4
DATAF VDEL_4
DATAF VSP_4
DATAF VGRAD_5
DATAF VNSP_5
DATAF VL_5
DATAF VDEL_5
DATAF VSP_5
DATAF VU_5
DATAF VGRAD_6
DATAF VNSP_6
DATAF VL_6
DATAF VDEL_6
DATAF VSP_6
DATAF VU_6
DATAF VPORT_7
DATAF VCOL_7
DATAF VH_7
DATAF VJ_7
ARRAY16 VA_7 2
DATAF VSRED_7
DATAF VSGREEN_7
DATAF VSBLUE_7
DATAF VMAX_7
DATAF VMIN_7
DATAF VS_7
DATAF VV_7
DATAF VCLR_7
DATAF VDOP_7
DATAF VSTART_8
DATAF VFINISH_8
DATAF VSTRT_8
DATAF VSP_9
DATAF VSTIME_9
DATAF VSTRT_M
DATAF VFINISH_M
DATA32 RUNCOUNTER_SLOWTOPNIGA
DATA32 RUNCOUNTER_WATER
DATA32 RUNCOUNTER_DOWNNIGA
DATA32 RUNCOUNTER_RESETD
DATA32 RUNCOUNTER_TOPNIGA

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VDOP_M
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VWHITE1_M
    MOVEF_F 0.0 VWHITE2_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYCREATE_FLOAT VZONES_M
    MOVEF_F 0.0 VDOPZONE_M
    MOVEF_F 0.0 VWTR_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VFREEZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYCREATE_FLOAT VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VCLR_7
    MOVEF_F 0.0 VDOP_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSTRT_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    MOVEF_F 0.0 VSTRT_M
    MOVEF_F 0.0 VFINISH_M
    MOVE32_32 0 RUNCOUNTER_SLOWTOPNIGA
    MOVE32_32 0 RUNCOUNTER_WATER
    MOVE32_32 0 RUNCOUNTER_DOWNNIGA
    MOVE32_32 0 RUNCOUNTER_RESETD
    MOVE32_32 0 RUNCOUNTER_TOPNIGA
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TSLOWTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_SLOWTOPNIGA 0
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA -1 RUNCOUNTER_SLOWTOPNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TWATER
{
    DATA32 tmp
  launch:
    CALL PROGRAM_WATER 1
    CALL GETANDINC32 RUNCOUNTER_WATER -1 RUNCOUNTER_WATER tmp
    JR_GT32 tmp 1 launch
}
vmthread TDOWNNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWNNIGA 2
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA -1 RUNCOUNTER_DOWNNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TRESETD
{
    DATA32 tmp
  launch:
    CALL PROGRAM_RESETD 3
    CALL GETANDINC32 RUNCOUNTER_RESETD -1 RUNCOUNTER_RESETD tmp
    JR_GT32 tmp 1 launch
}
vmthread TTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TOPNIGA 4
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA -1 RUNCOUNTER_TOPNIGA tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_SLOWTOPNIGA
subcall PROGRAM_WATER
subcall PROGRAM_DOWNNIGA
subcall PROGRAM_RESETD
subcall PROGRAM_TOPNIGA
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch990
    WRITE32 ENDSUB_SLOWTOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SLOWTOPNIGA
  dispatch990:
    JR_NEQ32 SUBPROGRAM 1 dispatch991
    WRITE32 ENDSUB_WATER:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
  dispatch991:
    JR_NEQ32 SUBPROGRAM 2 dispatch992
    WRITE32 ENDSUB_DOWNNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
  dispatch992:
    JR_NEQ32 SUBPROGRAM 3 dispatch993
    WRITE32 ENDSUB_RESETD:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RESETD
  dispatch993:
    JR_NEQ32 SUBPROGRAM 4 dispatch994
    WRITE32 ENDSUB_TOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
  dispatch994:
    MOVEF_F 0.0 VDOP_M
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VWHITE1_M
    MOVEF_F 0.0 VWHITE2_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VZONES_M
    MOVEF_F 0.0 VDOPZONE_M
    MOVEF_F 0.0 VWTR_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VFREEZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VQ_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VNSP_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VH_7
    MOVEF_F 0.0 VJ_7
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_7
    MOVEF_F 0.0 VSRED_7
    MOVEF_F 0.0 VSGREEN_7
    MOVEF_F 0.0 VSBLUE_7
    MOVEF_F 0.0 VMAX_7
    MOVEF_F 0.0 VMIN_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VV_7
    MOVEF_F 0.0 VCLR_7
    MOVEF_F 0.0 VDOP_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSTRT_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTIME_9
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    MOVEF_F 0.0 VDOP_M
    TIMER_READ timeMC1
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL EV3FILE.OPENREAD 'colib.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRD_M
    CALL MOTOR.RESETCOUNT 'D'
    DATA8 layer457
	DATA8 no457
	DATA8 mode8457
	
	MOVEF_8 1.0 no457
	SUB8 no457 1 no457
	DIV8 no457 4 layer457
	MATH MOD8 no457 4 no457

	MOVEF_8 4.0 mode8457
	
	INPUT_DEVICE READY_RAW layer457 no457 0 mode8457 0
    DATA8 layer458
	DATA8 no458
	DATA8 mode8458
	
	MOVEF_8 4.0 no458
	SUB8 no458 1 no458
	DIV8 no458 4 layer458
	MATH MOD8 no458 4 no458

	MOVEF_8 4.0 mode8458
	
	INPUT_DEVICE READY_RAW layer458 no458 0 mode8458 0
    MOVEF_F 0.0 VWHITE1_M
    MOVEF_F 0.0 VWHITE2_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VCOL_M
    DATA32 tmp608
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp608
    JR_NEQ32 0 tmp608 alreadylaunched608
    OBJECT_START TDOWNNIGA
  alreadylaunched608:
    MOVEF_F 2.0 VSTART_8
    WRITE32 ENDSUB_START_3:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_3
CALLSUB609:
    MOVEF_F VFINISH_8 VFIN_M
    MOVEF_F VSTRT_8 VSTART_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VSP_M
  while611:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or612
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile611
  or612:
  whilebody611:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody611
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody611
  endwhile611:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 110.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB627:
    MOVEF_F 94.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB628:
    MOVEF_F -80.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB629:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB630:
    MOVEF_F 80.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB631:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while633:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 or634
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 22.0 endwhile633
  or634:
  whilebody633:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 22.0 whilebody633
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 22.0 whilebody633
  endwhile633:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB649:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while651:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or652
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile651
  or652:
  whilebody651:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody651
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody651
  endwhile651:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB667:
    CALL MOTOR.RESETCOUNT 'BC'
  while669:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf673
    DATA8 flag673
    DIVF F.1 2.0 tmpf673
    CP_EQF 0.0 2.0 flag673
    SELECTF flag673 0.0 tmpf673 F.0

    JR_GTEQF F.0 50.0 endwhile669
  whilebody669:
    WRITE32 ENDSUB_LINE:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB674:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf678
    DATA8 flag678
    DIVF F.1 2.0 tmpf678
    CP_EQF 0.0 2.0 flag678
    SELECTF flag678 0.0 tmpf678 F.0

    JR_LTF F.0 50.0 whilebody669
  endwhile669:
  while679:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile679
  whilebody679:
    WRITE32 ENDSUB_LINE:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB681:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody679
  endwhile679:
    WRITE32 ENDSUB_LEFT:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB683:
    CALL MOTOR.RESETCOUNT 'BC'
  while685:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf689
    DATA8 flag689
    DIVF F.1 2.0 tmpf689
    CP_EQF 0.0 2.0 flag689
    SELECTF flag689 0.0 tmpf689 F.0

    JR_GTEQF F.0 170.0 endwhile685
  whilebody685:
    WRITE32 ENDSUB_SEN1:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB690:
    SUBF VS1_M 27.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf701
    DATA8 flag701
    DIVF F.1 2.0 tmpf701
    CP_EQF 0.0 2.0 flag701
    SELECTF flag701 0.0 tmpf701 F.0

    JR_LTF F.0 170.0 whilebody685
  endwhile685:
  while702:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or703
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile702
  or703:
  whilebody702:
    WRITE32 ENDSUB_LINE:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB706:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody702
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody702
  endwhile702:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VWTR_M
    MOVEF_F 225.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB710:
    WRITE32 ENDSUB_CUBE:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB711:
    MOVEF_F 380.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB712:
    WRITE32 ENDSUB_CUBE:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB713:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB714:
    WRITE32 ENDSUB_CUBE:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB715:
    MOVEF_F 121.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB716 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB716:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB717:
    MOVEF_F -40.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB718:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB719:
    JR_NEQF VWTR_M 1.0 else720_1
    DATA32 tmp721
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp721
    JR_NEQ32 0 tmp721 alreadylaunched721
    OBJECT_START TWATER
  alreadylaunched721:
    MOVEF_F 0.0 VWTR_M
  else720_1:
  endif720:
    WRITE32 ENDSUB_CUBE:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB722:
    MOVEF_F 405.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB723:
    WRITE32 ENDSUB_CUBE:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB724:
    MOVEF_F 395.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB725:
    WRITE32 ENDSUB_CUBE:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB726:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB727 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB727:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 80.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB728 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB728:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB729 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB729:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB730 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB730:
    MOVEF_F 120.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB731:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB732:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB733:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB734:
    JR_NEQF VWTR_M 1.0 else735_1
    DATA32 tmp736
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp736
    JR_NEQ32 0 tmp736 alreadylaunched736
    OBJECT_START TWATER
  alreadylaunched736:
    MOVEF_F 0.0 VWTR_M
  else735_1:
  endif735:
    WRITE32 ENDSUB_CUBE:CALLSUB737 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB737:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB738:
    WRITE32 ENDSUB_CUBE:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB739:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB740:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB741:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB742:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB743:
    JR_NEQF VWTR_M 1.0 else744_1
    WRITE32 ENDSUB_WATER:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB745:
    MOVEF_F 0.0 VWTR_M
  else744_1:
  endif744:
    WRITE32 ENDSUB_CUBE:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB746:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB747:
    WRITE32 ENDSUB_CUBE:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB748:
    JR_LTF VRD_M 2.0 or750
    JR_EQF VZN1_M 0.0 or750
    JR_EQF VZN2_M 0.0 or750
    CALL ARRAYGET_FLOAT 3.0 F.0 VZONES_M
    JR_NEQF F.0 1.0 or750
    CALL ARRAYGET_FLOAT 6.0 F.0 VZONES_M
    JR_EQF F.0 1.0 else749_1
  or750:
    MOVEF_F 48.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB753:
    MOVEF_F 89.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB754:
    MOVEF_F 370.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB755:
    JR_NEQF VWTR_M 1.0 else756_1
    WRITE32 ENDSUB_WATER:CALLSUB757 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB757:
    MOVEF_F 0.0 VWTR_M
  else756_1:
  endif756:
    WRITE32 ENDSUB_CUBE:CALLSUB758 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB758:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB759 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB759:
    WRITE32 ENDSUB_CUBE:CALLSUB760 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB760:
    MOVEF_F 17.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB761:
    MOVEF_F 15.0 VGRAD_3
    MOVEF_F -90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB762:
    MOVEF_F 730.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB763 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB763:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB764:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB765:
    JR endif749
  else749_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB766:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB767 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB767:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB768:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB769:
  else749_2:
  endif749:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB770 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB770:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
  while771:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 or772
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile771
  or772:
  whilebody771:
    WRITE32 ENDSUB_LINE:CALLSUB775 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB775:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody771
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody771
  endwhile771:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.6 VK_M
    MOVEF_F 60.0 VV_M
  while779:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or780
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile779
  or780:
  whilebody779:
    WRITE32 ENDSUB_LINE:CALLSUB783 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB783:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody779
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody779
  endwhile779:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB787:
    CALL MOTOR.RESETCOUNT 'BC'
  while789:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf793
    DATA8 flag793
    DIVF F.1 2.0 tmpf793
    CP_EQF 0.0 2.0 flag793
    SELECTF flag793 0.0 tmpf793 F.0

    JR_GTEQF F.0 300.0 endwhile789
  whilebody789:
    WRITE32 ENDSUB_SEN1:CALLSUB794 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB794:
    SUBF VS1_M 27.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf805
    DATA8 flag805
    DIVF F.1 2.0 tmpf805
    CP_EQF 0.0 2.0 flag805
    SELECTF flag805 0.0 tmpf805 F.0

    JR_LTF F.0 300.0 whilebody789
  endwhile789:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    JR_NEQF VNIGA_M 1.0 else806_1
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB807 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB807:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB808:
  while809:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 14.0 or810
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 14.0 endwhile809
  or810:
  whilebody809:
    WRITE32 ENDSUB_LINE:CALLSUB813 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB813:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 14.0 whilebody809
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 14.0 whilebody809
  endwhile809:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_FRZ:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB817:
    JR_NEQF VDOP_M 2.0 else818_1
    WRITE32 ENDSUB_FINDFREEZONE:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FINDFREEZONE
CALLSUB819:
    MOVEF_F VFREEZONE_M VZONE_M
    JR endif818
  else818_1:
    MOVEF_F 3.0 VDOP_M
    MOVEF_F VWHITE1_M VZONE_M
  else818_2:
  endif818:
    JR_NEQF VZONE_M 1.0 else820_1
    WRITE32 ENDSUB_STOLB3:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB3
CALLSUB821:
    WRITE32 ENDSUB_LINE1:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB822:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB823:
    WRITE32 ENDSUB_FRZ:CALLSUB824 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB824:
    WRITE32 ENDSUB_BLINE1:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE1
CALLSUB825:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB826:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB827 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB827:
    WRITE32 ENDSUB_BSTOLB3:CALLSUB828 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB3
CALLSUB828:
    JR endif820
  else820_1:
    JR_NEQF VZONE_M 2.0 else820_2
    WRITE32 ENDSUB_STOLB3:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB3
CALLSUB829:
    WRITE32 ENDSUB_LINE2:CALLSUB830 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB830:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB831 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB831:
    WRITE32 ENDSUB_FRZ:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB832:
    WRITE32 ENDSUB_BLINE2:CALLSUB833 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE2
CALLSUB833:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB834 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB834:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB835 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB835:
    WRITE32 ENDSUB_BSTOLB3:CALLSUB836 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB3
CALLSUB836:
    JR endif820
  else820_2:
    JR_NEQF VZONE_M 3.0 else820_3
    WRITE32 ENDSUB_STOLB2:CALLSUB837 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB2
CALLSUB837:
    WRITE32 ENDSUB_LINE2:CALLSUB838 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB838:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB839 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB839:
    WRITE32 ENDSUB_FRZ:CALLSUB840 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB840:
    WRITE32 ENDSUB_BLINE2:CALLSUB841 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE2
CALLSUB841:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB842 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB842:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB843 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB843:
    WRITE32 ENDSUB_BSTOLB2:CALLSUB844 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB2
CALLSUB844:
    JR endif820
  else820_3:
    JR_NEQF VZONE_M 4.0 else820_4
    WRITE32 ENDSUB_STOLB1:CALLSUB845 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB1
CALLSUB845:
    WRITE32 ENDSUB_LINE2:CALLSUB846 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB846:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB847 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB847:
    WRITE32 ENDSUB_FRZ:CALLSUB848 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB848:
    WRITE32 ENDSUB_BLINE2:CALLSUB849 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE2
CALLSUB849:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB850 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB850:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB851 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB851:
    WRITE32 ENDSUB_BSTOLB1:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB1
CALLSUB852:
    JR endif820
  else820_4:
    JR_NEQF VZONE_M 5.0 else820_5
    WRITE32 ENDSUB_STOLB1:CALLSUB853 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB1
CALLSUB853:
    WRITE32 ENDSUB_LINE1:CALLSUB854 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB854:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB855 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB855:
    WRITE32 ENDSUB_FRZ:CALLSUB856 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB856:
    WRITE32 ENDSUB_BLINE1:CALLSUB857 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE1
CALLSUB857:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB858 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB858:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB859 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB859:
    WRITE32 ENDSUB_BSTOLB1:CALLSUB860 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB1
CALLSUB860:
    JR endif820
  else820_5:
    JR_NEQF VZONE_M 6.0 else820_6
    WRITE32 ENDSUB_STOLB2:CALLSUB861 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_STOLB2
CALLSUB861:
    WRITE32 ENDSUB_LINE1:CALLSUB862 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB862:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB863 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB863:
    WRITE32 ENDSUB_FRZ:CALLSUB864 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB864:
    WRITE32 ENDSUB_BLINE1:CALLSUB865 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BLINE1
CALLSUB865:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB866 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB866:
    WRITE32 ENDSUB_ZONETOLINE:CALLSUB867 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZONETOLINE
CALLSUB867:
    WRITE32 ENDSUB_BSTOLB2:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BSTOLB2
CALLSUB868:
  else820_6:
  endif820:
  else806_1:
  endif806:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB869 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB869:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB870 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB870:
    DATA32 tmp871
    CALL GETANDINC32 RUNCOUNTER_RESETD 1  RUNCOUNTER_RESETD tmp871
    JR_NEQ32 0 tmp871 alreadylaunched871
    OBJECT_START TRESETD
  alreadylaunched871:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -100.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB872 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB872:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB873 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB873:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB874 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB874:
    MOVEF_F 105.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB875 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB875:
    MOVEF_F 800.0 VMM_2
    MOVEF_F 100.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB876 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB876:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB877 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB877:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN1_M 0.0 else878_1
  while879:
    JR_EQF VQ_M 1.0 endwhile879
  whilebody879:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN1_M
    CALL ARRAYGET_FLOAT VZN1_M F.0 VZONES_M
    JR_EQF F.0 1.0 else881_1
    MOVEF_F 1.0 VQ_M
  else881_1:
  endif881:
    JR_NEQF VQ_M 1.0 whilebody879
  endwhile879:
  else878_1:
  endif878:
    MOVEF_F 0.0 VQ_M
    JR_NEQF VZN2_M 0.0 else883_1
  while884:
    JR_EQF VQ_M 1.0 endwhile884
  whilebody884:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN2_M
    CALL ARRAYGET_FLOAT VZN2_M F.0 VZONES_M
    JR_EQF F.0 1.0 else886_1
    MOVEF_F 1.0 VQ_M
  else886_1:
  endif886:
    JR_NEQF VQ_M 1.0 whilebody884
  endwhile884:
  else883_1:
  endif883:
    MOVEF_F 220.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB888 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB888:
    DATA32 tmp889
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp889
    JR_NEQ32 0 tmp889 alreadylaunched889
    OBJECT_START TTOPNIGA
  alreadylaunched889:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB890 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB890:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB891 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB891:
    MOVEF_F 236.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB892:
    DATA32 tmp893
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp893
    JR_NEQ32 0 tmp893 alreadylaunched893
    OBJECT_START TDOWNNIGA
  alreadylaunched893:
    JR_EQF VZN1_M 1.0 or895
    JR_NEQF VZN2_M 1.0 else894_1
  or895:
    WRITE32 ENDSUB_Z1:CALLSUB896 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB896:
    MOVEF_F 1.0 VZONE1_M
    JR endif894
  else894_1:
    JR_EQF VZN1_M 6.0 or897
    JR_NEQF VZN2_M 6.0 else894_2
  or897:
    WRITE32 ENDSUB_Z6:CALLSUB898 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB898:
    MOVEF_F 6.0 VZONE1_M
    JR endif894
  else894_2:
    JR_EQF VZN1_M 5.0 or899
    JR_NEQF VZN2_M 5.0 else894_3
  or899:
    WRITE32 ENDSUB_Z5:CALLSUB900 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB900:
    MOVEF_F 5.0 VZONE1_M
    JR endif894
  else894_3:
    JR_EQF VZN1_M 2.0 or901
    JR_NEQF VZN2_M 2.0 else894_4
  or901:
    WRITE32 ENDSUB_Z2:CALLSUB902 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB902:
    MOVEF_F 2.0 VZONE1_M
    JR endif894
  else894_4:
    JR_EQF VZN1_M 3.0 or903
    JR_NEQF VZN2_M 3.0 else894_5
  or903:
    WRITE32 ENDSUB_Z3:CALLSUB904 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB904:
    MOVEF_F 3.0 VZONE1_M
    JR endif894
  else894_5:
    JR_EQF VZN1_M 4.0 or905
    JR_NEQF VZN2_M 4.0 else894_6
  or905:
    WRITE32 ENDSUB_Z4:CALLSUB906 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB906:
    MOVEF_F 4.0 VZONE1_M
  else894_6:
  endif894:
    MOVEF_F 20.0 VGRAD_4
    MOVEF_F 70.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB907 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB907:
    MOVEF_F 20.0 VGRAD_3
    MOVEF_F 70.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB908:
    CALL MOTOR.STARTPOWER 'C' 60.0
  while910:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile910
  whilebody910:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody910
  endwhile910:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB914 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB914:
    CALL MOTOR.STARTPOWER 'C' 60.0
  while916:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile916
  whilebody916:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody916
  endwhile916:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER 'B' 60.0
  while921:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile921
  whilebody921:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody921
  endwhile921:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf927
    DATA8 flag927
    DIVF VMM_M 257.48 tmpf927
    CP_EQF 0.0 257.48 flag927
    SELECTF flag927 0.0 tmpf927 F.0

    MULF F.0 360.0 VL_M
  while929:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf935
    DATA8 flag935
    DIVF F.1 2.0 tmpf935
    CP_EQF 0.0 2.0 flag935
    SELECTF flag935 0.0 tmpf935 F.0

    JR_GTF F.0 VL_M endwhile929
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile929
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile929
  whilebody929:
    WRITE32 ENDSUB_SEN2:CALLSUB938 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB938:
    SUBF VS2_M 16.0 VU_M
    MULF VU_M 1.7 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.7 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf952
    DATA8 flag952
    DIVF F.1 2.0 tmpf952
    CP_EQF 0.0 2.0 flag952
    SELECTF flag952 0.0 tmpf952 F.0

    JR_GTF F.0 VL_M and946
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and946
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody929
  and946:
  endwhile929:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 100.0 0.0 'true' 

	DATA8 layer956
	DATA8 nos956
	DATA8 busy956
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer956 nos956
	JR_EQ8 0 nos956 motornotbusy956
  motorwaiting956:
	OUTPUT_TEST layer956 nos956 busy956
	JR_EQ8 busy956 0 motornotbusy956
	SLEEP
	JR motorwaiting956
  motornotbusy956:
    CALL MOTOR.SCHEDULESYNC 'BC' 40.0 0.0 250.0 'true'

	DATA8 layer957
	DATA8 nos957
	DATA8 busy957
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer957 nos957
	JR_EQ8 0 nos957 motornotbusy957
  motorwaiting957:
	OUTPUT_TEST layer957 nos957 busy957
	JR_EQ8 busy957 0 motornotbusy957
	SLEEP
	JR motorwaiting957
  motornotbusy957:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB958 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB958:
    DATA32 milliseconds959
	MOVEF_32 200.0 milliseconds959
	DATA32 timer959
	TIMER_WAIT milliseconds959 timer959
	TIMER_READY timer959
    CALL MOTOR.SCHEDULESYNC 'BC' -40.0 0.0 250.0 'true'

	DATA8 layer960
	DATA8 nos960
	DATA8 busy960
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer960 nos960
	JR_EQ8 0 nos960 motornotbusy960
  motorwaiting960:
	OUTPUT_TEST layer960 nos960 busy960
	JR_EQ8 busy960 0 motornotbusy960
	SLEEP
	JR motorwaiting960
  motornotbusy960:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 100.0 0.0 'true' 

	DATA8 layer961
	DATA8 nos961
	DATA8 busy961
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer961 nos961
	JR_EQ8 0 nos961 motornotbusy961
  motorwaiting961:
	OUTPUT_TEST layer961 nos961 busy961
	JR_EQ8 busy961 0 motornotbusy961
	SLEEP
	JR motorwaiting961
  motornotbusy961:
    MOVEF_F 346.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB962 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB962:
    JR_NEQF VZONE1_M VZN1_M else963_1
    MOVEF_F VZN2_M VZN_M
    JR endif963
  else963_1:
    JR_NEQF VZONE1_M VZN2_M else963_2
    MOVEF_F VZN1_M VZN_M
  else963_2:
  endif963:
    JR_NEQF VZN_M 1.0 else964_1
    WRITE32 ENDSUB_Z1:CALLSUB965 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB965:
    MOVEF_F 1.0 VZONE1_M
    JR endif964
  else964_1:
    JR_NEQF VZN_M 6.0 else964_2
    WRITE32 ENDSUB_Z6:CALLSUB966 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB966:
    MOVEF_F 6.0 VZONE1_M
    JR endif964
  else964_2:
    JR_NEQF VZN_M 5.0 else964_3
    WRITE32 ENDSUB_Z5:CALLSUB967 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB967:
    MOVEF_F 5.0 VZONE1_M
    JR endif964
  else964_3:
    JR_NEQF VZN_M 2.0 else964_4
    WRITE32 ENDSUB_Z2:CALLSUB968 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB968:
    MOVEF_F 2.0 VZONE1_M
    JR endif964
  else964_4:
    JR_NEQF VZN_M 3.0 else964_5
    WRITE32 ENDSUB_Z3:CALLSUB969 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB969:
    MOVEF_F 3.0 VZONE1_M
    JR endif964
  else964_5:
    JR_NEQF VZN_M 4.0 else964_6
    WRITE32 ENDSUB_Z4:CALLSUB970 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB970:
    MOVEF_F 4.0 VZONE1_M
  else964_6:
  endif964:
    DATA32 tmp971
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp971
    JR_NEQ32 0 tmp971 alreadylaunched971
    OBJECT_START TDOWNNIGA
  alreadylaunched971:
    JR_NEQF VFIN_M 1.0 else972_1
    MOVEF_F -90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB973 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB973:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB974:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB975 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB975:
    MOVEF_F -90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB976 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB976:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB977 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB977:
    JR endif972
  else972_1:
    MOVEF_F 140.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB978 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB978:
    MOVEF_F 90.0 VGRAD_6
    MOVEF_F 90.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB979 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB979:
    MOVEF_F 70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB980 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB980:
    MOVEF_F 265.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB981 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB981:
    DATA32 tmp982
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp982
    JR_NEQ32 0 tmp982 alreadylaunched982
    OBJECT_START TTOPNIGA
  alreadylaunched982:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB983 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB983:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB984 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB984:
    MOVEF_F 950.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB985:
    MOVEF_F 70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB986 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB986:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB987 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB987:
    MOVEF_F 95.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB988 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB988:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB989:
  else972_2:
  endif972:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf34
    DATA8 flag34
    DIVF F.0 F.1 tmpf34
    CP_EQF 0.0 F.1 flag34
    SELECTF flag34 0.0 tmpf34 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf39
    DATA8 flag39
    DIVF F.0 F.1 tmpf39
    CP_EQF 0.0 F.1 flag39
    SELECTF flag39 0.0 tmpf39 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB40:
    WRITE32 ENDSUB_SEN2:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB41:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_1
  while50:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf56
    DATA8 flag56
    DIVF F.1 2.0 tmpf56
    CP_EQF 0.0 2.0 flag56
    SELECTF flag56 0.0 tmpf56 F.0

    JR_GTF F.0 VL_1 endwhile50
  whilebody50:
    MOVEF_F 125.835016311947 VA_1
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    CALL MOTOR.GETCOUNT 'B' F.5
    MATH ABS F.5 F.4
    ADDF F.3 F.4 F.2
    DATAF tmpf63
    DATA8 flag63
    DIVF F.2 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.1

    SUBF VL_1 F.1 F.0
    JR_GTEQF F.0 VA_1 else57_1
    JR_LTEQF VSP_1 35.0 else57_1
    SUBF VSP_1 0.9 VSP_1
    JR_GTEQF VNSP_1 0.0 else66_1
    SUBF 0.0 VSP_1 VSP_1
  else66_1:
  endif66:
  else57_1:
  endif57:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf75
    DATA8 flag75
    DIVF F.1 2.0 tmpf75
    CP_EQF 0.0 2.0 flag75
    SELECTF flag75 0.0 tmpf75 F.0

    JR_LTF F.0 VA_1 or69
    JR_GTEQF VSP_1 VNSP_1 else68_1
  or69:
    MATH ABS VSP_1 F.0
    ADDF F.0 0.2 VSP_1
    JR_GTEQF VNSP_1 0.0 else78_1
    SUBF 0.0 VSP_1 VSP_1
  else78_1:
  endif78:
  else68_1:
  endif68:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 6.0 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 6.0 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf94
    DATA8 flag94
    DIVF F.1 2.0 tmpf94
    CP_EQF 0.0 2.0 flag94
    SELECTF flag94 0.0 tmpf94 F.0

    JR_LTEQF F.0 VL_1 whilebody50
  endwhile50:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf96
    DATA8 flag96
    DIVF VMM_2 257.48 tmpf96
    CP_EQF 0.0 257.48 flag96
    SELECTF flag96 0.0 tmpf96 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB99 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB99:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer100
	DATA8 nos100
	DATA8 busy100
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer100 nos100
	JR_EQ8 0 nos100 motornotbusy100
  motorwaiting100:
	OUTPUT_TEST layer100 nos100 busy100
	JR_EQ8 busy100 0 motornotbusy100
	SLEEP
	JR motorwaiting100
  motornotbusy100:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 130.0 'true'

	DATA8 layer101
	DATA8 nos101
	DATA8 busy101
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer101 nos101
	JR_EQ8 0 nos101 motornotbusy101
  motorwaiting101:
	OUTPUT_TEST layer101 nos101 busy101
	JR_EQ8 busy101 0 motornotbusy101
	SLEEP
	JR motorwaiting101
  motornotbusy101:
  while102:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 21.0 endwhile102
  whilebody102:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 21.0 whilebody102
  endwhile102:
    CALL MOTOR.STOP 'bc' 'true'
  while107:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile107
  whilebody107:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody107
  endwhile107:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB112 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB112:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 88.0845114183626 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer113
	DATA8 nos113
	DATA8 busy113
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer113 nos113
	JR_EQ8 0 nos113 motornotbusy113
  motorwaiting113:
	OUTPUT_TEST layer113 nos113 busy113
	JR_EQ8 busy113 0 motornotbusy113
	SLEEP
	JR motorwaiting113
  motornotbusy113:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
  while115:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 21.0 endwhile115
  whilebody115:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 whilebody115
  endwhile115:
    CALL MOTOR.STOP 'bc' 'true'
  while120:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile120
  whilebody120:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody120
  endwhile120:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB125:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_2:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf127
    DATA8 flag127
    DIVF F.0 360.0 tmpf127
    CP_EQF 0.0 360.0 flag127
    SELECTF flag127 0.0 tmpf127 VL_3

    DATAF tmpf128
    DATA8 flag128
    DIVF VL_3 257.48 tmpf128
    CP_EQF 0.0 257.48 flag128
    SELECTF flag128 0.0 tmpf128 F.0

    MULF F.0 360.0 VL_3
    DATAF tmpf130
    DATA8 flag130
    DIVF VL_3 3.0 tmpf130
    CP_EQF 0.0 3.0 flag130
    SELECTF flag130 0.0 tmpf130 VDEL_3

    MOVEF_F VNSP_3 VSP_3
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while133:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile133
  whilebody133:
    CALL MOTOR.STARTPOWER 'C' VSP_3
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody133
  endwhile133:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_3
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1142.96 VGRAD_4 F.0
    DATAF tmpf141
    DATA8 flag141
    DIVF F.0 360.0 tmpf141
    CP_EQF 0.0 360.0 flag141
    SELECTF flag141 0.0 tmpf141 VL_4

    DATAF tmpf142
    DATA8 flag142
    DIVF VL_4 257.48 tmpf142
    CP_EQF 0.0 257.48 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    MULF F.0 360.0 VL_4
    DATAF tmpf144
    DATA8 flag144
    DIVF VL_4 3.0 tmpf144
    CP_EQF 0.0 3.0 flag144
    SELECTF flag144 0.0 tmpf144 VDEL_4

    MOVEF_F VNSP_4 VSP_4
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while147:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile147
  whilebody147:
    CALL MOTOR.STARTPOWER 'B' VSP_4
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody147
  endwhile147:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_4
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_5 F.1
    DATAF tmpf158
    DATA8 flag158
    DIVF F.1 360.0 tmpf158
    CP_EQF 0.0 360.0 flag158
    SELECTF flag158 0.0 tmpf158 F.0

    DATAF tmpf159
    DATA8 flag159
    DIVF F.0 2.0 tmpf159
    CP_EQF 0.0 2.0 flag159
    SELECTF flag159 0.0 tmpf159 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf162
    DATA8 flag162
    DIVF VL_5 F.1 tmpf162
    CP_EQF 0.0 F.1 flag162
    SELECTF flag162 0.0 tmpf162 F.0

    MULF F.0 360.0 VL_5
    DATAF tmpf164
    DATA8 flag164
    DIVF VL_5 3.0 tmpf164
    CP_EQF 0.0 3.0 flag164
    SELECTF flag164 0.0 tmpf164 VDEL_5

    MOVEF_F 30.0 VSP_5
    CALL MOTOR.RESETCOUNT 'BC'
  while166:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile166
  whilebody166:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_5
    MULF VU_5 0.8 F.2
    SUBF VSP_5 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_5 0.8 F.1
    ADDF VSP_5 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_5 else180_1
    JR_GTEQF VSP_5 VNSP_5 else180_1
    ADDF VSP_5 2.0 VSP_5
    JR endif180
  else180_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_5 2.0 F.1
    JR_LTEQF F.0 F.1 else180_2
    JR_LTEQF VSP_5 30.0 else180_2
    SUBF VSP_5 5.0 VSP_5
  else180_2:
  endif180:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody166
  endwhile166:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_5
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_6 F.1
    DATAF tmpf195
    DATA8 flag195
    DIVF F.1 360.0 tmpf195
    CP_EQF 0.0 360.0 flag195
    SELECTF flag195 0.0 tmpf195 F.0

    DATAF tmpf196
    DATA8 flag196
    DIVF F.0 2.0 tmpf196
    CP_EQF 0.0 2.0 flag196
    SELECTF flag196 0.0 tmpf196 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 71.0 F.1
    DATAF tmpf199
    DATA8 flag199
    DIVF VL_6 F.1 tmpf199
    CP_EQF 0.0 F.1 flag199
    SELECTF flag199 0.0 tmpf199 F.0

    MULF F.0 360.0 VL_6
    DATAF tmpf201
    DATA8 flag201
    DIVF VL_6 3.0 tmpf201
    CP_EQF 0.0 3.0 flag201
    SELECTF flag201 0.0 tmpf201 VDEL_6

    MOVEF_F 30.0 VSP_6
    CALL MOTOR.RESETCOUNT 'BC'
  while203:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_6 endwhile203
  whilebody203:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VU_6
    MULF VU_6 0.8 F.1
    SUBF VSP_6 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_6 0.8 F.2
    ADDF VSP_6 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_6 else217_1
    JR_GTEQF VSP_6 VNSP_6 else217_1
    ADDF VSP_6 2.0 VSP_6
    JR endif217
  else217_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_6 2.0 F.1
    JR_LTEQF F.0 F.1 else217_2
    JR_LTEQF VSP_6 30.0 else217_2
    SUBF VSP_6 5.0 VSP_6
  else217_2:
  endif217:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_6 whilebody203
  endwhile203:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_6
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_FRZ:
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_CLOSE:
    CALL MOTOR.STARTPOWER 'A' 80.0
    DATA32 milliseconds229
	MOVEF_32 300.0 milliseconds229
	DATA32 timer229
	TIMER_WAIT milliseconds229 timer229
	TIMER_READY timer229
  while230:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 10.0 endwhile230
  whilebody230:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 10.0 whilebody230
  endwhile230:
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_LINE1:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB233:
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    MOVEF_F 740.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB234:
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_BLINE1:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB235:
RETSUB_BLINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE1:
SUB_BLINE2:
    MOVEF_F 770.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB236:
RETSUB_BLINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BLINE2:
SUB_STOLB1:
    WRITE32 ENDSUB_LEFT:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB237:
    CALL MOTOR.RESETCOUNT 'BC'
  while239:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf243
    DATA8 flag243
    DIVF F.1 2.0 tmpf243
    CP_EQF 0.0 2.0 flag243
    SELECTF flag243 0.0 tmpf243 F.0

    JR_GTEQF F.0 50.0 endwhile239
  whilebody239:
    WRITE32 ENDSUB_LINE:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB244:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf248
    DATA8 flag248
    DIVF F.1 2.0 tmpf248
    CP_EQF 0.0 2.0 flag248
    SELECTF flag248 0.0 tmpf248 F.0

    JR_LTF F.0 50.0 whilebody239
  endwhile239:
  while249:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile249
  whilebody249:
    WRITE32 ENDSUB_LINE:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB251:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody249
  endwhile249:
    WRITE32 ENDSUB_RIGHT:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB253:
    CALL MOTOR.RESETCOUNT 'BC'
  while255:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf259
    DATA8 flag259
    DIVF F.1 2.0 tmpf259
    CP_EQF 0.0 2.0 flag259
    SELECTF flag259 0.0 tmpf259 F.0

    JR_GTEQF F.0 170.0 endwhile255
  whilebody255:
    WRITE32 ENDSUB_LINE:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB260:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf264
    DATA8 flag264
    DIVF F.1 2.0 tmpf264
    CP_EQF 0.0 2.0 flag264
    SELECTF flag264 0.0 tmpf264 F.0

    JR_LTF F.0 170.0 whilebody255
  endwhile255:
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
  while265:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or266
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile265
  or266:
  whilebody265:
    WRITE32 ENDSUB_LINE:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB269:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody265
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody265
  endwhile265:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB1:
SUB_STOLB2:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB273:
    MOVEF_F 250.0 VMM_M
    MOVEF_F 1.3 VK_M
    MOVEF_F 35.0 VV_M
    DATAF tmpf274
    DATA8 flag274
    DIVF VMM_M 257.48 tmpf274
    CP_EQF 0.0 257.48 flag274
    SELECTF flag274 0.0 tmpf274 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while277:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile277
  whilebody277:
    WRITE32 ENDSUB_LINE:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB279:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody277
  endwhile277:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB281:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB2:
SUB_STOLB3:
    WRITE32 ENDSUB_RIGHT:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB282:
    CALL MOTOR.RESETCOUNT 'BC'
  while284:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf288
    DATA8 flag288
    DIVF F.1 2.0 tmpf288
    CP_EQF 0.0 2.0 flag288
    SELECTF flag288 0.0 tmpf288 F.0

    JR_GTEQF F.0 50.0 endwhile284
  whilebody284:
    WRITE32 ENDSUB_LINE:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB289:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf293
    DATA8 flag293
    DIVF F.1 2.0 tmpf293
    CP_EQF 0.0 2.0 flag293
    SELECTF flag293 0.0 tmpf293 F.0

    JR_LTF F.0 50.0 whilebody284
  endwhile284:
  while294:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile294
  whilebody294:
    WRITE32 ENDSUB_LINE:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB296:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody294
  endwhile294:
    WRITE32 ENDSUB_LEFT:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB298:
    CALL MOTOR.RESETCOUNT 'BC'
  while300:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf304
    DATA8 flag304
    DIVF F.1 2.0 tmpf304
    CP_EQF 0.0 2.0 flag304
    SELECTF flag304 0.0 tmpf304 F.0

    JR_GTEQF F.0 170.0 endwhile300
  whilebody300:
    WRITE32 ENDSUB_LINE:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB305:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf309
    DATA8 flag309
    DIVF F.1 2.0 tmpf309
    CP_EQF 0.0 2.0 flag309
    SELECTF flag309 0.0 tmpf309 F.0

    JR_LTF F.0 170.0 whilebody300
  endwhile300:
    MOVEF_F 1.0 VK_M
    MOVEF_F 35.0 VV_M
  while310:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or311
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile310
  or311:
  whilebody310:
    WRITE32 ENDSUB_LINE:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB314:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody310
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody310
  endwhile310:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
RETSUB_STOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STOLB3:
SUB_BSTOLB1:
  while318:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or319
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile318
  or319:
  whilebody318:
    WRITE32 ENDSUB_LINE:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB322:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody318
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody318
  endwhile318:
    WRITE32 ENDSUB_LEFT:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB325:
  while326:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or327
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile326
  or327:
  whilebody326:
    WRITE32 ENDSUB_LINE:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB330:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody326
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody326
  endwhile326:
    WRITE32 ENDSUB_RIGHT:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB333:
RETSUB_BSTOLB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB1:
SUB_BSTOLB2:
  while334:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or335
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile334
  or335:
  whilebody334:
    WRITE32 ENDSUB_LINE:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB338:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody334
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody334
  endwhile334:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB341:
RETSUB_BSTOLB2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB2:
SUB_BSTOLB3:
  while342:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or343
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile342
  or343:
  whilebody342:
    WRITE32 ENDSUB_LINE:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB346:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody342
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody342
  endwhile342:
    WRITE32 ENDSUB_RIGHT:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB349:
  while350:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or351
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile350
  or351:
  whilebody350:
    WRITE32 ENDSUB_LINE:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB354:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody350
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody350
  endwhile350:
    WRITE32 ENDSUB_LEFT:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB357:
RETSUB_BSTOLB3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BSTOLB3:
SUB_ZONETOLINE:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while359:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 or360
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 21.0 endwhile359
  or360:
  whilebody359:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 21.0 whilebody359
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 21.0 whilebody359
  endwhile359:
  while365:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 or366
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 8.0 endwhile365
  or366:
  whilebody365:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 8.0 whilebody365
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 8.0 whilebody365
  endwhile365:
    WRITE32 ENDSUB_LEFT:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB371:
RETSUB_ZONETOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZONETOLINE:
SUB_TOPRIGHT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
    MOVEF_F 47.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB373:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB374:
    DATA32 tmp375
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp375
    JR_NEQ32 0 tmp375 alreadylaunched375
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched375:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB376:
    MOVEF_F 57.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB377:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB378:
RETSUB_TOPRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPRIGHT:
SUB_TOPLEFT:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB379:
    MOVEF_F 49.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB380:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB381:
    DATA32 tmp382
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp382
    JR_NEQ32 0 tmp382 alreadylaunched382
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched382:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB383:
    MOVEF_F 55.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB384:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB385:
RETSUB_TOPLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPLEFT:
SUB_DOWNRIGHT:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB386:
    MOVEF_F 121.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB387:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB388:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB389:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB390:
    MOVEF_F 131.6 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB391:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB392:
RETSUB_DOWNRIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNRIGHT:
SUB_DOWNLEFT:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB393:
    MOVEF_F 121.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB394:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB395:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB396:
    MOVEF_F 118.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB397:
    MOVEF_F 131.6 VGRAD_6
    MOVEF_F 70.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB398:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB399:
RETSUB_DOWNLEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNLEFT:
SUB_TOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -60.0
    DATA32 milliseconds401
	MOVEF_32 300.0 milliseconds401
	DATA32 timer401
	TIMER_WAIT milliseconds401 timer401
	TIMER_READY timer401
  while402:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -2.0 endwhile402
  whilebody402:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -2.0 whilebody402
  endwhile402:
    CALL MOTOR.START 'A' -10.0
RETSUB_TOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPNIGA:
SUB_DOWNNIGA:
    CALL MOTOR.STARTPOWER 'A' 60.0
    DATA32 milliseconds407
	MOVEF_32 300.0 milliseconds407
	DATA32 timer407
	TIMER_WAIT milliseconds407 timer407
	TIMER_READY timer407
  while408:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 2.0 endwhile408
  whilebody408:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 2.0 whilebody408
  endwhile408:
    CALL MOTOR.STOP 'A' 'true'
RETSUB_DOWNNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNNIGA:
SUB_SLOWTOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -20.0
    DATA32 milliseconds413
	MOVEF_32 200.0 milliseconds413
	DATA32 timer413
	TIMER_WAIT milliseconds413 timer413
	TIMER_READY timer413
  while414:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile414
  whilebody414:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody414
  endwhile414:
    CALL MOTOR.START 'A' -10.0
RETSUB_SLOWTOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SLOWTOPNIGA:
SUB_WATER:
    DATA32 milliseconds418
	MOVEF_32 150.0 milliseconds418
	DATA32 timer418
	TIMER_WAIT milliseconds418 timer418
	TIMER_READY timer418
    CALL MOTOR.SCHEDULE 'D' 10.0 0.0 95.0 0.0 'true' 

	DATA8 layer419
	DATA8 nos419
	DATA8 busy419
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer419 nos419
	JR_EQ8 0 nos419 motornotbusy419
  motorwaiting419:
	OUTPUT_TEST layer419 nos419 busy419
	JR_EQ8 busy419 0 motornotbusy419
	SLEEP
	JR motorwaiting419
  motornotbusy419:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_RESETD:
    CALL MOTOR.GETCOUNT 'D' F.0
    CALL MOTOR.SCHEDULE 'D' -100.0 0.0 F.0 0.0 'true' 

	DATA8 layer422
	DATA8 nos422
	DATA8 busy422
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer422 nos422
	JR_EQ8 0 nos422 motornotbusy422
  motorwaiting422:
	OUTPUT_TEST layer422 nos422 busy422
	JR_EQ8 busy422 0 motornotbusy422
	SLEEP
	JR motorwaiting422
  motornotbusy422:
RETSUB_RESETD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RESETD:
SUB_LEFTNIGA:
    MOVEF_F 145.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB423:
    MOVEF_F 150.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB424:
    DATA32 tmp425
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp425
    JR_NEQ32 0 tmp425 alreadylaunched425
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched425:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB426:
    MOVEF_F 137.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB427:
RETSUB_LEFTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFTNIGA:
SUB_RIGHTNIGA:
    MOVEF_F 123.5 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB428:
    MOVEF_F 108.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB429:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB430:
    MOVEF_F 105.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB431:
    MOVEF_F 128.4 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB432:
RETSUB_RIGHTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHTNIGA:
SUB_TZ:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F 40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB433:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB434:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB435:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F -40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB436:
RETSUB_TZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TZ:
SUB_Z1:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 35.0 700.0 'true'

	DATA8 layer437
	DATA8 nos437
	DATA8 busy437
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer437 nos437
	JR_EQ8 0 nos437 motornotbusy437
  motorwaiting437:
	OUTPUT_TEST layer437 nos437 busy437
	JR_EQ8 busy437 0 motornotbusy437
	SLEEP
	JR motorwaiting437
  motornotbusy437:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB438:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -35.0 700.0 'true'

	DATA8 layer439
	DATA8 nos439
	DATA8 busy439
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer439 nos439
	JR_EQ8 0 nos439 motornotbusy439
  motorwaiting439:
	OUTPUT_TEST layer439 nos439 busy439
	JR_EQ8 busy439 0 motornotbusy439
	SLEEP
	JR motorwaiting439
  motornotbusy439:
RETSUB_Z1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z1:
SUB_Z2:
    CALL MOTOR.SCHEDULESYNC 'BC' 56.0 39.0 505.0 'true'

	DATA8 layer440
	DATA8 nos440
	DATA8 busy440
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer440 nos440
	JR_EQ8 0 nos440 motornotbusy440
  motorwaiting440:
	OUTPUT_TEST layer440 nos440 busy440
	JR_EQ8 busy440 0 motornotbusy440
	SLEEP
	JR motorwaiting440
  motornotbusy440:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB441:
    CALL MOTOR.SCHEDULESYNC 'BC' -56.0 -39.0 505.0 'true'

	DATA8 layer442
	DATA8 nos442
	DATA8 busy442
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer442 nos442
	JR_EQ8 0 nos442 motornotbusy442
  motorwaiting442:
	OUTPUT_TEST layer442 nos442 busy442
	JR_EQ8 busy442 0 motornotbusy442
	SLEEP
	JR motorwaiting442
  motornotbusy442:
RETSUB_Z2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z2:
SUB_Z3:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 20.0 270.0 'true'

	DATA8 layer443
	DATA8 nos443
	DATA8 busy443
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer443 nos443
	JR_EQ8 0 nos443 motornotbusy443
  motorwaiting443:
	OUTPUT_TEST layer443 nos443 busy443
	JR_EQ8 busy443 0 motornotbusy443
	SLEEP
	JR motorwaiting443
  motornotbusy443:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB444:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -20.0 270.0 'true'

	DATA8 layer445
	DATA8 nos445
	DATA8 busy445
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer445 nos445
	JR_EQ8 0 nos445 motornotbusy445
  motorwaiting445:
	OUTPUT_TEST layer445 nos445 busy445
	JR_EQ8 busy445 0 motornotbusy445
	SLEEP
	JR motorwaiting445
  motornotbusy445:
RETSUB_Z3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z3:
SUB_Z4:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -22.0 250.0 'true'

	DATA8 layer446
	DATA8 nos446
	DATA8 busy446
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer446 nos446
	JR_EQ8 0 nos446 motornotbusy446
  motorwaiting446:
	OUTPUT_TEST layer446 nos446 busy446
	JR_EQ8 busy446 0 motornotbusy446
	SLEEP
	JR motorwaiting446
  motornotbusy446:
    MOVEF_F 10.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB447:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB448:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB449:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 22.0 250.0 'true'

	DATA8 layer450
	DATA8 nos450
	DATA8 busy450
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer450 nos450
	JR_EQ8 0 nos450 motornotbusy450
  motorwaiting450:
	OUTPUT_TEST layer450 nos450 busy450
	JR_EQ8 busy450 0 motornotbusy450
	SLEEP
	JR motorwaiting450
  motornotbusy450:
RETSUB_Z4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z4:
SUB_Z5:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 4.0 550.0 'true'

	DATA8 layer451
	DATA8 nos451
	DATA8 busy451
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer451 nos451
	JR_EQ8 0 nos451 motornotbusy451
  motorwaiting451:
	OUTPUT_TEST layer451 nos451 busy451
	JR_EQ8 busy451 0 motornotbusy451
	SLEEP
	JR motorwaiting451
  motornotbusy451:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB452:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -4.0 550.0 'true'

	DATA8 layer453
	DATA8 nos453
	DATA8 busy453
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer453 nos453
	JR_EQ8 0 nos453 motornotbusy453
  motorwaiting453:
	OUTPUT_TEST layer453 nos453 busy453
	JR_EQ8 busy453 0 motornotbusy453
	SLEEP
	JR motorwaiting453
  motornotbusy453:
RETSUB_Z5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z5:
SUB_Z6:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 24.0 560.0 'true'

	DATA8 layer454
	DATA8 nos454
	DATA8 busy454
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer454 nos454
	JR_EQ8 0 nos454 motornotbusy454
  motorwaiting454:
	OUTPUT_TEST layer454 nos454 busy454
	JR_EQ8 busy454 0 motornotbusy454
	SLEEP
	JR motorwaiting454
  motornotbusy454:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB455:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -24.0 560.0 'true'

	DATA8 layer456
	DATA8 nos456
	DATA8 busy456
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer456 nos456
	JR_EQ8 0 nos456 motornotbusy456
  motorwaiting456:
	OUTPUT_TEST layer456 nos456 busy456
	JR_EQ8 busy456 0 motornotbusy456
	SLEEP
	JR motorwaiting456
  motornotbusy456:
RETSUB_Z6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z6:
SUB_COLOR_2:
    MOVEF_F 120.0 VH_7
    MOVEF_F 0.0 VJ_7
    DATA8 layer459
	DATA8 no459
	DATA8 mode8459
	
	MOVEF_8 VPORT_7 no459
	SUB8 no459 1 no459
	DIV8 no459 4 layer459
	MATH MOD8 no459 4 no459

	MOVEF_8 4.0 mode8459
	
	INPUT_DEVICE READY_RAW layer459 no459 0 mode8459 0
    DATA32 milliseconds460
	MOVEF_32 150.0 milliseconds460
	DATA32 timer460
	TIMER_WAIT milliseconds460 timer460
	TIMER_READY timer460
  while461:
    JR_NEQF VH_7 120.0 endwhile461
    JR_GTEQF VJ_7 20.0 endwhile461
  whilebody461:
    CALL SENSOR.READRAW VPORT_7 2.0 VA_7
    CALL ARRAYGET_FLOAT 0.0 VSRED_7 VA_7
    CALL ARRAYGET_FLOAT 1.0 VSGREEN_7 VA_7
    CALL ARRAYGET_FLOAT 2.0 VSBLUE_7 VA_7
    JR_LTEQF VSRED_7 VSGREEN_7 else466_1
    JR_LTEQF VSRED_7 VSBLUE_7 else466_1
    MOVEF_F VSRED_7 VMAX_7
    JR endif466
  else466_1:
    JR_LTEQF VSGREEN_7 VSRED_7 else466_2
    JR_LTEQF VSGREEN_7 VSBLUE_7 else466_2
    MOVEF_F VSGREEN_7 VMAX_7
    JR endif466
  else466_2:
    JR_LTEQF VSBLUE_7 VSRED_7 else466_3
    JR_LTEQF VSBLUE_7 VSGREEN_7 else466_3
    MOVEF_F VSBLUE_7 VMAX_7
  else466_3:
  endif466:
    JR_GTEQF VSRED_7 VSGREEN_7 else467_1
    JR_GTEQF VSRED_7 VSBLUE_7 else467_1
    MOVEF_F VSRED_7 VMIN_7
    JR endif467
  else467_1:
    JR_GTEQF VSGREEN_7 VSRED_7 else467_2
    JR_GTEQF VSGREEN_7 VSBLUE_7 else467_2
    MOVEF_F VSGREEN_7 VMIN_7
    JR endif467
  else467_2:
    JR_GTEQF VSBLUE_7 VSRED_7 else467_3
    JR_GTEQF VSBLUE_7 VSGREEN_7 else467_3
    MOVEF_F VSBLUE_7 VMIN_7
  else467_3:
  endif467:
    JR_NEQF VMAX_7 VMIN_7 else468_1
    MOVEF_F 0.0 VH_7
    JR endif468
  else468_1:
    JR_NEQF VSRED_7 VMAX_7 else469_1
    JR_LTF VSGREEN_7 VSBLUE_7 else470_1
    SUBF VSGREEN_7 VSBLUE_7 F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_7 VMIN_7 F.1
    DATAF tmpf474
    DATA8 flag474
    DIVF F.0 F.1 tmpf474
    CP_EQF 0.0 F.1 flag474
    SELECTF flag474 0.0 tmpf474 VH_7

    JR endif470
  else470_1:
    SUBF VSGREEN_7 VSBLUE_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf478
    DATA8 flag478
    DIVF F.1 F.2 tmpf478
    CP_EQF 0.0 F.2 flag478
    SELECTF flag478 0.0 tmpf478 F.0

    ADDF F.0 360.0 VH_7
  else470_2:
  endif470:
    JR endif469
  else469_1:
    JR_NEQF VMAX_7 VSGREEN_7 else480_1
    SUBF VSBLUE_7 VSRED_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf484
    DATA8 flag484
    DIVF F.1 F.2 tmpf484
    CP_EQF 0.0 F.2 flag484
    SELECTF flag484 0.0 tmpf484 F.0

    ADDF F.0 120.0 VH_7
    JR endif480
  else480_1:
    SUBF VSRED_7 VSGREEN_7 F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_7 VMIN_7 F.2
    DATAF tmpf489
    DATA8 flag489
    DIVF F.1 F.2 tmpf489
    CP_EQF 0.0 F.2 flag489
    SELECTF flag489 0.0 tmpf489 F.0

    ADDF F.0 240.0 VH_7
  else480_2:
  endif480:
  else469_2:
  endif469:
  else468_2:
  endif468:
    ADDF VJ_7 1.0 VJ_7
    JR_NEQF VH_7 120.0 and492
    JR_LTF VJ_7 20.0 whilebody461
  and492:
  endwhile461:
    JR_NEQF VMAX_7 0.0 else493_1
    MOVEF_F 0.0 VS_7
    JR endif493
  else493_1:
    DATAF tmpf494
    DATA8 flag494
    DIVF VMIN_7 VMAX_7 tmpf494
    CP_EQF 0.0 VMAX_7 flag494
    SELECTF flag494 0.0 tmpf494 F.0

    SUBF 1.0 F.0 VS_7
  else493_2:
  endif493:
    MOVEF_F VMAX_7 VV_7
    DATA8 layer496
	DATA8 no496
	DATA8 mode8496
	
	MOVEF_8 VPORT_7 no496
	SUB8 no496 1 no496
	DIV8 no496 4 layer496
	MATH MOD8 no496 4 no496

	MOVEF_8 2.0 mode8496
	
	INPUT_DEVICE READY_RAW layer496 no496 0 mode8496 0
    DATA32 milliseconds497
	MOVEF_32 150.0 milliseconds497
	DATA32 timer497
	TIMER_WAIT milliseconds497 timer497
	TIMER_READY timer497
    CALL SENSOR.READRAWVALUE VPORT_7 0.0 VCLR_7
    JR_NEQF VCLR_7 3.0 else499_1
    JR_LTEQF VH_7 95.0 else500_1
    MOVEF_F 3.0 VCOL_7
    JR endif500
  else500_1:
    MOVEF_F 2.0 VCOL_7
  else500_2:
  endif500:
    MOVEF_F VCOL_7 VDOP_7
    JR endif499
  else499_1:
    JR_LTEQF VH_7 10.0 else499_2
    JR_GTEQF VH_7 35.0 else499_2
    JR_LTEQF VV_7 9.0 else499_2
    MOVEF_F 5.0 VCOL_7
    JR endif499
  else499_2:
    JR_LTEQF VH_7 35.0 else499_3
    JR_GTEQF VH_7 80.0 else499_3
    JR_LTEQF VV_7 9.0 else499_3
    MOVEF_F 6.0 VCOL_7
    JR endif499
  else499_3:
    MOVEF_F 0.0 VCOL_7
  else499_4:
  endif499:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VV_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 2.0 S.0
    STRINGS VALUE_FORMATTED VSGREEN_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 100.0 2.0 S.0
    JR_EQF VCOL_7 2.0 or509
    JR_NEQF VCOL_7 3.0 else508_1
  or509:
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif508
  else508_1:
    JR_NEQF VCOL_7 5.0 else508_2
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif508
  else508_2:
    JR_NEQF VCOL_7 6.0 else508_3
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif508
  else508_3:
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
  else508_4:
  endif508:
RETSUB_COLOR_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_2:
SUB_START_3:
    MOVEF_F VSTART_8 VSTRT_M
    JR_NEQF VSTART_8 1.0 else514_1
    MOVEF_F 2.0 VFINISH_M
    JR endif514
  else514_1:
    MOVEF_F 1.0 VFINISH_M
  else514_2:
  endif514:
    JR_NEQF VSTART_8 1.0 else515_1
    MOVEF_F 70.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB516:
    MOVEF_F 70.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB517:
    MOVEF_F 2.0 VFINISH_8
    JR endif515
  else515_1:
    MOVEF_F 60.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB518:
    MOVEF_F 60.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB519:
    MOVEF_F 1.0 VFINISH_8
  else515_2:
  endif515:
    MOVEF_F 900.0 VL_1
    MOVEF_F 90.0 VNSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB520:
    JR_NEQF VSTART_8 1.0 else521_1
    MOVEF_F 90.0 VGRAD_6
    MOVEF_F 90.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB522:
    MOVEF_F -60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB523:
    MOVEF_F 900.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB524:
    MOVEF_F 60.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB525:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB526:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB527:
  else521_1:
  endif521:
RETSUB_START_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_3:
SUB_CUBE:
    DATA32 milliseconds528
	MOVEF_32 300.0 milliseconds528
	DATA32 timer528
	TIMER_WAIT milliseconds528 timer528
	TIMER_READY timer528
    ADDF VID_M 1.0 VID_M
    JR_EQF VID_M 1.0 or531
    JR_NEQF VID_M 2.0 else530_1
  or531:
    MOVEF_F 1.0 VZONE_M
    JR endif530
  else530_1:
    JR_EQF VID_M 3.0 or532
    JR_NEQF VID_M 4.0 else530_2
  or532:
    MOVEF_F 2.0 VZONE_M
    JR endif530
  else530_2:
    JR_EQF VID_M 5.0 or533
    JR_NEQF VID_M 12.0 else530_3
  or533:
    MOVEF_F 3.0 VZONE_M
    JR endif530
  else530_3:
    JR_EQF VID_M 6.0 or534
    JR_NEQF VID_M 7.0 else530_4
  or534:
    MOVEF_F 4.0 VZONE_M
    JR endif530
  else530_4:
    JR_EQF VID_M 8.0 or535
    JR_NEQF VID_M 9.0 else530_5
  or535:
    MOVEF_F 5.0 VZONE_M
    JR endif530
  else530_5:
    JR_EQF VID_M 10.0 or536
    JR_NEQF VID_M 11.0 else530_6
  or536:
    MOVEF_F 6.0 VZONE_M
  else530_6:
  endif530:
    JR_EQF VID_M 1.0 or538
    JR_EQF VID_M 2.0 or538
    JR_EQF VID_M 3.0 or538
    JR_EQF VID_M 4.0 or538
    JR_EQF VID_M 5.0 or538
    JR_EQF VID_M 6.0 or538
    JR_EQF VID_M 7.0 or538
    JR_EQF VID_M 9.0 or538
    JR_NEQF VID_M 10.0 else537_1
  or538:
    MOVEF_F 4.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB539:
    MOVEF_F VCOL_7 VCOL_M
    JR endif537
  else537_1:
    MOVEF_F 1.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB540:
    MOVEF_F VCOL_7 VCOL_M
  else537_2:
  endif537:
    JR_EQF VCOL_M 0.0 else541_1
    CALL ARRAYSTORE_FLOAT VZONE_M 1.0 VZONES_M
  else541_1:
  endif541:
    JR_EQF VCOL_M 1.0 or544
    JR_EQF VCOL_M 2.0 or544
    JR_NEQF VCOL_M 3.0 else543_1
  or544:
    JR_EQF VNIGA_M 1.0 else545_1
    JR_EQF VID_M 1.0 or547
    JR_EQF VID_M 3.0 or547
    JR_EQF VID_M 4.0 or547
    JR_EQF VID_M 5.0 or547
    JR_EQF VID_M 6.0 or547
    JR_EQF VID_M 7.0 or547
    JR_NEQF VID_M 10.0 else546_1
  or547:
    WRITE32 ENDSUB_RIGHTNIGA:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHTNIGA
CALLSUB548:
  else546_1:
  endif546:
    MOVEF_F 1.0 VNIGA_M
    JR_EQF VID_M 4.0 or550
    JR_NEQF VID_M 7.0 else549_1
  or550:
    MOVEF_F -55.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB551:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB552:
  else549_1:
  endif549:
    MOVEF_F VZONE_M VDOPZONE_M
  else545_1:
  endif545:
    JR endif543
  else543_1:
    JR_NEQF VCOL_M 5.0 else543_2
    JR_EQF VID_M 6.0 or554
    JR_NEQF VID_M 8.0 else553_1
  or554:
    MOVEF_F 1.0 VWTR_M
    JR endif553
  else553_1:
    JR_NEQF VID_M 12.0 else553_2
    MOVEF_F 70.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB555:
    MOVEF_F 35.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB556:
    WRITE32 ENDSUB_WATER:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB557:
    MOVEF_F 35.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB558:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB559:
    JR endif553
  else553_2:
    JR_NEQF VID_M 11.0 else553_3
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB560:
    MOVEF_F 45.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB561:
    WRITE32 ENDSUB_WATER:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB562:
    MOVEF_F 45.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB563:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB564:
    JR endif553
  else553_3:
    JR_EQF VID_M 2.0 or565
    JR_NEQF VID_M 9.0 else553_4
  or565:
    WRITE32 ENDSUB_WATER:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB566:
    JR endif553
  else553_4:
    DATA32 tmp567
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp567
    JR_NEQ32 0 tmp567 alreadylaunched567
    OBJECT_START TWATER
  alreadylaunched567:
  else553_5:
  endif553:
    ADDF VRD_M 1.0 VRD_M
    JR endif543
  else543_2:
    JR_NEQF VCOL_M 6.0 else543_3
    JR_NEQF VWHITE1_M 0.0 else569_1
    MOVEF_F VZONE_M VWHITE1_M
    JR endif569
  else569_1:
    JR_NEQF VWHITE2_M 0.0 else569_2
    MOVEF_F VZONE_M VWHITE2_M
  else569_2:
  endif569:
    JR_NEQF VZN1_M 0.0 else570_1
    MOVEF_F VZONE_M VZN1_M
    JR endif570
  else570_1:
    JR_NEQF VZN2_M 0.0 else570_2
    JR_EQF VZONE_M VZN1_M else571_1
    MOVEF_F VZONE_M VZN2_M
  else571_1:
  endif571:
  else570_2:
  endif570:
  else543_3:
  endif543:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_FINDFREEZONE:
    MOVEF_F 1.0 VI_M
  for572:
    JR_GTF VI_M 6.0 endfor572
  forbody572:
    CALL ARRAYGET_FLOAT VI_M F.0 VZONES_M
    JR_NEQF F.0 0.0 else573_1
    MOVEF_F VI_M VFREEZONE_M
    MOVEF_F 6.0 VI_M
  else573_1:
  endif573:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 6.0 forbody572
  endfor572:
RETSUB_FINDFREEZONE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FINDFREEZONE:
SUB_VIRAV_1:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VSTIME_9
    DATA32 milliseconds578
	MOVEF_32 500.0 milliseconds578
	DATA32 timer578
	TIMER_WAIT milliseconds578 timer578
	TIMER_READY timer578
  while579:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_GTF F.0 F.1 or580
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_LTEQF F.0 F.1 endwhile579
  or580:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_GTEQF F.0 6000.0 endwhile579
  whilebody579:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_GTF F.0 F.1 or592
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_LTEQF F.0 F.1 and591
  or592:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.1
    SUBF F.1 VSTIME_9 F.0
    JR_LTF F.0 6000.0 whilebody579
  and591:
  endwhile579:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VSP_9 0.0 else604_1
    MOVEF_F -60.0 VSP_9
    JR endif604
  else604_1:
    MOVEF_F 60.0 VSP_9
  else604_2:
  endif604:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds606
	MOVEF_32 400.0 milliseconds606
	DATA32 timer606
	TIMER_WAIT milliseconds606 timer606
	TIMER_READY timer606
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_VIRAV_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAW            // FFA
{
	IN_F port
	IN_F values
	IN_16 resultarray
	
	DATA8 layer
	DATA8 no
	DATA32 values32
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 values values32

	JR_LTEQ32 values32 0 arrayempty
	ARRAY RESIZE resultarray values32

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 i
	DATA32 rawtmp
	MOVE32_32 0 i
loop:
	DATA8 tmp8
	DATAF tmpf

	MOVEF_F 0.0 tmpf
	JR_GTEQ32 i 8 nomoredata

	MOVE32_8 i tmp8
	READ32 rawvalue0 tmp8 rawtmp
	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp tmpf

nomoredata:	
	ARRAY_WRITE resultarray i tmpf

	ADD32 i 1 i
	JR_LT32 i values32 loop
	RETURN

arrayempty:
	ARRAY RESIZE resultarray 0
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MATH.GETRANDOMNUMBER   // FF
{
	IN_F range
	OUT_F result
	
	DATA16 range_16
	DATA16 value
	MOVEF_16 range range_16
	
	RANDOM 1 range_16 value
	MOVE16_F value result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
