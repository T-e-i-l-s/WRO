DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VF_M
DATAF VMIN1_M
DATAF VMIN2_M
DATAF VMAX1_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VMAXR_M
DATAF VMINR_M
DATAF VMAXW_M
DATAF VMINW_M
DATAF VMAXB_M
DATAF VMINB_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VEVCOL_M
DATAF VEVGRE_M
DATAF VRD_M
DATAF VZN1_M
DATAF VZN2_M
DATAF VNIGA_M
DATAF VCOL_M
DATAF VZONE_M
DATAF VFIN_M
DATAF VZN_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VA_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VNSP_3
DATAF VL_3
DATAF VDEL_3
DATAF VSP_3
DATAF VGRAD_4
DATAF VNSP_4
DATAF VL_4
DATAF VDEL_4
DATAF VSP_4
DATAF VGRAD_5
DATAF VNSP_5
DATAF VL_5
DATAF VDEL_5
DATAF VSP_5
DATAF VU_5
DATAF VGRAD_6
DATAF VNSP_6
DATAF VL_6
DATAF VDEL_6
DATAF VSP_6
DATAF VU_6
DATAF VPORT_7
DATAF VCOL_7
DATAF VEVCOL_7
DATAF VEVGRE_7
DATAF VS_7
DATAF VSTART_8
DATAF VFINISH_8
DATAF VSP_9
DATAF VSTRT_M
DATAF VFINISH_M
DATA32 RUNCOUNTER_SLOWTOPNIGA
DATA32 RUNCOUNTER_WATER
DATA32 RUNCOUNTER_DOWNNIGA
DATA32 RUNCOUNTER_RESETD
DATA32 RUNCOUNTER_TOPNIGA

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VEVCOL_7
    MOVEF_F 0.0 VEVGRE_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSTRT_M
    MOVEF_F 0.0 VFINISH_M
    MOVE32_32 0 RUNCOUNTER_SLOWTOPNIGA
    MOVE32_32 0 RUNCOUNTER_WATER
    MOVE32_32 0 RUNCOUNTER_DOWNNIGA
    MOVE32_32 0 RUNCOUNTER_RESETD
    MOVE32_32 0 RUNCOUNTER_TOPNIGA
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TSLOWTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_SLOWTOPNIGA 0
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA -1 RUNCOUNTER_SLOWTOPNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TWATER
{
    DATA32 tmp
  launch:
    CALL PROGRAM_WATER 1
    CALL GETANDINC32 RUNCOUNTER_WATER -1 RUNCOUNTER_WATER tmp
    JR_GT32 tmp 1 launch
}
vmthread TDOWNNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWNNIGA 2
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA -1 RUNCOUNTER_DOWNNIGA tmp
    JR_GT32 tmp 1 launch
}
vmthread TRESETD
{
    DATA32 tmp
  launch:
    CALL PROGRAM_RESETD 3
    CALL GETANDINC32 RUNCOUNTER_RESETD -1 RUNCOUNTER_RESETD tmp
    JR_GT32 tmp 1 launch
}
vmthread TTOPNIGA
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TOPNIGA 4
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA -1 RUNCOUNTER_TOPNIGA tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_SLOWTOPNIGA
subcall PROGRAM_WATER
subcall PROGRAM_DOWNNIGA
subcall PROGRAM_RESETD
subcall PROGRAM_TOPNIGA
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    DATAF F.5
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch707
    WRITE32 ENDSUB_SLOWTOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SLOWTOPNIGA
  dispatch707:
    JR_NEQ32 SUBPROGRAM 1 dispatch708
    WRITE32 ENDSUB_WATER:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
  dispatch708:
    JR_NEQ32 SUBPROGRAM 2 dispatch709
    WRITE32 ENDSUB_DOWNNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
  dispatch709:
    JR_NEQ32 SUBPROGRAM 3 dispatch710
    WRITE32 ENDSUB_RESETD:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RESETD
  dispatch710:
    JR_NEQ32 SUBPROGRAM 4 dispatch711
    WRITE32 ENDSUB_TOPNIGA:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
  dispatch711:
    MOVEF_F 0.0 VF_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VFIN_M
    MOVEF_F 0.0 VZN_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VA_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VNSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VNSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEL_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VNSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEL_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VU_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VNSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VDEL_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VU_6
    MOVEF_F 0.0 VPORT_7
    MOVEF_F 0.0 VCOL_7
    MOVEF_F 0.0 VEVCOL_7
    MOVEF_F 0.0 VEVGRE_7
    MOVEF_F 0.0 VS_7
    MOVEF_F 0.0 VSTART_8
    MOVEF_F 0.0 VFINISH_8
    MOVEF_F 0.0 VSP_9
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 1.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 4.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 4.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 4.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    CALL EV3FILE.OPENREAD 'colib.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX1_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 65.0 VV_M
    MOVEF_F 0.0 VMAXR_M
    MOVEF_F 0.0 VMINR_M
    MOVEF_F 0.0 VMAXW_M
    MOVEF_F 0.0 VMINW_M
    MOVEF_F 0.0 VMAXB_M
    MOVEF_F 0.0 VMINB_M
    CALL EV3FILE.OPENREAD 'RROtesting/col1.txt' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINR_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINW_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAXB_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMINB_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VEVCOL_M
    MOVEF_F 0.0 VEVGRE_M
    MOVEF_F 0.0 VID_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED 1.11111111111111E+17 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    MOVEF_F 0.0 VRD_M
    CALL MOTOR.RESETCOUNT 'D'
    MOVEF_F 0.0 VZN1_M
    MOVEF_F 0.0 VZN2_M
    MOVEF_F 0.0 VNIGA_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VCOL_M
    DATA32 tmp422
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp422
    JR_NEQ32 0 tmp422 alreadylaunched422
    OBJECT_START TDOWNNIGA
  alreadylaunched422:
    MOVEF_F 2.0 VSTART_8
    WRITE32 ENDSUB_START_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_2
CALLSUB423:
    MOVEF_F VFINISH_8 VFIN_M
    MOVEF_F 900.0 VL_1
    MOVEF_F 90.0 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB424:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VSP_M
  while426:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or427
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile426
  or427:
  whilebody426:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody426
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody426
  endwhile426:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 150.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB442:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 80.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB443:
    MOVEF_F -90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB444:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB445:
    MOVEF_F 90.0 VGRAD_6
    MOVEF_F 80.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB446:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while448:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 or449
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile448
  or449:
  whilebody448:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 27.0 whilebody448
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody448
  endwhile448:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB464:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VSP_M
  while466:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or467
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile466
  or467:
  whilebody466:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 6.0 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 6.0 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody466
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody466
  endwhile466:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB482:
    CALL MOTOR.RESETCOUNT 'BC'
  while484:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf488
    DATA8 flag488
    DIVF F.1 2.0 tmpf488
    CP_EQF 0.0 2.0 flag488
    SELECTF flag488 0.0 tmpf488 F.0

    JR_GTEQF F.0 50.0 endwhile484
  whilebody484:
    WRITE32 ENDSUB_LINE:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB489:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf493
    DATA8 flag493
    DIVF F.1 2.0 tmpf493
    CP_EQF 0.0 2.0 flag493
    SELECTF flag493 0.0 tmpf493 F.0

    JR_LTF F.0 50.0 whilebody484
  endwhile484:
  while494:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile494
  whilebody494:
    WRITE32 ENDSUB_LINE:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB496:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody494
  endwhile494:
    WRITE32 ENDSUB_LEFT:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB498:
    CALL MOTOR.RESETCOUNT 'BC'
  while500:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf504
    DATA8 flag504
    DIVF F.1 2.0 tmpf504
    CP_EQF 0.0 2.0 flag504
    SELECTF flag504 0.0 tmpf504 F.0

    JR_GTEQF F.0 170.0 endwhile500
  whilebody500:
    WRITE32 ENDSUB_LINE:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB505:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf509
    DATA8 flag509
    DIVF F.1 2.0 tmpf509
    CP_EQF 0.0 2.0 flag509
    SELECTF flag509 0.0 tmpf509 F.0

    JR_LTF F.0 170.0 whilebody500
  endwhile500:
    MOVEF_F 1.0 VK_M
    MOVEF_F 35.0 VV_M
  while510:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or511
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile510
  or511:
  whilebody510:
    WRITE32 ENDSUB_LINE:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB514:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody510
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody510
  endwhile510:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 230.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB518:
    WRITE32 ENDSUB_CUBE:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB519:
    MOVEF_F 375.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB520:
    WRITE32 ENDSUB_CUBE:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB521:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB522:
    WRITE32 ENDSUB_CUBE:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB523:
    MOVEF_F 135.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB524:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB525:
    MOVEF_F -50.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB526:
    MOVEF_F 45.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB527:
    WRITE32 ENDSUB_CUBE:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB528:
    MOVEF_F 410.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB529:
    WRITE32 ENDSUB_CUBE:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB530:
    MOVEF_F 390.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB531:
    WRITE32 ENDSUB_CUBE:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB532:
    MOVEF_F 24.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB533:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB534:
    MOVEF_F -70.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB535:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB536:
    WRITE32 ENDSUB_CUBE:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB537:
    MOVEF_F 490.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB538:
    WRITE32 ENDSUB_CUBE:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB539:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB540:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB541:
    MOVEF_F -90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB542:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB543:
    WRITE32 ENDSUB_CUBE:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB544:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB545:
    WRITE32 ENDSUB_CUBE:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB546:
    JR_LTF VRD_M 2.0 or548
    JR_NEQF VNIGA_M 1.0 or548
    JR_EQF VZN1_M 0.0 or548
    JR_NEQF VZN2_M 0.0 else547_1
  or548:
    MOVEF_F 32.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB549:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB550:
    MOVEF_F 355.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB551:
    WRITE32 ENDSUB_CUBE:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB552:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB553:
    WRITE32 ENDSUB_CUBE:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB554:
    MOVEF_F 17.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB555:
    MOVEF_F 17.0 VGRAD_3
    MOVEF_F -90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB556:
    MOVEF_F 730.0 VMM_2
    MOVEF_F -90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB557:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 70.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB558:
    JR endif547
  else547_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB559:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB560:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB561:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB562:
  else547_2:
  endif547:
    CALL MOTOR.STARTPOWER 'BC' -70.0
  while564:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 25.0 or565
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 25.0 endwhile564
  or565:
  whilebody564:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 25.0 whilebody564
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 25.0 whilebody564
  endwhile564:
  while570:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 or571
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile570
  or571:
  whilebody570:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 13.0 whilebody570
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody570
  endwhile570:
    WRITE32 ENDSUB_LEFT:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB576:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
  while577:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 or578
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile577
  or578:
  whilebody577:
    WRITE32 ENDSUB_LINE:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB581:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody577
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody577
  endwhile577:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.6 VK_M
    MOVEF_F 60.0 VV_M
  while585:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or586
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile585
  or586:
  whilebody585:
    WRITE32 ENDSUB_LINE:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB589:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody585
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody585
  endwhile585:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB593:
    DATA32 tmp594
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp594
    JR_NEQ32 0 tmp594 alreadylaunched594
    OBJECT_START TDOWNNIGA
  alreadylaunched594:
  while595:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or596
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile595
  or596:
  whilebody595:
    WRITE32 ENDSUB_LINE:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB599:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody595
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody595
  endwhile595:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB603:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 90.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB604:
    DATA32 tmp605
    CALL GETANDINC32 RUNCOUNTER_RESETD 1  RUNCOUNTER_RESETD tmp605
    JR_NEQ32 0 tmp605 alreadylaunched605
    OBJECT_START TRESETD
  alreadylaunched605:
    MOVEF_F -90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB606:
    MOVEF_F 100.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB607:
    MOVEF_F 600.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB608:
    MOVEF_F 90.0 VSP_9
    WRITE32 ENDSUB_VIRAV_1:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_1
CALLSUB609:
    JR_NEQF VZN1_M 0.0 else610_1
    CALL MATH.GETRANDOMNUMBER 6.0 VZN1_M
  else610_1:
  endif610:
    JR_NEQF VZN2_M 0.0 else612_1
    MOVEF_F VZN1_M VZN2_M
  while613:
    JR_NEQF VZN2_M VZN1_M endwhile613
  whilebody613:
    CALL MATH.GETRANDOMNUMBER 6.0 VZN2_M
    JR_EQF VZN2_M VZN1_M whilebody613
  endwhile613:
  else612_1:
  endif612:
    CALL MOTOR.STARTSYNC 'BC' -60.0 -21.0
    DATA32 milliseconds616
	MOVEF_32 1600.0 milliseconds616
	DATA32 timer616
	TIMER_WAIT milliseconds616 timer616
	TIMER_READY timer616
    CALL MOTOR.STOP 'BC' 'TRUE'
    DATA32 tmp618
    CALL GETANDINC32 RUNCOUNTER_TOPNIGA 1  RUNCOUNTER_TOPNIGA tmp618
    JR_NEQ32 0 tmp618 alreadylaunched618
    OBJECT_START TTOPNIGA
  alreadylaunched618:
    MOVEF_F 226.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB619:
    DATA32 tmp620
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp620
    JR_NEQ32 0 tmp620 alreadylaunched620
    OBJECT_START TDOWNNIGA
  alreadylaunched620:
    JR_EQF VZN1_M 1.0 or622
    JR_NEQF VZN2_M 1.0 else621_1
  or622:
    WRITE32 ENDSUB_Z1:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB623:
    MOVEF_F 1.0 VZONE1_M
    JR endif621
  else621_1:
    JR_EQF VZN1_M 6.0 or624
    JR_NEQF VZN2_M 6.0 else621_2
  or624:
    WRITE32 ENDSUB_Z6:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB625:
    MOVEF_F 6.0 VZONE1_M
    JR endif621
  else621_2:
    JR_EQF VZN1_M 5.0 or626
    JR_NEQF VZN2_M 5.0 else621_3
  or626:
    WRITE32 ENDSUB_Z5:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB627:
    MOVEF_F 5.0 VZONE1_M
    JR endif621
  else621_3:
    JR_EQF VZN1_M 2.0 or628
    JR_NEQF VZN2_M 2.0 else621_4
  or628:
    WRITE32 ENDSUB_Z2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB629:
    MOVEF_F 2.0 VZONE1_M
    JR endif621
  else621_4:
    JR_EQF VZN1_M 3.0 or630
    JR_NEQF VZN2_M 3.0 else621_5
  or630:
    WRITE32 ENDSUB_Z3:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB631:
    MOVEF_F 3.0 VZONE1_M
    JR endif621
  else621_5:
    JR_EQF VZN1_M 4.0 or632
    JR_NEQF VZN2_M 4.0 else621_6
  or632:
    WRITE32 ENDSUB_Z4:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB633:
    MOVEF_F 4.0 VZONE1_M
  else621_6:
  endif621:
    MOVEF_F 28.0 VGRAD_3
    MOVEF_F 50.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB634:
    MOVEF_F 28.0 VGRAD_4
    MOVEF_F 50.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB635:
    CALL MOTOR.STARTPOWER 'B' 40.0
  while637:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile637
  whilebody637:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody637
  endwhile637:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER 'C' 40.0
  while642:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 9.0 endwhile642
  whilebody642:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 9.0 whilebody642
  endwhile642:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 320.0 VMM_M
    DATAF tmpf647
    DATA8 flag647
    DIVF VMM_M 257.48 tmpf647
    CP_EQF 0.0 257.48 flag647
    SELECTF flag647 0.0 tmpf647 F.0

    MULF F.0 360.0 VL_M
  while649:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf655
    DATA8 flag655
    DIVF F.1 2.0 tmpf655
    CP_EQF 0.0 2.0 flag655
    SELECTF flag655 0.0 tmpf655 F.0

    JR_GTF F.0 VL_M endwhile649
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 18.0 endwhile649
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 18.0 endwhile649
  whilebody649:
    WRITE32 ENDSUB_SEN2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB658:
    SUBF VS2_M 2.0 VU_M
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf672
    DATA8 flag672
    DIVF F.1 2.0 tmpf672
    CP_EQF 0.0 2.0 flag672
    SELECTF flag672 0.0 tmpf672 F.0

    JR_GTF F.0 VL_M and666
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 18.0 and666
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 18.0 whilebody649
  and666:
  endwhile649:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 45.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB676:
    WRITE32 ENDSUB_DOWNNIGA:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWNNIGA
CALLSUB677:
    MOVEF_F 45.0 VGRAD_4
    MOVEF_F -80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB678:
    MOVEF_F 346.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB679:
    JR_NEQF VZONE1_M VZN1_M else680_1
    MOVEF_F VZN2_M VZN_M
    JR endif680
  else680_1:
    JR_NEQF VZONE1_M VZN2_M else680_2
    MOVEF_F VZN1_M VZN_M
  else680_2:
  endif680:
    JR_NEQF VZN_M 1.0 else681_1
    WRITE32 ENDSUB_Z1:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z1
CALLSUB682:
    MOVEF_F 1.0 VZONE1_M
    JR endif681
  else681_1:
    JR_NEQF VZN_M 6.0 else681_2
    WRITE32 ENDSUB_Z6:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z6
CALLSUB683:
    MOVEF_F 6.0 VZONE1_M
    JR endif681
  else681_2:
    JR_NEQF VZN_M 5.0 else681_3
    WRITE32 ENDSUB_Z5:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z5
CALLSUB684:
    MOVEF_F 5.0 VZONE1_M
    JR endif681
  else681_3:
    JR_NEQF VZN_M 2.0 else681_4
    WRITE32 ENDSUB_Z2:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z2
CALLSUB685:
    MOVEF_F 2.0 VZONE1_M
    JR endif681
  else681_4:
    JR_NEQF VZN_M 3.0 else681_5
    WRITE32 ENDSUB_Z3:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z3
CALLSUB686:
    MOVEF_F 3.0 VZONE1_M
    JR endif681
  else681_5:
    JR_NEQF VZN_M 4.0 else681_6
    WRITE32 ENDSUB_Z4:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_Z4
CALLSUB687:
    MOVEF_F 4.0 VZONE1_M
  else681_6:
  endif681:
    DATA32 tmp688
    CALL GETANDINC32 RUNCOUNTER_DOWNNIGA 1  RUNCOUNTER_DOWNNIGA tmp688
    JR_NEQ32 0 tmp688 alreadylaunched688
    OBJECT_START TDOWNNIGA
  alreadylaunched688:
    JR_NEQF VFIN_M 1.0 else689_1
    CALL MOTOR.STARTPOWER 'BC' -80.0
    DATA32 milliseconds691
	MOVEF_32 1000.0 milliseconds691
	DATA32 timer691
	TIMER_WAIT milliseconds691 timer691
	TIMER_READY timer691
    CALL MOTOR.STOP 'BC' 'TRUE'
    MOVEF_F 120.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB693:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB694:
    CALL MOTOR.STARTPOWER 'BC' -90.0
    DATA32 milliseconds696
	MOVEF_32 1000.0 milliseconds696
	DATA32 timer696
	TIMER_WAIT milliseconds696 timer696
	TIMER_READY timer696
    CALL MOTOR.STOP 'BC' 'TRUE'
    JR endif689
  else689_1:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 100.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB698:
    CALL MOTOR.STARTPOWER 'BC' 90.0
    DATA32 milliseconds700
	MOVEF_32 1000.0 milliseconds700
	DATA32 timer700
	TIMER_WAIT milliseconds700 timer700
	TIMER_READY timer700
    CALL MOTOR.STOP 'BC' 'TRUE'
    MOVEF_F 153.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB702 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB702:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB703:
    CALL MOTOR.STARTPOWER 'BC' -90.0
    DATA32 milliseconds705
	MOVEF_32 1000.0 milliseconds705
	DATA32 timer705
	TIMER_WAIT milliseconds705 timer705
	TIMER_READY timer705
    CALL MOTOR.STOP 'BC' 'TRUE'
  else689_2:
  endif689:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.0 F.1 tmpf47
    CP_EQF 0.0 F.1 flag47
    SELECTF flag47 0.0 tmpf47 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.0 F.1 tmpf52
    CP_EQF 0.0 F.1 flag52
    SELECTF flag52 0.0 tmpf52 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB53:
    WRITE32 ENDSUB_SEN2:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB54:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while63:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTF F.0 VL_1 endwhile63
  whilebody63:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 6.0 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 6.0 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MOVEF_F 125.835016311947 VA_1
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    CALL MOTOR.GETCOUNT 'B' F.5
    MATH ABS F.5 F.4
    ADDF F.3 F.4 F.2
    DATAF tmpf85
    DATA8 flag85
    DIVF F.2 2.0 tmpf85
    CP_EQF 0.0 2.0 flag85
    SELECTF flag85 0.0 tmpf85 F.1

    SUBF VL_1 F.1 F.0
    JR_GTEQF F.0 VA_1 else79_1
    JR_LTEQF VSP_1 30.0 else79_1
    SUBF VSP_1 0.4 VSP_1
    JR_GTEQF VSP_1 0.0 else88_1
    SUBF 0.0 VSP_1 VSP_1
  else88_1:
  endif88:
  else79_1:
  endif79:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf95
    DATA8 flag95
    DIVF F.1 2.0 tmpf95
    CP_EQF 0.0 2.0 flag95
    SELECTF flag95 0.0 tmpf95 F.0

    JR_LTEQF F.0 VL_1 whilebody63
  endwhile63:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf97
    DATA8 flag97
    DIVF VMM_2 257.48 tmpf97
    CP_EQF 0.0 257.48 flag97
    SELECTF flag97 0.0 tmpf97 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB100:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer101
	DATA8 nos101
	DATA8 busy101
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer101 nos101
	JR_EQ8 0 nos101 motornotbusy101
  motorwaiting101:
	OUTPUT_TEST layer101 nos101 busy101
	JR_EQ8 busy101 0 motornotbusy101
	SLEEP
	JR motorwaiting101
  motornotbusy101:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 140.0 'true'

	DATA8 layer102
	DATA8 nos102
	DATA8 busy102
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer102 nos102
	JR_EQ8 0 nos102 motornotbusy102
  motorwaiting102:
	OUTPUT_TEST layer102 nos102 busy102
	JR_EQ8 busy102 0 motornotbusy102
	SLEEP
	JR motorwaiting102
  motornotbusy102:
  while103:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile103
  whilebody103:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody103
  endwhile103:
    CALL MOTOR.STOP 'bc' 'true'
  while108:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile108
  whilebody108:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody108
  endwhile108:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB113:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 88.0845114183626 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
  while116:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile116
  whilebody116:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody116
  endwhile116:
    CALL MOTOR.STOP 'bc' 'true'
  while121:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile121
  whilebody121:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB126:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_2:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf128
    DATA8 flag128
    DIVF F.0 360.0 tmpf128
    CP_EQF 0.0 360.0 flag128
    SELECTF flag128 0.0 tmpf128 VL_3

    DATAF tmpf129
    DATA8 flag129
    DIVF VL_3 257.48 tmpf129
    CP_EQF 0.0 257.48 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    MULF F.0 360.0 VL_3
    DATAF tmpf131
    DATA8 flag131
    DIVF VL_3 3.0 tmpf131
    CP_EQF 0.0 3.0 flag131
    SELECTF flag131 0.0 tmpf131 VDEL_3

    MOVEF_F VNSP_3 VSP_3
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while134:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile134
  whilebody134:
    CALL MOTOR.STARTPOWER 'C' VSP_3
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody134
  endwhile134:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_3
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1142.96 VGRAD_4 F.0
    DATAF tmpf142
    DATA8 flag142
    DIVF F.0 360.0 tmpf142
    CP_EQF 0.0 360.0 flag142
    SELECTF flag142 0.0 tmpf142 VL_4

    DATAF tmpf143
    DATA8 flag143
    DIVF VL_4 257.48 tmpf143
    CP_EQF 0.0 257.48 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    MULF F.0 360.0 VL_4
    DATAF tmpf145
    DATA8 flag145
    DIVF VL_4 3.0 tmpf145
    CP_EQF 0.0 3.0 flag145
    SELECTF flag145 0.0 tmpf145 VDEL_4

    MOVEF_F VNSP_4 VSP_4
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while148:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile148
  whilebody148:
    CALL MOTOR.STARTPOWER 'B' VSP_4
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody148
  endwhile148:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_4
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 182.0 F.2
    MULF F.2 VGRAD_5 F.1
    DATAF tmpf159
    DATA8 flag159
    DIVF F.1 360.0 tmpf159
    CP_EQF 0.0 360.0 flag159
    SELECTF flag159 0.0 tmpf159 F.0

    DATAF tmpf160
    DATA8 flag160
    DIVF F.0 2.0 tmpf160
    CP_EQF 0.0 2.0 flag160
    SELECTF flag160 0.0 tmpf160 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 75.0 F.1
    DATAF tmpf163
    DATA8 flag163
    DIVF VL_5 F.1 tmpf163
    CP_EQF 0.0 F.1 flag163
    SELECTF flag163 0.0 tmpf163 F.0

    MULF F.0 360.0 VL_5
    DATAF tmpf165
    DATA8 flag165
    DIVF VL_5 3.0 tmpf165
    CP_EQF 0.0 3.0 flag165
    SELECTF flag165 0.0 tmpf165 VDEL_5

    MOVEF_F 30.0 VSP_5
    CALL MOTOR.RESETCOUNT 'BC'
  while167:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile167
  whilebody167:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_5
    MULF VU_5 0.8 F.2
    SUBF VSP_5 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_5 0.8 F.1
    ADDF VSP_5 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_5 else181_1
    JR_GTEQF VSP_5 VNSP_5 else181_1
    ADDF VSP_5 10.0 VSP_5
    JR endif181
  else181_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_5 2.0 F.1
    JR_LTEQF F.0 F.1 else181_2
    JR_LTEQF VSP_5 30.0 else181_2
    SUBF VSP_5 10.0 VSP_5
  else181_2:
  endif181:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody167
  endwhile167:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_5
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.4
    MULF 2.0 F.4 F.3
    MULF F.3 186.0 F.2
    MULF F.2 VGRAD_6 F.1
    DATAF tmpf196
    DATA8 flag196
    DIVF F.1 360.0 tmpf196
    CP_EQF 0.0 360.0 flag196
    SELECTF flag196 0.0 tmpf196 F.0

    DATAF tmpf197
    DATA8 flag197
    DIVF F.0 2.0 tmpf197
    CP_EQF 0.0 2.0 flag197
    SELECTF flag197 0.0 tmpf197 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 75.0 F.1
    DATAF tmpf200
    DATA8 flag200
    DIVF VL_6 F.1 tmpf200
    CP_EQF 0.0 F.1 flag200
    SELECTF flag200 0.0 tmpf200 F.0

    MULF F.0 360.0 VL_6
    DATAF tmpf202
    DATA8 flag202
    DIVF VL_6 3.0 tmpf202
    CP_EQF 0.0 3.0 flag202
    SELECTF flag202 0.0 tmpf202 VDEL_6

    MOVEF_F 30.0 VSP_6
    CALL MOTOR.RESETCOUNT 'BC'
  while204:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_6 endwhile204
  whilebody204:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VU_6
    MULF VU_6 0.8 F.1
    SUBF VSP_6 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_6 0.8 F.2
    ADDF VSP_6 F.2 F.1
    SUBF 0.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VDEL_6 else218_1
    JR_GTEQF VSP_6 VNSP_6 else218_1
    ADDF VSP_6 10.0 VSP_6
    JR endif218
  else218_1:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    MULF VDEL_6 2.0 F.1
    JR_LTEQF F.0 F.1 else218_2
    JR_LTEQF VSP_6 30.0 else218_2
    SUBF VSP_6 10.0 VSP_6
  else218_2:
  endif218:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_6 whilebody204
  endwhile204:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VSP_6
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_WRITEF:
    CALL EV3FILE.OPENAPPEND 'RROtesting/evcol.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVCOL_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENAPPEND 'RROtesting/evgre.txt' VF_M
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.2
    CALL TEXT.APPEND S.2 '.' S.1
    STRINGS VALUE_FORMATTED VEVGRE_M '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
RETSUB_WRITEF:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WRITEF:
SUB_TOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -60.0
    DATA32 milliseconds256
	MOVEF_32 200.0 milliseconds256
	DATA32 timer256
	TIMER_WAIT milliseconds256 timer256
	TIMER_READY timer256
  while257:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile257
  whilebody257:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody257
  endwhile257:
    CALL MOTOR.START 'A' -15.0
RETSUB_TOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOPNIGA:
SUB_DOWNNIGA:
    CALL MOTOR.STARTPOWER 'A' 60.0
    DATA32 milliseconds262
	MOVEF_32 200.0 milliseconds262
	DATA32 timer262
	TIMER_WAIT milliseconds262 timer262
	TIMER_READY timer262
  while263:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTEQF F.0 5.0 endwhile263
  whilebody263:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 5.0 whilebody263
  endwhile263:
    CALL MOTOR.START 'A' 5.0
RETSUB_DOWNNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWNNIGA:
SUB_SLOWTOPNIGA:
    CALL MOTOR.STARTPOWER 'A' -20.0
    DATA32 milliseconds268
	MOVEF_32 200.0 milliseconds268
	DATA32 timer268
	TIMER_WAIT milliseconds268 timer268
	TIMER_READY timer268
  while269:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTEQF F.0 -5.0 endwhile269
  whilebody269:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_LTF F.0 -5.0 whilebody269
  endwhile269:
    CALL MOTOR.START 'A' -15.0
RETSUB_SLOWTOPNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SLOWTOPNIGA:
SUB_WATER:
    CALL MOTOR.SCHEDULE 'D' 20.0 0.0 95.0 0.0 'true' 

	DATA8 layer273
	DATA8 nos273
	DATA8 busy273
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer273 nos273
	JR_EQ8 0 nos273 motornotbusy273
  motorwaiting273:
	OUTPUT_TEST layer273 nos273 busy273
	JR_EQ8 busy273 0 motornotbusy273
	SLEEP
	JR motorwaiting273
  motornotbusy273:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_RESETD:
    CALL MOTOR.GETCOUNT 'D' F.0
    CALL MOTOR.SCHEDULE 'D' -100.0 0.0 F.0 0.0 'true' 

	DATA8 layer276
	DATA8 nos276
	DATA8 busy276
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer276 nos276
	JR_EQ8 0 nos276 motornotbusy276
  motorwaiting276:
	OUTPUT_TEST layer276 nos276 busy276
	JR_EQ8 busy276 0 motornotbusy276
	SLEEP
	JR motorwaiting276
  motornotbusy276:
RETSUB_RESETD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RESETD:
SUB_LEFTNIGA:
    MOVEF_F 120.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB277:
    MOVEF_F 135.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB278:
    DATA32 tmp279
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp279
    JR_NEQ32 0 tmp279 alreadylaunched279
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched279:
    MOVEF_F 135.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB280:
    MOVEF_F 114.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB281:
RETSUB_LEFTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFTNIGA:
SUB_RIGHTNIGA:
    MOVEF_F 122.0 VGRAD_6
    MOVEF_F 60.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB282:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB283:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB284:
    MOVEF_F 105.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB285:
    MOVEF_F 129.0 VGRAD_5
    MOVEF_F 30.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB286:
RETSUB_RIGHTNIGA:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHTNIGA:
SUB_TZ:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F 40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB287:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB288:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB289:
    MOVEF_F 110.0 VGRAD_4
    MOVEF_F -40.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB290:
RETSUB_TZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TZ:
SUB_Z1:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 36.0 700.0 'true'

	DATA8 layer291
	DATA8 nos291
	DATA8 busy291
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer291 nos291
	JR_EQ8 0 nos291 motornotbusy291
  motorwaiting291:
	OUTPUT_TEST layer291 nos291 busy291
	JR_EQ8 busy291 0 motornotbusy291
	SLEEP
	JR motorwaiting291
  motornotbusy291:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB292:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -36.0 700.0 'true'

	DATA8 layer293
	DATA8 nos293
	DATA8 busy293
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer293 nos293
	JR_EQ8 0 nos293 motornotbusy293
  motorwaiting293:
	OUTPUT_TEST layer293 nos293 busy293
	JR_EQ8 busy293 0 motornotbusy293
	SLEEP
	JR motorwaiting293
  motornotbusy293:
RETSUB_Z1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z1:
SUB_Z2:
    CALL MOTOR.SCHEDULESYNC 'BC' 56.0 42.0 560.0 'true'

	DATA8 layer294
	DATA8 nos294
	DATA8 busy294
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer294 nos294
	JR_EQ8 0 nos294 motornotbusy294
  motorwaiting294:
	OUTPUT_TEST layer294 nos294 busy294
	JR_EQ8 busy294 0 motornotbusy294
	SLEEP
	JR motorwaiting294
  motornotbusy294:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB295:
    CALL MOTOR.SCHEDULESYNC 'BC' -56.0 -42.0 560.0 'true'

	DATA8 layer296
	DATA8 nos296
	DATA8 busy296
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer296 nos296
	JR_EQ8 0 nos296 motornotbusy296
  motorwaiting296:
	OUTPUT_TEST layer296 nos296 busy296
	JR_EQ8 busy296 0 motornotbusy296
	SLEEP
	JR motorwaiting296
  motornotbusy296:
RETSUB_Z2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z2:
SUB_Z3:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 30.0 410.0 'true'

	DATA8 layer297
	DATA8 nos297
	DATA8 busy297
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer297 nos297
	JR_EQ8 0 nos297 motornotbusy297
  motorwaiting297:
	OUTPUT_TEST layer297 nos297 busy297
	JR_EQ8 busy297 0 motornotbusy297
	SLEEP
	JR motorwaiting297
  motornotbusy297:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB298:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -30.0 410.0 'true'

	DATA8 layer299
	DATA8 nos299
	DATA8 busy299
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer299 nos299
	JR_EQ8 0 nos299 motornotbusy299
  motorwaiting299:
	OUTPUT_TEST layer299 nos299 busy299
	JR_EQ8 busy299 0 motornotbusy299
	SLEEP
	JR motorwaiting299
  motornotbusy299:
RETSUB_Z3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z3:
SUB_Z4:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB300:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -20.0 270.0 'true'

	DATA8 layer301
	DATA8 nos301
	DATA8 busy301
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer301 nos301
	JR_EQ8 0 nos301 motornotbusy301
  motorwaiting301:
	OUTPUT_TEST layer301 nos301 busy301
	JR_EQ8 busy301 0 motornotbusy301
	SLEEP
	JR motorwaiting301
  motornotbusy301:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB302:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB303:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 20.0 270.0 'true'

	DATA8 layer304
	DATA8 nos304
	DATA8 busy304
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer304 nos304
	JR_EQ8 0 nos304 motornotbusy304
  motorwaiting304:
	OUTPUT_TEST layer304 nos304 busy304
	JR_EQ8 busy304 0 motornotbusy304
	SLEEP
	JR motorwaiting304
  motornotbusy304:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB305:
RETSUB_Z4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z4:
SUB_Z5:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 4.0 550.0 'true'

	DATA8 layer306
	DATA8 nos306
	DATA8 busy306
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer306 nos306
	JR_EQ8 0 nos306 motornotbusy306
  motorwaiting306:
	OUTPUT_TEST layer306 nos306 busy306
	JR_EQ8 busy306 0 motornotbusy306
	SLEEP
	JR motorwaiting306
  motornotbusy306:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB307:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -4.0 550.0 'true'

	DATA8 layer308
	DATA8 nos308
	DATA8 busy308
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer308 nos308
	JR_EQ8 0 nos308 motornotbusy308
  motorwaiting308:
	OUTPUT_TEST layer308 nos308 busy308
	JR_EQ8 busy308 0 motornotbusy308
	SLEEP
	JR motorwaiting308
  motornotbusy308:
RETSUB_Z5:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z5:
SUB_Z6:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 24.0 580.0 'true'

	DATA8 layer309
	DATA8 nos309
	DATA8 busy309
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer309 nos309
	JR_EQ8 0 nos309 motornotbusy309
  motorwaiting309:
	OUTPUT_TEST layer309 nos309 busy309
	JR_EQ8 busy309 0 motornotbusy309
	SLEEP
	JR motorwaiting309
  motornotbusy309:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB310:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 -24.0 580.0 'true'

	DATA8 layer311
	DATA8 nos311
	DATA8 busy311
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer311 nos311
	JR_EQ8 0 nos311 motornotbusy311
  motorwaiting311:
	OUTPUT_TEST layer311 nos311 busy311
	JR_EQ8 busy311 0 motornotbusy311
	SLEEP
	JR motorwaiting311
  motornotbusy311:
RETSUB_Z6:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_Z6:
SUB_COLOR_2:
    DATA8 layer312
	DATA8 no312
	DATA8 mode8312
	
	MOVEF_8 VPORT_7 no312
	SUB8 no312 1 no312
	DIV8 no312 4 layer312
	MATH MOD8 no312 4 no312

	MOVEF_8 2.0 mode8312
	
	INPUT_DEVICE READY_RAW layer312 no312 0 mode8312 0
    DATA32 milliseconds313
	MOVEF_32 170.0 milliseconds313
	DATA32 timer313
	TIMER_WAIT milliseconds313 timer313
	TIMER_READY timer313
    CALL SENSOR.READRAWVALUE VPORT_7 0.0 VEVCOL_7
    DATA32 milliseconds315
	MOVEF_32 30.0 milliseconds315
	DATA32 timer315
	TIMER_WAIT milliseconds315 timer315
	TIMER_READY timer315
    MOVEF_F 0.0 VEVGRE_7
    MOVEF_F 0.0 VS_7
    DATA8 layer316
	DATA8 no316
	DATA8 mode8316
	
	MOVEF_8 VPORT_7 no316
	SUB8 no316 1 no316
	DIV8 no316 4 layer316
	MATH MOD8 no316 4 no316

	MOVEF_8 3.0 mode8316
	
	INPUT_DEVICE READY_RAW layer316 no316 0 mode8316 0
  while317:
    JR_EQF VEVGRE_7 0.0 or318
    JR_NEQF VEVGRE_7 100.0 endwhile317
  or318:
    JR_GTEQF VS_7 50.0 endwhile317
  whilebody317:
    CALL SENSOR.READPERCENT VPORT_7 VEVGRE_7
    ADDF VS_7 1.0 VS_7
    JR_EQF VEVGRE_7 0.0 or322
    JR_NEQF VEVGRE_7 100.0 and321
  or322:
    JR_LTF VS_7 50.0 whilebody317
  and321:
  endwhile317:
    WRITE32 ENDSUB_WRITEF:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WRITEF
CALLSUB323:
    JR_EQF VEVCOL_7 5.0 else324_1
    JR_LTEQF VEVGRE_7 0.0 else324_1
    JR_GTEQF VEVGRE_7 30.0 else324_1
    MOVEF_F 1.0 VCOL_7
    JR endif324
  else324_1:
    JR_EQF VEVCOL_7 5.0 and326
    JR_LTEQF VEVGRE_7 70.0 and327
    JR_LTF VEVGRE_7 100.0 or325
  and327:
  and326:
    JR_NEQF VEVCOL_7 6.0 else324_2
  or325:
    MOVEF_F 6.0 VCOL_7
    JR endif324
  else324_2:
    JR_NEQF VEVCOL_7 5.0 else324_3
    MOVEF_F 5.0 VCOL_7
    JR endif324
  else324_3:
    MOVEF_F 0.0 VCOL_7
  else324_4:
  endif324:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VEVGRE_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VEVCOL_7 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    JR_NEQF VCOL_7 1.0 else333_1
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif333
  else333_1:
    JR_NEQF VCOL_7 5.0 else333_2
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif333
  else333_2:
    JR_NEQF VCOL_7 6.0 else333_3
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif333
  else333_3:
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
  else333_4:
  endif333:
RETSUB_COLOR_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_2:
SUB_START_2:
    MOVEF_F VSTART_8 VSTRT_M
    JR_NEQF VSTART_8 1.0 else338_1
    MOVEF_F 2.0 VFINISH_M
    JR endif338
  else338_1:
    MOVEF_F 1.0 VFINISH_M
  else338_2:
  endif338:
    JR_NEQF VSTART_8 1.0 else339_1
    MOVEF_F 150.0 VGRAD_4
    MOVEF_F 80.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB340:
    MOVEF_F 40.0 VGRAD_3
    MOVEF_F 80.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB341:
    CALL MOTOR.START 'BC' -90.0
    DATA32 milliseconds343
	MOVEF_32 900.0 milliseconds343
	DATA32 timer343
	TIMER_WAIT milliseconds343 timer343
	TIMER_READY timer343
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 900.0 VMM_2
    MOVEF_F 90.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB345:
    CALL MOTOR.START 'BC' 90.0
    DATA32 milliseconds347
	MOVEF_32 700.0 milliseconds347
	DATA32 timer347
	TIMER_WAIT milliseconds347 timer347
	TIMER_READY timer347
    MOVEF_F 200.0 VMM_2
    MOVEF_F -80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB348:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB349:
    CALL MOTOR.START 'BC' -60.0
    DATA32 milliseconds351
	MOVEF_32 700.0 milliseconds351
	DATA32 timer351
	TIMER_WAIT milliseconds351 timer351
	TIMER_READY timer351
    MOVEF_F 100.0 VMM_2
    MOVEF_F 80.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB352:
    JR endif339
  else339_1:
    MOVEF_F 60.0 VGRAD_3
    MOVEF_F 90.0 VNSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB353:
    MOVEF_F 60.0 VGRAD_4
    MOVEF_F 90.0 VNSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB354:
    MOVEF_F 1.0 VFINISH_8
  else339_2:
  endif339:
RETSUB_START_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_2:
SUB_CUBE:
    DATA32 milliseconds355
	MOVEF_32 300.0 milliseconds355
	DATA32 timer355
	TIMER_WAIT milliseconds355 timer355
	TIMER_READY timer355
    ADDF VID_M 1.0 VID_M
    JR_EQF VID_M 1.0 or358
    JR_EQF VID_M 2.0 or358
    JR_EQF VID_M 3.0 or358
    JR_EQF VID_M 4.0 or358
    JR_EQF VID_M 5.0 or358
    JR_EQF VID_M 6.0 or358
    JR_EQF VID_M 7.0 or358
    JR_EQF VID_M 9.0 or358
    JR_NEQF VID_M 10.0 else357_1
  or358:
    MOVEF_F 4.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB359:
    MOVEF_F VCOL_7 VCOL_M
    JR endif357
  else357_1:
    MOVEF_F 1.0 VPORT_7
    WRITE32 ENDSUB_COLOR_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_2
CALLSUB360:
    MOVEF_F VCOL_7 VCOL_M
  else357_2:
  endif357:
    JR_NEQF VCOL_M 1.0 else361_1
    JR_EQF VNIGA_M 1.0 else362_1
    JR_NEQF VID_M 8.0 else363_1
    WRITE32 ENDSUB_LEFTNIGA:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFTNIGA
CALLSUB364:
    JR endif363
  else363_1:
    JR_EQF VID_M 1.0 or365
    JR_EQF VID_M 3.0 or365
    JR_EQF VID_M 4.0 or365
    JR_EQF VID_M 5.0 or365
    JR_EQF VID_M 6.0 or365
    JR_EQF VID_M 7.0 or365
    JR_EQF VID_M 8.0 or365
    JR_NEQF VID_M 10.0 else363_2
  or365:
    WRITE32 ENDSUB_RIGHTNIGA:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHTNIGA
CALLSUB366:
    JR endif363
  else363_2:
    JR_NEQF VID_M 12.0 else363_3
    MOVEF_F 130.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB367:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB368:
    DATA32 tmp369
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp369
    JR_NEQ32 0 tmp369 alreadylaunched369
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched369:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB370:
    MOVEF_F 130.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB371:
    JR endif363
  else363_3:
    JR_NEQF VID_M 11.0 else363_4
    MOVEF_F 240.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
    MOVEF_F 48.0 VGRAD_5
    MOVEF_F 60.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB373:
    MOVEF_F 140.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB374:
    DATA32 tmp375
    CALL GETANDINC32 RUNCOUNTER_SLOWTOPNIGA 1  RUNCOUNTER_SLOWTOPNIGA tmp375
    JR_NEQ32 0 tmp375 alreadylaunched375
    OBJECT_START TSLOWTOPNIGA
  alreadylaunched375:
    MOVEF_F 140.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB376:
    MOVEF_F 45.0 VGRAD_6
    MOVEF_F 30.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB377:
    MOVEF_F 240.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB378:
    JR endif363
  else363_4:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB379:
    MOVEF_F 90.0 VGRAD_6
    MOVEF_F 50.0 VNSP_6
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB380:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB381:
    WRITE32 ENDSUB_TOPNIGA:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOPNIGA
CALLSUB382:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB383:
    MOVEF_F 95.0 VGRAD_5
    MOVEF_F 50.0 VNSP_5
    WRITE32 ENDSUB_LEFT2_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB384:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB385:
  else363_5:
  endif363:
    MOVEF_F 1.0 VNIGA_M
  else362_1:
  endif362:
    JR endif361
  else361_1:
    JR_NEQF VCOL_M 5.0 else361_2
    DATA32 tmp386
    CALL GETANDINC32 RUNCOUNTER_WATER 1  RUNCOUNTER_WATER tmp386
    JR_NEQ32 0 tmp386 alreadylaunched386
    OBJECT_START TWATER
  alreadylaunched386:
    ADDF VRD_M 1.0 VRD_M
    JR endif361
  else361_2:
    JR_NEQF VCOL_M 6.0 else361_3
    JR_EQF VID_M 1.0 or389
    JR_NEQF VID_M 2.0 else388_1
  or389:
    MOVEF_F 1.0 VZONE_M
    JR endif388
  else388_1:
    JR_EQF VID_M 3.0 or390
    JR_NEQF VID_M 4.0 else388_2
  or390:
    MOVEF_F 2.0 VZONE_M
    JR endif388
  else388_2:
    JR_EQF VID_M 5.0 or391
    JR_NEQF VID_M 12.0 else388_3
  or391:
    MOVEF_F 3.0 VZONE_M
    JR endif388
  else388_3:
    JR_EQF VID_M 6.0 or392
    JR_NEQF VID_M 7.0 else388_4
  or392:
    MOVEF_F 4.0 VZONE_M
    JR endif388
  else388_4:
    JR_EQF VID_M 8.0 or393
    JR_NEQF VID_M 9.0 else388_5
  or393:
    MOVEF_F 5.0 VZONE_M
    JR endif388
  else388_5:
    JR_EQF VID_M 10.0 or394
    JR_NEQF VID_M 11.0 else388_6
  or394:
    MOVEF_F 6.0 VZONE_M
  else388_6:
  endif388:
    JR_NEQF VZN1_M 0.0 else395_1
    MOVEF_F VZONE_M VZN1_M
    JR endif395
  else395_1:
    JR_NEQF VZN2_M 0.0 else395_2
    JR_EQF VZONE_M VZN1_M else396_1
    MOVEF_F VZONE_M VZN2_M
  else396_1:
  endif396:
  else395_2:
  endif395:
  else361_3:
  endif361:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_VIRAV_1:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds398
	MOVEF_32 300.0 milliseconds398
	DATA32 timer398
	TIMER_WAIT milliseconds398 timer398
	TIMER_READY timer398
  while399:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_GTF F.0 F.1 or400
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.62 F.1
    JR_LTEQF F.0 F.1 endwhile399
  or400:
  whilebody399:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.55 F.1
    JR_GTF F.0 F.1 whilebody399
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_9 F.2
    MULF F.2 0.62 F.1
    JR_GTF F.0 F.1 whilebody399
  endwhile399:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VSP_9 0.0 else418_1
    MOVEF_F -25.0 VSP_9
    JR endif418
  else418_1:
    MOVEF_F 25.0 VSP_9
  else418_2:
  endif418:
    CALL MOTOR.STARTPOWER 'BC' VSP_9
    DATA32 milliseconds420
	MOVEF_32 100.0 milliseconds420
	DATA32 timer420
	TIMER_WAIT milliseconds420 timer420
	TIMER_READY timer420
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_VIRAV_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENAPPEND       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_APPEND fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MATH.GETRANDOMNUMBER   // FF
{
	IN_F range
	OUT_F result
	
	DATA16 range_16
	DATA16 value
	MOVEF_16 range range_16
	
	RANDOM 1 range_16 value
	MOVE16_F value result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
