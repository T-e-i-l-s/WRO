DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VS1_M
DATAF VS2_M
DATAF VK_M
DATAF VV_M
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VBLACK_M
DATAF VX_M
DATAF VX2_M
DATAF VX3_M
DATAF VY_M
DATAF VCOLOR_M
DATAF VC_M
DATAF VPY_M
DATAF VU_M
DATAF VERR_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VLINE1_M
DATAF VLINE2_M
DATAF VLINE3_M
DATAF VI_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VPY_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VLINE1_M
    MOVEF_F 0.0 VLINE2_M
    MOVEF_F 0.0 VLINE3_M
    MOVEF_F 0.0 VI_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VPY_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VLINE1_M
    MOVEF_F 0.0 VLINE2_M
    MOVEF_F 0.0 VLINE3_M
    MOVEF_F 0.0 VI_M
    CALL MOTOR.INVERT 'B'
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 2.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 3.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.65 VK_M
    MOVEF_F 20.0 VV_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 30.0 VBLACK_M
    MOVEF_F 2.0 VX_M
    MOVEF_F 3.0 VX2_M
    MOVEF_F 1.0 VX3_M
    MOVEF_F 4.0 VY_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VC_M
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
  while130:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile130
  whilebody130:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody130
  endwhile130:
    DATA32 milliseconds133
	MOVEF_32 20.0 milliseconds133
	DATA32 timer133
	TIMER_WAIT milliseconds133 timer133
	TIMER_READY timer133
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while146:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile146
  whilebody146:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf155
    DATA8 flag155
    DIVF F.0 360.0 tmpf155
    CP_EQF 0.0 360.0 flag155
    SELECTF flag155 0.0 tmpf155 VMM_M

    ADDF VMM_M 0.8 VMM_M
    MOVEF_F VMM_M VLINE1_M
    MATH FLOOR VLINE1_M VLINE1_M
    JR_NEQF VLINE1_M 0.0 else158_1
    MOVEF_F 1.0 VLINE1_M
  else158_1:
  endif158:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLINE1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds162
	MOVEF_32 1000.0 milliseconds162
	DATA32 timer162
	TIMER_WAIT milliseconds162 timer162
	TIMER_READY timer162
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
  while173:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile173
  whilebody173:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody173
  endwhile173:
    DATA32 milliseconds176
	MOVEF_32 20.0 milliseconds176
	DATA32 timer176
	TIMER_WAIT milliseconds176 timer176
	TIMER_READY timer176
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while189:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile189
  whilebody189:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody189
  endwhile189:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf198
    DATA8 flag198
    DIVF F.0 360.0 tmpf198
    CP_EQF 0.0 360.0 flag198
    SELECTF flag198 0.0 tmpf198 VMM_M

    ADDF VMM_M 0.8 VMM_M
    MOVEF_F VMM_M VLINE2_M
    MATH FLOOR VLINE2_M VLINE2_M
    JR_NEQF VLINE2_M 0.0 else201_1
    MOVEF_F 1.0 VLINE2_M
  else201_1:
  endif201:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLINE2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds205
	MOVEF_32 1000.0 milliseconds205
	DATA32 timer205
	TIMER_WAIT milliseconds205 timer205
	TIMER_READY timer205
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
  while216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile216
  whilebody216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody216
  endwhile216:
    DATA32 milliseconds219
	MOVEF_32 20.0 milliseconds219
	DATA32 timer219
	TIMER_WAIT milliseconds219 timer219
	TIMER_READY timer219
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 9.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 9.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while232:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile232
  whilebody232:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody232
  endwhile232:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf241
    DATA8 flag241
    DIVF F.0 360.0 tmpf241
    CP_EQF 0.0 360.0 flag241
    SELECTF flag241 0.0 tmpf241 VMM_M

    ADDF VMM_M 0.8 VMM_M
    MOVEF_F VMM_M VLINE3_M
    MATH FLOOR VLINE3_M VLINE3_M
    JR_NEQF VLINE3_M 0.0 else244_1
    MOVEF_F 1.0 VLINE3_M
  else244_1:
  endif244:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VLINE3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds248
	MOVEF_32 1000.0 milliseconds248
	DATA32 timer248
	TIMER_WAIT milliseconds248 timer248
	TIMER_READY timer248
  while249:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 or250
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 12.0 endwhile249
  or250:
  whilebody249:
    WRITE32 ENDSUB_LINE:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB253:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 12.0 whilebody249
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 12.0 whilebody249
  endwhile249:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SENSOR.READRAWVALUE 1.0 0.0 VCOLOR_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 105.0 1.0 S.0
    DATA32 milliseconds261
	MOVEF_32 1000.0 milliseconds261
	DATA32 timer261
	TIMER_WAIT milliseconds261 timer261
	TIMER_READY timer261
    JR_NEQF VCOLOR_M 5.0 else262_1
    MOVEF_F 1.0 VY_M
    MOVEF_F 2.0 VPY_M
    JR endif262
  else262_1:
    JR_EQF VCOLOR_M 4.0 or263
    JR_NEQF VCOLOR_M 7.0 else262_2
  or263:
    MOVEF_F 2.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif262
  else262_2:
    JR_NEQF VCOLOR_M 3.0 else262_3
    MOVEF_F 3.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif262
  else262_3:
    JR_NEQF VCOLOR_M 2.0 else262_4
    MOVEF_F 4.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif262
  else262_4:
    JR_NEQF VCOLOR_M 6.0 else262_5
    MOVEF_F 5.0 VY_M
    MOVEF_F 2.0 VPY_M
  else262_5:
  endif262:
    MOVEF_F 1.0 VC_M
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 180.0 0.0 'TRUE' 

	DATA8 layer264
	DATA8 nos264
	DATA8 busy264
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer264 nos264
	JR_EQ8 0 nos264 motornotbusy264
  motorwaiting264:
	OUTPUT_TEST layer264 nos264 busy264
	JR_EQ8 busy264 0 motornotbusy264
	SLEEP
	JR motorwaiting264
  motornotbusy264:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 60.0 0.0 'true' 

	DATA8 layer265
	DATA8 nos265
	DATA8 busy265
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer265 nos265
	JR_EQ8 0 nos265 motornotbusy265
  motorwaiting265:
	OUTPUT_TEST layer265 nos265 busy265
	JR_EQ8 busy265 0 motornotbusy265
	SLEEP
	JR motorwaiting265
  motornotbusy265:
    MOVEF_F 2.0 VI_M
  for266:
    JR_GTF VI_M VLINE1_M endfor266
  forbody266:
  while267:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or268
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile267
  or268:
  whilebody267:
    WRITE32 ENDSUB_LINE:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB271:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody267
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody267
  endwhile267:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer274
	DATA8 nos274
	DATA8 busy274
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer274 nos274
	JR_EQ8 0 nos274 motornotbusy274
  motorwaiting274:
	OUTPUT_TEST layer274 nos274 busy274
	JR_EQ8 busy274 0 motornotbusy274
	SLEEP
	JR motorwaiting274
  motornotbusy274:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE1_M forbody266
  endfor266:
    JR_NEQF VY_M 3.0 else276_1
    WRITE32 ENDSUB_GETCOL:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB277:
    WRITE32 ENDSUB_AROUND:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB278:
    MOVEF_F 2.0 VI_M
  for279:
    JR_GTF VI_M 3.0 endfor279
  forbody279:
  while280:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or281
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile280
  or281:
  whilebody280:
    WRITE32 ENDSUB_LINE:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB284:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody280
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody280
  endwhile280:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer287
	DATA8 nos287
	DATA8 busy287
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer287 nos287
	JR_EQ8 0 nos287 motornotbusy287
  motorwaiting287:
	OUTPUT_TEST layer287 nos287 busy287
	JR_EQ8 busy287 0 motornotbusy287
	SLEEP
	JR motorwaiting287
  motornotbusy287:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody279
  endfor279:
    JR endif276
  else276_1:
    JR_GTEQF VY_M 3.0 else276_2
    WRITE32 ENDSUB_LEFT:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB289:
    MOVEF_F 1.0 VI_M
  for290:
    JR_GTF VI_M VPY_M endfor290
  forbody290:
  while291:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or292
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile291
  or292:
  whilebody291:
    WRITE32 ENDSUB_LINE:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB295:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody291
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody291
  endwhile291:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer298
	DATA8 nos298
	DATA8 busy298
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer298 nos298
	JR_EQ8 0 nos298 motornotbusy298
  motorwaiting298:
	OUTPUT_TEST layer298 nos298 busy298
	JR_EQ8 busy298 0 motornotbusy298
	SLEEP
	JR motorwaiting298
  motornotbusy298:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody290
  endfor290:
    WRITE32 ENDSUB_GETCOL:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB300:
    MOVEF_F 1.0 VI_M
  for301:
    JR_GTF VI_M VPY_M endfor301
  forbody301:
  while302:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or303
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile302
  or303:
  whilebody302:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody302
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody302
  endwhile302:
    CALL MOTOR.STOP 'bc' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody301
  endfor301:
    CALL SPEAKER.NOTE 100.0 'c4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 30.0 0.0 'true' 

	DATA8 layer322
	DATA8 nos322
	DATA8 busy322
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer322 nos322
	JR_EQ8 0 nos322 motornotbusy322
  motorwaiting322:
	OUTPUT_TEST layer322 nos322 busy322
	JR_EQ8 busy322 0 motornotbusy322
	SLEEP
	JR motorwaiting322
  motornotbusy322:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer330
	DATA8 nos330
	DATA8 busy330
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer330 nos330
	JR_EQ8 0 nos330 motornotbusy330
  motorwaiting330:
	OUTPUT_TEST layer330 nos330 busy330
	JR_EQ8 busy330 0 motornotbusy330
	SLEEP
	JR motorwaiting330
  motornotbusy330:
    WRITE32 ENDSUB_LEFT:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB331:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    JR endif276
  else276_2:
    JR_LTEQF VY_M 3.0 else276_3
    WRITE32 ENDSUB_RIGHT:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB339:
    MOVEF_F 1.0 VI_M
  for340:
    JR_GTF VI_M VPY_M endfor340
  forbody340:
  while341:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or342
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile341
  or342:
  whilebody341:
    WRITE32 ENDSUB_LINE:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB345:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody341
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody341
  endwhile341:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 30.0 0.0 'true' 

	DATA8 layer348
	DATA8 nos348
	DATA8 busy348
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer348 nos348
	JR_EQ8 0 nos348 motornotbusy348
  motorwaiting348:
	OUTPUT_TEST layer348 nos348 busy348
	JR_EQ8 busy348 0 motornotbusy348
	SLEEP
	JR motorwaiting348
  motornotbusy348:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody340
  endfor340:
    WRITE32 ENDSUB_GETCOL:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB350:
    MOVEF_F 1.0 VI_M
  for351:
    JR_GTF VI_M VPY_M endfor351
  forbody351:
  while352:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or353
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile352
  or353:
  whilebody352:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody352
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody352
  endwhile352:
    CALL MOTOR.STOP 'bc' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody351
  endfor351:
    CALL SPEAKER.NOTE 100.0 'C#4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer372
	DATA8 nos372
	DATA8 busy372
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer372 nos372
	JR_EQ8 0 nos372 motornotbusy372
  motorwaiting372:
	OUTPUT_TEST layer372 nos372 busy372
	JR_EQ8 busy372 0 motornotbusy372
	SLEEP
	JR motorwaiting372
  motornotbusy372:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer380
	DATA8 nos380
	DATA8 busy380
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer380 nos380
	JR_EQ8 0 nos380 motornotbusy380
  motorwaiting380:
	OUTPUT_TEST layer380 nos380 busy380
	JR_EQ8 busy380 0 motornotbusy380
	SLEEP
	JR motorwaiting380
  motornotbusy380:
    WRITE32 ENDSUB_RIGHT:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB381:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
  else276_3:
  endif276:
    MOVEF_F 2.0 VI_M
  for389:
    JR_GTF VI_M VLINE1_M endfor389
  forbody389:
  while390:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or391
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile390
  or391:
  whilebody390:
    WRITE32 ENDSUB_LINE:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB394:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody390
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody390
  endwhile390:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer397
	DATA8 nos397
	DATA8 busy397
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer397 nos397
	JR_EQ8 0 nos397 motornotbusy397
  motorwaiting397:
	OUTPUT_TEST layer397 nos397 busy397
	JR_EQ8 busy397 0 motornotbusy397
	SLEEP
	JR motorwaiting397
  motornotbusy397:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE1_M forbody389
  endfor389:
    WRITE32 ENDSUB_AROUND:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB399:
    MOVEF_F 2.0 VI_M
  for400:
    JR_GTF VI_M VLINE2_M endfor400
  forbody400:
  while401:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or402
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile401
  or402:
  whilebody401:
    WRITE32 ENDSUB_LINE:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody401
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody401
  endwhile401:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer408
	DATA8 nos408
	DATA8 busy408
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer408 nos408
	JR_EQ8 0 nos408 motornotbusy408
  motorwaiting408:
	OUTPUT_TEST layer408 nos408 busy408
	JR_EQ8 busy408 0 motornotbusy408
	SLEEP
	JR motorwaiting408
  motornotbusy408:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE2_M forbody400
  endfor400:
    JR_NEQF VY_M 3.0 else410_1
    WRITE32 ENDSUB_GETCOL:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB411:
    WRITE32 ENDSUB_AROUND:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB412:
    MOVEF_F 2.0 VI_M
  for413:
    JR_GTF VI_M 3.0 endfor413
  forbody413:
  while414:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or415
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile414
  or415:
  whilebody414:
    WRITE32 ENDSUB_LINE:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB418:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody414
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody414
  endwhile414:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer421
	DATA8 nos421
	DATA8 busy421
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer421 nos421
	JR_EQ8 0 nos421 motornotbusy421
  motorwaiting421:
	OUTPUT_TEST layer421 nos421 busy421
	JR_EQ8 busy421 0 motornotbusy421
	SLEEP
	JR motorwaiting421
  motornotbusy421:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody413
  endfor413:
    JR endif410
  else410_1:
    JR_GTEQF VY_M 3.0 else410_2
    WRITE32 ENDSUB_LEFT:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB423:
    MOVEF_F 1.0 VI_M
  for424:
    JR_GTF VI_M VPY_M endfor424
  forbody424:
  while425:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or426
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile425
  or426:
  whilebody425:
    WRITE32 ENDSUB_LINE:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB429:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody425
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody425
  endwhile425:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer432
	DATA8 nos432
	DATA8 busy432
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer432 nos432
	JR_EQ8 0 nos432 motornotbusy432
  motorwaiting432:
	OUTPUT_TEST layer432 nos432 busy432
	JR_EQ8 busy432 0 motornotbusy432
	SLEEP
	JR motorwaiting432
  motornotbusy432:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody424
  endfor424:
    WRITE32 ENDSUB_GETCOL:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB434:
    MOVEF_F 1.0 VI_M
  for435:
    JR_GTF VI_M VPY_M endfor435
  forbody435:
  while436:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or437
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile436
  or437:
  whilebody436:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody436
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody436
  endwhile436:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 50.0 0.0 'true' 

	DATA8 layer453
	DATA8 nos453
	DATA8 busy453
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer453 nos453
	JR_EQ8 0 nos453 motornotbusy453
  motorwaiting453:
	OUTPUT_TEST layer453 nos453 busy453
	JR_EQ8 busy453 0 motornotbusy453
	SLEEP
	JR motorwaiting453
  motornotbusy453:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody435
  endfor435:
    CALL SPEAKER.NOTE 100.0 'c4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer457
	DATA8 nos457
	DATA8 busy457
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer457 nos457
	JR_EQ8 0 nos457 motornotbusy457
  motorwaiting457:
	OUTPUT_TEST layer457 nos457 busy457
	JR_EQ8 busy457 0 motornotbusy457
	SLEEP
	JR motorwaiting457
  motornotbusy457:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_LEFT:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB465:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    JR endif410
  else410_2:
    JR_LTEQF VY_M 3.0 else410_3
    WRITE32 ENDSUB_RIGHT:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB473:
    MOVEF_F 1.0 VI_M
  for474:
    JR_GTF VI_M VPY_M endfor474
  forbody474:
  while475:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or476
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile475
  or476:
  whilebody475:
    WRITE32 ENDSUB_LINE:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB479:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody475
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody475
  endwhile475:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 30.0 0.0 'true' 

	DATA8 layer482
	DATA8 nos482
	DATA8 busy482
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer482 nos482
	JR_EQ8 0 nos482 motornotbusy482
  motorwaiting482:
	OUTPUT_TEST layer482 nos482 busy482
	JR_EQ8 busy482 0 motornotbusy482
	SLEEP
	JR motorwaiting482
  motornotbusy482:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody474
  endfor474:
    WRITE32 ENDSUB_GETCOL:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB484:
    MOVEF_F 1.0 VI_M
  for485:
    JR_GTF VI_M VPY_M endfor485
  forbody485:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 50.0 0.0 'true' 

	DATA8 layer486
	DATA8 nos486
	DATA8 busy486
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer486 nos486
	JR_EQ8 0 nos486 motornotbusy486
  motorwaiting486:
	OUTPUT_TEST layer486 nos486 busy486
	JR_EQ8 busy486 0 motornotbusy486
	SLEEP
	JR motorwaiting486
  motornotbusy486:
  while487:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or488
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile487
  or488:
  whilebody487:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody487
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody487
  endwhile487:
    CALL MOTOR.STOP 'bc' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody485
  endfor485:
    CALL SPEAKER.NOTE 100.0 'C#4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer507
	DATA8 nos507
	DATA8 busy507
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer507 nos507
	JR_EQ8 0 nos507 motornotbusy507
  motorwaiting507:
	OUTPUT_TEST layer507 nos507 busy507
	JR_EQ8 busy507 0 motornotbusy507
	SLEEP
	JR motorwaiting507
  motornotbusy507:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer515
	DATA8 nos515
	DATA8 busy515
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer515 nos515
	JR_EQ8 0 nos515 motornotbusy515
  motorwaiting515:
	OUTPUT_TEST layer515 nos515 busy515
	JR_EQ8 busy515 0 motornotbusy515
	SLEEP
	JR motorwaiting515
  motornotbusy515:
    WRITE32 ENDSUB_RIGHT:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB516:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
  else410_3:
  endif410:
    MOVEF_F 2.0 VI_M
  for524:
    JR_GTF VI_M VLINE2_M endfor524
  forbody524:
  while525:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or526
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile525
  or526:
  whilebody525:
    WRITE32 ENDSUB_LINE:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB529:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody525
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody525
  endwhile525:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer532
	DATA8 nos532
	DATA8 busy532
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer532 nos532
	JR_EQ8 0 nos532 motornotbusy532
  motorwaiting532:
	OUTPUT_TEST layer532 nos532 busy532
	JR_EQ8 busy532 0 motornotbusy532
	SLEEP
	JR motorwaiting532
  motornotbusy532:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE2_M forbody524
  endfor524:
    WRITE32 ENDSUB_AROUND:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB534:
    MOVEF_F 2.0 VI_M
  for535:
    JR_GTF VI_M VLINE3_M endfor535
  forbody535:
  while536:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or537
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile536
  or537:
  whilebody536:
    WRITE32 ENDSUB_LINE:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB540:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody536
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody536
  endwhile536:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer543
	DATA8 nos543
	DATA8 busy543
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer543 nos543
	JR_EQ8 0 nos543 motornotbusy543
  motorwaiting543:
	OUTPUT_TEST layer543 nos543 busy543
	JR_EQ8 busy543 0 motornotbusy543
	SLEEP
	JR motorwaiting543
  motornotbusy543:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE3_M forbody535
  endfor535:
    JR_NEQF VY_M 3.0 else545_1
    WRITE32 ENDSUB_GETCOL:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB546:
    WRITE32 ENDSUB_AROUND:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB547:
    MOVEF_F 2.0 VI_M
  for548:
    JR_GTF VI_M 3.0 endfor548
  forbody548:
  while549:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or550
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile549
  or550:
  whilebody549:
    WRITE32 ENDSUB_LINE:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB553:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody549
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody549
  endwhile549:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer556
	DATA8 nos556
	DATA8 busy556
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer556 nos556
	JR_EQ8 0 nos556 motornotbusy556
  motorwaiting556:
	OUTPUT_TEST layer556 nos556 busy556
	JR_EQ8 busy556 0 motornotbusy556
	SLEEP
	JR motorwaiting556
  motornotbusy556:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody548
  endfor548:
    JR endif545
  else545_1:
    JR_GTEQF VY_M 3.0 else545_2
    WRITE32 ENDSUB_LEFT:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB558:
    MOVEF_F 1.0 VI_M
  for559:
    JR_GTF VI_M VPY_M endfor559
  forbody559:
  while560:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or561
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile560
  or561:
  whilebody560:
    WRITE32 ENDSUB_LINE:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB564:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody560
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody560
  endwhile560:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer567
	DATA8 nos567
	DATA8 busy567
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer567 nos567
	JR_EQ8 0 nos567 motornotbusy567
  motorwaiting567:
	OUTPUT_TEST layer567 nos567 busy567
	JR_EQ8 busy567 0 motornotbusy567
	SLEEP
	JR motorwaiting567
  motornotbusy567:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody559
  endfor559:
    WRITE32 ENDSUB_GETCOL:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB569:
    MOVEF_F 1.0 VI_M
  for570:
    JR_GTF VI_M VPY_M endfor570
  forbody570:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 50.0 0.0 'true' 

	DATA8 layer571
	DATA8 nos571
	DATA8 busy571
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer571 nos571
	JR_EQ8 0 nos571 motornotbusy571
  motorwaiting571:
	OUTPUT_TEST layer571 nos571 busy571
	JR_EQ8 busy571 0 motornotbusy571
	SLEEP
	JR motorwaiting571
  motornotbusy571:
  while572:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or573
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile572
  or573:
  whilebody572:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody572
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody572
  endwhile572:
    CALL MOTOR.STOP 'bc' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody570
  endfor570:
    CALL SPEAKER.NOTE 100.0 'c4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 30.0 0.0 'true' 

	DATA8 layer592
	DATA8 nos592
	DATA8 busy592
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer592 nos592
	JR_EQ8 0 nos592 motornotbusy592
  motorwaiting592:
	OUTPUT_TEST layer592 nos592 busy592
	JR_EQ8 busy592 0 motornotbusy592
	SLEEP
	JR motorwaiting592
  motornotbusy592:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer600
	DATA8 nos600
	DATA8 busy600
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer600 nos600
	JR_EQ8 0 nos600 motornotbusy600
  motorwaiting600:
	OUTPUT_TEST layer600 nos600 busy600
	JR_EQ8 busy600 0 motornotbusy600
	SLEEP
	JR motorwaiting600
  motornotbusy600:
    WRITE32 ENDSUB_LEFT:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB601:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    JR endif545
  else545_2:
    JR_LTEQF VY_M 3.0 else545_3
    WRITE32 ENDSUB_RIGHT:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB609:
    MOVEF_F 1.0 VI_M
  for610:
    JR_GTF VI_M VPY_M endfor610
  forbody610:
  while611:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or612
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile611
  or612:
  whilebody611:
    WRITE32 ENDSUB_LINE:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB615:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody611
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody611
  endwhile611:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 30.0 0.0 'true' 

	DATA8 layer618
	DATA8 nos618
	DATA8 busy618
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer618 nos618
	JR_EQ8 0 nos618 motornotbusy618
  motorwaiting618:
	OUTPUT_TEST layer618 nos618 busy618
	JR_EQ8 busy618 0 motornotbusy618
	SLEEP
	JR motorwaiting618
  motornotbusy618:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody610
  endfor610:
    WRITE32 ENDSUB_GETCOL:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_GETCOL
CALLSUB620:
    MOVEF_F 1.0 VI_M
  for621:
    JR_GTF VI_M VPY_M endfor621
  forbody621:
    CALL MOTOR.SCHEDULE 'BC' -30.0 0.0 50.0 0.0 'true' 

	DATA8 layer622
	DATA8 nos622
	DATA8 busy622
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer622 nos622
	JR_EQ8 0 nos622 motornotbusy622
  motorwaiting622:
	OUTPUT_TEST layer622 nos622 busy622
	JR_EQ8 busy622 0 motornotbusy622
	SLEEP
	JR motorwaiting622
  motornotbusy622:
  while623:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or624
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile623
  or624:
  whilebody623:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF -15.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 15.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody623
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody623
  endwhile623:
    CALL MOTOR.STOP 'bc' 'true'
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VPY_M forbody621
  endfor621:
    CALL SPEAKER.NOTE 100.0 'C#4' 2000.0
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer643
	DATA8 nos643
	DATA8 busy643
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer643 nos643
	JR_EQ8 0 nos643 motornotbusy643
  motorwaiting643:
	OUTPUT_TEST layer643 nos643 busy643
	JR_EQ8 busy643 0 motornotbusy643
	SLEEP
	JR motorwaiting643
  motornotbusy643:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer651
	DATA8 nos651
	DATA8 busy651
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer651 nos651
	JR_EQ8 0 nos651 motornotbusy651
  motorwaiting651:
	OUTPUT_TEST layer651 nos651 busy651
	JR_EQ8 busy651 0 motornotbusy651
	SLEEP
	JR motorwaiting651
  motornotbusy651:
    WRITE32 ENDSUB_RIGHT:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB652:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
  else545_3:
  endif545:
    MOVEF_F 2.0 VI_M
  for660:
    JR_GTF VI_M VLINE3_M endfor660
  forbody660:
  while661:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or662
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile661
  or662:
  whilebody661:
    WRITE32 ENDSUB_LINE:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB665:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody661
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody661
  endwhile661:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 50.0 0.0 'true' 

	DATA8 layer668
	DATA8 nos668
	DATA8 busy668
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer668 nos668
	JR_EQ8 0 nos668 motornotbusy668
  motorwaiting668:
	OUTPUT_TEST layer668 nos668 busy668
	JR_EQ8 busy668 0 motornotbusy668
	SLEEP
	JR motorwaiting668
  motornotbusy668:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VLINE3_M forbody660
  endfor660:
    CALL MOTOR.START 'BC' 100.0
    DATA32 milliseconds671
	MOVEF_32 2000.0 milliseconds671
	DATA32 timer671
	TIMER_WAIT milliseconds671 timer671
	TIMER_READY timer671
    CALL MOTOR.STOP 'BC' 'TRUE'
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf9
    DATA8 flag9
    DIVF F.0 F.1 tmpf9
    CP_EQF 0.0 F.1 flag9
    SELECTF flag9 0.0 tmpf9 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.0 F.1 tmpf14
    CP_EQF 0.0 F.1 flag14
    SELECTF flag14 0.0 tmpf14 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_GETCOL:
    CALL SENSOR.READRAWVALUE 1.0 0.0 VCOLOR_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 105.0 1.0 S.0
    DATA32 milliseconds19
	MOVEF_32 1000.0 milliseconds19
	DATA32 timer19
	TIMER_WAIT milliseconds19 timer19
	TIMER_READY timer19
    JR_NEQF VCOLOR_M 5.0 else20_1
    MOVEF_F 1.0 VY_M
    MOVEF_F 2.0 VPY_M
    JR endif20
  else20_1:
    JR_EQF VCOLOR_M 4.0 or21
    JR_NEQF VCOLOR_M 7.0 else20_2
  or21:
    MOVEF_F 2.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_2:
    JR_NEQF VCOLOR_M 3.0 else20_3
    MOVEF_F 3.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_3:
    JR_NEQF VCOLOR_M 2.0 else20_4
    MOVEF_F 4.0 VY_M
    MOVEF_F 1.0 VPY_M
    JR endif20
  else20_4:
    JR_NEQF VCOLOR_M 6.0 else20_5
    MOVEF_F 5.0 VY_M
    MOVEF_F 2.0 VPY_M
  else20_5:
  endif20:
    WRITE32 ENDSUB_CUBE:CALLSUB22 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB22:
RETSUB_GETCOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_GETCOL:
SUB_LEFT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer23
	DATA8 nos23
	DATA8 busy23
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer23 nos23
	JR_EQ8 0 nos23 motornotbusy23
  motorwaiting23:
	OUTPUT_TEST layer23 nos23 busy23
	JR_EQ8 busy23 0 motornotbusy23
	SLEEP
	JR motorwaiting23
  motornotbusy23:
    CALL MOTOR.RESETCOUNT 'BC'
  while25:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf29
    DATA8 flag29
    DIVF F.1 2.0 tmpf29
    CP_EQF 0.0 2.0 flag29
    SELECTF flag29 0.0 tmpf29 F.0

    JR_GTEQF F.0 10.0 endwhile25
  whilebody25:
    WRITE32 ENDSUB_LINE:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB30:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf34
    DATA8 flag34
    DIVF F.1 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.0

    JR_LTF F.0 10.0 whilebody25
  endwhile25:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 150.0 'true'

	DATA8 layer36
	DATA8 nos36
	DATA8 busy36
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer36 nos36
	JR_EQ8 0 nos36 motornotbusy36
  motorwaiting36:
	OUTPUT_TEST layer36 nos36 busy36
	JR_EQ8 busy36 0 motornotbusy36
	SLEEP
	JR motorwaiting36
  motornotbusy36:
  while37:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile37
  whilebody37:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody37
  endwhile37:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while43:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.1 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 F.0

    JR_GTEQF F.0 170.0 endwhile43
  whilebody43:
    WRITE32 ENDSUB_LINE:CALLSUB48 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB48:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.1 2.0 tmpf52
    CP_EQF 0.0 2.0 flag52
    SELECTF flag52 0.0 tmpf52 F.0

    JR_LTF F.0 170.0 whilebody43
  endwhile43:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer54
	DATA8 nos54
	DATA8 busy54
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer54 nos54
	JR_EQ8 0 nos54 motornotbusy54
  motorwaiting54:
	OUTPUT_TEST layer54 nos54 busy54
	JR_EQ8 busy54 0 motornotbusy54
	SLEEP
	JR motorwaiting54
  motornotbusy54:
    CALL MOTOR.RESETCOUNT 'BC'
  while56:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf60
    DATA8 flag60
    DIVF F.1 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    JR_GTEQF F.0 10.0 endwhile56
  whilebody56:
    WRITE32 ENDSUB_LINE:CALLSUB61 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB61:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_LTF F.0 10.0 whilebody56
  endwhile56:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 150.0 'true'

	DATA8 layer67
	DATA8 nos67
	DATA8 busy67
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer67 nos67
	JR_EQ8 0 nos67 motornotbusy67
  motorwaiting67:
	OUTPUT_TEST layer67 nos67 busy67
	JR_EQ8 busy67 0 motornotbusy67
	SLEEP
	JR motorwaiting67
  motornotbusy67:
  while68:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile68
  whilebody68:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody68
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while74:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf78
    DATA8 flag78
    DIVF F.1 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 F.0

    JR_GTEQF F.0 170.0 endwhile74
  whilebody74:
    WRITE32 ENDSUB_LINE:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB79:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf83
    DATA8 flag83
    DIVF F.1 2.0 tmpf83
    CP_EQF 0.0 2.0 flag83
    SELECTF flag83 0.0 tmpf83 F.0

    JR_LTF F.0 170.0 whilebody74
  endwhile74:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 280.0 'true'

	DATA8 layer85
	DATA8 nos85
	DATA8 busy85
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer85 nos85
	JR_EQ8 0 nos85 motornotbusy85
  motorwaiting85:
	OUTPUT_TEST layer85 nos85 busy85
	JR_EQ8 busy85 0 motornotbusy85
	SLEEP
	JR motorwaiting85
  motornotbusy85:
  while86:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile86
  whilebody86:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody86
  endwhile86:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while92:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf96
    DATA8 flag96
    DIVF F.1 2.0 tmpf96
    CP_EQF 0.0 2.0 flag96
    SELECTF flag96 0.0 tmpf96 F.0

    JR_GTEQF F.0 100.0 endwhile92
  whilebody92:
    WRITE32 ENDSUB_LINE:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB97:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf101
    DATA8 flag101
    DIVF F.1 2.0 tmpf101
    CP_EQF 0.0 2.0 flag101
    SELECTF flag101 0.0 tmpf101 F.0

    JR_LTF F.0 100.0 whilebody92
  endwhile92:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB103:
    WRITE32 ENDSUB_SEN2:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB104:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_CUBE:
    JR_NEQF VC_M 0.0 else112_1
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer113
	DATA8 nos113
	DATA8 busy113
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer113 nos113
	JR_EQ8 0 nos113 motornotbusy113
  motorwaiting113:
	OUTPUT_TEST layer113 nos113 busy113
	JR_EQ8 busy113 0 motornotbusy113
	SLEEP
	JR motorwaiting113
  motornotbusy113:
    MOVEF_F 1.0 VC_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 260.0 0.0 'true' 

	DATA8 layer114
	DATA8 nos114
	DATA8 busy114
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer114 nos114
	JR_EQ8 0 nos114 motornotbusy114
  motorwaiting114:
	OUTPUT_TEST layer114 nos114 busy114
	JR_EQ8 busy114 0 motornotbusy114
	SLEEP
	JR motorwaiting114
  motornotbusy114:
    CALL MOTOR.SCHEDULE 'A' 10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer115
	DATA8 nos115
	DATA8 busy115
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer115 nos115
	JR_EQ8 0 nos115 motornotbusy115
  motorwaiting115:
	OUTPUT_TEST layer115 nos115 busy115
	JR_EQ8 busy115 0 motornotbusy115
	SLEEP
	JR motorwaiting115
  motornotbusy115:
    JR endif112
  else112_1:
    CALL MOTOR.SCHEDULE 'A' -10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer116
	DATA8 nos116
	DATA8 busy116
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer116 nos116
	JR_EQ8 0 nos116 motornotbusy116
  motorwaiting116:
	OUTPUT_TEST layer116 nos116 busy116
	JR_EQ8 busy116 0 motornotbusy116
	SLEEP
	JR motorwaiting116
  motornotbusy116:
    MOVEF_F 0.0 VC_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 200.0 0.0 'true' 

	DATA8 layer117
	DATA8 nos117
	DATA8 busy117
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer117 nos117
	JR_EQ8 0 nos117 motornotbusy117
  motorwaiting117:
	OUTPUT_TEST layer117 nos117 busy117
	JR_EQ8 busy117 0 motornotbusy117
	SLEEP
	JR motorwaiting117
  motornotbusy117:
    CALL MOTOR.SCHEDULE 'A' -10.0 0.0 90.0 0.0 'TRUE' 

	DATA8 layer118
	DATA8 nos118
	DATA8 busy118
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer118 nos118
	JR_EQ8 0 nos118 motornotbusy118
  motorwaiting118:
	OUTPUT_TEST layer118 nos118 busy118
	JR_EQ8 busy118 0 motornotbusy118
	SLEEP
	JR motorwaiting118
  motornotbusy118:
  else112_2:
  endif112:
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer119
	DATA8 nos119
	DATA8 busy119
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer119 nos119
	JR_EQ8 0 nos119 motornotbusy119
  motorwaiting119:
	OUTPUT_TEST layer119 nos119 busy119
	JR_EQ8 busy119 0 motornotbusy119
	SLEEP
	JR motorwaiting119
  motornotbusy119:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
