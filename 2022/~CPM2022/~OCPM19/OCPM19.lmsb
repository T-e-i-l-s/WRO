DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VCOLOR_M
DATAF VY_M
DATAF VERR_M
DATAF VGRAD_M
DATAF VX1_M
DATAF VX2_M
DATAF VX3_M
DATAF VDD_M
DATAF VY1_M
DATAF VI_M
DATAF VYK_M
DATAF VY2_M
DATAF VY3_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VX1_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VDD_M
    MOVEF_F 0.0 VY1_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VYK_M
    MOVEF_F 0.0 VY2_M
    MOVEF_F 0.0 VY3_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VX1_M
    MOVEF_F 0.0 VX2_M
    MOVEF_F 0.0 VX3_M
    MOVEF_F 0.0 VDD_M
    MOVEF_F 0.0 VY1_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VYK_M
    MOVEF_F 0.0 VY2_M
    MOVEF_F 0.0 VY3_M
    DATA8 layer0
	DATA8 no0
	DATA8 mode80
	
	MOVEF_8 1.0 no0
	SUB8 no0 1 no0
	DIV8 no0 4 layer0
	MATH MOD8 no0 4 no0

	MOVEF_8 0.0 mode80
	
	INPUT_DEVICE READY_RAW layer0 no0 0 mode80 0
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 3.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 2.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 4.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.3 VK_M
    MOVEF_F 40.0 VV_M
    MOVEF_F 0.0 VDD_M
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 350.0 0.0 'true' 

	DATA8 layer182
	DATA8 nos182
	DATA8 busy182
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer182 nos182
	JR_EQ8 0 nos182 motornotbusy182
  motorwaiting182:
	OUTPUT_TEST layer182 nos182 busy182
	JR_EQ8 busy182 0 motornotbusy182
	SLEEP
	JR motorwaiting182
  motornotbusy182:
    CALL MOTOR.RESETCOUNT 'BC'
  while184:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf188
    DATA8 flag188
    DIVF F.1 2.0 tmpf188
    CP_EQF 0.0 2.0 flag188
    SELECTF flag188 0.0 tmpf188 F.0

    JR_GTEQF F.0 200.0 endwhile184
  whilebody184:
    WRITE32 ENDSUB_LINE:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB189:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf193
    DATA8 flag193
    DIVF F.1 2.0 tmpf193
    CP_EQF 0.0 2.0 flag193
    SELECTF flag193 0.0 tmpf193 F.0

    JR_LTF F.0 200.0 whilebody184
  endwhile184:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CODE:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CODE
CALLSUB195:
  while196:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or197
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile196
  or197:
  whilebody196:
    WRITE32 ENDSUB_LINE:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB200:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody196
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody196
  endwhile196:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer203
	DATA8 nos203
	DATA8 busy203
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer203 nos203
	JR_EQ8 0 nos203 motornotbusy203
  motorwaiting203:
	OUTPUT_TEST layer203 nos203 busy203
	JR_EQ8 busy203 0 motornotbusy203
	SLEEP
	JR motorwaiting203
  motornotbusy203:
    CALL MOTOR.SCHEDULE 'A' -10.0 0.0 180.0 0.0 'true' 

	DATA8 layer204
	DATA8 nos204
	DATA8 busy204
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer204 nos204
	JR_EQ8 0 nos204 motornotbusy204
  motorwaiting204:
	OUTPUT_TEST layer204 nos204 busy204
	JR_EQ8 busy204 0 motornotbusy204
	SLEEP
	JR motorwaiting204
  motornotbusy204:
    WRITE32 ENDSUB_COLOR:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB205:
    MOVEF_F VY_M VY1_M
    SUBF VX1_M 1.0 VX1_M
    MOVEF_F 1.0 VI_M
  for207:
    JR_GTF VI_M VX1_M endfor207
  forbody207:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer208
	DATA8 nos208
	DATA8 busy208
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer208 nos208
	JR_EQ8 0 nos208 motornotbusy208
  motorwaiting208:
	OUTPUT_TEST layer208 nos208 busy208
	JR_EQ8 busy208 0 motornotbusy208
	SLEEP
	JR motorwaiting208
  motornotbusy208:
  while209:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or210
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile209
  or210:
  whilebody209:
    WRITE32 ENDSUB_LINE:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB213:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody209
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody209
  endwhile209:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX1_M forbody207
  endfor207:
    CALL MOTOR.STOP 'bc' 'true'
    JR_GTEQF VY1_M 3.0 else218_1
    WRITE32 ENDSUB_LEFT:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB219:
    JR endif218
  else218_1:
    JR_LTEQF VY1_M 3.0 else218_2
    WRITE32 ENDSUB_RIGHT:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB220:
    JR endif218
  else218_2:
    JR_NEQF VY1_M 3.0 else218_3
    MOVEF_F VY_M VYK_M
    WRITE32 ENDSUB_RECHANGE:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB221:
    WRITE32 ENDSUB_COLOR:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB222:
    MOVEF_F VY_M VY2_M
    MOVEF_F 1.0 VDD_M
  else218_3:
  endif218:
    JR_EQF VDD_M 1.0 else223_1
    MOVEF_F 2.0 VY1_M
    JR_NEQF VY1_M 1.0 else224_1
    MOVEF_F 2.0 VY1_M
    JR endif224
  else224_1:
    JR_NEQF VY1_M 2.0 else224_2
    MOVEF_F 1.0 VY1_M
    JR endif224
  else224_2:
    JR_NEQF VY1_M 3.0 else224_3
    MOVEF_F 0.0 VY1_M
    JR endif224
  else224_3:
    JR_NEQF VY1_M 4.0 else224_4
    MOVEF_F 1.0 VY1_M
    JR endif224
  else224_4:
    JR_NEQF VY1_M 5.0 else224_5
    MOVEF_F 2.0 VY1_M
  else224_5:
  endif224:
    JR_GTEQF VY1_M 3.0 else225_1
    MOVEF_F 1.0 VI_M
  for226:
    JR_GTF VI_M VY1_M endfor226
  forbody226:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer227
	DATA8 nos227
	DATA8 busy227
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer227 nos227
	JR_EQ8 0 nos227 motornotbusy227
  motorwaiting227:
	OUTPUT_TEST layer227 nos227 busy227
	JR_EQ8 busy227 0 motornotbusy227
	SLEEP
	JR motorwaiting227
  motornotbusy227:
  while228:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or229
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile228
  or229:
  whilebody228:
    WRITE32 ENDSUB_LINE:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB232:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody228
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody228
  endwhile228:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY1_M forbody226
  endfor226:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F VY_M VYK_M
    WRITE32 ENDSUB_RECHANGE:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB237:
    WRITE32 ENDSUB_COLOR:CALLSUB238 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB238:
    MOVEF_F VY_M VY2_M
    MOVEF_F 1.0 VI_M
  for239:
    JR_GTF VI_M VY1_M endfor239
  forbody239:
  while240:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or241
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile240
  or241:
  whilebody240:
    WRITE32 ENDSUB_LINE:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB244:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody240
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody240
  endwhile240:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer247
	DATA8 nos247
	DATA8 busy247
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer247 nos247
	JR_EQ8 0 nos247 motornotbusy247
  motorwaiting247:
	OUTPUT_TEST layer247 nos247 busy247
	JR_EQ8 busy247 0 motornotbusy247
	SLEEP
	JR motorwaiting247
  motornotbusy247:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY1_M forbody239
  endfor239:
    JR_GTEQF VYK_M 3.0 else249_1
    WRITE32 ENDSUB_RIGHT:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB250:
    JR endif249
  else249_1:
    JR_LTEQF VYK_M 3.0 else249_2
    WRITE32 ENDSUB_LEFT:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB251:
  else249_2:
  endif249:
  else225_1:
  endif225:
  else223_1:
  endif223:
    MOVEF_F 1.0 VI_M
  for252:
    JR_GTF VI_M VX1_M endfor252
  forbody252:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer253
	DATA8 nos253
	DATA8 busy253
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer253 nos253
	JR_EQ8 0 nos253 motornotbusy253
  motorwaiting253:
	OUTPUT_TEST layer253 nos253 busy253
	JR_EQ8 busy253 0 motornotbusy253
	SLEEP
	JR motorwaiting253
  motornotbusy253:
  while254:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or255
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile254
  or255:
  whilebody254:
    WRITE32 ENDSUB_LINE:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB258:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody254
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody254
  endwhile254:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX1_M forbody252
  endfor252:
    WRITE32 ENDSUB_AROUND:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB262:
    MOVEF_F 0.0 VDD_M
    SUBF VX2_M 1.0 VX2_M
    MOVEF_F 1.0 VI_M
  for264:
    JR_GTF VI_M VX2_M endfor264
  forbody264:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer265
	DATA8 nos265
	DATA8 busy265
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer265 nos265
	JR_EQ8 0 nos265 motornotbusy265
  motorwaiting265:
	OUTPUT_TEST layer265 nos265 busy265
	JR_EQ8 busy265 0 motornotbusy265
	SLEEP
	JR motorwaiting265
  motornotbusy265:
  while266:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or267
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile266
  or267:
  whilebody266:
    WRITE32 ENDSUB_LINE:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB270:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody266
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody266
  endwhile266:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX2_M forbody264
  endfor264:
    CALL MOTOR.STOP 'bc' 'true'
    JR_GTEQF VY2_M 3.0 else275_1
    WRITE32 ENDSUB_LEFT:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB276:
    JR endif275
  else275_1:
    JR_LTEQF VY2_M 3.0 else275_2
    WRITE32 ENDSUB_RIGHT:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB277:
    JR endif275
  else275_2:
    JR_NEQF VY2_M 3.0 else275_3
    MOVEF_F VY_M VYK_M
    WRITE32 ENDSUB_RECHANGE:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB278:
    WRITE32 ENDSUB_COLOR:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB279:
    MOVEF_F VY_M VY3_M
    MOVEF_F 1.0 VDD_M
  else275_3:
  endif275:
    JR_EQF VDD_M 1.0 else280_1
    MOVEF_F 2.0 VY2_M
    JR_NEQF VY2_M 1.0 else281_1
    MOVEF_F 2.0 VY2_M
    JR endif281
  else281_1:
    JR_NEQF VY2_M 2.0 else281_2
    MOVEF_F 1.0 VY2_M
    JR endif281
  else281_2:
    JR_NEQF VY2_M 3.0 else281_3
    MOVEF_F 0.0 VY2_M
    JR endif281
  else281_3:
    JR_NEQF VY2_M 4.0 else281_4
    MOVEF_F 1.0 VY2_M
    JR endif281
  else281_4:
    JR_NEQF VY2_M 5.0 else281_5
    MOVEF_F 2.0 VY2_M
  else281_5:
  endif281:
    JR_EQF VY2_M 0.0 else282_1
    MOVEF_F 1.0 VI_M
  for283:
    JR_GTF VI_M VY2_M endfor283
  forbody283:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer284
	DATA8 nos284
	DATA8 busy284
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer284 nos284
	JR_EQ8 0 nos284 motornotbusy284
  motorwaiting284:
	OUTPUT_TEST layer284 nos284 busy284
	JR_EQ8 busy284 0 motornotbusy284
	SLEEP
	JR motorwaiting284
  motornotbusy284:
  while285:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or286
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile285
  or286:
  whilebody285:
    WRITE32 ENDSUB_LINE:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB289:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody285
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody285
  endwhile285:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY2_M forbody283
  endfor283:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F VY_M VYK_M
    WRITE32 ENDSUB_RECHANGE:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB294:
    WRITE32 ENDSUB_COLOR:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB295:
    MOVEF_F VY_M VY3_M
    MOVEF_F 1.0 VI_M
  for296:
    JR_GTF VI_M VY2_M endfor296
  forbody296:
  while297:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or298
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile297
  or298:
  whilebody297:
    WRITE32 ENDSUB_LINE:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB301:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody297
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody297
  endwhile297:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer304
	DATA8 nos304
	DATA8 busy304
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer304 nos304
	JR_EQ8 0 nos304 motornotbusy304
  motorwaiting304:
	OUTPUT_TEST layer304 nos304 busy304
	JR_EQ8 busy304 0 motornotbusy304
	SLEEP
	JR motorwaiting304
  motornotbusy304:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY2_M forbody296
  endfor296:
    JR_GTEQF VYK_M 3.0 else306_1
    WRITE32 ENDSUB_RIGHT:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB307:
    JR endif306
  else306_1:
    JR_LTEQF VYK_M 3.0 else306_2
    WRITE32 ENDSUB_LEFT:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB308:
  else306_2:
  endif306:
  else282_1:
  endif282:
  else280_1:
  endif280:
    MOVEF_F 1.0 VI_M
  for309:
    JR_GTF VI_M VX2_M endfor309
  forbody309:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer310
	DATA8 nos310
	DATA8 busy310
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer310 nos310
	JR_EQ8 0 nos310 motornotbusy310
  motorwaiting310:
	OUTPUT_TEST layer310 nos310 busy310
	JR_EQ8 busy310 0 motornotbusy310
	SLEEP
	JR motorwaiting310
  motornotbusy310:
  while311:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or312
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile311
  or312:
  whilebody311:
    WRITE32 ENDSUB_LINE:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB315:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody311
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody311
  endwhile311:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX2_M forbody309
  endfor309:
    WRITE32 ENDSUB_AROUND:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB319:
    MOVEF_F 0.0 VDD_M
    SUBF VX3_M 1.0 VX3_M
    MOVEF_F 1.0 VI_M
  for321:
    JR_GTF VI_M VX3_M endfor321
  forbody321:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer322
	DATA8 nos322
	DATA8 busy322
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer322 nos322
	JR_EQ8 0 nos322 motornotbusy322
  motorwaiting322:
	OUTPUT_TEST layer322 nos322 busy322
	JR_EQ8 busy322 0 motornotbusy322
	SLEEP
	JR motorwaiting322
  motornotbusy322:
  while323:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or324
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile323
  or324:
  whilebody323:
    WRITE32 ENDSUB_LINE:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB327:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody323
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody323
  endwhile323:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX3_M forbody321
  endfor321:
    CALL MOTOR.STOP 'bc' 'true'
    JR_GTEQF VY3_M 3.0 else332_1
    WRITE32 ENDSUB_LEFT:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB333:
    JR endif332
  else332_1:
    JR_LTEQF VY3_M 3.0 else332_2
    WRITE32 ENDSUB_RIGHT:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB334:
    JR endif332
  else332_2:
    JR_NEQF VY3_M 3.0 else332_3
    MOVEF_F VY_M VYK_M
    WRITE32 ENDSUB_RECHANGE:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB335:
    WRITE32 ENDSUB_COLOR:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB336:
    MOVEF_F 1.0 VDD_M
  else332_3:
  endif332:
    JR_EQF VDD_M 1.0 else337_1
    MOVEF_F 2.0 VY3_M
    JR_NEQF VY3_M 1.0 else338_1
    MOVEF_F 2.0 VY3_M
    JR endif338
  else338_1:
    JR_NEQF VY3_M 2.0 else338_2
    MOVEF_F 1.0 VY3_M
    JR endif338
  else338_2:
    JR_NEQF VY3_M 3.0 else338_3
    MOVEF_F 0.0 VY3_M
    JR endif338
  else338_3:
    JR_NEQF VY3_M 4.0 else338_4
    MOVEF_F 1.0 VY3_M
    JR endif338
  else338_4:
    JR_NEQF VY3_M 5.0 else338_5
    MOVEF_F 2.0 VY3_M
  else338_5:
  endif338:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer339
	DATA8 nos339
	DATA8 busy339
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer339 nos339
	JR_EQ8 0 nos339 motornotbusy339
  motorwaiting339:
	OUTPUT_TEST layer339 nos339 busy339
	JR_EQ8 busy339 0 motornotbusy339
	SLEEP
	JR motorwaiting339
  motornotbusy339:
    MOVEF_F 1.0 VI_M
  for340:
    JR_GTF VI_M VY3_M endfor340
  forbody340:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer341
	DATA8 nos341
	DATA8 busy341
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer341 nos341
	JR_EQ8 0 nos341 motornotbusy341
  motorwaiting341:
	OUTPUT_TEST layer341 nos341 busy341
	JR_EQ8 busy341 0 motornotbusy341
	SLEEP
	JR motorwaiting341
  motornotbusy341:
  while342:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or343
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile342
  or343:
  whilebody342:
    WRITE32 ENDSUB_LINE:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB346:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody342
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody342
  endwhile342:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY3_M forbody340
  endfor340:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RECHANGE:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RECHANGE
CALLSUB351:
    WRITE32 ENDSUB_COLOR:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR
CALLSUB352:
    MOVEF_F 1.0 VI_M
  for353:
    JR_GTF VI_M VY3_M endfor353
  forbody353:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VY3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds357
	MOVEF_32 2000.0 milliseconds357
	DATA32 timer357
	TIMER_WAIT milliseconds357 timer357
	TIMER_READY timer357
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer358
	DATA8 nos358
	DATA8 busy358
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer358 nos358
	JR_EQ8 0 nos358 motornotbusy358
  motorwaiting358:
	OUTPUT_TEST layer358 nos358 busy358
	JR_EQ8 busy358 0 motornotbusy358
	SLEEP
	JR motorwaiting358
  motornotbusy358:
  while359:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or360
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile359
  or360:
  whilebody359:
    WRITE32 ENDSUB_LINE:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB363:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody359
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody359
  endwhile359:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VY3_M forbody353
  endfor353:
    CALL MOTOR.STOP 'BC' 'true'
    JR_GTEQF VY3_M 3.0 else368_1
    WRITE32 ENDSUB_RIGHT:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB369:
    JR endif368
  else368_1:
    JR_LTEQF VY3_M 3.0 else368_2
    WRITE32 ENDSUB_LEFT:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB370:
  else368_2:
  endif368:
  else337_1:
  endif337:
    MOVEF_F 1.0 VI_M
  for371:
    JR_GTF VI_M VX3_M endfor371
  forbody371:
    CALL MOTOR.SCHEDULE 'bc' 20.0 0.0 45.0 0.0 'true' 

	DATA8 layer372
	DATA8 nos372
	DATA8 busy372
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer372 nos372
	JR_EQ8 0 nos372 motornotbusy372
  motorwaiting372:
	OUTPUT_TEST layer372 nos372 busy372
	JR_EQ8 busy372 0 motornotbusy372
	SLEEP
	JR motorwaiting372
  motornotbusy372:
  while373:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 or374
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 20.0 endwhile373
  or374:
  whilebody373:
    WRITE32 ENDSUB_LINE:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB377:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 20.0 whilebody373
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 20.0 whilebody373
  endwhile373:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VX3_M forbody371
  endfor371:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
  while383:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf387
    DATA8 flag387
    DIVF F.1 2.0 tmpf387
    CP_EQF 0.0 2.0 flag387
    SELECTF flag387 0.0 tmpf387 F.0

    JR_GTEQF F.0 200.0 endwhile383
  whilebody383:
    WRITE32 ENDSUB_LINE:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB388:
    CALL MOTOR.GETCOUNT 'c' F.2
    CALL MOTOR.GETCOUNT 'b' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf392
    DATA8 flag392
    DIVF F.1 2.0 tmpf392
    CP_EQF 0.0 2.0 flag392
    SELECTF flag392 0.0 tmpf392 F.0

    JR_LTF F.0 200.0 whilebody383
  endwhile383:
    CALL MOTOR.START 'BC' 20.0
    DATA32 milliseconds394
	MOVEF_32 7500.0 milliseconds394
	DATA32 timer394
	TIMER_WAIT milliseconds394 timer394
	TIMER_READY timer394
    CALL MOTOR.STOP 'BC' 'true'
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 1.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf7
    DATA8 flag7
    DIVF F.0 F.1 tmpf7
    CP_EQF 0.0 F.1 flag7
    SELECTF flag7 0.0 tmpf7 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 4.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.0 F.1 tmpf12
    CP_EQF 0.0 F.1 flag12
    SELECTF flag12 0.0 tmpf12 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB13:
    WRITE32 ENDSUB_SEN2:CALLSUB14 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB14:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_LEFT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 50.0 0.0 'true' 

	DATA8 layer22
	DATA8 nos22
	DATA8 busy22
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer22 nos22
	JR_EQ8 0 nos22 motornotbusy22
  motorwaiting22:
	OUTPUT_TEST layer22 nos22 busy22
	JR_EQ8 busy22 0 motornotbusy22
	SLEEP
	JR motorwaiting22
  motornotbusy22:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 100.0 'true'

	DATA8 layer23
	DATA8 nos23
	DATA8 busy23
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer23 nos23
	JR_EQ8 0 nos23 motornotbusy23
  motorwaiting23:
	OUTPUT_TEST layer23 nos23 busy23
	JR_EQ8 busy23 0 motornotbusy23
	SLEEP
	JR motorwaiting23
  motornotbusy23:
  while24:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 25.0 endwhile24
  whilebody24:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 25.0 whilebody24
  endwhile24:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 30.0 0.0 'true' 

	DATA8 layer29
	DATA8 nos29
	DATA8 busy29
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer29 nos29
	JR_EQ8 0 nos29 motornotbusy29
  motorwaiting29:
	OUTPUT_TEST layer29 nos29 busy29
	JR_EQ8 busy29 0 motornotbusy29
	SLEEP
	JR motorwaiting29
  motornotbusy29:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 100.0 'true'

	DATA8 layer30
	DATA8 nos30
	DATA8 busy30
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer30 nos30
	JR_EQ8 0 nos30 motornotbusy30
  motorwaiting30:
	OUTPUT_TEST layer30 nos30 busy30
	JR_EQ8 busy30 0 motornotbusy30
	SLEEP
	JR motorwaiting30
  motornotbusy30:
  while31:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_LTEQF F.0 25.0 endwhile31
  whilebody31:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 25.0 whilebody31
  endwhile31:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 300.0 'true'

	DATA8 layer36
	DATA8 nos36
	DATA8 busy36
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer36 nos36
	JR_EQ8 0 nos36 motornotbusy36
  motorwaiting36:
	OUTPUT_TEST layer36 nos36 busy36
	JR_EQ8 busy36 0 motornotbusy36
	SLEEP
	JR motorwaiting36
  motornotbusy36:
  while37:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  whilebody37:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer42
	DATA8 nos42
	DATA8 busy42
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer42 nos42
	JR_EQ8 0 nos42 motornotbusy42
  motorwaiting42:
	OUTPUT_TEST layer42 nos42 busy42
	JR_EQ8 busy42 0 motornotbusy42
	SLEEP
	JR motorwaiting42
  motornotbusy42:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_COLOR:
    CALL MOTOR.SCHEDULE 'A' -9.0 0.0 30.0 0.0 'true' 

	DATA8 layer43
	DATA8 nos43
	DATA8 busy43
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer43 nos43
	JR_EQ8 0 nos43 motornotbusy43
  motorwaiting43:
	OUTPUT_TEST layer43 nos43 busy43
	JR_EQ8 busy43 0 motornotbusy43
	SLEEP
	JR motorwaiting43
  motornotbusy43:
    CALL SENSOR.READRAWVALUE 3.0 0.0 VCOLOR_M
    CALL MOTOR.SCHEDULE 'A' 9.0 0.0 30.0 0.0 'true' 

	DATA8 layer45
	DATA8 nos45
	DATA8 busy45
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer45 nos45
	JR_EQ8 0 nos45 motornotbusy45
  motorwaiting45:
	OUTPUT_TEST layer45 nos45 busy45
	JR_EQ8 busy45 0 motornotbusy45
	SLEEP
	JR motorwaiting45
  motornotbusy45:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds49
	MOVEF_32 3000.0 milliseconds49
	DATA32 timer49
	TIMER_WAIT milliseconds49 timer49
	TIMER_READY timer49
    JR_NEQF VCOLOR_M 5.0 else50_1
    MOVEF_F 1.0 VY_M
    JR endif50
  else50_1:
    JR_EQF VCOLOR_M 4.0 or51
    JR_NEQF VCOLOR_M 7.0 else50_2
  or51:
    MOVEF_F 2.0 VY_M
    JR endif50
  else50_2:
    JR_NEQF VCOLOR_M 3.0 else50_3
    MOVEF_F 3.0 VY_M
    JR endif50
  else50_3:
    JR_NEQF VCOLOR_M 2.0 else50_4
    MOVEF_F 4.0 VY_M
    JR endif50
  else50_4:
    JR_NEQF VCOLOR_M 6.0 else50_5
    MOVEF_F 5.0 VY_M
  else50_5:
  endif50:
RETSUB_COLOR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR:
SUB_RECHANGE:
    CALL MOTOR.SCHEDULE 'A' -3.0 0.0 90.0 0.0 'true' 

	DATA8 layer52
	DATA8 nos52
	DATA8 busy52
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer52 nos52
	JR_EQ8 0 nos52 motornotbusy52
  motorwaiting52:
	OUTPUT_TEST layer52 nos52 busy52
	JR_EQ8 busy52 0 motornotbusy52
	SLEEP
	JR motorwaiting52
  motornotbusy52:
    DATA32 milliseconds53
	MOVEF_32 300.0 milliseconds53
	DATA32 timer53
	TIMER_WAIT milliseconds53 timer53
	TIMER_READY timer53
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 220.0 0.0 'true' 

	DATA8 layer54
	DATA8 nos54
	DATA8 busy54
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer54 nos54
	JR_EQ8 0 nos54 motornotbusy54
  motorwaiting54:
	OUTPUT_TEST layer54 nos54 busy54
	JR_EQ8 busy54 0 motornotbusy54
	SLEEP
	JR motorwaiting54
  motornotbusy54:
    DATA32 milliseconds55
	MOVEF_32 300.0 milliseconds55
	DATA32 timer55
	TIMER_WAIT milliseconds55 timer55
	TIMER_READY timer55
    CALL MOTOR.SCHEDULE 'A' -3.0 0.0 90.0 0.0 'true' 

	DATA8 layer56
	DATA8 nos56
	DATA8 busy56
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer56 nos56
	JR_EQ8 0 nos56 motornotbusy56
  motorwaiting56:
	OUTPUT_TEST layer56 nos56 busy56
	JR_EQ8 busy56 0 motornotbusy56
	SLEEP
	JR motorwaiting56
  motornotbusy56:
    DATA32 milliseconds57
	MOVEF_32 300.0 milliseconds57
	DATA32 timer57
	TIMER_WAIT milliseconds57 timer57
	TIMER_READY timer57
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 150.0 0.0 'true' 

	DATA8 layer58
	DATA8 nos58
	DATA8 busy58
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer58 nos58
	JR_EQ8 0 nos58 motornotbusy58
  motorwaiting58:
	OUTPUT_TEST layer58 nos58 busy58
	JR_EQ8 busy58 0 motornotbusy58
	SLEEP
	JR motorwaiting58
  motornotbusy58:
    DATA32 milliseconds59
	MOVEF_32 300.0 milliseconds59
	DATA32 timer59
	TIMER_WAIT milliseconds59 timer59
	TIMER_READY timer59
    WRITE32 ENDSUB_AROUND:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB60:
RETSUB_RECHANGE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RECHANGE:
SUB_CODE:
    CALL MOTOR.STARTSYNC 'BC' 13.0 13.0
  while62:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 25.0 or63
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 25.0 endwhile62
  or63:
  whilebody62:
    CALL SENSOR.READPERCENT 1.0 F.0
    JR_GTF F.0 25.0 whilebody62
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 25.0 whilebody62
  endwhile62:
    DATA32 milliseconds68
	MOVEF_32 20.0 milliseconds68
	DATA32 timer68
	TIMER_WAIT milliseconds68 timer68
	TIMER_READY timer68
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 13.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 13.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while81:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTEQF F.0 30.0 endwhile81
  whilebody81:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTF F.0 30.0 whilebody81
  endwhile81:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf90
    DATA8 flag90
    DIVF F.0 360.0 tmpf90
    CP_EQF 0.0 360.0 flag90
    SELECTF flag90 0.0 tmpf90 VX1_M

    MATH FLOOR VX1_M VX1_M
    SUBF VX1_M 1.0 VX1_M
    JR_NEQF VX1_M 0.0 else93_1
    MOVEF_F 1.0 VX1_M
  else93_1:
  endif93:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VX1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds97
	MOVEF_32 3000.0 milliseconds97
	DATA32 timer97
	TIMER_WAIT milliseconds97 timer97
	TIMER_READY timer97
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 13.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 13.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
  while108:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 25.0 endwhile108
  whilebody108:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 25.0 whilebody108
  endwhile108:
    DATA32 milliseconds111
	MOVEF_32 20.0 milliseconds111
	DATA32 timer111
	TIMER_WAIT milliseconds111 timer111
	TIMER_READY timer111
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 13.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 13.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while124:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTEQF F.0 30.0 endwhile124
  whilebody124:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTF F.0 30.0 whilebody124
  endwhile124:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf133
    DATA8 flag133
    DIVF F.0 360.0 tmpf133
    CP_EQF 0.0 360.0 flag133
    SELECTF flag133 0.0 tmpf133 VX2_M

    MATH FLOOR VX2_M VX2_M
    SUBF VX2_M 1.0 VX2_M
    JR_NEQF VX2_M 0.0 else136_1
    MOVEF_F 1.0 VX2_M
  else136_1:
  endif136:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VX2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds140
	MOVEF_32 3000.0 milliseconds140
	DATA32 timer140
	TIMER_WAIT milliseconds140 timer140
	TIMER_READY timer140
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 13.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 13.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
  while151:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTEQF F.0 25.0 endwhile151
  whilebody151:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTF F.0 25.0 whilebody151
  endwhile151:
    DATA32 milliseconds154
	MOVEF_32 20.0 milliseconds154
	DATA32 timer154
	TIMER_WAIT milliseconds154 timer154
	TIMER_READY timer154
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    CALL MOTOR.GETCOUNT 'C' F.2
    MATH ABS F.2 F.1
    SUBF F.0 F.1 VERR_M
    MULF VERR_M 2.0 F.1
    ADDF 13.0 F.1 F.0
    MULF VERR_M 2.0 F.2
    ADDF 13.0 F.2 F.1
    CALL MOTOR.STARTSYNC 'BC' F.0 F.1
    CALL SPEAKER.NOTE 100.0 'c#5' 100.0
  while167:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_GTEQF F.0 30.0 endwhile167
  whilebody167:
    CALL SENSOR.READPERCENT 4.0 F.0
    JR_LTF F.0 30.0 whilebody167
  endwhile167:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETCOUNT 'c' VGRAD_M
    MOVEF_F 3.1415926535897932384 F.2
    MULF VGRAD_M F.2 F.1
    MULF F.1 8.2 F.0
    DATAF tmpf175
    DATA8 flag175
    DIVF F.0 360.0 tmpf175
    CP_EQF 0.0 360.0 flag175
    SELECTF flag175 0.0 tmpf175 VX3_M

    MATH FLOOR VX3_M VX3_M
    JR_NEQF VX3_M 0.0 else177_1
    MOVEF_F 1.0 VX3_M
  else177_1:
  endif177:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VX3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 1.0 20.0 20.0 S.0
    DATA32 milliseconds181
	MOVEF_32 2000.0 milliseconds181
	DATA32 timer181
	TIMER_WAIT milliseconds181 timer181
	TIMER_READY timer181
RETSUB_CODE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CODE:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
