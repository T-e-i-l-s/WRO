DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
ARRAY16 VX_M 2
ARRAY16 VY_M 2
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VS1_M
DATAF VS2_M
DATAF VERR_M
DATAF VU_M
DATAF VZ_M
DATAF VI_M
DATAF VA_M
DATAF VBIO_M
DATAF VC_M
DATAF VGRAD_1
DATAF VL_1
DATAF VGRAD_2
DATAF VL_2
DATAF VL_3
DATAF VSP_3
DATAF VU_3
DATAF VMM_4
DATAF VSP_4
DATAF VL_4

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    CALL ARRAYCREATE_FLOAT VX_M
    CALL ARRAYCREATE_FLOAT VY_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VGRAD_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VGRAD_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VU_3
    MOVEF_F 0.0 VMM_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VX_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VY_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VERR_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VGRAD_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VGRAD_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VU_3
    MOVEF_F 0.0 VMM_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    CALL MOTOR.INVERT 'B'
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL ARRAYSTORE_FLOAT 1.0 1.0 VX_M
    CALL ARRAYSTORE_FLOAT 1.0 4.0 VY_M
    CALL ARRAYSTORE_FLOAT 2.0 4.0 VX_M
    CALL ARRAYSTORE_FLOAT 2.0 3.0 VY_M
    CALL ARRAYSTORE_FLOAT 3.0 5.0 VX_M
    CALL ARRAYSTORE_FLOAT 3.0 1.0 VY_M
    CALL ARRAYSTORE_FLOAT 4.0 7.0 VX_M
    CALL ARRAYSTORE_FLOAT 4.0 2.0 VY_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.35 VK_M
    MOVEF_F 40.0 VV_M
    MOVEF_F 0.0 VZ_M
    CALL LCD.CLEAR
    CALL LCD.WRITE 50.0 50.0 'START'
    CALL SPEAKER.NOTE 100.0 'c#5' 500.0
    CALL MOTOR.RESETCOUNT 'BC'
  while153:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or154
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile153
  or154:
  whilebody153:
    WRITE32 ENDSUB_LINE:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB157:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody153
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody153
  endwhile153:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 2.0 VI_M
  for161:
    JR_GTF VI_M 7.0 endfor161
  forbody161:
    MOVEF_F VI_M VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for162:
    JR_GTF VC_M 4.0 endfor162
  forbody162:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 VA_M else169_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 3.0 else169_1
    MOVEF_F 1.0 VBIO_M
  else169_1:
  endif169:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody162
  endfor162:
    JR_NEQF VBIO_M 1.0 else175_1
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB177:
  else175_1:
  endif175:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer178
	DATA8 nos178
	DATA8 busy178
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer178 nos178
	JR_EQ8 0 nos178 motornotbusy178
  motorwaiting178:
	OUTPUT_TEST layer178 nos178 busy178
	JR_EQ8 busy178 0 motornotbusy178
	SLEEP
	JR motorwaiting178
  motornotbusy178:
  while179:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or180
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile179
  or180:
  whilebody179:
    WRITE32 ENDSUB_LINE:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB183:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody179
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody179
  endwhile179:
    JR_NEQF VBIO_M 1.0 else186_1
    MOVEF_F 60.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB187:
    MOVEF_F 60.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB188:
    WRITE32 ENDSUB_OPEN:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB189:
  else186_1:
  endif186:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 7.0 forbody161
  endfor161:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 300.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB192:
    WRITE32 ENDSUB_OPEN:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB193:
    MOVEF_F 300.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB194:
    WRITE32 ENDSUB_LEFT:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB195:
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for196:
    JR_GTF VC_M 4.0 endfor196
  forbody196:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 7.0 else203_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 2.0 else203_1
    MOVEF_F 1.0 VBIO_M
  else203_1:
  endif203:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody196
  endfor196:
    JR_NEQF VBIO_M 0.0 else209_1
    WRITE32 ENDSUB_OPEN:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB210:
    JR endif209
  else209_1:
    MOVEF_F 50.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB211:
    WRITE32 ENDSUB_CLOSE:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB212:
    MOVEF_F 50.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB213:
  else209_2:
  endif209:
  while214:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or215
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile214
  or215:
  whilebody214:
    WRITE32 ENDSUB_LINE:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB218:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody214
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody214
  endwhile214:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB222:
    WRITE32 ENDSUB_LEFT:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB223:
    WRITE32 ENDSUB_OPEN:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB224:
    MOVEF_F 7.0 VI_M
  for225:
    JR_LTF VI_M 2.0 endfor225
  forbody225:
    MOVEF_F VI_M VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for226:
    JR_GTF VC_M 4.0 endfor226
  forbody226:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    SUBF VA_M 1.0 F.1
    JR_NEQF F.0 F.1 else233_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 2.0 else233_1
    MOVEF_F 1.0 VBIO_M
  else233_1:
  endif233:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody226
  endfor226:
    JR_NEQF VBIO_M 1.0 else240_1
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB242:
  else240_1:
  endif240:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer243
	DATA8 nos243
	DATA8 busy243
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer243 nos243
	JR_EQ8 0 nos243 motornotbusy243
  motorwaiting243:
	OUTPUT_TEST layer243 nos243 busy243
	JR_EQ8 busy243 0 motornotbusy243
	SLEEP
	JR motorwaiting243
  motornotbusy243:
  while244:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or245
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile244
  or245:
  whilebody244:
    WRITE32 ENDSUB_LINE:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB248:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody244
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody244
  endwhile244:
    JR_NEQF VBIO_M 1.0 else251_1
    MOVEF_F 60.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB252:
    MOVEF_F 60.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB253:
    WRITE32 ENDSUB_OPEN:CALLSUB254 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB254:
  else251_1:
  endif251:
    ADDF VI_M -1.0 VI_M
    JR_GTEQF VI_M 2.0 forbody225
  endfor225:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB257:
    MOVEF_F 7.0 VMM_4
    MOVEF_F -20.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB258:
    WRITE32 ENDSUB_RIGHT:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB259:
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for260:
    JR_GTF VC_M 4.0 endfor260
  forbody260:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 1.0 else267_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 1.0 else267_1
    MOVEF_F 1.0 VBIO_M
  else267_1:
  endif267:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody260
  endfor260:
    JR_NEQF VBIO_M 0.0 else273_1
    WRITE32 ENDSUB_OPEN:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB274:
    JR endif273
  else273_1:
    MOVEF_F 50.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB275:
    WRITE32 ENDSUB_CLOSE:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB276:
    MOVEF_F 50.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB277:
  else273_2:
  endif273:
  while278:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or279
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile278
  or279:
  whilebody278:
    WRITE32 ENDSUB_LINE:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB282:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody278
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody278
  endwhile278:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB286:
    WRITE32 ENDSUB_RIGHT:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB287:
    WRITE32 ENDSUB_OPEN:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB288:
    MOVEF_F 2.0 VI_M
  for289:
    JR_GTF VI_M 7.0 endfor289
  forbody289:
    MOVEF_F VI_M VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for290:
    JR_GTF VC_M 4.0 endfor290
  forbody290:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 VA_M else297_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 1.0 else297_1
    MOVEF_F 1.0 VBIO_M
  else297_1:
  endif297:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody290
  endfor290:
    JR_NEQF VBIO_M 1.0 else303_1
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB305:
  else303_1:
  endif303:
    MOVEF_F 50.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB306:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer307
	DATA8 nos307
	DATA8 busy307
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer307 nos307
	JR_EQ8 0 nos307 motornotbusy307
  motorwaiting307:
	OUTPUT_TEST layer307 nos307 busy307
	JR_EQ8 busy307 0 motornotbusy307
	SLEEP
	JR motorwaiting307
  motornotbusy307:
  while308:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 17.0 or309
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 17.0 endwhile308
  or309:
  whilebody308:
    WRITE32 ENDSUB_LINE:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB312:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 17.0 whilebody308
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 17.0 whilebody308
  endwhile308:
    JR_NEQF VBIO_M 1.0 else315_1
    MOVEF_F 60.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB316:
    MOVEF_F 60.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB317:
    WRITE32 ENDSUB_OPEN:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB318:
  else315_1:
  endif315:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 7.0 forbody289
  endfor289:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 300.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB321:
    WRITE32 ENDSUB_OPEN:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB322:
    MOVEF_F 300.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB323:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 83.0 0.0 'true' 

	DATA8 layer324
	DATA8 nos324
	DATA8 busy324
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer324 nos324
	JR_EQ8 0 nos324 motornotbusy324
  motorwaiting324:
	OUTPUT_TEST layer324 nos324 busy324
	JR_EQ8 busy324 0 motornotbusy324
	SLEEP
	JR motorwaiting324
  motornotbusy324:
    CALL MOTOR.SCHEDULESYNC 'BC' 30.0 -30.0 195.0 'true'

	DATA8 layer325
	DATA8 nos325
	DATA8 busy325
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer325 nos325
	JR_EQ8 0 nos325 motornotbusy325
  motorwaiting325:
	OUTPUT_TEST layer325 nos325 busy325
	JR_EQ8 busy325 0 motornotbusy325
	SLEEP
	JR motorwaiting325
  motornotbusy325:
  while326:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile326
  whilebody326:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody326
  endwhile326:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 20.0 'true'

	DATA8 layer331
	DATA8 nos331
	DATA8 busy331
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer331 nos331
	JR_EQ8 0 nos331 motornotbusy331
  motorwaiting331:
	OUTPUT_TEST layer331 nos331 busy331
	JR_EQ8 busy331 0 motornotbusy331
	SLEEP
	JR motorwaiting331
  motornotbusy331:
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for332:
    JR_GTF VC_M 4.0 endfor332
  forbody332:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 7.0 else339_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 4.0 else339_1
    MOVEF_F 1.0 VBIO_M
  else339_1:
  endif339:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody332
  endfor332:
    JR_NEQF VBIO_M 0.0 else345_1
    WRITE32 ENDSUB_OPEN:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB346:
    JR endif345
  else345_1:
    WRITE32 ENDSUB_CLOSE:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB347:
  else345_2:
  endif345:
    MOVEF_F 1.0 VI_M
  for348:
    JR_GTF VI_M 3.0 endfor348
  forbody348:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer349
	DATA8 nos349
	DATA8 busy349
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer349 nos349
	JR_EQ8 0 nos349 motornotbusy349
  motorwaiting349:
	OUTPUT_TEST layer349 nos349 busy349
	JR_EQ8 busy349 0 motornotbusy349
	SLEEP
	JR motorwaiting349
  motornotbusy349:
  while350:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or351
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile350
  or351:
  whilebody350:
    WRITE32 ENDSUB_LINE:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB354:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody350
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody350
  endwhile350:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody348
  endfor348:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB359:
    WRITE32 ENDSUB_RIGHT:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB360:
    WRITE32 ENDSUB_OPEN:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB361:
    MOVEF_F 7.0 VI_M
  for362:
    JR_LTF VI_M 2.0 endfor362
  forbody362:
    MOVEF_F VI_M VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for363:
    JR_GTF VC_M 4.0 endfor363
  forbody363:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    SUBF VA_M 1.0 F.1
    JR_NEQF F.0 F.1 else370_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 4.0 else370_1
    MOVEF_F 1.0 VBIO_M
  else370_1:
  endif370:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody363
  endfor363:
    JR_NEQF VBIO_M 1.0 else377_1
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB379:
  else377_1:
  endif377:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer380
	DATA8 nos380
	DATA8 busy380
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer380 nos380
	JR_EQ8 0 nos380 motornotbusy380
  motorwaiting380:
	OUTPUT_TEST layer380 nos380 busy380
	JR_EQ8 busy380 0 motornotbusy380
	SLEEP
	JR motorwaiting380
  motornotbusy380:
  while381:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or382
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile381
  or382:
  whilebody381:
    WRITE32 ENDSUB_LINE:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB385:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody381
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody381
  endwhile381:
    JR_NEQF VBIO_M 1.0 else388_1
    MOVEF_F 60.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB389:
    MOVEF_F 60.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB390:
    WRITE32 ENDSUB_OPEN:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB391:
  else388_1:
  endif388:
    ADDF VI_M -1.0 VI_M
    JR_GTEQF VI_M 2.0 forbody362
  endfor362:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB394:
    WRITE32 ENDSUB_LEFT:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB395:
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for396:
    JR_GTF VC_M 4.0 endfor396
  forbody396:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 1.0 else403_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 5.0 else403_1
    MOVEF_F 1.0 VBIO_M
  else403_1:
  endif403:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody396
  endfor396:
    JR_NEQF VBIO_M 0.0 else409_1
    WRITE32 ENDSUB_OPEN:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB410:
    JR endif409
  else409_1:
    MOVEF_F 50.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB411:
    WRITE32 ENDSUB_CLOSE:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB412:
    MOVEF_F 50.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB413:
  else409_2:
  endif409:
  while414:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or415
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile414
  or415:
  whilebody414:
    WRITE32 ENDSUB_LINE:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB418:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody414
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody414
  endwhile414:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB422:
    WRITE32 ENDSUB_LEFT:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB423:
    WRITE32 ENDSUB_OPEN:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB424:
    MOVEF_F 2.0 VI_M
  for425:
    JR_GTF VI_M 7.0 endfor425
  forbody425:
    MOVEF_F VI_M VA_M
    MOVEF_F 0.0 VBIO_M
    MOVEF_F 1.0 VC_M
  for426:
    JR_GTF VC_M 4.0 endfor426
  forbody426:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 50.0 20.0 S.0
    STRINGS VALUE_FORMATTED VA_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 50.0 S.0
    CALL ARRAYGET_FLOAT VC_M F.0 VX_M
    JR_NEQF F.0 VA_M else433_1
    CALL ARRAYGET_FLOAT VC_M F.0 VY_M
    JR_NEQF F.0 5.0 else433_1
    MOVEF_F 1.0 VBIO_M
  else433_1:
  endif433:
    STRINGS VALUE_FORMATTED VBIO_M '%g' 99 S.0
    CALL LCD.WRITE 50.0 80.0 S.0
    ADDF VC_M 1.0 VC_M
    JR_LTEQF VC_M 4.0 forbody426
  endfor426:
    JR_NEQF VBIO_M 1.0 else439_1
    CALL MOTOR.SCHEDULE 'bc' -40.0 0.0 45.0 0.0 'true' 

	DATA8 layer440
	DATA8 nos440
	DATA8 busy440
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer440 nos440
	JR_EQ8 0 nos440 motornotbusy440
  motorwaiting440:
	OUTPUT_TEST layer440 nos440 busy440
	JR_EQ8 busy440 0 motornotbusy440
	SLEEP
	JR motorwaiting440
  motornotbusy440:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB442:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 45.0 0.0 'true' 

	DATA8 layer443
	DATA8 nos443
	DATA8 busy443
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer443 nos443
	JR_EQ8 0 nos443 motornotbusy443
  motorwaiting443:
	OUTPUT_TEST layer443 nos443 busy443
	JR_EQ8 busy443 0 motornotbusy443
	SLEEP
	JR motorwaiting443
  motornotbusy443:
  else439_1:
  endif439:
    CALL MOTOR.SCHEDULE 'bc' 40.0 0.0 50.0 0.0 'true' 

	DATA8 layer444
	DATA8 nos444
	DATA8 busy444
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer444 nos444
	JR_EQ8 0 nos444 motornotbusy444
  motorwaiting444:
	OUTPUT_TEST layer444 nos444 busy444
	JR_EQ8 busy444 0 motornotbusy444
	SLEEP
	JR motorwaiting444
  motornotbusy444:
  while445:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or446
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile445
  or446:
  whilebody445:
    WRITE32 ENDSUB_LINE:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB449:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody445
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody445
  endwhile445:
    JR_NEQF VBIO_M 1.0 else452_1
    MOVEF_F 60.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB453:
    MOVEF_F 60.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB454:
    WRITE32 ENDSUB_OPEN:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB455:
  else452_1:
  endif452:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 7.0 forbody425
  endfor425:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 300.0 VMM_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB458:
    WRITE32 ENDSUB_OPEN:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB459:
    MOVEF_F 300.0 VMM_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_TOMM_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB460:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf17
    DATA8 flag17
    DIVF F.0 F.1 tmpf17
    CP_EQF 0.0 F.1 flag17
    SELECTF flag17 0.0 tmpf17 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf22
    DATA8 flag22
    DIVF F.0 F.1 tmpf22
    CP_EQF 0.0 F.1 flag22
    SELECTF flag22 0.0 tmpf22 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB23:
    WRITE32 ENDSUB_SEN2:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB24:
    SUBF VS2_M VS1_M VERR_M
    MULF VERR_M 1.6 VU_M
    MOVEF_F 30.0 VV_M
    ADDF VV_M VU_M F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    SUBF VV_M VU_M F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_LEFT:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 74.0 0.0 'true' 

	DATA8 layer31
	DATA8 nos31
	DATA8 busy31
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer31 nos31
	JR_EQ8 0 nos31 motornotbusy31
  motorwaiting31:
	OUTPUT_TEST layer31 nos31 busy31
	JR_EQ8 busy31 0 motornotbusy31
	SLEEP
	JR motorwaiting31
  motornotbusy31:
    CALL MOTOR.SCHEDULESYNC 'BC' -30.0 30.0 185.0 'true'

	DATA8 layer32
	DATA8 nos32
	DATA8 busy32
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer32 nos32
	JR_EQ8 0 nos32 motornotbusy32
  motorwaiting32:
	OUTPUT_TEST layer32 nos32 busy32
	JR_EQ8 busy32 0 motornotbusy32
	SLEEP
	JR motorwaiting32
  motornotbusy32:
  while33:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile33
  whilebody33:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody33
  endwhile33:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 18.0 'true'

	DATA8 layer38
	DATA8 nos38
	DATA8 busy38
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer38 nos38
	JR_EQ8 0 nos38 motornotbusy38
  motorwaiting38:
	OUTPUT_TEST layer38 nos38 busy38
	JR_EQ8 busy38 0 motornotbusy38
	SLEEP
	JR motorwaiting38
  motornotbusy38:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 83.0 0.0 'true' 

	DATA8 layer39
	DATA8 nos39
	DATA8 busy39
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer39 nos39
	JR_EQ8 0 nos39 motornotbusy39
  motorwaiting39:
	OUTPUT_TEST layer39 nos39 busy39
	JR_EQ8 busy39 0 motornotbusy39
	SLEEP
	JR motorwaiting39
  motornotbusy39:
    CALL MOTOR.SCHEDULESYNC 'BC' 30.0 -30.0 185.0 'true'

	DATA8 layer40
	DATA8 nos40
	DATA8 busy40
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer40 nos40
	JR_EQ8 0 nos40 motornotbusy40
  motorwaiting40:
	OUTPUT_TEST layer40 nos40 busy40
	JR_EQ8 busy40 0 motornotbusy40
	SLEEP
	JR motorwaiting40
  motornotbusy40:
  while41:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile41
  whilebody41:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody41
  endwhile41:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 20.0 'true'

	DATA8 layer46
	DATA8 nos46
	DATA8 busy46
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer46 nos46
	JR_EQ8 0 nos46 motornotbusy46
  motorwaiting46:
	OUTPUT_TEST layer46 nos46 busy46
	JR_EQ8 busy46 0 motornotbusy46
	SLEEP
	JR motorwaiting46
  motornotbusy46:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 390.0 'true'

	DATA8 layer47
	DATA8 nos47
	DATA8 busy47
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer47 nos47
	JR_EQ8 0 nos47 motornotbusy47
  motorwaiting47:
	OUTPUT_TEST layer47 nos47 busy47
	JR_EQ8 busy47 0 motornotbusy47
	SLEEP
	JR motorwaiting47
  motornotbusy47:
  while48:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile48
  whilebody48:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody48
  endwhile48:
    CALL MOTOR.STOP 'bc' 'true'
  while53:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile53
  whilebody53:
    CALL MOTOR.STARTSYNC 'BC' 10.0 -10.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody53
  endwhile53:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_OPEN:
    JR_NEQF VZ_M 1.0 else58_1
    CALL MOTOR.START 'D' -40.0
    DATA32 milliseconds60
	MOVEF_32 400.0 milliseconds60
	DATA32 timer60
	TIMER_WAIT milliseconds60 timer60
	TIMER_READY timer60
  while61:
    CALL MOTOR.GETSPEED 'D' F.0
    JR_GTEQF F.0 -20.0 endwhile61
  whilebody61:
    CALL MOTOR.GETSPEED 'D' F.0
    JR_LTF F.0 -20.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'D' 'false'
    MOVEF_F 0.0 VZ_M
  else58_1:
  endif58:
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
SUB_CLOSE:
    JR_NEQF VZ_M 0.0 else65_1
    CALL MOTOR.START 'D' 40.0
    DATA32 milliseconds67
	MOVEF_32 400.0 milliseconds67
	DATA32 timer67
	TIMER_WAIT milliseconds67 timer67
	TIMER_READY timer67
  while68:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 25.0 endwhile68
  whilebody68:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 25.0 whilebody68
  endwhile68:
    CALL MOTOR.STOP 'D' 'false'
    MOVEF_F 1.0 VZ_M
  else65_1:
  endif65:
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_LEFT2_1:
    MULF 1168.08 VGRAD_1 F.1
    DATAF tmpf78
    DATA8 flag78
    DIVF F.1 360.0 tmpf78
    CP_EQF 0.0 360.0 flag78
    SELECTF flag78 0.0 tmpf78 F.0

    DATAF tmpf79
    DATA8 flag79
    DIVF F.0 2.0 tmpf79
    CP_EQF 0.0 2.0 flag79
    SELECTF flag79 0.0 tmpf79 VL_1

    DATAF tmpf80
    DATA8 flag80
    DIVF VL_1 257.48 tmpf80
    CP_EQF 0.0 257.48 flag80
    SELECTF flag80 0.0 tmpf80 F.0

    MULF F.0 360.0 VL_1
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
    CALL MOTOR.STARTPOWER 'B' -60.0
  while85:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf91
    DATA8 flag91
    DIVF F.1 2.0 tmpf91
    CP_EQF 0.0 2.0 flag91
    SELECTF flag91 0.0 tmpf91 F.0

    JR_GTF F.0 VL_1 endwhile85
  whilebody85:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf97
    DATA8 flag97
    DIVF F.1 2.0 tmpf97
    CP_EQF 0.0 2.0 flag97
    SELECTF flag97 0.0 tmpf97 F.0

    JR_LTEQF F.0 VL_1 whilebody85
  endwhile85:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1168.08 VGRAD_2 F.1
    DATAF tmpf100
    DATA8 flag100
    DIVF F.1 360.0 tmpf100
    CP_EQF 0.0 360.0 flag100
    SELECTF flag100 0.0 tmpf100 F.0

    DATAF tmpf101
    DATA8 flag101
    DIVF F.0 2.0 tmpf101
    CP_EQF 0.0 2.0 flag101
    SELECTF flag101 0.0 tmpf101 VL_2

    DATAF tmpf102
    DATA8 flag102
    DIVF VL_2 257.48 tmpf102
    CP_EQF 0.0 257.48 flag102
    SELECTF flag102 0.0 tmpf102 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' -60.0
    CALL MOTOR.STARTPOWER 'B' 60.0
  while107:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 2.0 tmpf113
    CP_EQF 0.0 2.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    JR_GTF F.0 VL_2 endwhile107
  whilebody107:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf119
    DATA8 flag119
    DIVF F.1 2.0 tmpf119
    CP_EQF 0.0 2.0 flag119
    SELECTF flag119 0.0 tmpf119 F.0

    JR_LTEQF F.0 VL_2 whilebody107
  endwhile107:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while122:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf128
    DATA8 flag128
    DIVF F.1 2.0 tmpf128
    CP_EQF 0.0 2.0 flag128
    SELECTF flag128 0.0 tmpf128 F.0

    JR_GTF F.0 VL_3 endwhile122
  whilebody122:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_3
    MULF VU_3 0.8 F.1
    ADDF VSP_3 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_3 0.8 F.1
    SUBF VSP_3 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    JR_LTEQF F.0 VL_3 whilebody122
  endwhile122:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf145
    DATA8 flag145
    DIVF VMM_4 257.48 tmpf145
    CP_EQF 0.0 257.48 flag145
    SELECTF flag145 0.0 tmpf145 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_4 VL_3
    MOVEF_F VSP_4 VSP_3
    WRITE32 ENDSUB_MOVE_2:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB148:
    MOVEF_F 0.0 VSP_4
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
