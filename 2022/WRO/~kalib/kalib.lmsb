DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VCOL_M
DATAF VRED_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VN_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VV_M
DATAF VCOLOR_M
DATAF VRD1_M
DATAF VRD2_M
DATAF VBD1_M
DATAF VBD2_M
DATAF VWD1_M
DATAF VWD2_M
DATAF VRB1_M
DATAF VRB2_M
DATAF VBB1_M
DATAF VBB2_M
DATAF VWB1_M
DATAF VWB2_M
DATAF VF1_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VN_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VRD1_M
    MOVEF_F 0.0 VRD2_M
    MOVEF_F 0.0 VBD1_M
    MOVEF_F 0.0 VBD2_M
    MOVEF_F 0.0 VWD1_M
    MOVEF_F 0.0 VWD2_M
    MOVEF_F 0.0 VRB1_M
    MOVEF_F 0.0 VRB2_M
    MOVEF_F 0.0 VBB1_M
    MOVEF_F 0.0 VBB2_M
    MOVEF_F 0.0 VWB1_M
    MOVEF_F 0.0 VWB2_M
    MOVEF_F 0.0 VF1_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VN_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VRD1_M
    MOVEF_F 0.0 VRD2_M
    MOVEF_F 0.0 VBD1_M
    MOVEF_F 0.0 VBD2_M
    MOVEF_F 0.0 VWD1_M
    MOVEF_F 0.0 VWD2_M
    MOVEF_F 0.0 VRB1_M
    MOVEF_F 0.0 VRB2_M
    MOVEF_F 0.0 VBB1_M
    MOVEF_F 0.0 VBB2_M
    MOVEF_F 0.0 VWB1_M
    MOVEF_F 0.0 VWB2_M
    MOVEF_F 0.0 VF1_M
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 2.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 4.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VN_M
  while80:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile80
  whilebody80:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'Red_Dal'
    WRITE32 ENDSUB_HSV1:CALLSUB85 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB85:
    MOVEF_F VN_M VRD1_M
    WRITE32 ENDSUB_HSV4:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB86:
    MOVEF_F VN_M VRD2_M
    STRINGS VALUE_FORMATTED VRD1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    STRINGS VALUE_FORMATTED VRD2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds91
	MOVEF_32 300.0 milliseconds91
	DATA32 timer91
	TIMER_WAIT milliseconds91 timer91
	TIMER_READY timer91
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody80
  endwhile80:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds95
	MOVEF_32 300.0 milliseconds95
	DATA32 timer95
	TIMER_WAIT milliseconds95 timer95
	TIMER_READY timer95
  while96:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile96
  whilebody96:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'Black_Dal'
    WRITE32 ENDSUB_HSV1:CALLSUB101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB101:
    MOVEF_F VN_M VBD1_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB104:
    MOVEF_F VN_M VBD2_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds107
	MOVEF_32 300.0 milliseconds107
	DATA32 timer107
	TIMER_WAIT milliseconds107 timer107
	TIMER_READY timer107
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody96
  endwhile96:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds111
	MOVEF_32 300.0 milliseconds111
	DATA32 timer111
	TIMER_WAIT milliseconds111 timer111
	TIMER_READY timer111
  while112:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile112
  whilebody112:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'White_Dal'
    WRITE32 ENDSUB_HSV1:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB117:
    MOVEF_F VN_M VWD1_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB120:
    MOVEF_F VN_M VWD2_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds123
	MOVEF_32 300.0 milliseconds123
	DATA32 timer123
	TIMER_WAIT milliseconds123 timer123
	TIMER_READY timer123
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody112
  endwhile112:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds127
	MOVEF_32 300.0 milliseconds127
	DATA32 timer127
	TIMER_WAIT milliseconds127 timer127
	TIMER_READY timer127
  while128:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile128
  whilebody128:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'Red_Bliz'
    WRITE32 ENDSUB_HSV1:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB133:
    MOVEF_F VN_M VRB1_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB136:
    MOVEF_F VN_M VRB2_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds139
	MOVEF_32 300.0 milliseconds139
	DATA32 timer139
	TIMER_WAIT milliseconds139 timer139
	TIMER_READY timer139
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody128
  endwhile128:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds143
	MOVEF_32 300.0 milliseconds143
	DATA32 timer143
	TIMER_WAIT milliseconds143 timer143
	TIMER_READY timer143
  while144:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile144
  whilebody144:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'Black_Bliz'
    WRITE32 ENDSUB_HSV1:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB149:
    MOVEF_F VN_M VBB1_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB152 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB152:
    MOVEF_F VN_M VBB2_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds155
	MOVEF_32 300.0 milliseconds155
	DATA32 timer155
	TIMER_WAIT milliseconds155 timer155
	TIMER_READY timer155
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody144
  endwhile144:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds159
	MOVEF_32 300.0 milliseconds159
	DATA32 timer159
	TIMER_WAIT milliseconds159 timer159
	TIMER_READY timer159
  while160:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile160
  whilebody160:
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'White_Bliz'
    WRITE32 ENDSUB_HSV1:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB165:
    MOVEF_F VN_M VWB1_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB168:
    MOVEF_F VN_M VWB2_M
    STRINGS VALUE_FORMATTED VN_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 90.0 1.0 S.0
    DATA32 milliseconds171
	MOVEF_32 300.0 milliseconds171
	DATA32 timer171
	TIMER_WAIT milliseconds171 timer171
	TIMER_READY timer171
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody160
  endwhile160:
    CALL SPEAKER.NOTE 100.0 'c#5' 200.0
    DATA32 milliseconds175
	MOVEF_32 300.0 milliseconds175
	DATA32 timer175
	TIMER_WAIT milliseconds175 timer175
	TIMER_READY timer175
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 'Ready!'
    CALL SPEAKER.NOTE 100.0 'c#3' 500.0
    CALL EV3FILE.OPENWRITE 'ld.txt' VF1_M
    STRINGS VALUE_FORMATTED VRD1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VBD1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VWD1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    CALL EV3FILE.CLOSE VF1_M
    CALL EV3FILE.OPENWRITE 'rd.txt' VF1_M
    STRINGS VALUE_FORMATTED VRD2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VBD2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VWD2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    CALL EV3FILE.CLOSE VF1_M
    CALL EV3FILE.OPENWRITE 'lb.txt' VF1_M
    STRINGS VALUE_FORMATTED VRB1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VBB1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VWB1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    CALL EV3FILE.CLOSE VF1_M
    CALL EV3FILE.OPENWRITE 'rb.txt' VF1_M
    STRINGS VALUE_FORMATTED VRB2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VBB2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    STRINGS VALUE_FORMATTED VWB2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF1_M S.0
    CALL EV3FILE.CLOSE VF1_M
ENDTHREAD:
    RETURN
SUB_HSV1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf10
    DATA8 flag10
    DIVF VSRED_M 255.0 tmpf10
    CP_EQF 0.0 255.0 flag10
    SELECTF flag10 0.0 tmpf10 VSRED_M

    DATAF tmpf11
    DATA8 flag11
    DIVF VSGREEN_M 255.0 tmpf11
    CP_EQF 0.0 255.0 flag11
    SELECTF flag11 0.0 tmpf11 VSGREEN_M

    DATAF tmpf12
    DATA8 flag12
    DIVF VSBLUE_M 255.0 tmpf12
    CP_EQF 0.0 255.0 flag12
    SELECTF flag12 0.0 tmpf12 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else13_1
    JR_LTEQF VSRED_M VSBLUE_M else13_1
    MOVEF_F VSRED_M VMAX_M
    JR endif13
  else13_1:
    JR_LTEQF VSGREEN_M VSRED_M else13_2
    JR_LTEQF VSGREEN_M VSBLUE_M else13_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif13
  else13_2:
    JR_LTEQF VSBLUE_M VSRED_M else13_3
    JR_LTEQF VSBLUE_M VSGREEN_M else13_3
    MOVEF_F VSBLUE_M VMAX_M
  else13_3:
  endif13:
    JR_GTEQF VSRED_M VSGREEN_M else14_1
    JR_GTEQF VSRED_M VSBLUE_M else14_1
    MOVEF_F VSRED_M VMIN_M
    JR endif14
  else14_1:
    JR_GTEQF VSGREEN_M VSRED_M else14_2
    JR_GTEQF VSGREEN_M VSBLUE_M else14_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif14
  else14_2:
    JR_GTEQF VSBLUE_M VSRED_M else14_3
    JR_GTEQF VSBLUE_M VSGREEN_M else14_3
    MOVEF_F VSBLUE_M VMIN_M
  else14_3:
  endif14:
    JR_NEQF VMAX_M VMIN_M else15_1
    MOVEF_F 0.0 VH_M
    JR endif15
  else15_1:
    JR_NEQF VSRED_M VMAX_M else16_1
    JR_LTF VSGREEN_M VSBLUE_M else17_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.0 F.1 tmpf21
    CP_EQF 0.0 F.1 flag21
    SELECTF flag21 0.0 tmpf21 VH_M

    JR endif17
  else17_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf25
    DATA8 flag25
    DIVF F.1 F.2 tmpf25
    CP_EQF 0.0 F.2 flag25
    SELECTF flag25 0.0 tmpf25 F.0

    ADDF F.0 360.0 VH_M
  else17_2:
  endif17:
    JR endif16
  else16_1:
    JR_NEQF VMAX_M VSGREEN_M else27_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf31
    DATA8 flag31
    DIVF F.1 F.2 tmpf31
    CP_EQF 0.0 F.2 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    ADDF F.0 120.0 VH_M
    JR endif27
  else27_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf36
    DATA8 flag36
    DIVF F.1 F.2 tmpf36
    CP_EQF 0.0 F.2 flag36
    SELECTF flag36 0.0 tmpf36 F.0

    ADDF F.0 240.0 VH_M
  else27_2:
  endif27:
  else16_2:
  endif16:
  else15_2:
  endif15:
    JR_NEQF VMAX_M 0.0 else38_1
    MOVEF_F 0.0 VS_M
    JR endif38
  else38_1:
    DATAF tmpf39
    DATA8 flag39
    DIVF VMIN_M VMAX_M tmpf39
    CP_EQF 0.0 VMAX_M flag39
    SELECTF flag39 0.0 tmpf39 F.0

    SUBF 1.0 F.0 VS_M
  else38_2:
  endif38:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 0.0 else41_1
    JR_GTEQF VH_M 20.0 else41_1
    JR_LTEQF VV_M 0.4 else41_1
    MOVEF_F 5.0 VCOLOR_M
    JR endif41
  else41_1:
    JR_LTEQF VH_M 210.0 else41_2
    JR_GTEQF VH_M 300.0 else41_2
    JR_LTEQF VV_M 0.4 else41_2
    MOVEF_F 2.0 VCOLOR_M
    JR endif41
  else41_2:
    JR_LTEQF VH_M 20.0 else41_3
    JR_GTEQF VH_M 100.0 else41_3
    JR_LTEQF VV_M 0.6 else41_3
    MOVEF_F 4.0 VCOLOR_M
    JR endif41
  else41_3:
    JR_LTEQF VH_M 100.0 else41_4
    JR_GTEQF VH_M 210.0 else41_4
    MOVEF_F 3.0 VCOLOR_M
    JR endif41
  else41_4:
    MOVEF_F 0.0 VCOLOR_M
  else41_5:
  endif41:
    MOVEF_F VCOLOR_M VN_M
RETSUB_HSV1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV1:
SUB_HSV4:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 4.0 VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf48
    DATA8 flag48
    DIVF VSRED_M 255.0 tmpf48
    CP_EQF 0.0 255.0 flag48
    SELECTF flag48 0.0 tmpf48 VSRED_M

    DATAF tmpf49
    DATA8 flag49
    DIVF VSGREEN_M 255.0 tmpf49
    CP_EQF 0.0 255.0 flag49
    SELECTF flag49 0.0 tmpf49 VSGREEN_M

    DATAF tmpf50
    DATA8 flag50
    DIVF VSBLUE_M 255.0 tmpf50
    CP_EQF 0.0 255.0 flag50
    SELECTF flag50 0.0 tmpf50 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else51_1
    JR_LTEQF VSRED_M VSBLUE_M else51_1
    MOVEF_F VSRED_M VMAX_M
    JR endif51
  else51_1:
    JR_LTEQF VSGREEN_M VSRED_M else51_2
    JR_LTEQF VSGREEN_M VSBLUE_M else51_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif51
  else51_2:
    JR_LTEQF VSBLUE_M VSRED_M else51_3
    JR_LTEQF VSBLUE_M VSGREEN_M else51_3
    MOVEF_F VSBLUE_M VMAX_M
  else51_3:
  endif51:
    JR_GTEQF VSRED_M VSGREEN_M else52_1
    JR_GTEQF VSRED_M VSBLUE_M else52_1
    MOVEF_F VSRED_M VMIN_M
    JR endif52
  else52_1:
    JR_GTEQF VSGREEN_M VSRED_M else52_2
    JR_GTEQF VSGREEN_M VSBLUE_M else52_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif52
  else52_2:
    JR_GTEQF VSBLUE_M VSRED_M else52_3
    JR_GTEQF VSBLUE_M VSGREEN_M else52_3
    MOVEF_F VSBLUE_M VMIN_M
  else52_3:
  endif52:
    JR_NEQF VMAX_M VMIN_M else53_1
    MOVEF_F 0.0 VH_M
    JR endif53
  else53_1:
    JR_NEQF VSRED_M VMAX_M else54_1
    JR_LTF VSGREEN_M VSBLUE_M else55_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf59
    DATA8 flag59
    DIVF F.0 F.1 tmpf59
    CP_EQF 0.0 F.1 flag59
    SELECTF flag59 0.0 tmpf59 VH_M

    JR endif55
  else55_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 F.2 tmpf63
    CP_EQF 0.0 F.2 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    ADDF F.0 360.0 VH_M
  else55_2:
  endif55:
    JR endif54
  else54_1:
    JR_NEQF VMAX_M VSGREEN_M else65_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 F.2 tmpf69
    CP_EQF 0.0 F.2 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    ADDF F.0 120.0 VH_M
    JR endif65
  else65_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 F.2 tmpf74
    CP_EQF 0.0 F.2 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    ADDF F.0 240.0 VH_M
  else65_2:
  endif65:
  else54_2:
  endif54:
  else53_2:
  endif53:
    JR_NEQF VMAX_M 0.0 else76_1
    MOVEF_F 0.0 VS_M
    JR endif76
  else76_1:
    DATAF tmpf77
    DATA8 flag77
    DIVF VMIN_M VMAX_M tmpf77
    CP_EQF 0.0 VMAX_M flag77
    SELECTF flag77 0.0 tmpf77 F.0

    SUBF 1.0 F.0 VS_M
  else76_2:
  endif76:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 0.0 else79_1
    JR_GTEQF VH_M 20.0 else79_1
    JR_LTEQF VV_M 0.4 else79_1
    MOVEF_F 5.0 VCOLOR_M
    JR endif79
  else79_1:
    JR_LTEQF VH_M 210.0 else79_2
    JR_GTEQF VH_M 300.0 else79_2
    JR_LTEQF VV_M 0.4 else79_2
    MOVEF_F 2.0 VCOLOR_M
    JR endif79
  else79_2:
    JR_LTEQF VH_M 20.0 else79_3
    JR_GTEQF VH_M 100.0 else79_3
    JR_LTEQF VV_M 0.6 else79_3
    MOVEF_F 4.0 VCOLOR_M
    JR endif79
  else79_3:
    JR_LTEQF VH_M 100.0 else79_4
    JR_GTEQF VH_M 210.0 else79_4
    MOVEF_F 3.0 VCOLOR_M
    JR endif79
  else79_4:
    MOVEF_F 0.0 VCOLOR_M
  else79_5:
  endif79:
    MOVEF_F VCOLOR_M VN_M
RETSUB_HSV4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV4:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall BUTTONS.CURRENT    // S
{
	OUT_S result 8
	DATA8 ispressed
	
// BIG CASE TREE TO GET ALL POSSIBILITIES

	UI_BUTTON PRESSED 1 ispressed
	JR_NEQ8 ispressed 0 is_1____
is_X____:
	UI_BUTTON PRESSED 2 ispressed
	JR_NEQ8 ispressed 0 is_X2___
is_XX___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_XX3__
is_XXX__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_XXX4_
is_XXXX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XXXX5
is_XXXXX:
	STRINGS DUPLICATE '' result
	RETURN
is_XXXX5:
	STRINGS DUPLICATE 'L' result
	RETURN
is_XXX4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XXX45
is_XXX4X:
	STRINGS DUPLICATE 'R' result
	RETURN
is_XXX45:
	STRINGS DUPLICATE 'RL' result
	RETURN
is_XX3__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_XX34_
is_XX3X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XX3X5
is_XX3XX:
	STRINGS DUPLICATE 'D' result
	RETURN
is_XX3X5:
	STRINGS DUPLICATE 'DL' result
	RETURN
is_XX34_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XX345
is_XX34X:
	STRINGS DUPLICATE 'DR' result
	RETURN
is_XX345:
	STRINGS DUPLICATE 'DRL' result
	RETURN
is_X2___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_X23__
is_X2X__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_X2X4_
is_X2XX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2XX5
is_X2XXX:
	STRINGS DUPLICATE 'E' result
	RETURN
is_X2XX5:
	STRINGS DUPLICATE 'EL' result
	RETURN
is_X2X4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2X45
is_X2X4X:
	STRINGS DUPLICATE 'ER' result
	RETURN
is_X2X45:
	STRINGS DUPLICATE 'ERL' result
	RETURN
is_X23__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_X234_
is_X23X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X23X5
is_X23XX:
	STRINGS DUPLICATE 'ED' result
	RETURN
is_X23X5:
	STRINGS DUPLICATE 'EDL' result
	RETURN
is_X234_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2345
is_X234X:
	STRINGS DUPLICATE 'EDR' result
	RETURN
is_X2345:
	STRINGS DUPLICATE 'EDRL' result
	RETURN
is_1____:
	UI_BUTTON PRESSED 2 ispressed
	JR_NEQ8 ispressed 0 is_12___
is_1X___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_1X3__
is_1XX__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1XX4_
is_1XXX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1XXX5
is_1XXXX:
	STRINGS DUPLICATE 'U' result
	RETURN
is_1XXX5:
	STRINGS DUPLICATE 'UL' result
	RETURN
is_1XX4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1XX45
is_1XX4X:
	STRINGS DUPLICATE 'UR' result
	RETURN
is_1XX45:
	STRINGS DUPLICATE 'URL' result
	RETURN
is_1X3__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1X34_
is_1X3X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1X3X5
is_1X3XX:
	STRINGS DUPLICATE 'UD' result
	RETURN
is_1X3X5:
	STRINGS DUPLICATE 'UDL' result
	RETURN
is_1X34_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1X345
is_1X34X:
	STRINGS DUPLICATE 'UDR' result
	RETURN
is_1X345:
	STRINGS DUPLICATE 'UDRL' result
	RETURN
is_12___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_123__
is_12X__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_12X4_
is_12XX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12XX5
is_12XXX:
	STRINGS DUPLICATE 'UE' result
	RETURN
is_12XX5:
	STRINGS DUPLICATE 'UEL' result
	RETURN
is_12X4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12X45
is_12X4X:
	STRINGS DUPLICATE 'UER' result
	RETURN
is_12X45:
	STRINGS DUPLICATE 'UERL' result
	RETURN
is_123__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1234_
is_123X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_123X5
is_123XX:
	STRINGS DUPLICATE 'UED' result
	RETURN
is_123X5:
	STRINGS DUPLICATE 'UEDL' result
	RETURN
is_1234_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12345
is_1234X:
	STRINGS DUPLICATE 'UEDR' result
	RETURN
is_12345:
	STRINGS DUPLICATE 'UEDRL' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
