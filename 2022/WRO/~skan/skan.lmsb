DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VK_M
DATAF VV_M
ARRAY16 VX_M 2
ARRAY16 VY_M 2
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VCOL_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VI2_1
DATAF VDAL_1
ARRAY16 VSENDARRAY_1 2
DATAF VI2CPORT_1
ARRAY16 VRECVARRAY_1 2
DATAF VC_1
DATAF VCOL_1

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    CALL ARRAYCREATE_FLOAT VX_M
    CALL ARRAYCREATE_FLOAT VY_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VI2_1
    MOVEF_F 0.0 VDAL_1
    CALL ARRAYCREATE_FLOAT VSENDARRAY_1
    MOVEF_F 0.0 VI2CPORT_1
    CALL ARRAYCREATE_FLOAT VRECVARRAY_1
    MOVEF_F 0.0 VC_1
    MOVEF_F 0.0 VCOL_1
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VX_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VY_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VI2_1
    MOVEF_F 0.0 VDAL_1
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_1
    MOVEF_F 0.0 VI2CPORT_1
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_1
    MOVEF_F 0.0 VC_1
    MOVEF_F 0.0 VCOL_1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 1.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 2.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    DATA8 layer7
	DATA8 no7
	DATA8 mode87
	
	MOVEF_8 4.0 no7
	SUB8 no7 1 no7
	DIV8 no7 4 layer7
	MATH MOD8 no7 4 no7

	MOVEF_8 2.0 mode87
	
	INPUT_DEVICE READY_RAW layer7 no7 0 mode87 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    CALL ARRAYSTORE_FLOAT 1.0 5.0 VX_M
    CALL ARRAYSTORE_FLOAT 2.0 4.0 VX_M
    CALL ARRAYSTORE_FLOAT 3.0 1.0 VX_M
    CALL ARRAYSTORE_FLOAT 1.0 1.0 VY_M
    CALL ARRAYSTORE_FLOAT 2.0 5.0 VY_M
    CALL ARRAYSTORE_FLOAT 3.0 3.0 VY_M
    DATA8 layer14
	DATA8 no14
	DATA8 mode814
	
	MOVEF_8 1.0 no14
	SUB8 no14 1 no14
	DIV8 no14 4 layer14
	MATH MOD8 no14 4 no14

	MOVEF_8 2.0 mode814
	
	INPUT_DEVICE READY_RAW layer14 no14 0 mode814 0
    DATA8 layer15
	DATA8 no15
	DATA8 mode815
	
	MOVEF_8 4.0 no15
	SUB8 no15 1 no15
	DIV8 no15 4 layer15
	MATH MOD8 no15 4 no15

	MOVEF_8 2.0 mode815
	
	INPUT_DEVICE READY_RAW layer15 no15 0 mode815 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VCOL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 20.0 0.0 'true' 

	DATA8 layer100
	DATA8 nos100
	DATA8 busy100
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer100 nos100
	JR_EQ8 0 nos100 motornotbusy100
  motorwaiting100:
	OUTPUT_TEST layer100 nos100 busy100
	JR_EQ8 busy100 0 motornotbusy100
	SLEEP
	JR motorwaiting100
  motornotbusy100:
    MOVEF_F 90.0 VGRAD_M
    WRITE32 ENDSUB_RIGHT1:CALLSUB101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1
CALLSUB101:
    MOVEF_F 650.0 VMM_M
    DATAF tmpf102
    DATA8 flag102
    DIVF VMM_M 257.48 tmpf102
    CP_EQF 0.0 257.48 flag102
    SELECTF flag102 0.0 tmpf102 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULE 'BC' 70.0 0.0 VL_M 0.0 'true' 

	DATA8 layer104
	DATA8 nos104
	DATA8 busy104
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer104 nos104
	JR_EQ8 0 nos104 motornotbusy104
  motorwaiting104:
	OUTPUT_TEST layer104 nos104 busy104
	JR_EQ8 busy104 0 motornotbusy104
	SLEEP
	JR motorwaiting104
  motornotbusy104:
  while105:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 or106
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile105
  or106:
  whilebody105:
    CALL MOTOR.STARTPOWER 'BC' 70.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody105
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody105
  endwhile105:
    CALL MOTOR.STOP 'BC' 'true'
  while113:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile113
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile113
  whilebody113:
    CALL MOTOR.STARTPOWER 'BC' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and117
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody113
  and117:
  endwhile113:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 200.0 0.0 'true' 

	DATA8 layer121
	DATA8 nos121
	DATA8 busy121
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer121 nos121
	JR_EQ8 0 nos121 motornotbusy121
  motorwaiting121:
	OUTPUT_TEST layer121 nos121 busy121
	JR_EQ8 busy121 0 motornotbusy121
	SLEEP
	JR motorwaiting121
  motornotbusy121:
    MOVEF_F 90.0 VGRAD_M
    WRITE32 ENDSUB_LEFT2:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2
CALLSUB122:
    CALL MOTOR.STARTPOWER 'BC' -50.0
    DATA32 milliseconds124
	MOVEF_32 2000.0 milliseconds124
	DATA32 timer124
	TIMER_WAIT milliseconds124 timer124
	TIMER_READY timer124
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 300.0 0.0 'true' 

	DATA8 layer126
	DATA8 nos126
	DATA8 busy126
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer126 nos126
	JR_EQ8 0 nos126 motornotbusy126
  motorwaiting126:
	OUTPUT_TEST layer126 nos126 busy126
	JR_EQ8 busy126 0 motornotbusy126
	SLEEP
	JR motorwaiting126
  motornotbusy126:
    MOVEF_F 90.0 VGRAD_M
    WRITE32 ENDSUB_RIGHT2:CALLSUB127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2
CALLSUB127:
  while128:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 40.0 endwhile128
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 40.0 endwhile128
  whilebody128:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 40.0 and132
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 40.0 whilebody128
  and132:
  endwhile128:
    CALL MOTOR.STOP 'BC' 'true'
  while136:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile136
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile136
  whilebody136:
    CALL MOTOR.STARTPOWER 'BC' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and140
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody136
  and140:
  endwhile136:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB144:
    CALL MOTOR.RESETCOUNT 'BC'
  while146:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf150
    DATA8 flag150
    DIVF F.1 2.0 tmpf150
    CP_EQF 0.0 2.0 flag150
    SELECTF flag150 0.0 tmpf150 F.0

    JR_GTEQF F.0 75.0 endwhile146
  whilebody146:
    WRITE32 ENDSUB_LINE:CALLSUB151 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB151:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf155
    DATA8 flag155
    DIVF F.1 2.0 tmpf155
    CP_EQF 0.0 2.0 flag155
    SELECTF flag155 0.0 tmpf155 F.0

    JR_LTF F.0 75.0 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'BC' 'true'
  while157:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile157
  whilebody157:
    WRITE32 ENDSUB_LINE:CALLSUB159 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB159:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody157
  endwhile157:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_LEFT:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB162:
  while163:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile163
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile163
  whilebody163:
    WRITE32 ENDSUB_LINE:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB166:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and167
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody163
  and167:
  endwhile163:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 15.0 VV_M
    CALL MOTOR.RESETCOUNT 'BC'
  while172:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF F.1 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    JR_GTEQF F.0 120.0 endwhile172
  whilebody172:
    WRITE32 ENDSUB_LINE:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB177:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf181
    DATA8 flag181
    DIVF F.1 2.0 tmpf181
    CP_EQF 0.0 2.0 flag181
    SELECTF flag181 0.0 tmpf181 F.0

    JR_LTF F.0 120.0 whilebody172
  endwhile172:
    CALL MOTOR.STOP 'BC' 'true'
  while183:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile183
  whilebody183:
    WRITE32 ENDSUB_LINE:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB185:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody183
  endwhile183:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 45.0 VV_M
    WRITE32 ENDSUB_FRZ:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB188:
    MOVEF_F 220.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB189:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 1.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB190:
    WRITE32 ENDSUB_FRZ:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB191:
    MOVEF_F 380.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB192:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 1.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB193:
    WRITE32 ENDSUB_FRZ:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB194:
    MOVEF_F 180.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB195:
    MOVEF_F 93.0 VGRAD_M
    WRITE32 ENDSUB_LEFT2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2
CALLSUB196:
    MOVEF_F 40.0 VMM_M
    DATAF tmpf197
    DATA8 flag197
    DIVF VMM_M 257.48 tmpf197
    CP_EQF 0.0 257.48 flag197
    SELECTF flag197 0.0 tmpf197 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer199
	DATA8 nos199
	DATA8 busy199
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer199 nos199
	JR_EQ8 0 nos199 motornotbusy199
  motorwaiting199:
	OUTPUT_TEST layer199 nos199 busy199
	JR_EQ8 busy199 0 motornotbusy199
	SLEEP
	JR motorwaiting199
  motornotbusy199:
    MOVEF_F 1.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB200:
    WRITE32 ENDSUB_FRZ:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB201:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB202:
    WRITE32 ENDSUB_FRZ:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB203:
    MOVEF_F 400.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB204:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB205:
    WRITE32 ENDSUB_FRZ:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB206:
    MOVEF_F 270.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB207:
    MOVEF_F 1.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB208:
    WRITE32 ENDSUB_FRZ:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB209:
    MOVEF_F 110.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB210:
    MOVEF_F 35.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB211:
    MOVEF_F 96.0 VGRAD_M
    WRITE32 ENDSUB_LEFT2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2
CALLSUB212:
    MOVEF_F 70.0 VMM_M
    DATAF tmpf213
    DATA8 flag213
    DIVF VMM_M 257.48 tmpf213
    CP_EQF 0.0 257.48 flag213
    SELECTF flag213 0.0 tmpf213 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULE 'BC' -20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer215
	DATA8 nos215
	DATA8 busy215
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer215 nos215
	JR_EQ8 0 nos215 motornotbusy215
  motorwaiting215:
	OUTPUT_TEST layer215 nos215 busy215
	JR_EQ8 busy215 0 motornotbusy215
	SLEEP
	JR motorwaiting215
  motornotbusy215:
    MOVEF_F 1.0 VI2_1
    MOVEF_F 1.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB216:
    WRITE32 ENDSUB_FRZ:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB217:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 1.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB218:
    WRITE32 ENDSUB_FRZ:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB219:
    MOVEF_F 518.5 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB220:
    MOVEF_F 40.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB221:
    MOVEF_F 93.0 VGRAD_M
    WRITE32 ENDSUB_LEFT2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2
CALLSUB222:
    MOVEF_F 240.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB223:
    MOVEF_F 1.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB224:
    WRITE32 ENDSUB_FRZ:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB225:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB226:
    WRITE32 ENDSUB_FRZ:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB227:
    MOVEF_F 115.0 VMM_M
    WRITE32 ENDSUB_TOMM:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM
CALLSUB228:
    MOVEF_F 1.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB229:
    WRITE32 ENDSUB_FRZ:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB230:
    MOVEF_F 4.0 VI2_1
    MOVEF_F 2.0 VDAL_1
    WRITE32 ENDSUB_COL_2:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL_2
CALLSUB231:
    WRITE32 ENDSUB_FRZ:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB232:
  while233:
  whilebody233:
    JR whilebody233
  endwhile233:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf20
    DATA8 flag20
    DIVF F.0 F.1 tmpf20
    CP_EQF 0.0 F.1 flag20
    SELECTF flag20 0.0 tmpf20 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf25
    DATA8 flag25
    DIVF F.0 F.1 tmpf25
    CP_EQF 0.0 F.1 flag25
    SELECTF flag25 0.0 tmpf25 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB26:
    WRITE32 ENDSUB_SEN2:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB27:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_TOMM:
    DATAF tmpf35
    DATA8 flag35
    DIVF VMM_M 257.48 tmpf35
    CP_EQF 0.0 257.48 flag35
    SELECTF flag35 0.0 tmpf35 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer37
	DATA8 nos37
	DATA8 busy37
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer37 nos37
	JR_EQ8 0 nos37 motornotbusy37
  motorwaiting37:
	OUTPUT_TEST layer37 nos37 busy37
	JR_EQ8 busy37 0 motornotbusy37
	SLEEP
	JR motorwaiting37
  motornotbusy37:
RETSUB_TOMM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM:
SUB_LEFT:
    MOVEF_F 60.1211744601522 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer38
	DATA8 nos38
	DATA8 busy38
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer38 nos38
	JR_EQ8 0 nos38 motornotbusy38
  motorwaiting38:
	OUTPUT_TEST layer38 nos38 busy38
	JR_EQ8 busy38 0 motornotbusy38
	SLEEP
	JR motorwaiting38
  motornotbusy38:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 170.0 'true'

	DATA8 layer39
	DATA8 nos39
	DATA8 busy39
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer39 nos39
	JR_EQ8 0 nos39 motornotbusy39
  motorwaiting39:
	OUTPUT_TEST layer39 nos39 busy39
	JR_EQ8 busy39 0 motornotbusy39
	SLEEP
	JR motorwaiting39
  motornotbusy39:
  while40:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile40
  whilebody40:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody40
  endwhile40:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 67.1120086997048 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer45
	DATA8 nos45
	DATA8 busy45
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer45 nos45
	JR_EQ8 0 nos45 motornotbusy45
  motorwaiting45:
	OUTPUT_TEST layer45 nos45 busy45
	JR_EQ8 busy45 0 motornotbusy45
	SLEEP
	JR motorwaiting45
  motornotbusy45:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 170.0 'true'

	DATA8 layer46
	DATA8 nos46
	DATA8 busy46
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer46 nos46
	JR_EQ8 0 nos46 motornotbusy46
  motorwaiting46:
	OUTPUT_TEST layer46 nos46 busy46
	JR_EQ8 busy46 0 motornotbusy46
	SLEEP
	JR motorwaiting46
  motornotbusy46:
  while47:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile47
  whilebody47:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody47
  endwhile47:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1:
    MULF 1168.08 VGRAD_M F.0
    DATAF tmpf53
    DATA8 flag53
    DIVF F.0 360.0 tmpf53
    CP_EQF 0.0 360.0 flag53
    SELECTF flag53 0.0 tmpf53 VL_M

    DATAF tmpf54
    DATA8 flag54
    DIVF VL_M 257.48 tmpf54
    CP_EQF 0.0 257.48 flag54
    SELECTF flag54 0.0 tmpf54 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULESYNC 'BC' 0.0 20.0 VL_M 'true'

	DATA8 layer56
	DATA8 nos56
	DATA8 busy56
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer56 nos56
	JR_EQ8 0 nos56 motornotbusy56
  motorwaiting56:
	OUTPUT_TEST layer56 nos56 busy56
	JR_EQ8 busy56 0 motornotbusy56
	SLEEP
	JR motorwaiting56
  motornotbusy56:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_LEFT1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1:
SUB_RIGHT1:
    MULF 1168.08 VGRAD_M F.0
    DATAF tmpf59
    DATA8 flag59
    DIVF F.0 360.0 tmpf59
    CP_EQF 0.0 360.0 flag59
    SELECTF flag59 0.0 tmpf59 VL_M

    DATAF tmpf60
    DATA8 flag60
    DIVF VL_M 257.48 tmpf60
    CP_EQF 0.0 257.48 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 0.0 VL_M 'true'

	DATA8 layer62
	DATA8 nos62
	DATA8 busy62
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer62 nos62
	JR_EQ8 0 nos62 motornotbusy62
  motorwaiting62:
	OUTPUT_TEST layer62 nos62 busy62
	JR_EQ8 busy62 0 motornotbusy62
	SLEEP
	JR motorwaiting62
  motornotbusy62:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RIGHT1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1:
SUB_LEFT2:
    MULF 1168.08 VGRAD_M F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 360.0 tmpf65
    CP_EQF 0.0 360.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    DATAF tmpf66
    DATA8 flag66
    DIVF F.0 2.0 tmpf66
    CP_EQF 0.0 2.0 flag66
    SELECTF flag66 0.0 tmpf66 VL_M

    DATAF tmpf67
    DATA8 flag67
    DIVF VL_M 257.48 tmpf67
    CP_EQF 0.0 257.48 flag67
    SELECTF flag67 0.0 tmpf67 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 VL_M 'true'

	DATA8 layer69
	DATA8 nos69
	DATA8 busy69
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer69 nos69
	JR_EQ8 0 nos69 motornotbusy69
  motorwaiting69:
	OUTPUT_TEST layer69 nos69 busy69
	JR_EQ8 busy69 0 motornotbusy69
	SLEEP
	JR motorwaiting69
  motornotbusy69:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_LEFT2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2:
SUB_RIGHT2:
    MULF 1168.08 VGRAD_M F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF F.1 360.0 tmpf72
    CP_EQF 0.0 360.0 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    DATAF tmpf73
    DATA8 flag73
    DIVF F.0 2.0 tmpf73
    CP_EQF 0.0 2.0 flag73
    SELECTF flag73 0.0 tmpf73 VL_M

    DATAF tmpf74
    DATA8 flag74
    DIVF VL_M 257.48 tmpf74
    CP_EQF 0.0 257.48 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 VL_M 'true'

	DATA8 layer76
	DATA8 nos76
	DATA8 busy76
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer76 nos76
	JR_EQ8 0 nos76 motornotbusy76
  motorwaiting76:
	OUTPUT_TEST layer76 nos76 busy76
	JR_EQ8 busy76 0 motornotbusy76
	SLEEP
	JR motorwaiting76
  motornotbusy76:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RIGHT2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_COL_2:
    DATA32 milliseconds81
	MOVEF_32 500.0 milliseconds81
	DATA32 timer81
	TIMER_WAIT milliseconds81 timer81
	TIMER_READY timer81
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_1
    MOVEF_F VI2_1 VI2CPORT_1
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_1 1.0 1.0 4.0 VSENDARRAY_1 VRECVARRAY_1
    JR_NEQF VI2CPORT_1 1.0 else84_1
    JR_NEQF VDAL_1 1.0 else85_1
    CALL ARRAYGET_FLOAT 3.0 VC_1 VRECVARRAY_1
    JR_GTEQF VC_1 55.0 else87_1
    MOVEF_F 5.0 VCOL_1
    JR endif87
  else87_1:
    JR_GTEQF VC_1 121.0 else87_2
    MOVEF_F 1.0 VCOL_1
    JR endif87
  else87_2:
    JR_LTEQF VC_1 200.0 else87_3
    MOVEF_F 6.0 VCOL_1
  else87_3:
  endif87:
    JR endif85
  else85_1:
    JR_NEQF VDAL_1 2.0 else85_2
    CALL ARRAYGET_FLOAT 1.0 VC_1 VRECVARRAY_1
    JR_GTEQF VC_1 80.0 else89_1
    MOVEF_F 1.0 VCOL_1
    JR endif89
  else89_1:
    JR_GTEQF VC_1 140.0 else89_2
    MOVEF_F 5.0 VCOL_1
    JR endif89
  else89_2:
    JR_LTEQF VC_1 140.0 else89_3
    MOVEF_F 6.0 VCOL_1
  else89_3:
  endif89:
  else85_2:
  endif85:
    JR endif84
  else84_1:
    JR_NEQF VI2CPORT_1 4.0 else84_2
    JR_NEQF VDAL_1 1.0 else90_1
    CALL ARRAYGET_FLOAT 2.0 VC_1 VRECVARRAY_1
    JR_GTEQF VC_1 55.0 else92_1
    MOVEF_F 1.0 VCOL_1
    JR endif92
  else92_1:
    JR_GTEQF VC_1 80.0 else92_2
    MOVEF_F 5.0 VCOL_1
    JR endif92
  else92_2:
    JR_LTEQF VC_1 80.0 else92_3
    MOVEF_F 6.0 VCOL_1
  else92_3:
  endif92:
    JR endif90
  else90_1:
    JR_NEQF VDAL_1 2.0 else90_2
    CALL ARRAYGET_FLOAT 1.0 VC_1 VRECVARRAY_1
    JR_GTEQF VC_1 15.0 else94_1
    MOVEF_F 1.0 VCOL_1
    JR endif94
  else94_1:
    JR_GTEQF VC_1 30.0 else94_2
    MOVEF_F 5.0 VCOL_1
    JR endif94
  else94_2:
    JR_LTEQF VC_1 30.0 else94_3
    MOVEF_F 6.0 VCOL_1
  else94_3:
  endif94:
  else90_2:
  endif90:
  else84_2:
  endif84:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOL_1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VC_1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 60.0 2.0 S.0
RETSUB_COL_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
