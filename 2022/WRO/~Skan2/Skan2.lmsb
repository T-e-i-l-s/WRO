DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
ARRAY16 VHICOL_M 2
DATAF VCOL_M
DATAF VCOL1_M
DATAF VCOL4_M
DATAF VI2_1
ARRAY16 VSENDARRAY_1 2
DATAF VI2CPORT_1
ARRAY16 VRECVARRAY_1 2
DATAF VRED_1

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL ARRAYCREATE_FLOAT VHICOL_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VCOL1_M
    MOVEF_F 0.0 VCOL4_M
    MOVEF_F 0.0 VI2_1
    CALL ARRAYCREATE_FLOAT VSENDARRAY_1
    MOVEF_F 0.0 VI2CPORT_1
    CALL ARRAYCREATE_FLOAT VRECVARRAY_1
    MOVEF_F 0.0 VRED_1
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VHICOL_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VCOL1_M
    MOVEF_F 0.0 VCOL4_M
    MOVEF_F 0.0 VI2_1
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_1
    MOVEF_F 0.0 VI2CPORT_1
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_1
    MOVEF_F 0.0 VRED_1
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 4.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL ARRAYSTORE_FLOAT 0.0 60.0 VHICOL_M
    CALL ARRAYSTORE_FLOAT 1.0 180.0 VHICOL_M
    CALL ARRAYSTORE_FLOAT 2.0 180.0 VHICOL_M
    CALL ARRAYSTORE_FLOAT 3.0 300.0 VHICOL_M
    CALL ARRAYSTORE_FLOAT 4.0 10.0 VHICOL_M
    CALL ARRAYSTORE_FLOAT 5.0 60.0 VHICOL_M
    MOVEF_F 0.0 VCOL_M
  while21:
  whilebody21:
    MOVEF_F 1.0 VI2_1
    WRITE32 ENDSUB_COLOR_1:CALLSUB22 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_1
CALLSUB22:
    MOVEF_F VCOL_M VCOL1_M
    MOVEF_F 4.0 VI2_1
    WRITE32 ENDSUB_COLOR_1:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COLOR_1
CALLSUB23:
    MOVEF_F VCOL_M VCOL4_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOL1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VCOL4_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 50.0 20.0 2.0 S.0
    DATA32 milliseconds29
	MOVEF_32 2000.0 milliseconds29
	DATA32 timer29
	TIMER_WAIT milliseconds29 timer29
	TIMER_READY timer29
    JR whilebody21
  endwhile21:
ENDTHREAD:
    RETURN
SUB_COLOR_1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_1
    MOVEF_F VI2_1 VI2CPORT_1
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_1 1.0 1.0 4.0 VSENDARRAY_1 VRECVARRAY_1
    CALL ARRAYGET_FLOAT 1.0 VRED_1 VRECVARRAY_1
    CALL ARRAYGET_FLOAT 0.0 F.0 VHICOL_M
    JR_LTEQF VRED_1 F.0 else14_1
    CALL ARRAYGET_FLOAT 1.0 F.0 VHICOL_M
    JR_GTEQF VRED_1 F.0 else14_1
    MOVEF_F 5.0 VCOL_M
    JR endif14
  else14_1:
    CALL ARRAYGET_FLOAT 2.0 F.0 VHICOL_M
    JR_LTEQF VRED_1 F.0 else14_2
    CALL ARRAYGET_FLOAT 3.0 F.0 VHICOL_M
    JR_GTEQF VRED_1 F.0 else14_2
    MOVEF_F 6.0 VCOL_M
    JR endif14
  else14_2:
    CALL ARRAYGET_FLOAT 4.0 F.0 VHICOL_M
    JR_LTEQF VRED_1 F.0 else14_3
    CALL ARRAYGET_FLOAT 5.0 F.0 VHICOL_M
    JR_GTEQF VRED_1 F.0 else14_3
    MOVEF_F 1.0 VCOL_M
    JR endif14
  else14_3:
    MOVEF_F 0.0 VCOL_M
  else14_4:
  endif14:
RETSUB_COLOR_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COLOR_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
