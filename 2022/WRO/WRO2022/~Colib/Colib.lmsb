DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VV_M
DATAF VRDDAL1_M
DATAF VRDDAL4_M
DATAF VWTDAL1_M
DATAF VWTDAL4_M
DATAF VBKDAL1_M
DATAF VBKDAL4_M
DATAF VRDBLZ1_M
DATAF VRDBLZ4_M
DATAF VWTBLZ1_M
DATAF VWTBLZ4_M
DATAF VBKBLZ1_M
DATAF VBKBLZ4_M
DATAF VMAXRED1_M
DATAF VMAXBLACK1_M
DATAF VMAXWHITE1_M
DATAF VMAXRED2_M
DATAF VMAXBLACK2_M
DATAF VMAXWHITE2_M
DATAF VMINRED1_M
DATAF VMINBLACK1_M
DATAF VMINWHITE1_M
DATAF VMINRED2_M
DATAF VMINBLACK2_M
DATAF VMINWHITE2_M
DATAF VF_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRDDAL1_M
    MOVEF_F 0.0 VRDDAL4_M
    MOVEF_F 0.0 VWTDAL1_M
    MOVEF_F 0.0 VWTDAL4_M
    MOVEF_F 0.0 VBKDAL1_M
    MOVEF_F 0.0 VBKDAL4_M
    MOVEF_F 0.0 VRDBLZ1_M
    MOVEF_F 0.0 VRDBLZ4_M
    MOVEF_F 0.0 VWTBLZ1_M
    MOVEF_F 0.0 VWTBLZ4_M
    MOVEF_F 0.0 VBKBLZ1_M
    MOVEF_F 0.0 VBKBLZ4_M
    MOVEF_F 0.0 VMAXRED1_M
    MOVEF_F 0.0 VMAXBLACK1_M
    MOVEF_F 0.0 VMAXWHITE1_M
    MOVEF_F 0.0 VMAXRED2_M
    MOVEF_F 0.0 VMAXBLACK2_M
    MOVEF_F 0.0 VMAXWHITE2_M
    MOVEF_F 0.0 VMINRED1_M
    MOVEF_F 0.0 VMINBLACK1_M
    MOVEF_F 0.0 VMINWHITE1_M
    MOVEF_F 0.0 VMINRED2_M
    MOVEF_F 0.0 VMINBLACK2_M
    MOVEF_F 0.0 VMINWHITE2_M
    MOVEF_F 0.0 VF_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRDDAL1_M
    MOVEF_F 0.0 VRDDAL4_M
    MOVEF_F 0.0 VWTDAL1_M
    MOVEF_F 0.0 VWTDAL4_M
    MOVEF_F 0.0 VBKDAL1_M
    MOVEF_F 0.0 VBKDAL4_M
    MOVEF_F 0.0 VRDBLZ1_M
    MOVEF_F 0.0 VRDBLZ4_M
    MOVEF_F 0.0 VWTBLZ1_M
    MOVEF_F 0.0 VWTBLZ4_M
    MOVEF_F 0.0 VBKBLZ1_M
    MOVEF_F 0.0 VBKBLZ4_M
    MOVEF_F 0.0 VMAXRED1_M
    MOVEF_F 0.0 VMAXBLACK1_M
    MOVEF_F 0.0 VMAXWHITE1_M
    MOVEF_F 0.0 VMAXRED2_M
    MOVEF_F 0.0 VMAXBLACK2_M
    MOVEF_F 0.0 VMAXWHITE2_M
    MOVEF_F 0.0 VMINRED1_M
    MOVEF_F 0.0 VMINBLACK1_M
    MOVEF_F 0.0 VMINWHITE1_M
    MOVEF_F 0.0 VMINRED2_M
    MOVEF_F 0.0 VMINBLACK2_M
    MOVEF_F 0.0 VMINWHITE2_M
    MOVEF_F 0.0 VF_M
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 2.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 4.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MaxDistRd'
  while74:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile74
  whilebody74:
    WRITE32 ENDSUB_HSV1:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB77:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VH_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB83:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VH_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds89
	MOVEF_32 700.0 milliseconds89
	DATA32 timer89
	TIMER_WAIT milliseconds89 timer89
	TIMER_READY timer89
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody74
  endwhile74:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB93:
    MOVEF_F VH_M VRDDAL1_M
    WRITE32 ENDSUB_HSV4:CALLSUB94 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB94:
    MOVEF_F VH_M VRDDAL4_M
    DATA32 milliseconds95
	MOVEF_32 600.0 milliseconds95
	DATA32 timer95
	TIMER_WAIT milliseconds95 timer95
	TIMER_READY timer95
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MaxDistWt'
  while98:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile98
  whilebody98:
    WRITE32 ENDSUB_HSV1:CALLSUB101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB101:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB107:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds113
	MOVEF_32 700.0 milliseconds113
	DATA32 timer113
	TIMER_WAIT milliseconds113 timer113
	TIMER_READY timer113
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody98
  endwhile98:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB117:
    MOVEF_F VSRED_M VWTDAL1_M
    WRITE32 ENDSUB_HSV4:CALLSUB118 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB118:
    MOVEF_F VSRED_M VWTDAL4_M
    DATA32 milliseconds119
	MOVEF_32 600.0 milliseconds119
	DATA32 timer119
	TIMER_WAIT milliseconds119 timer119
	TIMER_READY timer119
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MaxDistBk'
  while122:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile122
  whilebody122:
    WRITE32 ENDSUB_HSV1:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB125:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB131 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB131:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds137
	MOVEF_32 700.0 milliseconds137
	DATA32 timer137
	TIMER_WAIT milliseconds137 timer137
	TIMER_READY timer137
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody122
  endwhile122:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB141:
    MOVEF_F VSRED_M VBKDAL1_M
    WRITE32 ENDSUB_HSV4:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB142:
    MOVEF_F VSRED_M VBKDAL4_M
    DATA32 milliseconds143
	MOVEF_32 600.0 milliseconds143
	DATA32 timer143
	TIMER_WAIT milliseconds143 timer143
	TIMER_READY timer143
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MinDistRd'
  while146:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile146
  whilebody146:
    WRITE32 ENDSUB_HSV1:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB149:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VH_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB155 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB155:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VH_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds161
	MOVEF_32 700.0 milliseconds161
	DATA32 timer161
	TIMER_WAIT milliseconds161 timer161
	TIMER_READY timer161
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody146
  endwhile146:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB165:
    MOVEF_F VH_M VRDBLZ1_M
    WRITE32 ENDSUB_HSV4:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB166:
    MOVEF_F VH_M VRDBLZ4_M
    DATA32 milliseconds167
	MOVEF_32 600.0 milliseconds167
	DATA32 timer167
	TIMER_WAIT milliseconds167 timer167
	TIMER_READY timer167
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MinDistWt'
  while170:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile170
  whilebody170:
    WRITE32 ENDSUB_HSV1:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB173:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB179:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds185
	MOVEF_32 700.0 milliseconds185
	DATA32 timer185
	TIMER_WAIT milliseconds185 timer185
	TIMER_READY timer185
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody170
  endwhile170:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB189:
    MOVEF_F VSRED_M VWTBLZ1_M
    WRITE32 ENDSUB_HSV4:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB190:
    MOVEF_F VSRED_M VWTBLZ4_M
    DATA32 milliseconds191
	MOVEF_32 600.0 milliseconds191
	DATA32 timer191
	TIMER_WAIT milliseconds191 timer191
	TIMER_READY timer191
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 10.0 5.0 2.0 'MinDistBk'
  while194:
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 endwhile194
  whilebody194:
    WRITE32 ENDSUB_HSV1:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB197:
    CALL LCD.TEXT 1.0 10.0 40.0 1.0 'Left(1)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 10.0 75.0 1.0 S.0
    WRITE32 ENDSUB_HSV4:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB203:
    CALL LCD.TEXT 1.0 110.0 40.0 1.0 'Right(4)'
    MATH ROUND VSRED_M F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.1
    CALL TEXT.APPEND 'sRed:' S.1 S.0
    CALL LCD.TEXT 1.0 110.0 75.0 1.0 S.0
    DATA32 milliseconds209
	MOVEF_32 700.0 milliseconds209
	DATA32 timer209
	TIMER_WAIT milliseconds209 timer209
	TIMER_READY timer209
    CALL BUTTONS.CURRENT S.1
    CALL NE_STRING S.1 'E' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_NEQ8 S.0 0 whilebody194
  endwhile194:
    CALL SPEAKER.NOTE 30.0 'C#5' 300.0
    WRITE32 ENDSUB_HSV1:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB213:
    MOVEF_F VSRED_M VBKBLZ1_M
    WRITE32 ENDSUB_HSV4:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB214:
    MOVEF_F VSRED_M VBKBLZ4_M
    DATA32 milliseconds215
	MOVEF_32 600.0 milliseconds215
	DATA32 timer215
	TIMER_WAIT milliseconds215 timer215
	TIMER_READY timer215
    DATA8 flag216
	CP_GTF VRDBLZ1_M VRDDAL1_M flag216
	SELECTF flag216 VRDBLZ1_M VRDDAL1_M VMAXRED1_M
    DATA8 flag217
	CP_GTF VBKBLZ1_M VBKDAL1_M flag217
	SELECTF flag217 VBKBLZ1_M VBKDAL1_M VMAXBLACK1_M
    DATA8 flag218
	CP_GTF VWTBLZ1_M VWTDAL1_M flag218
	SELECTF flag218 VWTBLZ1_M VWTDAL1_M VMAXWHITE1_M
    DATA8 flag219
	CP_GTF VRDBLZ4_M VRDDAL4_M flag219
	SELECTF flag219 VRDBLZ4_M VRDDAL4_M VMAXRED2_M
    DATA8 flag220
	CP_GTF VBKBLZ4_M VBKDAL4_M flag220
	SELECTF flag220 VBKBLZ4_M VBKDAL4_M VMAXBLACK2_M
    DATA8 flag221
	CP_GTF VWTBLZ4_M VWTDAL4_M flag221
	SELECTF flag221 VWTBLZ4_M VWTDAL4_M VMAXWHITE2_M
    DATA8 flag222
	CP_LTF VRDBLZ1_M VRDDAL1_M flag222
	SELECTF flag222 VRDBLZ1_M VRDDAL1_M VMINRED1_M
    DATA8 flag223
	CP_LTF VBKBLZ1_M VBKDAL1_M flag223
	SELECTF flag223 VBKBLZ1_M VBKDAL1_M VMINBLACK1_M
    DATA8 flag224
	CP_LTF VWTBLZ1_M VWTDAL1_M flag224
	SELECTF flag224 VWTBLZ1_M VWTDAL1_M VMINWHITE1_M
    DATA8 flag225
	CP_LTF VRDBLZ4_M VRDDAL4_M flag225
	SELECTF flag225 VRDBLZ4_M VRDDAL4_M VMINRED2_M
    DATA8 flag226
	CP_LTF VBKBLZ4_M VBKDAL4_M flag226
	SELECTF flag226 VBKBLZ4_M VBKDAL4_M VMINBLACK2_M
    DATA8 flag227
	CP_LTF VWTBLZ4_M VWTDAL4_M flag227
	SELECTF flag227 VWTBLZ4_M VWTDAL4_M VMINWHITE2_M
    CALL EV3FILE.OPENWRITE 'left.txt' VF_M
    STRINGS VALUE_FORMATTED VMAXRED1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAXBLACK1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAXWHITE1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINRED1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINBLACK1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINWHITE1_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
    CALL EV3FILE.OPENWRITE 'right.txt' VF_M
    STRINGS VALUE_FORMATTED VMAXRED2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAXBLACK2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMAXWHITE2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINRED2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINBLACK2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    STRINGS VALUE_FORMATTED VMINWHITE2_M '%g' 99 S.0
    CALL EV3FILE.WRITELINE VF_M S.0
    CALL EV3FILE.CLOSE VF_M
ENDTHREAD:
    RETURN
SUB_HSV1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else10_1
    JR_LTEQF VSRED_M VSBLUE_M else10_1
    MOVEF_F VSRED_M VMAX_M
    JR endif10
  else10_1:
    JR_LTEQF VSGREEN_M VSRED_M else10_2
    JR_LTEQF VSGREEN_M VSBLUE_M else10_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif10
  else10_2:
    JR_LTEQF VSBLUE_M VSRED_M else10_3
    JR_LTEQF VSBLUE_M VSGREEN_M else10_3
    MOVEF_F VSBLUE_M VMAX_M
  else10_3:
  endif10:
    JR_GTEQF VSRED_M VSGREEN_M else11_1
    JR_GTEQF VSRED_M VSBLUE_M else11_1
    MOVEF_F VSRED_M VMIN_M
    JR endif11
  else11_1:
    JR_GTEQF VSGREEN_M VSRED_M else11_2
    JR_GTEQF VSGREEN_M VSBLUE_M else11_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif11
  else11_2:
    JR_GTEQF VSBLUE_M VSRED_M else11_3
    JR_GTEQF VSBLUE_M VSGREEN_M else11_3
    MOVEF_F VSBLUE_M VMIN_M
  else11_3:
  endif11:
    JR_NEQF VMAX_M VMIN_M else12_1
    MOVEF_F 0.0 VH_M
    JR endif12
  else12_1:
    JR_NEQF VSRED_M VMAX_M else13_1
    JR_LTF VSGREEN_M VSBLUE_M else14_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf18
    DATA8 flag18
    DIVF F.0 F.1 tmpf18
    CP_EQF 0.0 F.1 flag18
    SELECTF flag18 0.0 tmpf18 VH_M

    JR endif14
  else14_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf22
    DATA8 flag22
    DIVF F.1 F.2 tmpf22
    CP_EQF 0.0 F.2 flag22
    SELECTF flag22 0.0 tmpf22 F.0

    ADDF F.0 360.0 VH_M
  else14_2:
  endif14:
    JR endif13
  else13_1:
    JR_NEQF VMAX_M VSGREEN_M else24_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf28
    DATA8 flag28
    DIVF F.1 F.2 tmpf28
    CP_EQF 0.0 F.2 flag28
    SELECTF flag28 0.0 tmpf28 F.0

    ADDF F.0 120.0 VH_M
    JR endif24
  else24_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf33
    DATA8 flag33
    DIVF F.1 F.2 tmpf33
    CP_EQF 0.0 F.2 flag33
    SELECTF flag33 0.0 tmpf33 F.0

    ADDF F.0 240.0 VH_M
  else24_2:
  endif24:
  else13_2:
  endif13:
  else12_2:
  endif12:
    JR_NEQF VMAX_M 0.0 else35_1
    MOVEF_F 0.0 VS_M
    JR endif35
  else35_1:
    DATAF tmpf36
    DATA8 flag36
    DIVF VMIN_M VMAX_M tmpf36
    CP_EQF 0.0 VMAX_M flag36
    SELECTF flag36 0.0 tmpf36 F.0

    SUBF 1.0 F.0 VS_M
  else35_2:
  endif35:
    MOVEF_F VMAX_M VV_M
RETSUB_HSV1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV1:
SUB_HSV4:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 4.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else44_1
    JR_LTEQF VSRED_M VSBLUE_M else44_1
    MOVEF_F VSRED_M VMAX_M
    JR endif44
  else44_1:
    JR_LTEQF VSGREEN_M VSRED_M else44_2
    JR_LTEQF VSGREEN_M VSBLUE_M else44_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif44
  else44_2:
    JR_LTEQF VSBLUE_M VSRED_M else44_3
    JR_LTEQF VSBLUE_M VSGREEN_M else44_3
    MOVEF_F VSBLUE_M VMAX_M
  else44_3:
  endif44:
    JR_GTEQF VSRED_M VSGREEN_M else45_1
    JR_GTEQF VSRED_M VSBLUE_M else45_1
    MOVEF_F VSRED_M VMIN_M
    JR endif45
  else45_1:
    JR_GTEQF VSGREEN_M VSRED_M else45_2
    JR_GTEQF VSGREEN_M VSBLUE_M else45_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif45
  else45_2:
    JR_GTEQF VSBLUE_M VSRED_M else45_3
    JR_GTEQF VSBLUE_M VSGREEN_M else45_3
    MOVEF_F VSBLUE_M VMIN_M
  else45_3:
  endif45:
    JR_NEQF VMAX_M VMIN_M else46_1
    MOVEF_F 0.0 VH_M
    JR endif46
  else46_1:
    JR_NEQF VSRED_M VMAX_M else47_1
    JR_LTF VSGREEN_M VSBLUE_M else48_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.0 F.1 tmpf52
    CP_EQF 0.0 F.1 flag52
    SELECTF flag52 0.0 tmpf52 VH_M

    JR endif48
  else48_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf56
    DATA8 flag56
    DIVF F.1 F.2 tmpf56
    CP_EQF 0.0 F.2 flag56
    SELECTF flag56 0.0 tmpf56 F.0

    ADDF F.0 360.0 VH_M
  else48_2:
  endif48:
    JR endif47
  else47_1:
    JR_NEQF VMAX_M VSGREEN_M else58_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf62
    DATA8 flag62
    DIVF F.1 F.2 tmpf62
    CP_EQF 0.0 F.2 flag62
    SELECTF flag62 0.0 tmpf62 F.0

    ADDF F.0 120.0 VH_M
    JR endif58
  else58_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf67
    DATA8 flag67
    DIVF F.1 F.2 tmpf67
    CP_EQF 0.0 F.2 flag67
    SELECTF flag67 0.0 tmpf67 F.0

    ADDF F.0 240.0 VH_M
  else58_2:
  endif58:
  else47_2:
  endif47:
  else46_2:
  endif46:
    JR_NEQF VMAX_M 0.0 else69_1
    MOVEF_F 0.0 VS_M
    JR endif69
  else69_1:
    DATAF tmpf70
    DATA8 flag70
    DIVF VMIN_M VMAX_M tmpf70
    CP_EQF 0.0 VMAX_M flag70
    SELECTF flag70 0.0 tmpf70 F.0

    SUBF 1.0 F.0 VS_M
  else69_2:
  endif69:
    MOVEF_F VMAX_M VV_M
RETSUB_HSV4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV4:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall BUTTONS.CURRENT    // S
{
	OUT_S result 8
	DATA8 ispressed
	
// BIG CASE TREE TO GET ALL POSSIBILITIES

	UI_BUTTON PRESSED 1 ispressed
	JR_NEQ8 ispressed 0 is_1____
is_X____:
	UI_BUTTON PRESSED 2 ispressed
	JR_NEQ8 ispressed 0 is_X2___
is_XX___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_XX3__
is_XXX__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_XXX4_
is_XXXX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XXXX5
is_XXXXX:
	STRINGS DUPLICATE '' result
	RETURN
is_XXXX5:
	STRINGS DUPLICATE 'L' result
	RETURN
is_XXX4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XXX45
is_XXX4X:
	STRINGS DUPLICATE 'R' result
	RETURN
is_XXX45:
	STRINGS DUPLICATE 'RL' result
	RETURN
is_XX3__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_XX34_
is_XX3X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XX3X5
is_XX3XX:
	STRINGS DUPLICATE 'D' result
	RETURN
is_XX3X5:
	STRINGS DUPLICATE 'DL' result
	RETURN
is_XX34_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_XX345
is_XX34X:
	STRINGS DUPLICATE 'DR' result
	RETURN
is_XX345:
	STRINGS DUPLICATE 'DRL' result
	RETURN
is_X2___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_X23__
is_X2X__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_X2X4_
is_X2XX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2XX5
is_X2XXX:
	STRINGS DUPLICATE 'E' result
	RETURN
is_X2XX5:
	STRINGS DUPLICATE 'EL' result
	RETURN
is_X2X4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2X45
is_X2X4X:
	STRINGS DUPLICATE 'ER' result
	RETURN
is_X2X45:
	STRINGS DUPLICATE 'ERL' result
	RETURN
is_X23__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_X234_
is_X23X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X23X5
is_X23XX:
	STRINGS DUPLICATE 'ED' result
	RETURN
is_X23X5:
	STRINGS DUPLICATE 'EDL' result
	RETURN
is_X234_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_X2345
is_X234X:
	STRINGS DUPLICATE 'EDR' result
	RETURN
is_X2345:
	STRINGS DUPLICATE 'EDRL' result
	RETURN
is_1____:
	UI_BUTTON PRESSED 2 ispressed
	JR_NEQ8 ispressed 0 is_12___
is_1X___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_1X3__
is_1XX__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1XX4_
is_1XXX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1XXX5
is_1XXXX:
	STRINGS DUPLICATE 'U' result
	RETURN
is_1XXX5:
	STRINGS DUPLICATE 'UL' result
	RETURN
is_1XX4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1XX45
is_1XX4X:
	STRINGS DUPLICATE 'UR' result
	RETURN
is_1XX45:
	STRINGS DUPLICATE 'URL' result
	RETURN
is_1X3__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1X34_
is_1X3X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1X3X5
is_1X3XX:
	STRINGS DUPLICATE 'UD' result
	RETURN
is_1X3X5:
	STRINGS DUPLICATE 'UDL' result
	RETURN
is_1X34_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_1X345
is_1X34X:
	STRINGS DUPLICATE 'UDR' result
	RETURN
is_1X345:
	STRINGS DUPLICATE 'UDRL' result
	RETURN
is_12___:
	UI_BUTTON PRESSED 3 ispressed
	JR_NEQ8 ispressed 0 is_123__
is_12X__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_12X4_
is_12XX_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12XX5
is_12XXX:
	STRINGS DUPLICATE 'UE' result
	RETURN
is_12XX5:
	STRINGS DUPLICATE 'UEL' result
	RETURN
is_12X4_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12X45
is_12X4X:
	STRINGS DUPLICATE 'UER' result
	RETURN
is_12X45:
	STRINGS DUPLICATE 'UERL' result
	RETURN
is_123__:
	UI_BUTTON PRESSED 4 ispressed
	JR_NEQ8 ispressed 0 is_1234_
is_123X_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_123X5
is_123XX:
	STRINGS DUPLICATE 'UED' result
	RETURN
is_123X5:
	STRINGS DUPLICATE 'UEDL' result
	RETURN
is_1234_:
	UI_BUTTON PRESSED 5 ispressed
	JR_NEQ8 ispressed 0 is_12345
is_1234X:
	STRINGS DUPLICATE 'UEDR' result
	RETURN
is_12345:
	STRINGS DUPLICATE 'UEDRL' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
