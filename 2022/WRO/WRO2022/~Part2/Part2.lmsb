DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VK_M
DATAF VV_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOLOR_M
DATAF VN_M
DATAF VSTART_M
DATAF VFINISH_M
DATAF VID_M
DATAF VRED_M
DATAF VREDD_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VZ1_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VL_3
DATAF VGRAD_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAF VSTART_7
DATAF VFINISH_7
DATA32 RUNCOUNTER_OPEN
DATA32 RUNCOUNTER_CLOSE

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VFINISH_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VREDD_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VZ1_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSTART_7
    MOVEF_F 0.0 VFINISH_7
    MOVE32_32 0 RUNCOUNTER_OPEN
    MOVE32_32 0 RUNCOUNTER_CLOSE
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TOPEN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_OPEN 0
    CALL GETANDINC32 RUNCOUNTER_OPEN -1 RUNCOUNTER_OPEN tmp
    JR_GT32 tmp 1 launch
}
vmthread TCLOSE
{
    DATA32 tmp
  launch:
    CALL PROGRAM_CLOSE 1
    CALL GETANDINC32 RUNCOUNTER_CLOSE -1 RUNCOUNTER_CLOSE tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_OPEN
subcall PROGRAM_CLOSE
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch603
    WRITE32 ENDSUB_OPEN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
  dispatch603:
    JR_NEQ32 SUBPROGRAM 1 dispatch604
    WRITE32 ENDSUB_CLOSE:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
  dispatch604:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VFINISH_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VREDD_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VZ1_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSTART_7
    MOVEF_F 0.0 VFINISH_7
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    DATA8 layer17
	DATA8 no17
	DATA8 mode817
	
	MOVEF_8 1.0 no17
	SUB8 no17 1 no17
	DIV8 no17 4 layer17
	MATH MOD8 no17 4 no17

	MOVEF_8 2.0 mode817
	
	INPUT_DEVICE READY_RAW layer17 no17 0 mode817 0
    DATA8 layer18
	DATA8 no18
	DATA8 mode818
	
	MOVEF_8 4.0 no18
	SUB8 no18 1 no18
	DIV8 no18 4 layer18
	MATH MOD8 no18 4 no18

	MOVEF_8 2.0 mode818
	
	INPUT_DEVICE READY_RAW layer18 no18 0 mode818 0
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 1.0 VSTART_7
    WRITE32 ENDSUB_START_1:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_1
CALLSUB370:
    CALL MOTOR.STARTPOWER 'BC' 90.0
    DATA32 milliseconds372
	MOVEF_32 1700.0 milliseconds372
	DATA32 timer372
	TIMER_WAIT milliseconds372 timer372
	TIMER_READY timer372
    CALL MOTOR.STOP 'BC' 'false'
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while375:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 27.0 endwhile375
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile375
  whilebody375:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 27.0 and378
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody375
  and378:
  endwhile375:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB382:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB383:
    CALL MOTOR.STARTPOWER 'BC' -60.0
    DATA32 milliseconds385
	MOVEF_32 1000.0 milliseconds385
	DATA32 timer385
	TIMER_WAIT milliseconds385 timer385
	TIMER_READY timer385
    MOVEF_F 170.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB386:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB387:
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while389:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 endwhile389
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 15.0 endwhile389
  whilebody389:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 and392
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 15.0 whilebody389
  and392:
  endwhile389:
    CALL MOTOR.STARTPOWER 'BC' 20.0
  while396:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile396
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile396
  whilebody396:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and399
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody396
  and399:
  endwhile396:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB403:
    CALL MOTOR.RESETCOUNT 'BC'
  while405:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf409
    DATA8 flag409
    DIVF F.1 2.0 tmpf409
    CP_EQF 0.0 2.0 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    JR_GTEQF F.0 50.0 endwhile405
  whilebody405:
    WRITE32 ENDSUB_LINE:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB410:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf414
    DATA8 flag414
    DIVF F.1 2.0 tmpf414
    CP_EQF 0.0 2.0 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    JR_LTF F.0 50.0 whilebody405
  endwhile405:
  while415:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile415
  whilebody415:
    WRITE32 ENDSUB_LINE:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB417:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody415
  endwhile415:
    WRITE32 ENDSUB_LEFT:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB419:
    CALL MOTOR.RESETCOUNT 'BC'
  while421:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf425
    DATA8 flag425
    DIVF F.1 2.0 tmpf425
    CP_EQF 0.0 2.0 flag425
    SELECTF flag425 0.0 tmpf425 F.0

    JR_GTEQF F.0 170.0 endwhile421
  whilebody421:
    WRITE32 ENDSUB_LINE:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB426:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf430
    DATA8 flag430
    DIVF F.1 2.0 tmpf430
    CP_EQF 0.0 2.0 flag430
    SELECTF flag430 0.0 tmpf430 F.0

    JR_LTF F.0 170.0 whilebody421
  endwhile421:
    MOVEF_F 1.0 VK_M
    MOVEF_F 30.0 VV_M
  while431:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or432
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile431
  or432:
  whilebody431:
    WRITE32 ENDSUB_LINE:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB435:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody431
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody431
  endwhile431:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 222.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB439:
    WRITE32 ENDSUB_CUBE:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB440:
    MOVEF_F 375.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB441:
    WRITE32 ENDSUB_CUBE:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB442:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB443:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB444:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds446
	MOVEF_32 2000.0 milliseconds446
	DATA32 timer446
	TIMER_WAIT milliseconds446 timer446
	TIMER_READY timer446
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB447:
    WRITE32 ENDSUB_CUBE:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB448:
    WRITE32 ENDSUB_CUBE:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB449:
    MOVEF_F 405.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB450:
    WRITE32 ENDSUB_CUBE:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB451:
    MOVEF_F 265.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB452:
    WRITE32 ENDSUB_CUBE:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB453:
    MOVEF_F 142.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB454:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB455:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds457
	MOVEF_32 2500.0 milliseconds457
	DATA32 timer457
	TIMER_WAIT milliseconds457 timer457
	TIMER_READY timer457
    MOVEF_F 55.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB458:
    WRITE32 ENDSUB_CUBE:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB459:
    WRITE32 ENDSUB_CUBE:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB460:
    MOVEF_F 564.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB461:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB462:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds464
	MOVEF_32 1500.0 milliseconds464
	DATA32 timer464
	TIMER_WAIT milliseconds464 timer464
	TIMER_READY timer464
    MOVEF_F 325.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB465:
    WRITE32 ENDSUB_CUBE:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB466:
    WRITE32 ENDSUB_CUBE:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB467:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB468:
    WRITE32 ENDSUB_CUBE:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB469:
    WRITE32 ENDSUB_CUBE:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB470:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB471:
    MOVEF_F 100.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB472:
    MOVEF_F 300.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB473:
    DATA32 tmp474
    CALL GETANDINC32 RUNCOUNTER_OPEN 1  RUNCOUNTER_OPEN tmp474
    JR_NEQ32 0 tmp474 alreadylaunched474
    OBJECT_START TOPEN
  alreadylaunched474:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    CALL MOTOR.RESETCOUNT 'BC'
  while476:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf480
    DATA8 flag480
    DIVF F.1 2.0 tmpf480
    CP_EQF 0.0 2.0 flag480
    SELECTF flag480 0.0 tmpf480 F.0

    JR_GTEQF F.0 650.0 endwhile476
  whilebody476:
    WRITE32 ENDSUB_LINE:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB481:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf485
    DATA8 flag485
    DIVF F.1 2.0 tmpf485
    CP_EQF 0.0 2.0 flag485
    SELECTF flag485 0.0 tmpf485 F.0

    JR_LTF F.0 650.0 whilebody476
  endwhile476:
    MOVEF_F 0.5 VK_M
    MOVEF_F 25.0 VV_M
  while486:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or487
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile486
  or487:
  whilebody486:
    WRITE32 ENDSUB_LINE:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB490:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody486
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody486
  endwhile486:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB494:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB495:
    CALL MOTOR.STARTPOWER 'BC' -60.0
    DATA32 milliseconds497
	MOVEF_32 3000.0 milliseconds497
	DATA32 timer497
	TIMER_WAIT milliseconds497 timer497
	TIMER_READY timer497
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 100.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB499:
    CALL MOTOR.STARTPOWER 'BC' 60.0
    DATA32 milliseconds501
	MOVEF_32 2500.0 milliseconds501
	DATA32 timer501
	TIMER_WAIT milliseconds501 timer501
	TIMER_READY timer501
    CALL MOTOR.STOP 'BC' 'false'
    CALL MOTOR.START 'BC' 30.0
    DATA32 milliseconds504
	MOVEF_32 2000.0 milliseconds504
	DATA32 timer504
	TIMER_WAIT milliseconds504 timer504
	TIMER_READY timer504
    MOVEF_F 250.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB505:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB506:
    CALL MOTOR.STARTPOWER 'BC' -50.0
    DATA32 milliseconds508
	MOVEF_32 2000.0 milliseconds508
	DATA32 timer508
	TIMER_WAIT milliseconds508 timer508
	TIMER_READY timer508
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 310.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB510:
    WRITE32 ENDSUB_CLOSE:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB511:
    JR_NEQF VZONE1_M 0.0 else512_1
    MOVEF_F 4.0 VZONE1_M
    JR endif512
  else512_1:
    JR_NEQF VZONE2_M 0.0 else512_2
    MOVEF_F 2.0 VZONE2_M
  else512_2:
  endif512:
    JR_EQF VZONE2_M 1.0 or514
    JR_EQF VZONE2_M 5.0 or514
    JR_NEQF VZONE2_M 6.0 else513_1
  or514:
    MOVEF_F VZONE1_M VZ1_M
    MOVEF_F VZONE2_M VZONE1_M
    MOVEF_F VZ1_M VZONE2_M
  else513_1:
  endif513:
    JR_NEQF VZONE1_M 4.0 else515_1
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB516:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB517:
    WRITE32 ENDSUB_OPEN:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB518:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB519:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB520:
    MOVEF_F 320.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB521:
    JR endif515
  else515_1:
    JR_NEQF VZONE1_M 5.0 else515_2
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB522:
    MOVEF_F 170.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB523:
    WRITE32 ENDSUB_OPEN:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB524:
    MOVEF_F 145.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB525:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB526:
    MOVEF_F 320.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB527:
    JR endif515
  else515_2:
    JR_NEQF VZONE1_M 3.0 else515_3
    MOVEF_F 160.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB528:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB529:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB530:
    WRITE32 ENDSUB_OPEN:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB531:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB532:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB533:
    MOVEF_F 160.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB534:
    JR endif515
  else515_3:
    JR_NEQF VZONE1_M 6.0 else515_4
    MOVEF_F 160.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB535:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB536:
    MOVEF_F 155.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB537:
    WRITE32 ENDSUB_OPEN:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB538:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB539:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB540:
    MOVEF_F 160.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB541:
    JR endif515
  else515_4:
    JR_NEQF VZONE1_M 1.0 else515_5
    MOVEF_F 145.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB542:
    MOVEF_F 65.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB543:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB544:
    WRITE32 ENDSUB_OPEN:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB545:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB546:
    MOVEF_F 65.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB547:
    MOVEF_F 160.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB548:
  else515_5:
  endif515:
    WRITE32 ENDSUB_CLOSE:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB549:
    JR_NEQF VZONE2_M 1.0 else550_1
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB551:
    MOVEF_F 155.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB552:
    WRITE32 ENDSUB_OPEN:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB553:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB554:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB555:
    JR endif550
  else550_1:
    JR_NEQF VZONE2_M 2.0 else550_2
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB556:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB557:
    WRITE32 ENDSUB_OPEN:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB558:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB559:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB560:
    JR endif550
  else550_2:
    JR_NEQF VZONE2_M 3.0 else550_3
    MOVEF_F 160.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB561:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB562:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB563:
    WRITE32 ENDSUB_OPEN:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB564:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB565:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB566:
    JR endif550
  else550_3:
    JR_NEQF VZONE2_M 4.0 else550_4
    MOVEF_F 250.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB567:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB568:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB569:
    WRITE32 ENDSUB_OPEN:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB570:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB571:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB572:
    JR endif550
  else550_4:
    JR_NEQF VZONE2_M 5.0 else550_5
    MOVEF_F 320.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB573:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB574:
    MOVEF_F 155.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB575:
    WRITE32 ENDSUB_OPEN:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB576:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB577:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB578:
    JR endif550
  else550_5:
    JR_NEQF VZONE2_M 6.0 else550_6
    MOVEF_F 160.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB579:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB580:
    MOVEF_F 155.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB581:
    WRITE32 ENDSUB_OPEN:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB582:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB583:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB584:
  else550_6:
  endif550:
    JR_NEQF VFINISH_M 1.0 else585_1
    CALL MOTOR.START 'BC' -40.0
    DATA32 milliseconds587
	MOVEF_32 2000.0 milliseconds587
	DATA32 timer587
	TIMER_WAIT milliseconds587 timer587
	TIMER_READY timer587
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 tmp589
    CALL GETANDINC32 RUNCOUNTER_CLOSE 1  RUNCOUNTER_CLOSE tmp589
    JR_NEQ32 0 tmp589 alreadylaunched589
    OBJECT_START TCLOSE
  alreadylaunched589:
    MOVEF_F 200.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB590:
    CALL MOTOR.START 'BC' 50.0
    DATA32 milliseconds592
	MOVEF_32 400.0 milliseconds592
	DATA32 timer592
	TIMER_WAIT milliseconds592 timer592
	TIMER_READY timer592
    CALL MOTOR.STOP 'BC' 'true'
    JR endif585
  else585_1:
    MOVEF_F 192.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB594:
    CALL MOTOR.START 'BC' -40.0
    DATA32 milliseconds596
	MOVEF_32 2500.0 milliseconds596
	DATA32 timer596
	TIMER_WAIT milliseconds596 timer596
	TIMER_READY timer596
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 tmp598
    CALL GETANDINC32 RUNCOUNTER_CLOSE 1  RUNCOUNTER_CLOSE tmp598
    JR_NEQ32 0 tmp598 alreadylaunched598
    OBJECT_START TCLOSE
  alreadylaunched598:
    MOVEF_F 200.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB599:
    CALL MOTOR.START 'BC' 50.0
    DATA32 milliseconds601
	MOVEF_32 400.0 milliseconds601
	DATA32 timer601
	TIMER_WAIT milliseconds601 timer601
	TIMER_READY timer601
    CALL MOTOR.STOP 'BC' 'true'
  else585_2:
  endif585:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf23
    DATA8 flag23
    DIVF F.0 F.1 tmpf23
    CP_EQF 0.0 F.1 flag23
    SELECTF flag23 0.0 tmpf23 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf28
    DATA8 flag28
    DIVF F.0 F.1 tmpf28
    CP_EQF 0.0 F.1 flag28
    SELECTF flag28 0.0 tmpf28 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB29:
    WRITE32 ENDSUB_SEN2:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB30:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while39:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf45
    DATA8 flag45
    DIVF F.1 2.0 tmpf45
    CP_EQF 0.0 2.0 flag45
    SELECTF flag45 0.0 tmpf45 F.0

    JR_GTF F.0 VL_1 endwhile39
  whilebody39:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf60
    DATA8 flag60
    DIVF F.1 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    JR_LTEQF F.0 VL_1 whilebody39
  endwhile39:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf62
    DATA8 flag62
    DIVF VMM_2 257.48 tmpf62
    CP_EQF 0.0 257.48 flag62
    SELECTF flag62 0.0 tmpf62 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB65 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB65:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer66
	DATA8 nos66
	DATA8 busy66
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer66 nos66
	JR_EQ8 0 nos66 motornotbusy66
  motorwaiting66:
	OUTPUT_TEST layer66 nos66 busy66
	JR_EQ8 busy66 0 motornotbusy66
	SLEEP
	JR motorwaiting66
  motornotbusy66:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 140.0 'true'

	DATA8 layer67
	DATA8 nos67
	DATA8 busy67
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer67 nos67
	JR_EQ8 0 nos67 motornotbusy67
  motorwaiting67:
	OUTPUT_TEST layer67 nos67 busy67
	JR_EQ8 busy67 0 motornotbusy67
	SLEEP
	JR motorwaiting67
  motornotbusy67:
  while68:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile68
  whilebody68:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody68
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
  while73:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile73
  whilebody73:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody73
  endwhile73:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB78 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB78:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 76.8991766350784 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer80
	DATA8 nos80
	DATA8 busy80
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer80 nos80
	JR_EQ8 0 nos80 motornotbusy80
  motorwaiting80:
	OUTPUT_TEST layer80 nos80 busy80
	JR_EQ8 busy80 0 motornotbusy80
	SLEEP
	JR motorwaiting80
  motornotbusy80:
  while81:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile81
  whilebody81:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody81
  endwhile81:
    CALL MOTOR.STOP 'bc' 'true'
  while86:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile86
  whilebody86:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody86
  endwhile86:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB91 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB91:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_1:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf93
    DATA8 flag93
    DIVF F.0 360.0 tmpf93
    CP_EQF 0.0 360.0 flag93
    SELECTF flag93 0.0 tmpf93 VL_3

    DATAF tmpf94
    DATA8 flag94
    DIVF VL_3 257.48 tmpf94
    CP_EQF 0.0 257.48 flag94
    SELECTF flag94 0.0 tmpf94 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
  while98:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_GTF F.0 VL_3 endwhile98
  whilebody98:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_LTEQF F.0 VL_3 whilebody98
  endwhile98:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_1:
SUB_RIGHT1_1:
    MULF 1168.08 VGRAD_4 F.0
    DATAF tmpf103
    DATA8 flag103
    DIVF F.0 360.0 tmpf103
    CP_EQF 0.0 360.0 flag103
    SELECTF flag103 0.0 tmpf103 VL_4

    DATAF tmpf104
    DATA8 flag104
    DIVF VL_4 257.48 tmpf104
    CP_EQF 0.0 257.48 flag104
    SELECTF flag104 0.0 tmpf104 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 60.0
  while108:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTF F.0 VL_4 endwhile108
  whilebody108:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTEQF F.0 VL_4 whilebody108
  endwhile108:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_1:
SUB_LEFT2_1:
    MULF 1168.08 VGRAD_5 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 360.0 tmpf113
    CP_EQF 0.0 360.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    DATAF tmpf114
    DATA8 flag114
    DIVF F.0 2.0 tmpf114
    CP_EQF 0.0 2.0 flag114
    SELECTF flag114 0.0 tmpf114 VL_5

    DATAF tmpf115
    DATA8 flag115
    DIVF VL_5 257.48 tmpf115
    CP_EQF 0.0 257.48 flag115
    SELECTF flag115 0.0 tmpf115 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
    CALL MOTOR.STARTPOWER 'B' -60.0
  while120:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf126
    DATA8 flag126
    DIVF F.1 2.0 tmpf126
    CP_EQF 0.0 2.0 flag126
    SELECTF flag126 0.0 tmpf126 F.0

    JR_GTF F.0 VL_5 endwhile120
  whilebody120:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 2.0 tmpf132
    CP_EQF 0.0 2.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    JR_LTEQF F.0 VL_5 whilebody120
  endwhile120:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1168.08 VGRAD_6 F.1
    DATAF tmpf135
    DATA8 flag135
    DIVF F.1 360.0 tmpf135
    CP_EQF 0.0 360.0 flag135
    SELECTF flag135 0.0 tmpf135 F.0

    DATAF tmpf136
    DATA8 flag136
    DIVF F.0 2.0 tmpf136
    CP_EQF 0.0 2.0 flag136
    SELECTF flag136 0.0 tmpf136 VL_6

    DATAF tmpf137
    DATA8 flag137
    DIVF VL_6 257.48 tmpf137
    CP_EQF 0.0 257.48 flag137
    SELECTF flag137 0.0 tmpf137 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' -60.0
    CALL MOTOR.STARTPOWER 'B' 60.0
  while142:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf148
    DATA8 flag148
    DIVF F.1 2.0 tmpf148
    CP_EQF 0.0 2.0 flag148
    SELECTF flag148 0.0 tmpf148 F.0

    JR_GTF F.0 VL_6 endwhile142
  whilebody142:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf154
    DATA8 flag154
    DIVF F.1 2.0 tmpf154
    CP_EQF 0.0 2.0 flag154
    SELECTF flag154 0.0 tmpf154 F.0

    JR_LTEQF F.0 VL_6 whilebody142
  endwhile142:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_OPEN:
    CALL MOTOR.START 'A' 30.0
    DATA32 milliseconds160
	MOVEF_32 1000.0 milliseconds160
	DATA32 timer160
	TIMER_WAIT milliseconds160 timer160
	TIMER_READY timer160
    CALL MOTOR.STOP 'A' 'true'
    CALL MOTOR.START 'A' 5.0
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
SUB_CLOSE:
    CALL MOTOR.START 'A' -30.0
    DATA32 milliseconds164
	MOVEF_32 1000.0 milliseconds164
	DATA32 timer164
	TIMER_WAIT milliseconds164 timer164
	TIMER_READY timer164
    CALL MOTOR.STOP 'A' 'true'
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_HSV1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else172_1
    JR_LTEQF VSRED_M VSBLUE_M else172_1
    MOVEF_F VSRED_M VMAX_M
    JR endif172
  else172_1:
    JR_LTEQF VSGREEN_M VSRED_M else172_2
    JR_LTEQF VSGREEN_M VSBLUE_M else172_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif172
  else172_2:
    JR_LTEQF VSBLUE_M VSRED_M else172_3
    JR_LTEQF VSBLUE_M VSGREEN_M else172_3
    MOVEF_F VSBLUE_M VMAX_M
  else172_3:
  endif172:
    JR_GTEQF VSRED_M VSGREEN_M else173_1
    JR_GTEQF VSRED_M VSBLUE_M else173_1
    MOVEF_F VSRED_M VMIN_M
    JR endif173
  else173_1:
    JR_GTEQF VSGREEN_M VSRED_M else173_2
    JR_GTEQF VSGREEN_M VSBLUE_M else173_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif173
  else173_2:
    JR_GTEQF VSBLUE_M VSRED_M else173_3
    JR_GTEQF VSBLUE_M VSGREEN_M else173_3
    MOVEF_F VSBLUE_M VMIN_M
  else173_3:
  endif173:
    JR_NEQF VMAX_M VMIN_M else174_1
    MOVEF_F 0.0 VH_M
    JR endif174
  else174_1:
    JR_NEQF VSRED_M VMAX_M else175_1
    JR_LTF VSGREEN_M VSBLUE_M else176_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf180
    DATA8 flag180
    DIVF F.0 F.1 tmpf180
    CP_EQF 0.0 F.1 flag180
    SELECTF flag180 0.0 tmpf180 VH_M

    JR endif176
  else176_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf184
    DATA8 flag184
    DIVF F.1 F.2 tmpf184
    CP_EQF 0.0 F.2 flag184
    SELECTF flag184 0.0 tmpf184 F.0

    ADDF F.0 360.0 VH_M
  else176_2:
  endif176:
    JR endif175
  else175_1:
    JR_NEQF VMAX_M VSGREEN_M else186_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf190
    DATA8 flag190
    DIVF F.1 F.2 tmpf190
    CP_EQF 0.0 F.2 flag190
    SELECTF flag190 0.0 tmpf190 F.0

    ADDF F.0 120.0 VH_M
    JR endif186
  else186_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf195
    DATA8 flag195
    DIVF F.1 F.2 tmpf195
    CP_EQF 0.0 F.2 flag195
    SELECTF flag195 0.0 tmpf195 F.0

    ADDF F.0 240.0 VH_M
  else186_2:
  endif186:
  else175_2:
  endif175:
  else174_2:
  endif174:
    JR_NEQF VMAX_M 0.0 else197_1
    MOVEF_F 0.0 VS_M
    JR endif197
  else197_1:
    DATAF tmpf198
    DATA8 flag198
    DIVF VMIN_M VMAX_M tmpf198
    CP_EQF 0.0 VMAX_M flag198
    SELECTF flag198 0.0 tmpf198 F.0

    SUBF 1.0 F.0 VS_M
  else197_2:
  endif197:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 11.0 and202
    JR_LTF VH_M 29.0 or201
  and202:
    JR_LTEQF VH_M 342.0 else200_1
    JR_GTEQF VH_M 350.0 else200_1
  or201:
    MOVEF_F 5.0 VCOLOR_M
    JR endif200
  else200_1:
    JR_LTEQF VSRED_M 50.0 else200_2
    JR_GTEQF VSRED_M 110.0 else200_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif200
  else200_2:
    JR_LTEQF VSRED_M 110.0 else200_3
    JR_GTEQF VSRED_M 320.0 else200_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif200
  else200_3:
    MOVEF_F 0.0 VCOLOR_M
  else200_4:
  endif200:
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
RETSUB_HSV1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV1:
SUB_HSV4:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 4.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else211_1
    JR_LTEQF VSRED_M VSBLUE_M else211_1
    MOVEF_F VSRED_M VMAX_M
    JR endif211
  else211_1:
    JR_LTEQF VSGREEN_M VSRED_M else211_2
    JR_LTEQF VSGREEN_M VSBLUE_M else211_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif211
  else211_2:
    JR_LTEQF VSBLUE_M VSRED_M else211_3
    JR_LTEQF VSBLUE_M VSGREEN_M else211_3
    MOVEF_F VSBLUE_M VMAX_M
  else211_3:
  endif211:
    JR_GTEQF VSRED_M VSGREEN_M else212_1
    JR_GTEQF VSRED_M VSBLUE_M else212_1
    MOVEF_F VSRED_M VMIN_M
    JR endif212
  else212_1:
    JR_GTEQF VSGREEN_M VSRED_M else212_2
    JR_GTEQF VSGREEN_M VSBLUE_M else212_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif212
  else212_2:
    JR_GTEQF VSBLUE_M VSRED_M else212_3
    JR_GTEQF VSBLUE_M VSGREEN_M else212_3
    MOVEF_F VSBLUE_M VMIN_M
  else212_3:
  endif212:
    JR_NEQF VMAX_M VMIN_M else213_1
    MOVEF_F 0.0 VH_M
    JR endif213
  else213_1:
    JR_NEQF VSRED_M VMAX_M else214_1
    JR_LTF VSGREEN_M VSBLUE_M else215_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf219
    DATA8 flag219
    DIVF F.0 F.1 tmpf219
    CP_EQF 0.0 F.1 flag219
    SELECTF flag219 0.0 tmpf219 VH_M

    JR endif215
  else215_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 F.2 tmpf223
    CP_EQF 0.0 F.2 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    ADDF F.0 360.0 VH_M
  else215_2:
  endif215:
    JR endif214
  else214_1:
    JR_NEQF VMAX_M VSGREEN_M else225_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf229
    DATA8 flag229
    DIVF F.1 F.2 tmpf229
    CP_EQF 0.0 F.2 flag229
    SELECTF flag229 0.0 tmpf229 F.0

    ADDF F.0 120.0 VH_M
    JR endif225
  else225_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf234
    DATA8 flag234
    DIVF F.1 F.2 tmpf234
    CP_EQF 0.0 F.2 flag234
    SELECTF flag234 0.0 tmpf234 F.0

    ADDF F.0 240.0 VH_M
  else225_2:
  endif225:
  else214_2:
  endif214:
  else213_2:
  endif213:
    JR_NEQF VMAX_M 0.0 else236_1
    MOVEF_F 0.0 VS_M
    JR endif236
  else236_1:
    DATAF tmpf237
    DATA8 flag237
    DIVF VMIN_M VMAX_M tmpf237
    CP_EQF 0.0 VMAX_M flag237
    SELECTF flag237 0.0 tmpf237 F.0

    SUBF 1.0 F.0 VS_M
  else236_2:
  endif236:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 3.0 and241
    JR_LTF VH_M 27.0 or240
  and241:
    JR_LTEQF VH_M 307.0 else239_1
    JR_GTEQF VH_M 345.0 else239_1
  or240:
    MOVEF_F 5.0 VCOLOR_M
    JR endif239
  else239_1:
    JR_LTEQF VSRED_M 13.0 else239_2
    JR_GTEQF VSRED_M 28.0 else239_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif239
  else239_2:
    JR_GTF VSRED_M 28.0 or242
    JR_GTEQF VSRED_M 20.0 else239_3
    JR_LTEQF VSRED_M 15.0 else239_3
  or242:
    MOVEF_F 6.0 VCOLOR_M
    JR endif239
  else239_3:
    MOVEF_F 0.0 VCOLOR_M
  else239_4:
  endif239:
    MOVEF_F VCOLOR_M VN_M
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 70.0 20.0 2.0 S.0
RETSUB_HSV4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV4:
SUB_FINISH:
    JR_NEQF VSTART_M 1.0 else245_1
    MOVEF_F 2.0 VFINISH_M
    JR endif245
  else245_1:
    MOVEF_F 1.0 VFINISH_M
  else245_2:
  endif245:
RETSUB_FINISH:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FINISH:
SUB_WATER:
    ADDF VRED_M 1.0 VREDD_M
    JR_EQF VID_M 2.0 or248
    JR_EQF VID_M 6.0 or248
    JR_EQF VID_M 9.0 or248
    JR_NEQF VID_M 10.0 else247_1
  or248:
    MOVEF_F 230.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB249:
    CALL MOTOR.SCHEDULE 'D' -35.0 0.0 360.0 0.0 'true' 

	DATA8 layer250
	DATA8 nos250
	DATA8 busy250
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer250 nos250
	JR_EQ8 0 nos250 motornotbusy250
  motorwaiting250:
	OUTPUT_TEST layer250 nos250 busy250
	JR_EQ8 busy250 0 motornotbusy250
	SLEEP
	JR motorwaiting250
  motornotbusy250:
    MOVEF_F 230.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB251:
    JR endif247
  else247_1:
    CALL MOTOR.SCHEDULE 'D' -35.0 0.0 360.0 0.0 'true' 

	DATA8 layer252
	DATA8 nos252
	DATA8 busy252
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer252 nos252
	JR_EQ8 0 nos252 motornotbusy252
  motorwaiting252:
	OUTPUT_TEST layer252 nos252 busy252
	JR_EQ8 busy252 0 motornotbusy252
	SLEEP
	JR motorwaiting252
  motornotbusy252:
  else247_2:
  endif247:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_CUBE:
    CALL LCD.CLEAR
    ADDF VID_M 1.0 VID_M
    DATA32 milliseconds256
	MOVEF_32 300.0 milliseconds256
	DATA32 timer256
	TIMER_WAIT milliseconds256 timer256
	TIMER_READY timer256
    JR_EQF VID_M 1.0 or258
    JR_EQF VID_M 2.0 or258
    JR_EQF VID_M 4.0 or258
    JR_EQF VID_M 5.0 or258
    JR_EQF VID_M 8.0 or258
    JR_EQF VID_M 9.0 or258
    JR_NEQF VID_M 11.0 else257_1
  or258:
    WRITE32 ENDSUB_HSV4:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB259:
    JR endif257
  else257_1:
    WRITE32 ENDSUB_HSV1:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB260:
  else257_2:
  endif257:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 70.0 50.0 1.0 S.0
    STRINGS VALUE_FORMATTED VSRED_M '%g' 99 S.1
    CALL TEXT.APPEND 'R:' S.1 S.0
    CALL LCD.TEXT 1.0 70.0 80.0 1.0 S.0
    JR_NEQF VCOLOR_M 5.0 else267_1
    WRITE32 ENDSUB_WATER:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB268:
    JR endif267
  else267_1:
    JR_NEQF VCOLOR_M 1.0 else267_2
    JR_EQF VBLACK_M 1.0 else269_1
    JR_EQF VID_M 1.0 or271
    JR_NEQF VID_M 2.0 else270_1
  or271:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB272:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB273:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB274:
    WRITE32 ENDSUB_CLOSE:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB275:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB276:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB277:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB278:
    JR endif270
  else270_1:
    JR_EQF VID_M 5.0 or279
    JR_EQF VID_M 9.0 or279
    JR_NEQF VID_M 11.0 else270_2
  or279:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB280:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB281:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB282:
    WRITE32 ENDSUB_CLOSE:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB283:
    MOVEF_F 115.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB284:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB285:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB286:
    JR endif270
  else270_2:
    JR_EQF VID_M 6.0 or287
    JR_EQF VID_M 10.0 or287
    JR_NEQF VID_M 12.0 else270_3
  or287:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB288:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB289:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB290:
    WRITE32 ENDSUB_CLOSE:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB291:
    MOVEF_F 105.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB292:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB293:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB294:
    JR endif270
  else270_3:
    JR_NEQF VID_M 3.0 else270_4
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB295:
    MOVEF_F 195.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB296:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB297:
    WRITE32 ENDSUB_CLOSE:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB298:
    MOVEF_F 195.0 VGRAD_M
    MULF 1168.08 VGRAD_M F.0
    DATAF tmpf300
    DATA8 flag300
    DIVF F.0 360.0 tmpf300
    CP_EQF 0.0 360.0 flag300
    SELECTF flag300 0.0 tmpf300 VL_M

    DATAF tmpf301
    DATA8 flag301
    DIVF VL_M 257.48 tmpf301
    CP_EQF 0.0 257.48 flag301
    SELECTF flag301 0.0 tmpf301 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'c' -40.0
  while305:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_M endwhile305
  whilebody305:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_M whilebody305
  endwhile305:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds312
	MOVEF_32 2500.0 milliseconds312
	DATA32 timer312
	TIMER_WAIT milliseconds312 timer312
	TIMER_READY timer312
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB313:
    JR endif270
  else270_4:
    JR_NEQF VID_M 4.0 else270_5
    MOVEF_F 130.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB314:
    MOVEF_F 133.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB315:
    WRITE32 ENDSUB_CLOSE:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB316:
    MOVEF_F 110.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB317:
    MOVEF_F 130.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB318:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds320
	MOVEF_32 2500.0 milliseconds320
	DATA32 timer320
	TIMER_WAIT milliseconds320 timer320
	TIMER_READY timer320
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB321:
    JR endif270
  else270_5:
    JR_NEQF VID_M 7.0 else270_6
    MOVEF_F 135.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB322:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB323:
    WRITE32 ENDSUB_CLOSE:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB324:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB325:
    MOVEF_F 135.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB326:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds328
	MOVEF_32 2500.0 milliseconds328
	DATA32 timer328
	TIMER_WAIT milliseconds328 timer328
	TIMER_READY timer328
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB329:
    JR endif270
  else270_6:
    JR_NEQF VID_M 8.0 else270_7
    MOVEF_F 145.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB330:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB331:
    WRITE32 ENDSUB_CLOSE:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB332:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB333:
    MOVEF_F 145.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB334:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds336
	MOVEF_32 2500.0 milliseconds336
	DATA32 timer336
	TIMER_WAIT milliseconds336 timer336
	TIMER_READY timer336
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB337:
  else270_7:
  endif270:
    MOVEF_F 1.0 VBLACK_M
  else269_1:
  endif269:
    JR endif267
  else267_2:
    JR_NEQF VCOLOR_M 6.0 else267_3
    JR_NEQF VZONE1_M 0.0 else338_1
    JR_EQF VID_M 1.0 or340
    JR_NEQF VID_M 2.0 else339_1
  or340:
    MOVEF_F 1.0 VZONE1_M
    JR endif339
  else339_1:
    JR_EQF VID_M 3.0 or341
    JR_NEQF VID_M 4.0 else339_2
  or341:
    MOVEF_F 2.0 VZONE1_M
    JR endif339
  else339_2:
    JR_EQF VID_M 5.0 or342
    JR_NEQF VID_M 6.0 else339_3
  or342:
    MOVEF_F 3.0 VZONE1_M
    JR endif339
  else339_3:
    JR_EQF VID_M 7.0 or343
    JR_NEQF VID_M 8.0 else339_4
  or343:
    MOVEF_F 4.0 VZONE1_M
    JR endif339
  else339_4:
    JR_EQF VID_M 9.0 or344
    JR_NEQF VID_M 10.0 else339_5
  or344:
    MOVEF_F 5.0 VZONE1_M
    JR endif339
  else339_5:
    JR_EQF VID_M 11.0 or345
    JR_NEQF VID_M 12.0 else339_6
  or345:
    MOVEF_F 6.0 VZONE1_M
  else339_6:
  endif339:
    JR endif338
  else338_1:
    JR_EQF VID_M 1.0 or347
    JR_NEQF VID_M 2.0 else346_1
  or347:
    MOVEF_F 1.0 VZONE2_M
    JR endif346
  else346_1:
    JR_EQF VID_M 3.0 or348
    JR_NEQF VID_M 4.0 else346_2
  or348:
    MOVEF_F 2.0 VZONE2_M
    JR endif346
  else346_2:
    JR_EQF VID_M 5.0 or349
    JR_NEQF VID_M 6.0 else346_3
  or349:
    MOVEF_F 3.0 VZONE2_M
    JR endif346
  else346_3:
    JR_EQF VID_M 7.0 or350
    JR_NEQF VID_M 8.0 else346_4
  or350:
    MOVEF_F 4.0 VZONE2_M
    JR endif346
  else346_4:
    JR_EQF VID_M 9.0 or351
    JR_NEQF VID_M 10.0 else346_5
  or351:
    MOVEF_F 5.0 VZONE2_M
    JR endif346
  else346_5:
    JR_EQF VID_M 11.0 or352
    JR_NEQF VID_M 12.0 else346_6
  or352:
    MOVEF_F 6.0 VZONE2_M
  else346_6:
  endif346:
  else338_2:
  endif338:
  else267_3:
  endif267:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_START_1:
    JR_NEQF VSTART_7 1.0 else353_1
    MOVEF_F 165.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB354:
    MOVEF_F 65.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB355:
    CALL MOTOR.START 'BC' -15.0
    DATA32 milliseconds357
	MOVEF_32 3000.0 milliseconds357
	DATA32 timer357
	TIMER_WAIT milliseconds357 timer357
	TIMER_READY timer357
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 900.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB359:
    CALL MOTOR.STOP 'BC' 'false'
    CALL MOTOR.START 'BC' 30.0
    DATA32 milliseconds362
	MOVEF_32 2000.0 milliseconds362
	DATA32 timer362
	TIMER_WAIT milliseconds362 timer362
	TIMER_READY timer362
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB363:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB364:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds366
	MOVEF_32 2500.0 milliseconds366
	DATA32 timer366
	TIMER_WAIT milliseconds366 timer366
	TIMER_READY timer366
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB367:
    JR endif353
  else353_1:
    MOVEF_F 60.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB368:
    MOVEF_F 60.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB369:
    MOVEF_F 1.0 VFINISH_7
  else353_2:
  endif353:
RETSUB_START_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
