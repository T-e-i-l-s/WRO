DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VK_M
DATAF VV_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOLOR_M
DATAF VN_M
DATAF VID_M
DATAF VSP_1
DATAF VL_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VL_3
DATAF VGRAD_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAF VSPEED_7
DATAF VSPEED_8
DATAF VPLACE_9

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSPEED_7
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VPLACE_9
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSPEED_7
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VPLACE_9
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 5.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 5.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 1.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 2.0 VPLACE_9
    WRITE32 ENDSUB_START_1:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_1
CALLSUB286:
    CALL MOTOR.STARTPOWER 'BC' 60.0
    DATA32 milliseconds288
	MOVEF_32 2500.0 milliseconds288
	DATA32 timer288
	TIMER_WAIT milliseconds288 timer288
	TIMER_READY timer288
    CALL MOTOR.STOP 'BC' 'false'
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while291:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile291
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile291
  whilebody291:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 and294
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody291
  and294:
  endwhile291:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB298:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB299:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA32 milliseconds301
	MOVEF_32 1500.0 milliseconds301
	DATA32 timer301
	TIMER_WAIT milliseconds301 timer301
	TIMER_READY timer301
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB302:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB303:
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while305:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 25.0 endwhile305
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 25.0 endwhile305
  whilebody305:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 25.0 and308
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 25.0 whilebody305
  and308:
  endwhile305:
    CALL MOTOR.STARTPOWER 'BC' 20.0
  while312:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile312
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile312
  whilebody312:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and315
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody312
  and315:
  endwhile312:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB319:
    CALL MOTOR.RESETCOUNT 'BC'
  while321:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf325
    DATA8 flag325
    DIVF F.1 2.0 tmpf325
    CP_EQF 0.0 2.0 flag325
    SELECTF flag325 0.0 tmpf325 F.0

    JR_GTEQF F.0 100.0 endwhile321
  whilebody321:
    WRITE32 ENDSUB_LINE:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB326:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf330
    DATA8 flag330
    DIVF F.1 2.0 tmpf330
    CP_EQF 0.0 2.0 flag330
    SELECTF flag330 0.0 tmpf330 F.0

    JR_LTF F.0 100.0 whilebody321
  endwhile321:
  while331:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile331
  whilebody331:
    WRITE32 ENDSUB_LINE:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB333:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody331
  endwhile331:
    WRITE32 ENDSUB_LEFT:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB335:
    CALL MOTOR.RESETCOUNT 'BC'
  while337:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf341
    DATA8 flag341
    DIVF F.1 2.0 tmpf341
    CP_EQF 0.0 2.0 flag341
    SELECTF flag341 0.0 tmpf341 F.0

    JR_GTEQF F.0 250.0 endwhile337
  whilebody337:
    WRITE32 ENDSUB_LINE:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB342:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf346
    DATA8 flag346
    DIVF F.1 2.0 tmpf346
    CP_EQF 0.0 2.0 flag346
    SELECTF flag346 0.0 tmpf346 F.0

    JR_LTF F.0 250.0 whilebody337
  endwhile337:
    MOVEF_F 0.5 VK_M
    MOVEF_F 15.0 VV_M
  while347:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or348
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile347
  or348:
  whilebody347:
    WRITE32 ENDSUB_LINE:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB351:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody347
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody347
  endwhile347:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 222.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB355:
    WRITE32 ENDSUB_CUBE:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB356:
    MOVEF_F 375.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB357:
    WRITE32 ENDSUB_CUBE:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB358:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB359:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB360:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds362
	MOVEF_32 1500.0 milliseconds362
	DATA32 timer362
	TIMER_WAIT milliseconds362 timer362
	TIMER_READY timer362
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB363:
    WRITE32 ENDSUB_CUBE:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB364:
    WRITE32 ENDSUB_CUBE:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB365:
    MOVEF_F 405.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB366:
    WRITE32 ENDSUB_CUBE:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB367:
    MOVEF_F 260.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB368:
    WRITE32 ENDSUB_CUBE:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB369:
    MOVEF_F 140.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB370:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB371:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds373
	MOVEF_32 2500.0 milliseconds373
	DATA32 timer373
	TIMER_WAIT milliseconds373 timer373
	TIMER_READY timer373
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB374:
    WRITE32 ENDSUB_CUBE:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB375:
    WRITE32 ENDSUB_CUBE:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB376:
    MOVEF_F 555.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB377:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB378:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds380
	MOVEF_32 1500.0 milliseconds380
	DATA32 timer380
	TIMER_WAIT milliseconds380 timer380
	TIMER_READY timer380
    MOVEF_F 325.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB381:
    WRITE32 ENDSUB_CUBE:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB382:
    WRITE32 ENDSUB_CUBE:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB383:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB384:
    WRITE32 ENDSUB_CUBE:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB385:
    WRITE32 ENDSUB_CUBE:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB386:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB387:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB388:
    MOVEF_F 300.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB389:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    CALL MOTOR.RESETCOUNT 'BC'
  while391:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 2.0 tmpf395
    CP_EQF 0.0 2.0 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    JR_GTEQF F.0 650.0 endwhile391
  whilebody391:
    WRITE32 ENDSUB_LINE:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB396:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf400
    DATA8 flag400
    DIVF F.1 2.0 tmpf400
    CP_EQF 0.0 2.0 flag400
    SELECTF flag400 0.0 tmpf400 F.0

    JR_LTF F.0 650.0 whilebody391
  endwhile391:
    MOVEF_F 0.5 VK_M
    MOVEF_F 25.0 VV_M
  while401:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or402
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile401
  or402:
  whilebody401:
    WRITE32 ENDSUB_LINE:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody401
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody401
  endwhile401:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    WRITE32 ENDSUB_OPEN:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB409:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.0 F.1 tmpf21
    CP_EQF 0.0 F.1 flag21
    SELECTF flag21 0.0 tmpf21 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf26
    DATA8 flag26
    DIVF F.0 F.1 tmpf26
    CP_EQF 0.0 F.1 flag26
    SELECTF flag26 0.0 tmpf26 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB27:
    WRITE32 ENDSUB_SEN2:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB28:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf43
    DATA8 flag43
    DIVF F.1 2.0 tmpf43
    CP_EQF 0.0 2.0 flag43
    SELECTF flag43 0.0 tmpf43 F.0

    JR_GTF F.0 VL_1 endwhile37
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_LTEQF F.0 VL_1 whilebody37
  endwhile37:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf60
    DATA8 flag60
    DIVF VMM_2 257.48 tmpf60
    CP_EQF 0.0 257.48 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VSP_2 VSP_1
    MOVEF_F VL_2 VL_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB63:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 90.8808451141836 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer64
	DATA8 nos64
	DATA8 busy64
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer64 nos64
	JR_EQ8 0 nos64 motornotbusy64
  motorwaiting64:
	OUTPUT_TEST layer64 nos64 busy64
	JR_EQ8 busy64 0 motornotbusy64
	SLEEP
	JR motorwaiting64
  motornotbusy64:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 170.0 'true'

	DATA8 layer65
	DATA8 nos65
	DATA8 busy65
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer65 nos65
	JR_EQ8 0 nos65 motornotbusy65
  motorwaiting65:
	OUTPUT_TEST layer65 nos65 busy65
	JR_EQ8 busy65 0 motornotbusy65
	SLEEP
	JR motorwaiting65
  motornotbusy65:
  while66:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile66
  whilebody66:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody66
  endwhile66:
    CALL MOTOR.STOP 'bc' 'true'
  while71:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile71
  whilebody71:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody71
  endwhile71:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 69.9083423955259 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer76
	DATA8 nos76
	DATA8 busy76
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer76 nos76
	JR_EQ8 0 nos76 motornotbusy76
  motorwaiting76:
	OUTPUT_TEST layer76 nos76 busy76
	JR_EQ8 busy76 0 motornotbusy76
	SLEEP
	JR motorwaiting76
  motornotbusy76:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 170.0 'true'

	DATA8 layer77
	DATA8 nos77
	DATA8 busy77
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer77 nos77
	JR_EQ8 0 nos77 motornotbusy77
  motorwaiting77:
	OUTPUT_TEST layer77 nos77 busy77
	JR_EQ8 busy77 0 motornotbusy77
	SLEEP
	JR motorwaiting77
  motornotbusy77:
  while78:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile78
  whilebody78:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody78
  endwhile78:
    CALL MOTOR.STOP 'bc' 'true'
  while83:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile83
  whilebody83:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody83
  endwhile83:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_1:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf89
    DATA8 flag89
    DIVF F.0 360.0 tmpf89
    CP_EQF 0.0 360.0 flag89
    SELECTF flag89 0.0 tmpf89 VL_3

    DATAF tmpf90
    DATA8 flag90
    DIVF VL_3 257.48 tmpf90
    CP_EQF 0.0 257.48 flag90
    SELECTF flag90 0.0 tmpf90 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 35.0
  while94:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_GTEQF F.0 VL_3 endwhile94
  whilebody94:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_LTF F.0 VL_3 whilebody94
  endwhile94:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_1:
SUB_RIGHT1_1:
    MULF 1168.08 VGRAD_4 F.0
    DATAF tmpf99
    DATA8 flag99
    DIVF F.0 360.0 tmpf99
    CP_EQF 0.0 360.0 flag99
    SELECTF flag99 0.0 tmpf99 VL_4

    DATAF tmpf100
    DATA8 flag100
    DIVF VL_4 257.48 tmpf100
    CP_EQF 0.0 257.48 flag100
    SELECTF flag100 0.0 tmpf100 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 35.0
  while104:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_4 endwhile104
  whilebody104:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_4 whilebody104
  endwhile104:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_1:
SUB_LEFT2_1:
    MULF 1168.08 VGRAD_5 F.1
    DATAF tmpf109
    DATA8 flag109
    DIVF F.1 360.0 tmpf109
    CP_EQF 0.0 360.0 flag109
    SELECTF flag109 0.0 tmpf109 F.0

    DATAF tmpf110
    DATA8 flag110
    DIVF F.0 2.0 tmpf110
    CP_EQF 0.0 2.0 flag110
    SELECTF flag110 0.0 tmpf110 VL_5

    DATAF tmpf111
    DATA8 flag111
    DIVF VL_5 257.48 tmpf111
    CP_EQF 0.0 257.48 flag111
    SELECTF flag111 0.0 tmpf111 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 30.0
    CALL MOTOR.STARTPOWER 'B' -30.0
  while116:
    CALL MOTOR.GETCOUNT 'C' F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf121
    DATA8 flag121
    DIVF F.1 2.0 tmpf121
    CP_EQF 0.0 2.0 flag121
    SELECTF flag121 0.0 tmpf121 F.0

    JR_GTEQF F.0 VL_5 endwhile116
  whilebody116:
    CALL MOTOR.GETCOUNT 'C' F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf126
    DATA8 flag126
    DIVF F.1 2.0 tmpf126
    CP_EQF 0.0 2.0 flag126
    SELECTF flag126 0.0 tmpf126 F.0

    JR_LTF F.0 VL_5 whilebody116
  endwhile116:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1168.08 VGRAD_6 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.1 360.0 tmpf129
    CP_EQF 0.0 360.0 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    DATAF tmpf130
    DATA8 flag130
    DIVF F.0 2.0 tmpf130
    CP_EQF 0.0 2.0 flag130
    SELECTF flag130 0.0 tmpf130 VL_6

    DATAF tmpf131
    DATA8 flag131
    DIVF VL_6 257.48 tmpf131
    CP_EQF 0.0 257.48 flag131
    SELECTF flag131 0.0 tmpf131 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' -30.0
    CALL MOTOR.STARTPOWER 'B' 30.0
  while136:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf141
    DATA8 flag141
    DIVF F.1 2.0 tmpf141
    CP_EQF 0.0 2.0 flag141
    SELECTF flag141 0.0 tmpf141 F.0

    JR_GTEQF F.0 VL_6 endwhile136
  whilebody136:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf146
    DATA8 flag146
    DIVF F.1 2.0 tmpf146
    CP_EQF 0.0 2.0 flag146
    SELECTF flag146 0.0 tmpf146 F.0

    JR_LTF F.0 VL_6 whilebody136
  endwhile136:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_STEN_1:
RETSUB_STEN_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_STEN_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_HSV1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else157_1
    JR_LTEQF VSRED_M VSBLUE_M else157_1
    MOVEF_F VSRED_M VMAX_M
    JR endif157
  else157_1:
    JR_LTEQF VSGREEN_M VSRED_M else157_2
    JR_LTEQF VSGREEN_M VSBLUE_M else157_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif157
  else157_2:
    JR_LTEQF VSBLUE_M VSRED_M else157_3
    JR_LTEQF VSBLUE_M VSGREEN_M else157_3
    MOVEF_F VSBLUE_M VMAX_M
  else157_3:
  endif157:
    JR_GTEQF VSRED_M VSGREEN_M else158_1
    JR_GTEQF VSRED_M VSBLUE_M else158_1
    MOVEF_F VSRED_M VMIN_M
    JR endif158
  else158_1:
    JR_GTEQF VSGREEN_M VSRED_M else158_2
    JR_GTEQF VSGREEN_M VSBLUE_M else158_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif158
  else158_2:
    JR_GTEQF VSBLUE_M VSRED_M else158_3
    JR_GTEQF VSBLUE_M VSGREEN_M else158_3
    MOVEF_F VSBLUE_M VMIN_M
  else158_3:
  endif158:
    JR_NEQF VMAX_M VMIN_M else159_1
    MOVEF_F 0.0 VH_M
    JR endif159
  else159_1:
    JR_NEQF VSRED_M VMAX_M else160_1
    JR_LTF VSGREEN_M VSBLUE_M else161_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf165
    DATA8 flag165
    DIVF F.0 F.1 tmpf165
    CP_EQF 0.0 F.1 flag165
    SELECTF flag165 0.0 tmpf165 VH_M

    JR endif161
  else161_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf169
    DATA8 flag169
    DIVF F.1 F.2 tmpf169
    CP_EQF 0.0 F.2 flag169
    SELECTF flag169 0.0 tmpf169 F.0

    ADDF F.0 360.0 VH_M
  else161_2:
  endif161:
    JR endif160
  else160_1:
    JR_NEQF VMAX_M VSGREEN_M else171_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf175
    DATA8 flag175
    DIVF F.1 F.2 tmpf175
    CP_EQF 0.0 F.2 flag175
    SELECTF flag175 0.0 tmpf175 F.0

    ADDF F.0 120.0 VH_M
    JR endif171
  else171_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf180
    DATA8 flag180
    DIVF F.1 F.2 tmpf180
    CP_EQF 0.0 F.2 flag180
    SELECTF flag180 0.0 tmpf180 F.0

    ADDF F.0 240.0 VH_M
  else171_2:
  endif171:
  else160_2:
  endif160:
  else159_2:
  endif159:
    JR_NEQF VMAX_M 0.0 else182_1
    MOVEF_F 0.0 VS_M
    JR endif182
  else182_1:
    DATAF tmpf183
    DATA8 flag183
    DIVF VMIN_M VMAX_M tmpf183
    CP_EQF 0.0 VMAX_M flag183
    SELECTF flag183 0.0 tmpf183 F.0

    SUBF 1.0 F.0 VS_M
  else182_2:
  endif182:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 0.0 and187
    JR_LTF VH_M 16.0 or186
  and187:
    JR_LTEQF VH_M 350.0 else185_1
  or186:
    MOVEF_F 5.0 VCOLOR_M
    JR endif185
  else185_1:
    JR_LTEQF VSRED_M 25.0 else185_2
    JR_GTEQF VSRED_M 100.0 else185_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif185
  else185_2:
    JR_LTEQF VSRED_M 100.0 else185_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif185
  else185_3:
    MOVEF_F 0.0 VCOLOR_M
  else185_4:
  endif185:
    MOVEF_F VCOLOR_M VN_M
RETSUB_HSV1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV1:
SUB_HSV4:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 4.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else194_1
    JR_LTEQF VSRED_M VSBLUE_M else194_1
    MOVEF_F VSRED_M VMAX_M
    JR endif194
  else194_1:
    JR_LTEQF VSGREEN_M VSRED_M else194_2
    JR_LTEQF VSGREEN_M VSBLUE_M else194_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif194
  else194_2:
    JR_LTEQF VSBLUE_M VSRED_M else194_3
    JR_LTEQF VSBLUE_M VSGREEN_M else194_3
    MOVEF_F VSBLUE_M VMAX_M
  else194_3:
  endif194:
    JR_GTEQF VSRED_M VSGREEN_M else195_1
    JR_GTEQF VSRED_M VSBLUE_M else195_1
    MOVEF_F VSRED_M VMIN_M
    JR endif195
  else195_1:
    JR_GTEQF VSGREEN_M VSRED_M else195_2
    JR_GTEQF VSGREEN_M VSBLUE_M else195_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif195
  else195_2:
    JR_GTEQF VSBLUE_M VSRED_M else195_3
    JR_GTEQF VSBLUE_M VSGREEN_M else195_3
    MOVEF_F VSBLUE_M VMIN_M
  else195_3:
  endif195:
    JR_NEQF VMAX_M VMIN_M else196_1
    MOVEF_F 0.0 VH_M
    JR endif196
  else196_1:
    JR_NEQF VSRED_M VMAX_M else197_1
    JR_LTF VSGREEN_M VSBLUE_M else198_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf202
    DATA8 flag202
    DIVF F.0 F.1 tmpf202
    CP_EQF 0.0 F.1 flag202
    SELECTF flag202 0.0 tmpf202 VH_M

    JR endif198
  else198_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf206
    DATA8 flag206
    DIVF F.1 F.2 tmpf206
    CP_EQF 0.0 F.2 flag206
    SELECTF flag206 0.0 tmpf206 F.0

    ADDF F.0 360.0 VH_M
  else198_2:
  endif198:
    JR endif197
  else197_1:
    JR_NEQF VMAX_M VSGREEN_M else208_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf212
    DATA8 flag212
    DIVF F.1 F.2 tmpf212
    CP_EQF 0.0 F.2 flag212
    SELECTF flag212 0.0 tmpf212 F.0

    ADDF F.0 120.0 VH_M
    JR endif208
  else208_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf217
    DATA8 flag217
    DIVF F.1 F.2 tmpf217
    CP_EQF 0.0 F.2 flag217
    SELECTF flag217 0.0 tmpf217 F.0

    ADDF F.0 240.0 VH_M
  else208_2:
  endif208:
  else197_2:
  endif197:
  else196_2:
  endif196:
    JR_NEQF VMAX_M 0.0 else219_1
    MOVEF_F 0.0 VS_M
    JR endif219
  else219_1:
    DATAF tmpf220
    DATA8 flag220
    DIVF VMIN_M VMAX_M tmpf220
    CP_EQF 0.0 VMAX_M flag220
    SELECTF flag220 0.0 tmpf220 F.0

    SUBF 1.0 F.0 VS_M
  else219_2:
  endif219:
    MOVEF_F VMAX_M VV_M
    JR_GTEQF VH_M 17.0 else222_1
    MOVEF_F 5.0 VCOLOR_M
    JR endif222
  else222_1:
    JR_LTEQF VSRED_M 6.0 else222_2
    JR_GTEQF VSRED_M 28.0 else222_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif222
  else222_2:
    JR_LTEQF VSRED_M 27.0 else222_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif222
  else222_3:
    MOVEF_F 0.0 VCOLOR_M
  else222_4:
  endif222:
    MOVEF_F VCOLOR_M VN_M
RETSUB_HSV4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV4:
SUB_OPEN:
    CALL MOTOR.START 'A' 30.0
    DATA32 milliseconds224
	MOVEF_32 1000.0 milliseconds224
	DATA32 timer224
	TIMER_WAIT milliseconds224 timer224
	TIMER_READY timer224
    CALL MOTOR.STOP 'A' 'true'
    CALL MOTOR.START 'A' 5.0
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
SUB_CLOSE_1:
    CALL MOTOR.START 'A' -30.0
    DATA32 milliseconds228
	MOVEF_32 1000.0 milliseconds228
	DATA32 timer228
	TIMER_WAIT milliseconds228 timer228
	TIMER_READY timer228
    CALL MOTOR.STOP 'A' 'true'
RETSUB_CLOSE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE_1:
SUB_WATER:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VID_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    JR_EQF VID_M 2.0 or234
    JR_EQF VID_M 6.0 or234
    JR_EQF VID_M 9.0 or234
    JR_NEQF VID_M 10.0 else233_1
  or234:
    MOVEF_F 230.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB235:
    CALL MOTOR.SCHEDULE 'D' -70.0 0.0 360.0 0.0 'true' 

	DATA8 layer236
	DATA8 nos236
	DATA8 busy236
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer236 nos236
	JR_EQ8 0 nos236 motornotbusy236
  motorwaiting236:
	OUTPUT_TEST layer236 nos236 busy236
	JR_EQ8 busy236 0 motornotbusy236
	SLEEP
	JR motorwaiting236
  motornotbusy236:
    MOVEF_F 230.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB237:
    JR endif233
  else233_1:
    CALL MOTOR.SCHEDULE 'D' -70.0 0.0 360.0 0.0 'true' 

	DATA8 layer238
	DATA8 nos238
	DATA8 busy238
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer238 nos238
	JR_EQ8 0 nos238 motornotbusy238
  motorwaiting238:
	OUTPUT_TEST layer238 nos238 busy238
	JR_EQ8 busy238 0 motornotbusy238
	SLEEP
	JR motorwaiting238
  motornotbusy238:
  else233_2:
  endif233:
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_CUBE:
    ADDF VID_M 1.0 VID_M
    DATA32 milliseconds240
	MOVEF_32 600.0 milliseconds240
	DATA32 timer240
	TIMER_WAIT milliseconds240 timer240
	TIMER_READY timer240
    JR_EQF VID_M 1.0 or242
    JR_EQF VID_M 2.0 or242
    JR_EQF VID_M 4.0 or242
    JR_EQF VID_M 5.0 or242
    JR_EQF VID_M 8.0 or242
    JR_EQF VID_M 9.0 or242
    JR_NEQF VID_M 11.0 else241_1
  or242:
    WRITE32 ENDSUB_HSV4:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB243:
    JR endif241
  else241_1:
    WRITE32 ENDSUB_HSV1:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB244:
  else241_2:
  endif241:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 20.0 2.0 S.0
    JR_NEQF VCOLOR_M 5.0 else248_1
    WRITE32 ENDSUB_WATER:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB249:
    JR endif248
  else248_1:
    JR_NEQF VCOLOR_M 1.0 else248_2
    JR_EQF VID_M 1.0 or251
    JR_NEQF VID_M 2.0 else250_1
  or251:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB252:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB253:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB254 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB254:
    MOVEF_F 25.0 VSPEED_8
    WRITE32 ENDSUB_CLOSE_1:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE_1
CALLSUB255:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB256:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB257:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB258:
    JR endif250
  else250_1:
    JR_EQF VID_M 5.0 or259
    JR_EQF VID_M 9.0 or259
    JR_NEQF VID_M 11.0 else250_2
  or259:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB260:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB261:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB262:
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_CLOSE_1:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE_1
CALLSUB263:
    MOVEF_F 125.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB264:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB265:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB266:
    JR endif250
  else250_2:
    JR_EQF VID_M 6.0 or267
    JR_EQF VID_M 10.0 or267
    JR_NEQF VID_M 12.0 else250_3
  or267:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB268:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB269:
    MOVEF_F 115.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB270:
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_CLOSE_1:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE_1
CALLSUB271:
    MOVEF_F 115.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB272:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB273:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB274:
  else250_3:
  endif250:
  else248_2:
  endif248:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
SUB_START_1:
    JR_NEQF VPLACE_9 1.0 else275_1
    MOVEF_F 150.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB276:
    MOVEF_F 60.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB277:
    CALL MOTOR.STARTPOWER 'BC' 70.0
    DATA32 milliseconds279
	MOVEF_32 3000.0 milliseconds279
	DATA32 timer279
	TIMER_WAIT milliseconds279 timer279
	TIMER_READY timer279
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB280:
    MOVEF_F 103.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB281:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB282:
    JR endif275
  else275_1:
    JR_NEQF VPLACE_9 2.0 else275_2
    MOVEF_F 60.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB283:
    MOVEF_F 60.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB284:
    JR endif275
  else275_2:
    WRITE32 ENDSUB_FRZ:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB285:
  else275_3:
  endif275:
RETSUB_START_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
