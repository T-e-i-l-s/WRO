DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VBLACK_M
DATAF VGRAD_M
DATAF VMM_M
DATAF VSP_M
ARRAY16 VCOLORS_M 2
DATAF VID_M
DATAF VRED_M
DATAF VSTART_M
DATAF VMSGSZEV3_M
DATAF VMSGSZSLV_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VZONE_M
DATAF VR1_M
DATAF VREDD_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOLOR_M
DATAF VFINISH_M
DATAF VZ_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VL_3
DATAF VGRAD_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAF VSTART_7
DATAF VFINISH_7
DATA32 RUNCOUNTER_OPEN
DATA32 RUNCOUNTER_CLOSE

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VR1_M
    MOVEF_F 0.0 VREDD_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VFINISH_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSTART_7
    MOVEF_F 0.0 VFINISH_7
    MOVE32_32 0 RUNCOUNTER_OPEN
    MOVE32_32 0 RUNCOUNTER_CLOSE
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TOPEN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_OPEN 0
    CALL GETANDINC32 RUNCOUNTER_OPEN -1 RUNCOUNTER_OPEN tmp
    JR_GT32 tmp 1 launch
}
vmthread TCLOSE
{
    DATA32 tmp
  launch:
    CALL PROGRAM_CLOSE 1
    CALL GETANDINC32 RUNCOUNTER_CLOSE -1 RUNCOUNTER_CLOSE tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_OPEN
subcall PROGRAM_CLOSE
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch644
    WRITE32 ENDSUB_OPEN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
  dispatch644:
    JR_NEQ32 SUBPROGRAM 1 dispatch645
    WRITE32 ENDSUB_CLOSE:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
  dispatch645:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VR1_M
    MOVEF_F 0.0 VREDD_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VFINISH_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSTART_7
    MOVEF_F 0.0 VFINISH_7
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    CALL LCD.CLEAR
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 2.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 3.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 4.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 5.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 6.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 7.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 8.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 9.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 10.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 11.0 0.0 VCOLORS_M
    CALL ARRAYSTORE_FLOAT 12.0 0.0 VCOLORS_M
    MOVEF_F 0.0 VID_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VSTART_M
    DATA8 layer18
	DATA8 no18
	DATA8 mode818
	
	MOVEF_8 1.0 no18
	SUB8 no18 1 no18
	DIV8 no18 4 layer18
	MATH MOD8 no18 4 no18

	MOVEF_8 2.0 mode818
	
	INPUT_DEVICE READY_RAW layer18 no18 0 mode818 0
    DATA8 layer19
	DATA8 no19
	DATA8 mode819
	
	MOVEF_8 4.0 no19
	SUB8 no19 1 no19
	DIV8 no19 4 layer19
	MATH MOD8 no19 4 no19

	MOVEF_8 2.0 mode819
	
	INPUT_DEVICE READY_RAW layer19 no19 0 mode819 0
    MOVEF_F 0.0 VMSGSZEV3_M
    MOVEF_F 0.0 VMSGSZSLV_M
    MOVEF_F 0.0 VZONE_M
    MOVEF_F 0.0 VR1_M
    MOVEF_F 1.0 VSTART_7
    WRITE32 ENDSUB_START_1:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_START_1
CALLSUB398:
    CALL MOTOR.STARTPOWER 'BC' 90.0
    DATA32 milliseconds400
	MOVEF_32 1700.0 milliseconds400
	DATA32 timer400
	TIMER_WAIT milliseconds400 timer400
	TIMER_READY timer400
    CALL MOTOR.STOP 'BC' 'false'
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while403:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 27.0 endwhile403
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 27.0 endwhile403
  whilebody403:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 27.0 and406
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 27.0 whilebody403
  and406:
  endwhile403:
    CALL MOTOR.STOP 'BC' 'false'
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB410:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB411:
    CALL MOTOR.STARTPOWER 'BC' -60.0
    DATA32 milliseconds413
	MOVEF_32 1000.0 milliseconds413
	DATA32 timer413
	TIMER_WAIT milliseconds413 timer413
	TIMER_READY timer413
    MOVEF_F 170.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB414:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB415:
    CALL MOTOR.STARTPOWER 'BC' 50.0
  while417:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 endwhile417
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 15.0 endwhile417
  whilebody417:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 and420
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 15.0 whilebody417
  and420:
  endwhile417:
    MOVEF_F 15.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB423:
    CALL MOTOR.STARTPOWER 'BC' 20.0
  while425:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile425
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile425
  whilebody425:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and428
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody425
  and428:
  endwhile425:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB432:
    CALL MOTOR.RESETCOUNT 'BC'
  while434:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf438
    DATA8 flag438
    DIVF F.1 2.0 tmpf438
    CP_EQF 0.0 2.0 flag438
    SELECTF flag438 0.0 tmpf438 F.0

    JR_GTEQF F.0 50.0 endwhile434
  whilebody434:
    WRITE32 ENDSUB_LINE:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB439:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf443
    DATA8 flag443
    DIVF F.1 2.0 tmpf443
    CP_EQF 0.0 2.0 flag443
    SELECTF flag443 0.0 tmpf443 F.0

    JR_LTF F.0 50.0 whilebody434
  endwhile434:
  while444:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile444
  whilebody444:
    WRITE32 ENDSUB_LINE:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB446:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody444
  endwhile444:
    WRITE32 ENDSUB_LEFT:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB448:
    CALL MOTOR.RESETCOUNT 'BC'
  while450:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf454
    DATA8 flag454
    DIVF F.1 2.0 tmpf454
    CP_EQF 0.0 2.0 flag454
    SELECTF flag454 0.0 tmpf454 F.0

    JR_GTEQF F.0 170.0 endwhile450
  whilebody450:
    WRITE32 ENDSUB_LINE:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB455:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf459
    DATA8 flag459
    DIVF F.1 2.0 tmpf459
    CP_EQF 0.0 2.0 flag459
    SELECTF flag459 0.0 tmpf459 F.0

    JR_LTF F.0 170.0 whilebody450
  endwhile450:
    MOVEF_F 1.0 VK_M
    MOVEF_F 30.0 VV_M
  while460:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or461
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile460
  or461:
  whilebody460:
    WRITE32 ENDSUB_LINE:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB464:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody460
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody460
  endwhile460:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 222.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB468:
    WRITE32 ENDSUB_CUBE:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB469:
    MOVEF_F 375.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB470:
    WRITE32 ENDSUB_CUBE:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB471:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB472:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB473:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds475
	MOVEF_32 2000.0 milliseconds475
	DATA32 timer475
	TIMER_WAIT milliseconds475 timer475
	TIMER_READY timer475
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB476:
    WRITE32 ENDSUB_CUBE:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB477:
    WRITE32 ENDSUB_CUBE:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB478:
    MOVEF_F 400.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB479:
    WRITE32 ENDSUB_CUBE:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB480:
    MOVEF_F 275.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB481:
    WRITE32 ENDSUB_CUBE:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB482:
    MOVEF_F 134.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB483:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB484:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds486
	MOVEF_32 2500.0 milliseconds486
	DATA32 timer486
	TIMER_WAIT milliseconds486 timer486
	TIMER_READY timer486
    MOVEF_F 55.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB487:
    WRITE32 ENDSUB_CUBE:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB488:
    WRITE32 ENDSUB_CUBE:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB489:
    MOVEF_F 35.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB490:
    MOVEF_F 35.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB491:
    MOVEF_F 450.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB492:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB493:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds495
	MOVEF_32 1500.0 milliseconds495
	DATA32 timer495
	TIMER_WAIT milliseconds495 timer495
	TIMER_READY timer495
    MOVEF_F 325.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB496:
    WRITE32 ENDSUB_CUBE:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB497:
    WRITE32 ENDSUB_CUBE:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB498:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB499:
    WRITE32 ENDSUB_CUBE:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB500:
    WRITE32 ENDSUB_CUBE:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CUBE
CALLSUB501:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB502:
    MOVEF_F 100.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB503:
    MOVEF_F 300.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB504:
    CALL MOTOR.STARTPOWER 'B' 40.0
  while506:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile506
  whilebody506:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody506
  endwhile506:
  while509:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile509
  whilebody509:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody509
  endwhile509:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 tmp513
    CALL GETANDINC32 RUNCOUNTER_OPEN 1  RUNCOUNTER_OPEN tmp513
    JR_NEQ32 0 tmp513 alreadylaunched513
    OBJECT_START TOPEN
  alreadylaunched513:
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    CALL MOTOR.RESETCOUNT 'BC'
  while515:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf519
    DATA8 flag519
    DIVF F.1 2.0 tmpf519
    CP_EQF 0.0 2.0 flag519
    SELECTF flag519 0.0 tmpf519 F.0

    JR_GTEQF F.0 650.0 endwhile515
  whilebody515:
    WRITE32 ENDSUB_LINE:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB520:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf524
    DATA8 flag524
    DIVF F.1 2.0 tmpf524
    CP_EQF 0.0 2.0 flag524
    SELECTF flag524 0.0 tmpf524 F.0

    JR_LTF F.0 650.0 whilebody515
  endwhile515:
    MOVEF_F 0.5 VK_M
    MOVEF_F 25.0 VV_M
  while525:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or526
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile525
  or526:
  whilebody525:
    WRITE32 ENDSUB_LINE:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB529:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody525
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody525
  endwhile525:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.7 VK_M
    MOVEF_F 45.0 VV_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB533:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB534:
    CALL MOTOR.STARTPOWER 'BC' -60.0
    DATA32 milliseconds536
	MOVEF_32 3000.0 milliseconds536
	DATA32 timer536
	TIMER_WAIT milliseconds536 timer536
	TIMER_READY timer536
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 100.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB538:
    MOVEF_F 600.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB539:
    CALL MOTOR.START 'BC' 50.0
    DATA32 milliseconds541
	MOVEF_32 2000.0 milliseconds541
	DATA32 timer541
	TIMER_WAIT milliseconds541 timer541
	TIMER_READY timer541
    MOVEF_F 220.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB542:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB543:
    CALL MOTOR.STARTPOWER 'BC' -50.0
    DATA32 milliseconds545
	MOVEF_32 2000.0 milliseconds545
	DATA32 timer545
	TIMER_WAIT milliseconds545 timer545
	TIMER_READY timer545
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 310.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB547:
    WRITE32 ENDSUB_CLOSE:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB548:
    JR_NEQF VZONE1_M 0.0 else549_1
    MOVEF_F 1.0 VZONE1_M
  else549_1:
  endif549:
    JR_NEQF VZONE2_M 0.0 else550_1
    MOVEF_F 5.0 VZONE2_M
  else550_1:
  endif550:
    JR_NEQF VZONE1_M 4.0 else551_1
    MOVEF_F VZONE1_M VZ_M
    JR endif551
  else551_1:
    JR_NEQF VZONE2_M 4.0 else551_2
    MOVEF_F VZONE2_M VZ_M
    JR endif551
  else551_2:
    JR_NEQF VZONE1_M 5.0 else551_3
    MOVEF_F VZONE1_M VZ_M
    JR endif551
  else551_3:
    JR_NEQF VZONE2_M 5.0 else551_4
    MOVEF_F VZONE2_M VZ_M
    JR endif551
  else551_4:
    JR_NEQF VZONE1_M 6.0 else551_5
    MOVEF_F VZONE1_M VZ_M
    JR endif551
  else551_5:
    JR_NEQF VZONE2_M 6.0 else551_6
    MOVEF_F VZONE2_M VZ_M
    JR endif551
  else551_6:
    JR_NEQF VZONE1_M 1.0 else551_7
    MOVEF_F VZONE1_M VZ_M
    JR endif551
  else551_7:
    JR_NEQF VZONE2_M 1.0 else551_8
    MOVEF_F VZONE2_M VZ_M
    JR endif551
  else551_8:
    JR_NEQF VZONE1_M 3.0 else551_9
    MOVEF_F VZONE1_M VZ_M
    JR endif551
  else551_9:
    JR_NEQF VZONE2_M 3.0 else551_10
    MOVEF_F VZONE2_M VZ_M
  else551_10:
  endif551:
    JR_NEQF VZ_M 1.0 else552_1
    MOVEF_F 42.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB553:
    WRITE32 ENDSUB_OPEN:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB554:
    MOVEF_F 300.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB555:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB556:
    MOVEF_F 42.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB557:
    JR endif552
  else552_1:
    JR_NEQF VZ_M 3.0 else552_2
    MOVEF_F 45.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB558:
    WRITE32 ENDSUB_OPEN:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB559:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB560:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB561:
    MOVEF_F 45.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB562:
    JR endif552
  else552_2:
    JR_NEQF VZ_M 4.0 else552_3
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB563:
    MOVEF_F 75.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB564:
    WRITE32 ENDSUB_OPEN:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB565:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB566:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB567:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB568:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB569:
    JR endif552
  else552_3:
    JR_NEQF VZ_M 5.0 else552_4
    MOVEF_F 60.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB570:
    MOVEF_F 80.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB571:
    WRITE32 ENDSUB_OPEN:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB572:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB573:
    MOVEF_F 190.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB574:
    MOVEF_F 80.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB575:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB576:
    JR endif552
  else552_4:
    JR_NEQF VZ_M 6.0 else552_5
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB577:
    WRITE32 ENDSUB_OPEN:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB578:
    MOVEF_F 230.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB579:
    MOVEF_F 220.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB580:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB581:
  else552_5:
  endif552:
    MOVEF_F 350.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB582:
    WRITE32 ENDSUB_CLOSE:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB583:
    MOVEF_F 192.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB584:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB585:
    JR_NEQF VZ_M VZONE1_M else586_1
    MOVEF_F VZONE2_M VZ_M
    JR endif586
  else586_1:
    MOVEF_F VZONE1_M VZ_M
  else586_2:
  endif586:
    JR_NEQF VZ_M 5.0 else587_1
    MOVEF_F 42.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB588:
    WRITE32 ENDSUB_OPEN:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB589:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB590:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB591:
    MOVEF_F 42.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB592:
    JR endif587
  else587_1:
    JR_NEQF VZ_M 3.0 else587_2
    MOVEF_F 35.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB593:
    WRITE32 ENDSUB_OPEN:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB594:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB595:
    MOVEF_F 110.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB596:
    MOVEF_F 35.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB597:
    JR endif587
  else587_2:
    JR_NEQF VZ_M 2.0 else587_3
    MOVEF_F 80.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB598:
    MOVEF_F 55.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB599:
    WRITE32 ENDSUB_OPEN:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB600:
    MOVEF_F 75.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB601:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB602:
    MOVEF_F 55.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB603:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB604:
    JR endif587
  else587_3:
    JR_NEQF VZ_M 1.0 else587_4
    MOVEF_F 60.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB605:
    MOVEF_F 85.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB606:
    WRITE32 ENDSUB_OPEN:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB607:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB608:
    MOVEF_F 180.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB609:
    MOVEF_F 85.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB610 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB610:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB611:
    JR endif587
  else587_4:
    JR_NEQF VZ_M 6.0 else587_5
    MOVEF_F 60.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB612:
    MOVEF_F 55.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB613:
    WRITE32 ENDSUB_OPEN:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB614:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB615:
    MOVEF_F 240.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB616:
    MOVEF_F 55.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB617:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB618:
  else587_5:
  endif587:
    JR_NEQF VFINISH_M 1.0 else619_1
    DATA32 tmp620
    CALL GETANDINC32 RUNCOUNTER_CLOSE 1  RUNCOUNTER_CLOSE tmp620
    JR_NEQ32 0 tmp620 alreadylaunched620
    OBJECT_START TCLOSE
  alreadylaunched620:
    CALL MOTOR.START 'BC' 50.0
    DATA32 milliseconds622
	MOVEF_32 2500.0 milliseconds622
	DATA32 timer622
	TIMER_WAIT milliseconds622 timer622
	TIMER_READY timer622
    MOVEF_F 115.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB623:
    MOVEF_F 96.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB624:
    CALL MOTOR.START 'BC' 40.0
    DATA32 milliseconds626
	MOVEF_32 800.0 milliseconds626
	DATA32 timer626
	TIMER_WAIT milliseconds626 timer626
	TIMER_READY timer626
    JR endif619
  else619_1:
    CALL MOTOR.START 'BC' -50.0
    DATA32 milliseconds628
	MOVEF_32 1500.0 milliseconds628
	DATA32 timer628
	TIMER_WAIT milliseconds628 timer628
	TIMER_READY timer628
    MOVEF_F 115.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB629:
    MOVEF_F 96.0 VGRAD_M
    MULF 1168.08 VGRAD_M F.0
    DATAF tmpf631
    DATA8 flag631
    DIVF F.0 360.0 tmpf631
    CP_EQF 0.0 360.0 flag631
    SELECTF flag631 0.0 tmpf631 VL_M

    DATAF tmpf632
    DATA8 flag632
    DIVF VL_M 257.48 tmpf632
    CP_EQF 0.0 257.48 flag632
    SELECTF flag632 0.0 tmpf632 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'c' -40.0
  while636:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_M endwhile636
  whilebody636:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_M whilebody636
  endwhile636:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'BC' -40.0
    DATA32 milliseconds643
	MOVEF_32 800.0 milliseconds643
	DATA32 timer643
	TIMER_WAIT milliseconds643 timer643
	TIMER_READY timer643
  else619_2:
  endif619:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf24
    DATA8 flag24
    DIVF F.0 F.1 tmpf24
    CP_EQF 0.0 F.1 flag24
    SELECTF flag24 0.0 tmpf24 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf29
    DATA8 flag29
    DIVF F.0 F.1 tmpf29
    CP_EQF 0.0 F.1 flag29
    SELECTF flag29 0.0 tmpf29 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB30:
    WRITE32 ENDSUB_SEN2:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB31:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while40:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf46
    DATA8 flag46
    DIVF F.1 2.0 tmpf46
    CP_EQF 0.0 2.0 flag46
    SELECTF flag46 0.0 tmpf46 F.0

    JR_GTF F.0 VL_1 endwhile40
  whilebody40:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf61
    DATA8 flag61
    DIVF F.1 2.0 tmpf61
    CP_EQF 0.0 2.0 flag61
    SELECTF flag61 0.0 tmpf61 F.0

    JR_LTEQF F.0 VL_1 whilebody40
  endwhile40:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf63
    DATA8 flag63
    DIVF VMM_2 257.48 tmpf63
    CP_EQF 0.0 257.48 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB66:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT:
    MOVEF_F 83.890010874631 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer67
	DATA8 nos67
	DATA8 busy67
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer67 nos67
	JR_EQ8 0 nos67 motornotbusy67
  motorwaiting67:
	OUTPUT_TEST layer67 nos67 busy67
	JR_EQ8 busy67 0 motornotbusy67
	SLEEP
	JR motorwaiting67
  motornotbusy67:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 140.0 'true'

	DATA8 layer68
	DATA8 nos68
	DATA8 busy68
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer68 nos68
	JR_EQ8 0 nos68 motornotbusy68
  motorwaiting68:
	OUTPUT_TEST layer68 nos68 busy68
	JR_EQ8 busy68 0 motornotbusy68
	SLEEP
	JR motorwaiting68
  motornotbusy68:
  while69:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile69
  whilebody69:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody69
  endwhile69:
    CALL MOTOR.STOP 'bc' 'true'
  while74:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile74
  whilebody74:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody74
  endwhile74:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB79:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 76.8991766350784 VL_M
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 VL_M 0.0 'true' 

	DATA8 layer80
	DATA8 nos80
	DATA8 busy80
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer80 nos80
	JR_EQ8 0 nos80 motornotbusy80
  motorwaiting80:
	OUTPUT_TEST layer80 nos80 busy80
	JR_EQ8 busy80 0 motornotbusy80
	SLEEP
	JR motorwaiting80
  motornotbusy80:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer81
	DATA8 nos81
	DATA8 busy81
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer81 nos81
	JR_EQ8 0 nos81 motornotbusy81
  motorwaiting81:
	OUTPUT_TEST layer81 nos81 busy81
	JR_EQ8 busy81 0 motornotbusy81
	SLEEP
	JR motorwaiting81
  motornotbusy81:
  while82:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 20.0 endwhile82
  whilebody82:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 20.0 whilebody82
  endwhile82:
    CALL MOTOR.STOP 'bc' 'true'
  while87:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile87
  whilebody87:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody87
  endwhile87:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB92:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT1_1:
    MULF 1168.08 VGRAD_3 F.0
    DATAF tmpf94
    DATA8 flag94
    DIVF F.0 360.0 tmpf94
    CP_EQF 0.0 360.0 flag94
    SELECTF flag94 0.0 tmpf94 VL_3

    DATAF tmpf95
    DATA8 flag95
    DIVF VL_3 257.48 tmpf95
    CP_EQF 0.0 257.48 flag95
    SELECTF flag95 0.0 tmpf95 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
  while99:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_GTF F.0 VL_3 endwhile99
  whilebody99:
    CALL MOTOR.GETCOUNT 'C' F.0
    JR_LTEQF F.0 VL_3 whilebody99
  endwhile99:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_1:
SUB_RIGHT1_1:
    MULF 1168.08 VGRAD_4 F.0
    DATAF tmpf104
    DATA8 flag104
    DIVF F.0 360.0 tmpf104
    CP_EQF 0.0 360.0 flag104
    SELECTF flag104 0.0 tmpf104 VL_4

    DATAF tmpf105
    DATA8 flag105
    DIVF VL_4 257.48 tmpf105
    CP_EQF 0.0 257.48 flag105
    SELECTF flag105 0.0 tmpf105 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 60.0
  while109:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTF F.0 VL_4 endwhile109
  whilebody109:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTEQF F.0 VL_4 whilebody109
  endwhile109:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_1:
SUB_LEFT2_1:
    MULF 1168.08 VGRAD_5 F.1
    DATAF tmpf114
    DATA8 flag114
    DIVF F.1 360.0 tmpf114
    CP_EQF 0.0 360.0 flag114
    SELECTF flag114 0.0 tmpf114 F.0

    DATAF tmpf115
    DATA8 flag115
    DIVF F.0 2.0 tmpf115
    CP_EQF 0.0 2.0 flag115
    SELECTF flag115 0.0 tmpf115 VL_5

    DATAF tmpf116
    DATA8 flag116
    DIVF VL_5 257.48 tmpf116
    CP_EQF 0.0 257.48 flag116
    SELECTF flag116 0.0 tmpf116 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
    CALL MOTOR.STARTPOWER 'B' -60.0
  while121:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    JR_GTF F.0 VL_5 endwhile121
  whilebody121:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf133
    DATA8 flag133
    DIVF F.1 2.0 tmpf133
    CP_EQF 0.0 2.0 flag133
    SELECTF flag133 0.0 tmpf133 F.0

    JR_LTEQF F.0 VL_5 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1168.08 VGRAD_6 F.1
    DATAF tmpf136
    DATA8 flag136
    DIVF F.1 360.0 tmpf136
    CP_EQF 0.0 360.0 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    DATAF tmpf137
    DATA8 flag137
    DIVF F.0 2.0 tmpf137
    CP_EQF 0.0 2.0 flag137
    SELECTF flag137 0.0 tmpf137 VL_6

    DATAF tmpf138
    DATA8 flag138
    DIVF VL_6 257.48 tmpf138
    CP_EQF 0.0 257.48 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' -60.0
    CALL MOTOR.STARTPOWER 'B' 60.0
  while143:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf149
    DATA8 flag149
    DIVF F.1 2.0 tmpf149
    CP_EQF 0.0 2.0 flag149
    SELECTF flag149 0.0 tmpf149 F.0

    JR_GTF F.0 VL_6 endwhile143
  whilebody143:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf155
    DATA8 flag155
    DIVF F.1 2.0 tmpf155
    CP_EQF 0.0 2.0 flag155
    SELECTF flag155 0.0 tmpf155 F.0

    JR_LTEQF F.0 VL_6 whilebody143
  endwhile143:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_OPEN:
    CALL MOTOR.START 'A' 30.0
    DATA32 milliseconds161
	MOVEF_32 1000.0 milliseconds161
	DATA32 timer161
	TIMER_WAIT milliseconds161 timer161
	TIMER_READY timer161
    CALL MOTOR.STOP 'A' 'true'
    CALL MOTOR.START 'A' 5.0
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
SUB_CLOSE:
    CALL MOTOR.START 'A' -30.0
    DATA32 milliseconds165
	MOVEF_32 1000.0 milliseconds165
	DATA32 timer165
	TIMER_WAIT milliseconds165 timer165
	TIMER_READY timer165
    CALL MOTOR.STOP 'A' 'true'
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_WATER:
    ADDF VRED_M 1.0 VREDD_M
    JR_EQF VID_M 1.0 or169
    JR_NEQF VID_M 2.0 else168_1
  or169:
    MOVEF_F 1.0 VZONE_M
    JR endif168
  else168_1:
    JR_EQF VID_M 3.0 or170
    JR_NEQF VID_M 4.0 else168_2
  or170:
    MOVEF_F 2.0 VZONE_M
    JR endif168
  else168_2:
    JR_EQF VID_M 5.0 or171
    JR_NEQF VID_M 6.0 else168_3
  or171:
    MOVEF_F 3.0 VZONE_M
    JR endif168
  else168_3:
    JR_EQF VID_M 7.0 or172
    JR_NEQF VID_M 8.0 else168_4
  or172:
    MOVEF_F 4.0 VZONE_M
    JR endif168
  else168_4:
    JR_EQF VID_M 9.0 or173
    JR_NEQF VID_M 10.0 else168_5
  or173:
    MOVEF_F 5.0 VZONE_M
    JR endif168
  else168_5:
    JR_EQF VID_M 11.0 or174
    JR_NEQF VID_M 12.0 else168_6
  or174:
    MOVEF_F 6.0 VZONE_M
  else168_6:
  endif168:
    JR_NEQF VR1_M VZONE_M else175_1
    JR endif175
  else175_1:
    JR_EQF VID_M 2.0 or177
    JR_EQF VID_M 6.0 or177
    JR_EQF VID_M 9.0 or177
    JR_NEQF VID_M 10.0 else176_1
  or177:
    MOVEF_F 230.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB178:
    CALL MOTOR.SCHEDULE 'D' -28.0 0.0 360.0 0.0 'true' 

	DATA8 layer179
	DATA8 nos179
	DATA8 busy179
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer179 nos179
	JR_EQ8 0 nos179 motornotbusy179
  motorwaiting179:
	OUTPUT_TEST layer179 nos179 busy179
	JR_EQ8 busy179 0 motornotbusy179
	SLEEP
	JR motorwaiting179
  motornotbusy179:
    MOVEF_F 230.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB180:
    JR endif176
  else176_1:
    CALL MOTOR.SCHEDULE 'D' -28.0 0.0 360.0 0.0 'true' 

	DATA8 layer181
	DATA8 nos181
	DATA8 busy181
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer181 nos181
	JR_EQ8 0 nos181 motornotbusy181
  motorwaiting181:
	OUTPUT_TEST layer181 nos181 busy181
	JR_EQ8 busy181 0 motornotbusy181
	SLEEP
	JR motorwaiting181
  motornotbusy181:
  else176_2:
  endif176:
  else175_2:
  endif175:
    MOVEF_F VZONE_M VR1_M
RETSUB_WATER:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_WATER:
SUB_HSV1:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else188_1
    JR_LTEQF VSRED_M VSBLUE_M else188_1
    MOVEF_F VSRED_M VMAX_M
    JR endif188
  else188_1:
    JR_LTEQF VSGREEN_M VSRED_M else188_2
    JR_LTEQF VSGREEN_M VSBLUE_M else188_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif188
  else188_2:
    JR_LTEQF VSBLUE_M VSRED_M else188_3
    JR_LTEQF VSBLUE_M VSGREEN_M else188_3
    MOVEF_F VSBLUE_M VMAX_M
  else188_3:
  endif188:
    JR_GTEQF VSRED_M VSGREEN_M else189_1
    JR_GTEQF VSRED_M VSBLUE_M else189_1
    MOVEF_F VSRED_M VMIN_M
    JR endif189
  else189_1:
    JR_GTEQF VSGREEN_M VSRED_M else189_2
    JR_GTEQF VSGREEN_M VSBLUE_M else189_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif189
  else189_2:
    JR_GTEQF VSBLUE_M VSRED_M else189_3
    JR_GTEQF VSBLUE_M VSGREEN_M else189_3
    MOVEF_F VSBLUE_M VMIN_M
  else189_3:
  endif189:
    JR_NEQF VMAX_M VMIN_M else190_1
    MOVEF_F 0.0 VH_M
    JR endif190
  else190_1:
    JR_NEQF VSRED_M VMAX_M else191_1
    JR_LTF VSGREEN_M VSBLUE_M else192_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf196
    DATA8 flag196
    DIVF F.0 F.1 tmpf196
    CP_EQF 0.0 F.1 flag196
    SELECTF flag196 0.0 tmpf196 VH_M

    JR endif192
  else192_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf200
    DATA8 flag200
    DIVF F.1 F.2 tmpf200
    CP_EQF 0.0 F.2 flag200
    SELECTF flag200 0.0 tmpf200 F.0

    ADDF F.0 360.0 VH_M
  else192_2:
  endif192:
    JR endif191
  else191_1:
    JR_NEQF VMAX_M VSGREEN_M else202_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf206
    DATA8 flag206
    DIVF F.1 F.2 tmpf206
    CP_EQF 0.0 F.2 flag206
    SELECTF flag206 0.0 tmpf206 F.0

    ADDF F.0 120.0 VH_M
    JR endif202
  else202_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf211
    DATA8 flag211
    DIVF F.1 F.2 tmpf211
    CP_EQF 0.0 F.2 flag211
    SELECTF flag211 0.0 tmpf211 F.0

    ADDF F.0 240.0 VH_M
  else202_2:
  endif202:
  else191_2:
  endif191:
  else190_2:
  endif190:
    JR_NEQF VMAX_M 0.0 else213_1
    MOVEF_F 0.0 VS_M
    JR endif213
  else213_1:
    DATAF tmpf214
    DATA8 flag214
    DIVF VMIN_M VMAX_M tmpf214
    CP_EQF 0.0 VMAX_M flag214
    SELECTF flag214 0.0 tmpf214 F.0

    SUBF 1.0 F.0 VS_M
  else213_2:
  endif213:
    MOVEF_F VMAX_M VV_M
    JR_EQF VID_M 3.0 or217
    JR_EQF VID_M 6.0 or217
    JR_EQF VID_M 10.0 or217
    JR_NEQF VID_M 12.0 else216_1
  or217:
    JR_LTEQF VH_M 4.0 and220
    JR_LTF VH_M 60.0 or219
  and220:
    JR_LTEQF VH_M 355.0 else218_1
    JR_GTEQF VH_M 370.0 else218_1
  or219:
    MOVEF_F 5.0 VCOLOR_M
    JR endif218
  else218_1:
    JR_LTEQF VSRED_M 55.0 and222
    JR_LTF VSRED_M 123.0 or221
  and222:
    JR_LTEQF VSRED_M 320.0 else218_2
  or221:
    MOVEF_F 1.0 VCOLOR_M
    JR endif218
  else218_2:
    JR_LTEQF VSRED_M 123.0 else218_3
    JR_GTEQF VSRED_M 320.0 else218_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif218
  else218_3:
    MOVEF_F 0.0 VCOLOR_M
  else218_4:
  endif218:
    JR endif216
  else216_1:
    JR_LTEQF VH_M 0.0 and225
    JR_LTF VH_M 60.0 or224
  and225:
    JR_LTEQF VH_M 335.0 else223_1
    JR_GTEQF VH_M 370.0 else223_1
  or224:
    MOVEF_F 5.0 VCOLOR_M
    JR endif223
  else223_1:
    JR_LTEQF VSRED_M 35.0 and227
    JR_LTF VSRED_M 180.0 or226
  and227:
    JR_LTEQF VSRED_M 350.0 else223_2
  or226:
    MOVEF_F 1.0 VCOLOR_M
    JR endif223
  else223_2:
    JR_LTEQF VSRED_M 180.0 else223_3
    JR_GTEQF VSRED_M 320.0 else223_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif223
  else223_3:
    MOVEF_F 0.0 VCOLOR_M
  else223_4:
  endif223:
  else216_2:
  endif216:
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
RETSUB_HSV1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV1:
SUB_HSV4:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 4.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else236_1
    JR_LTEQF VSRED_M VSBLUE_M else236_1
    MOVEF_F VSRED_M VMAX_M
    JR endif236
  else236_1:
    JR_LTEQF VSGREEN_M VSRED_M else236_2
    JR_LTEQF VSGREEN_M VSBLUE_M else236_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif236
  else236_2:
    JR_LTEQF VSBLUE_M VSRED_M else236_3
    JR_LTEQF VSBLUE_M VSGREEN_M else236_3
    MOVEF_F VSBLUE_M VMAX_M
  else236_3:
  endif236:
    JR_GTEQF VSRED_M VSGREEN_M else237_1
    JR_GTEQF VSRED_M VSBLUE_M else237_1
    MOVEF_F VSRED_M VMIN_M
    JR endif237
  else237_1:
    JR_GTEQF VSGREEN_M VSRED_M else237_2
    JR_GTEQF VSGREEN_M VSBLUE_M else237_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif237
  else237_2:
    JR_GTEQF VSBLUE_M VSRED_M else237_3
    JR_GTEQF VSBLUE_M VSGREEN_M else237_3
    MOVEF_F VSBLUE_M VMIN_M
  else237_3:
  endif237:
    JR_NEQF VMAX_M VMIN_M else238_1
    MOVEF_F 0.0 VH_M
    JR endif238
  else238_1:
    JR_NEQF VSRED_M VMAX_M else239_1
    JR_LTF VSGREEN_M VSBLUE_M else240_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf244
    DATA8 flag244
    DIVF F.0 F.1 tmpf244
    CP_EQF 0.0 F.1 flag244
    SELECTF flag244 0.0 tmpf244 VH_M

    JR endif240
  else240_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf248
    DATA8 flag248
    DIVF F.1 F.2 tmpf248
    CP_EQF 0.0 F.2 flag248
    SELECTF flag248 0.0 tmpf248 F.0

    ADDF F.0 360.0 VH_M
  else240_2:
  endif240:
    JR endif239
  else239_1:
    JR_NEQF VMAX_M VSGREEN_M else250_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf254
    DATA8 flag254
    DIVF F.1 F.2 tmpf254
    CP_EQF 0.0 F.2 flag254
    SELECTF flag254 0.0 tmpf254 F.0

    ADDF F.0 120.0 VH_M
    JR endif250
  else250_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf259
    DATA8 flag259
    DIVF F.1 F.2 tmpf259
    CP_EQF 0.0 F.2 flag259
    SELECTF flag259 0.0 tmpf259 F.0

    ADDF F.0 240.0 VH_M
  else250_2:
  endif250:
  else239_2:
  endif239:
  else238_2:
  endif238:
    JR_NEQF VMAX_M 0.0 else261_1
    MOVEF_F 0.0 VS_M
    JR endif261
  else261_1:
    DATAF tmpf262
    DATA8 flag262
    DIVF VMIN_M VMAX_M tmpf262
    CP_EQF 0.0 VMAX_M flag262
    SELECTF flag262 0.0 tmpf262 F.0

    SUBF 1.0 F.0 VS_M
  else261_2:
  endif261:
    MOVEF_F VMAX_M VV_M
    JR_EQF VID_M 4.0 or265
    JR_EQF VID_M 5.0 or265
    JR_EQF VID_M 9.0 or265
    JR_NEQF VID_M 11.0 else264_1
  or265:
    JR_LTEQF VH_M 0.0 and268
    JR_LTF VH_M 30.0 or267
  and268:
    JR_LTEQF VH_M 330.0 else266_1
    JR_GTEQF VH_M 370.0 else266_1
  or267:
    MOVEF_F 5.0 VCOLOR_M
    JR endif266
  else266_1:
    JR_LTEQF VSRED_M 8.0 else266_2
    JR_GTEQF VSRED_M 24.0 else266_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif266
  else266_2:
    JR_LTEQF VSRED_M 24.0 else266_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif266
  else266_3:
    MOVEF_F 0.0 VCOLOR_M
  else266_4:
  endif266:
    JR endif264
  else264_1:
    JR_LTEQF VH_M 2.0 and271
    JR_LTF VH_M 27.0 or270
  and271:
    JR_LTEQF VH_M 330.0 else269_1
    JR_GTEQF VH_M 370.0 else269_1
  or270:
    MOVEF_F 5.0 VCOLOR_M
    JR endif269
  else269_1:
    JR_LTEQF VSRED_M 11.0 else269_2
    JR_GTEQF VSRED_M 43.0 else269_2
    MOVEF_F 1.0 VCOLOR_M
    JR endif269
  else269_2:
    JR_LTEQF VSRED_M 42.0 else269_3
    MOVEF_F 6.0 VCOLOR_M
    JR endif269
  else269_3:
    MOVEF_F 0.0 VCOLOR_M
  else269_4:
  endif269:
  else264_2:
  endif264:
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 70.0 20.0 2.0 S.0
RETSUB_HSV4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV4:
SUB_FINISH:
    JR_NEQF VSTART_M 1.0 else274_1
    MOVEF_F 2.0 VFINISH_M
    JR endif274
  else274_1:
    MOVEF_F 1.0 VFINISH_M
  else274_2:
  endif274:
RETSUB_FINISH:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FINISH:
SUB_START_1:
    JR_NEQF VSTART_7 1.0 else275_1
    MOVEF_F 2.0 VFINISH_M
    JR endif275
  else275_1:
    MOVEF_F 1.0 VFINISH_M
  else275_2:
  endif275:
    JR_NEQF VSTART_7 1.0 else276_1
    MOVEF_F 165.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB277:
    MOVEF_F 65.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB278:
    CALL MOTOR.START 'BC' -35.0
    DATA32 milliseconds280
	MOVEF_32 1500.0 milliseconds280
	DATA32 timer280
	TIMER_WAIT milliseconds280 timer280
	TIMER_READY timer280
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 900.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB282:
    CALL MOTOR.START 'BC' 30.0
    DATA32 milliseconds284
	MOVEF_32 2000.0 milliseconds284
	DATA32 timer284
	TIMER_WAIT milliseconds284 timer284
	TIMER_READY timer284
    MOVEF_F 200.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB285:
    MOVEF_F 96.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB286:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds288
	MOVEF_32 2500.0 milliseconds288
	DATA32 timer288
	TIMER_WAIT milliseconds288 timer288
	TIMER_READY timer288
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB289:
    JR endif276
  else276_1:
    MOVEF_F 80.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB290:
    MOVEF_F 80.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT1_1:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_1
CALLSUB291:
    MOVEF_F 1.0 VFINISH_7
  else276_2:
  endif276:
RETSUB_START_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_START_1:
SUB_CUBE:
    CALL LCD.CLEAR
    ADDF VID_M 1.0 VID_M
    DATA32 milliseconds294
	MOVEF_32 500.0 milliseconds294
	DATA32 timer294
	TIMER_WAIT milliseconds294 timer294
	TIMER_READY timer294
    JR_EQF VID_M 1.0 or296
    JR_EQF VID_M 2.0 or296
    JR_EQF VID_M 4.0 or296
    JR_EQF VID_M 5.0 or296
    JR_EQF VID_M 8.0 or296
    JR_EQF VID_M 9.0 or296
    JR_NEQF VID_M 11.0 else295_1
  or296:
    WRITE32 ENDSUB_HSV4:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV4
CALLSUB297:
    JR endif295
  else295_1:
    WRITE32 ENDSUB_HSV1:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV1
CALLSUB298:
  else295_2:
  endif295:
    JR_NEQF VCOLOR_M 5.0 else299_1
    CALL EV3.SETLEDCOLOR 'RED' 'NORMAL'
    JR endif299
  else299_1:
    JR_NEQF VCOLOR_M 6.0 else299_2
    CALL EV3.SETLEDCOLOR 'ORANGE' 'NORMAL'
    JR endif299
  else299_2:
    JR_NEQF VCOLOR_M 1.0 else299_3
    CALL EV3.SETLEDCOLOR 'GREEN' 'NORMAL'
    JR endif299
  else299_3:
    CALL SPEAKER.NOTE 70.0 'B7' 200.0
  else299_4:
  endif299:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.1
    CALL TEXT.APPEND 'H:' S.1 S.0
    CALL LCD.TEXT 1.0 70.0 50.0 1.0 S.0
    STRINGS VALUE_FORMATTED VSRED_M '%g' 99 S.1
    CALL TEXT.APPEND 'R:' S.1 S.0
    CALL LCD.TEXT 1.0 70.0 80.0 1.0 S.0
    DATA32 milliseconds310
	MOVEF_32 700.0 milliseconds310
	DATA32 timer310
	TIMER_WAIT milliseconds310 timer310
	TIMER_READY timer310
    CALL EV3.SETLEDCOLOR 'OFF' 'NORMAL'
    JR_NEQF VCOLOR_M 5.0 else312_1
    WRITE32 ENDSUB_WATER:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_WATER
CALLSUB313:
    JR endif312
  else312_1:
    JR_NEQF VCOLOR_M 1.0 else312_2
    JR_EQF VBLACK_M 1.0 else314_1
    JR_EQF VID_M 1.0 or316
    JR_NEQF VID_M 2.0 else315_1
  or316:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB317:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB318:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB319:
    WRITE32 ENDSUB_CLOSE:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB320:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB321:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB322:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB323:
    JR endif315
  else315_1:
    JR_EQF VID_M 5.0 or324
    JR_EQF VID_M 9.0 or324
    JR_NEQF VID_M 11.0 else315_2
  or324:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB325:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB326:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB327:
    WRITE32 ENDSUB_CLOSE:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB328:
    MOVEF_F 80.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB329:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB330:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB331:
    JR endif315
  else315_2:
    JR_EQF VID_M 6.0 or332
    JR_EQF VID_M 10.0 or332
    JR_NEQF VID_M 12.0 else315_3
  or332:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB333:
    MOVEF_F 96.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB334:
    MOVEF_F 105.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB335:
    WRITE32 ENDSUB_CLOSE:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB336:
    MOVEF_F 95.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB337:
    MOVEF_F 96.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB338:
    MOVEF_F 125.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB339:
    JR endif315
  else315_3:
    JR_NEQF VID_M 3.0 else315_4
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB340:
    MOVEF_F 195.0 VGRAD_3
    WRITE32 ENDSUB_LEFT1_1:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_1
CALLSUB341:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB342:
    WRITE32 ENDSUB_CLOSE:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB343:
    MOVEF_F 195.0 VGRAD_M
    MULF 1168.08 VGRAD_M F.0
    DATAF tmpf345
    DATA8 flag345
    DIVF F.0 360.0 tmpf345
    CP_EQF 0.0 360.0 flag345
    SELECTF flag345 0.0 tmpf345 VL_M

    DATAF tmpf346
    DATA8 flag346
    DIVF VL_M 257.48 tmpf346
    CP_EQF 0.0 257.48 flag346
    SELECTF flag346 0.0 tmpf346 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'c' -40.0
  while350:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_M endwhile350
  whilebody350:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_M whilebody350
  endwhile350:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds357
	MOVEF_32 2500.0 milliseconds357
	DATA32 timer357
	TIMER_WAIT milliseconds357 timer357
	TIMER_READY timer357
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB358:
    JR endif315
  else315_4:
    JR_NEQF VID_M 4.0 else315_5
    MOVEF_F 130.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB359:
    MOVEF_F 133.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB360:
    WRITE32 ENDSUB_CLOSE:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB361:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB362:
    MOVEF_F 130.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB363:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds365
	MOVEF_32 2500.0 milliseconds365
	DATA32 timer365
	TIMER_WAIT milliseconds365 timer365
	TIMER_READY timer365
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB366:
    JR endif315
  else315_5:
    JR_NEQF VID_M 7.0 else315_6
    MOVEF_F 135.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB367:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB368:
    WRITE32 ENDSUB_CLOSE:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB369:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB370:
    MOVEF_F 135.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB371:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds373
	MOVEF_32 2500.0 milliseconds373
	DATA32 timer373
	TIMER_WAIT milliseconds373 timer373
	TIMER_READY timer373
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB374:
    JR endif315
  else315_6:
    JR_NEQF VID_M 8.0 else315_7
    MOVEF_F 135.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB375:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB376:
    WRITE32 ENDSUB_CLOSE:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB377:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB378:
    MOVEF_F 135.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB379:
    CALL MOTOR.START 'BC' -10.0
    DATA32 milliseconds381
	MOVEF_32 2500.0 milliseconds381
	DATA32 timer381
	TIMER_WAIT milliseconds381 timer381
	TIMER_READY timer381
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB382:
  else315_7:
  endif315:
    MOVEF_F 1.0 VBLACK_M
  else314_1:
  endif314:
    JR endif312
  else312_2:
    JR_NEQF VCOLOR_M 6.0 else312_3
    JR_NEQF VZONE1_M 0.0 else383_1
    JR_EQF VID_M 1.0 or385
    JR_NEQF VID_M 2.0 else384_1
  or385:
    MOVEF_F 1.0 VZONE1_M
    JR endif384
  else384_1:
    JR_EQF VID_M 3.0 or386
    JR_NEQF VID_M 4.0 else384_2
  or386:
    MOVEF_F 2.0 VZONE1_M
    JR endif384
  else384_2:
    JR_EQF VID_M 5.0 or387
    JR_NEQF VID_M 6.0 else384_3
  or387:
    MOVEF_F 3.0 VZONE1_M
    JR endif384
  else384_3:
    JR_EQF VID_M 7.0 or388
    JR_NEQF VID_M 8.0 else384_4
  or388:
    MOVEF_F 4.0 VZONE1_M
    JR endif384
  else384_4:
    JR_EQF VID_M 9.0 or389
    JR_NEQF VID_M 10.0 else384_5
  or389:
    MOVEF_F 5.0 VZONE1_M
    JR endif384
  else384_5:
    JR_EQF VID_M 11.0 or390
    JR_NEQF VID_M 12.0 else384_6
  or390:
    MOVEF_F 6.0 VZONE1_M
  else384_6:
  endif384:
    JR endif383
  else383_1:
    JR_EQF VID_M 1.0 or392
    JR_NEQF VID_M 2.0 else391_1
  or392:
    MOVEF_F 1.0 VZONE2_M
    JR endif391
  else391_1:
    JR_EQF VID_M 3.0 or393
    JR_NEQF VID_M 4.0 else391_2
  or393:
    MOVEF_F 2.0 VZONE2_M
    JR endif391
  else391_2:
    JR_EQF VID_M 5.0 or394
    JR_NEQF VID_M 6.0 else391_3
  or394:
    MOVEF_F 3.0 VZONE2_M
    JR endif391
  else391_3:
    JR_EQF VID_M 7.0 or395
    JR_NEQF VID_M 8.0 else391_4
  or395:
    MOVEF_F 4.0 VZONE2_M
    JR endif391
  else391_4:
    JR_EQF VID_M 9.0 or396
    JR_NEQF VID_M 10.0 else391_5
  or396:
    MOVEF_F 5.0 VZONE2_M
    JR endif391
  else391_5:
    JR_EQF VID_M 11.0 or397
    JR_NEQF VID_M 12.0 else391_6
  or397:
    MOVEF_F 6.0 VZONE2_M
  else391_6:
  endif391:
  else383_2:
  endif383:
  else312_3:
  endif312:
RETSUB_CUBE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CUBE:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall EV3.SETLEDCOLOR    // SSV
{
	IN_S color 8		// only receive first 7 characters
	IN_S effect 8       // only receive first 7 characters
	
	ARRAY8 color_1 4	// split up to be able to do some operations with 4 bytes each
	ARRAY8 color_2 4
	ARRAY8 effect_1 4
	ARRAY8 effect_2 4

	STRINGS DUPLICATE color color_1
	STRINGS DUPLICATE effect effect_1	
	AND8888_32 color_1 -538976289 color_1        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 color_2 -538976289 color_2        // AND 0xdfdfdfdf performs an upcase for 4 letters
	AND8888_32 effect_1 -538976289 effect_1      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	AND8888_32 effect_2 -538976289 effect_2      // AND 0xdfdfdfdf performs an upcase for 4 letters	
	
	DATA8 col
	DATA8 flag
	MOVE8_8 0 col
	
	STRINGS COMPARE color_1 'GREEN' flag
	JR_EQ8 flag 0 notgreen
	MOVE8_8 1 col
	JR checkeffect
notgreen:	
	STRINGS COMPARE color_1 'RED' flag
	JR_EQ8 flag 0 notred
	MOVE8_8 2 col
	JR checkeffect
notred:	
	STRINGS COMPARE color_1 'ORANGE' flag
	JR_EQ8 flag 0 setcol
	MOVE8_8 3 col
checkeffect:
	
	STRINGS COMPARE effect_1 'FLASH' flag
	JR_EQ8 flag 0 noflash
	ADD8 col 3 col
	JR setcol
noflash:
	STRINGS COMPARE effect_1 'PULSE' flag
	JR_EQ8 flag 0 setcol
	ADD8 col 6 col	
	
setcol:
	UI_WRITE LED col
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
