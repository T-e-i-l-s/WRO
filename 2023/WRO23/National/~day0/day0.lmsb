DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAF VLV_MM_1
DATAF VLV_V_1
DATAF VLV_DEG_2
DATAF VLV_SP_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAS VLV_MOTOR_11 252
DATAF VLV_SP_11
DATAF VLV_SP_9
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_SP_10
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
ARRAY16 VGV_RES 2
ARRAY16 VGV_RES2 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_HSV
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_NUM2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_Z1
DATAF VGV_Z2
DATAF VGV_SUM
DATAF VGV_SP
DATAF VGV_DEG
DATAF VGV_ZONE1
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_1
DATAF VLV_SP_1
DATAF VLV_DEG_1
DATAF VLV_U_1
DATAF VLV_L_2
DATAF VLV_V_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_U_9
DATAF VLV_WHITE_10
DATAF VLV_U_10
DATAF VLV_L_10
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYCREATE_FLOAT VGV_RES
    CALL ARRAYCREATE_FLOAT VGV_RES2
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_HSV
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_NUM2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_DEG
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_1
    MOVEF_F 0.0 VLV_SP_1
    MOVEF_F 0.0 VLV_DEG_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_U_9
    MOVEF_F 0.0 VLV_WHITE_10
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_L_10
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch948
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch948:
    JR_NEQ32 SUBPROGRAM 1 dispatch949
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch949:
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES2
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_HSV
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_NUM2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_DEG
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 1.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 2.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 2.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    DATA8 layer7
	DATA8 no7
	DATA8 mode87
	
	MOVEF_8 3.0 no7
	SUB8 no7 1 no7
	DIV8 no7 4 layer7
	MATH MOD8 no7 4 no7

	MOVEF_8 0.0 mode87
	
	INPUT_DEVICE READY_RAW layer7 no7 0 mode87 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp10
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp10
    JR_NEQ32 0 tmp10 alreadylaunched10
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched10:
    MOVEF_F 15.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB11:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB12:
    CALL MOTOR.RESETCOUNT 'BC'
  while14:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile14
  whilebody14:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody14
  endwhile14:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while27:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF F.1 2.0 tmpf31
    CP_EQF 0.0 2.0 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    JR_GTEQF F.0 VGV_L endwhile27
  whilebody27:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB32:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf36
    DATA8 flag36
    DIVF F.1 2.0 tmpf36
    CP_EQF 0.0 2.0 flag36
    SELECTF flag36 0.0 tmpf36 F.0

    JR_LTF F.0 VGV_L whilebody27
  endwhile27:
    CALL MOTOR.RESETCOUNT 'BC'
  while38:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or39
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile38
  or39:
  whilebody38:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody38
  endwhile38:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB53:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while55:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf59
    DATA8 flag59
    DIVF F.1 2.0 tmpf59
    CP_EQF 0.0 2.0 flag59
    SELECTF flag59 0.0 tmpf59 F.0

    JR_GTEQF F.0 VGV_L endwhile55
  whilebody55:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB60:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf64
    DATA8 flag64
    DIVF F.1 2.0 tmpf64
    CP_EQF 0.0 2.0 flag64
    SELECTF flag64 0.0 tmpf64 F.0

    JR_LTF F.0 VGV_L whilebody55
  endwhile55:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while66:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf70
    DATA8 flag70
    DIVF F.1 2.0 tmpf70
    CP_EQF 0.0 2.0 flag70
    SELECTF flag70 0.0 tmpf70 F.0

    JR_GTEQF F.0 VGV_L endwhile66
  whilebody66:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB71 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB71:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf75
    DATA8 flag75
    DIVF F.1 2.0 tmpf75
    CP_EQF 0.0 2.0 flag75
    SELECTF flag75 0.0 tmpf75 F.0

    JR_LTF F.0 VGV_L whilebody66
  endwhile66:
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    CALL VECTOR.INIT 4.0 0.0 VGV_RES2
    MOVEF_F 0.0 VGV_I
  for78:
    JR_GTF VGV_I 3.0 endfor78
  forbody78:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB79:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while83:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf87
    DATA8 flag87
    DIVF F.1 2.0 tmpf87
    CP_EQF 0.0 2.0 flag87
    SELECTF flag87 0.0 tmpf87 F.0

    JR_GTEQF F.0 VGV_L endwhile83
  whilebody83:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB88 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB88:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf92
    DATA8 flag92
    DIVF F.1 2.0 tmpf92
    CP_EQF 0.0 2.0 flag92
    SELECTF flag92 0.0 tmpf92 F.0

    JR_LTF F.0 VGV_L whilebody83
  endwhile83:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody78
  endfor78:
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for95:
    JR_GTF VGV_I 3.0 endfor95
  forbody95:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM2 VGV_RES2
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.2
    CALL TEXT.APPEND S.2 ' ' S.1
    STRINGS VALUE_FORMATTED VGV_NUM2 '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else103_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
  else103_1:
  endif103:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody95
  endfor95:
    MOVEF_F 0.0 VGV_I
  for105:
    JR_GTF VGV_I 3.0 endfor105
  forbody105:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_GTEQF VGV_NUM 14.0 else107_1
    JR_EQF VGV_I VGV_W2 else107_1
    DATA32 tmp108
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp108
    JR_NEQ32 0 tmp108 alreadylaunched108
    OBJECT_START TF_BEEP_0
  alreadylaunched108:
    MOVEF_F VGV_I VGV_B2
  else107_1:
  endif107:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody105
  endfor105:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while111:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf115
    DATA8 flag115
    DIVF F.1 2.0 tmpf115
    CP_EQF 0.0 2.0 flag115
    SELECTF flag115 0.0 tmpf115 F.0

    JR_GTEQF F.0 VGV_L endwhile111
  whilebody111:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB116:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf120
    DATA8 flag120
    DIVF F.1 2.0 tmpf120
    CP_EQF 0.0 2.0 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    JR_LTF F.0 VGV_L whilebody111
  endwhile111:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for121:
    JR_GTF VGV_I 3.0 endfor121
  forbody121:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB122:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES2
    JR_GTEQF VGV_I 2.0 else125_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while127:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf131
    DATA8 flag131
    DIVF F.1 2.0 tmpf131
    CP_EQF 0.0 2.0 flag131
    SELECTF flag131 0.0 tmpf131 F.0

    JR_GTEQF F.0 VGV_L endwhile127
  whilebody127:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB132 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB132:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf136
    DATA8 flag136
    DIVF F.1 2.0 tmpf136
    CP_EQF 0.0 2.0 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    JR_LTF F.0 VGV_L whilebody127
  endwhile127:
    JR endif125
  else125_1:
    JR_NEQF VGV_I 2.0 else125_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while138:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf142
    DATA8 flag142
    DIVF F.1 2.0 tmpf142
    CP_EQF 0.0 2.0 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    JR_GTEQF F.0 VGV_L endwhile138
  whilebody138:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB143 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB143:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf147
    DATA8 flag147
    DIVF F.1 2.0 tmpf147
    CP_EQF 0.0 2.0 flag147
    SELECTF flag147 0.0 tmpf147 F.0

    JR_LTF F.0 VGV_L whilebody138
  endwhile138:
  else125_2:
  endif125:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody121
  endfor121:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB149:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for152:
    JR_GTF VGV_I 3.0 endfor152
  forbody152:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM2 VGV_RES2
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.2
    CALL TEXT.APPEND S.2 ' ' S.1
    STRINGS VALUE_FORMATTED VGV_NUM2 '%g' 99 S.2
    CALL TEXT.APPEND S.1 S.2 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else160_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
  else160_1:
  endif160:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody152
  endfor152:
    MOVEF_F 0.0 VGV_I
  for162:
    JR_GTF VGV_I 3.0 endfor162
  forbody162:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_GTEQF VGV_NUM 14.0 else164_1
    JR_EQF VGV_I VGV_W1 else164_1
    DATA32 tmp165
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp165
    JR_NEQ32 0 tmp165 alreadylaunched165
    OBJECT_START TF_BEEP_0
  alreadylaunched165:
    MOVEF_F VGV_I VGV_B1
  else164_1:
  endif164:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody162
  endfor162:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B1 VGV_W1 VGV_Z1
    ADDF VGV_B2 VGV_W2 VGV_Z2
    SUBF 20.0 VGV_B1 F.2
    SUBF F.2 VGV_B2 F.1
    SUBF F.1 VGV_W1 F.0
    SUBF F.0 VGV_W2 VGV_SUM
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_2
    MOVEF_F 40.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB186:
    MOVEF_F 35.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB187:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 203.410725292788 VGV_L
  while189:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf193
    DATA8 flag193
    DIVF F.1 2.0 tmpf193
    CP_EQF 0.0 2.0 flag193
    SELECTF flag193 0.0 tmpf193 F.0

    JR_GTEQF F.0 VGV_L endwhile189
  whilebody189:
    MOVEF_F 2.0 VGV_K
    MOVEF_F 20.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf206
    DATA8 flag206
    DIVF F.1 2.0 tmpf206
    CP_EQF 0.0 2.0 flag206
    SELECTF flag206 0.0 tmpf206 F.0

    JR_LTF F.0 VGV_L whilebody189
  endwhile189:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB207:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB209:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB210:
    MOVEF_F 95.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB211:
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB212:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB213:
    MOVEF_F 780.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB214:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB215:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB216:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB217:
    MOVEF_F 87.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB218:
    MOVEF_F 86.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB219:
    MOVEF_F 930.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB220:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 930.0 'true'

	DATA8 layer221
	DATA8 nos221
	DATA8 busy221
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer221 nos221
	JR_EQ8 0 nos221 motornotbusy221
  motorwaiting221:
	OUTPUT_TEST layer221 nos221 busy221
	JR_EQ8 busy221 0 motornotbusy221
	SLEEP
	JR motorwaiting221
  motornotbusy221:
    MOVEF_F 630.0 VGV_MM
    MOVEF_F 70.0 VGV_V
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf224
    DATA8 flag224
    DIVF VGV_MM F.1 tmpf224
    CP_EQF 0.0 F.1 flag224
    SELECTF flag224 0.0 tmpf224 F.0

    MULF F.0 360.0 VGV_L
    JR_GTEQF VGV_V 0.0 else226_1
    MOVEF_F -10.0 VGV_SP
    JR endif226
  else226_1:
    MOVEF_F 10.0 VGV_SP
  else226_2:
  endif226:
    MOVEF_F 0.0 VGV_DEG
    CALL MOTOR.RESETCOUNT 'BC'
    TIMER_READ timeMC6
  while229:
    JR_GTEQF VGV_DEG VGV_L endwhile229
    TIMER_READ timeMC6tmp
	SUB32 timeMC6tmp timeMC6 timeMC6tmp
	MOVE32_F timeMC6tmp F.0
    JR_GTEQF F.0 4500.0 endwhile229
  whilebody229:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf235
    DATA8 flag235
    DIVF F.0 2.0 tmpf235
    CP_EQF 0.0 2.0 flag235
    SELECTF flag235 0.0 tmpf235 VGV_DEG

    MULF VGV_L 0.7 F.0
    JR_LTEQF VGV_DEG F.0 else236_1
    MATH ABS VGV_SP F.0
    JR_LTEQF F.0 10.0 else236_1
    JR_LTEQF VGV_V 0.0 else239_1
    SUBF VGV_SP 0.2 VGV_SP
    JR endif239
  else239_1:
    ADDF VGV_SP 0.2 VGV_SP
  else239_2:
  endif239:
    JR endif236
  else236_1:
    MATH ABS VGV_SP F.0
    MATH ABS VGV_V F.1
    JR_GTEQF F.0 F.1 else236_2
    JR_LTEQF VGV_V 0.0 else244_1
    ADDF VGV_SP 0.2 VGV_SP
    JR endif244
  else244_1:
    SUBF VGV_SP 0.2 VGV_SP
  else244_2:
  endif244:
  else236_2:
  endif236:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_GTEQF VGV_DEG VGV_L and259
    TIMER_READ timeMC6tmp
	SUB32 timeMC6tmp timeMC6 timeMC6tmp
	MOVE32_F timeMC6tmp F.0
    JR_LTF F.0 4500.0 whilebody229
  and259:
  endwhile229:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB261:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB262:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 930.0 'true'

	DATA8 layer263
	DATA8 nos263
	DATA8 busy263
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer263 nos263
	JR_EQ8 0 nos263 motornotbusy263
  motorwaiting263:
	OUTPUT_TEST layer263 nos263 busy263
	JR_EQ8 busy263 0 motornotbusy263
	SLEEP
	JR motorwaiting263
  motornotbusy263:
    MOVEF_F 270.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB264:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB265:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while268:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile268
  whilebody268:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF -40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF -40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody268
  endwhile268:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB280:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 110.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB282:
    MOVEF_F 94.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB283:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB284:
    JR_EQF VGV_B 1.0 or286
    JR_NEQF VGV_W 2.0 else285_1
  or286:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB287:
    JR_NEQF VGV_W 2.0 else288_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB289:
  else288_1:
  endif288:
    JR_NEQF VGV_B 1.0 else290_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB291:
  else290_1:
  endif290:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB292:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB293:
    JR endif285
  else285_1:
    JR_EQF VGV_B 2.0 or294
    JR_NEQF VGV_W 1.0 else285_2
  or294:
    JR_NEQF VGV_B 2.0 else295_1
    JR_NEQF VGV_W 1.0 else295_1
    MOVEF_F 1.0 VGV_W1B2
  else295_1:
  endif295:
    JR_NEQF VGV_W 1.0 else296_1
    MOVEF_F 369.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB297:
    WRITE32 ENDSUB_F_W1_0:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB298:
  else296_1:
  endif296:
    JR_NEQF VGV_B 2.0 else299_1
    JR_EQF VGV_W 1.0 else299_1
    MOVEF_F 195.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    WRITE32 ENDSUB_F_B2_0:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB301:
  else299_1:
  endif299:
    JR_NEQF VGV_B 2.0 or303
    JR_EQF VGV_W 1.0 else302_1
  or303:
    MOVEF_F 110.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB304:
    MOVEF_F 94.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB305:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB306:
    JR endif302
  else302_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB307:
  else302_2:
  endif302:
  else285_2:
  endif285:
    JR_EQF VGV_B 4.0 or309
    JR_NEQF VGV_W 3.0 else308_1
  or309:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB310:
    JR_NEQF VGV_W 3.0 else311_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB312:
  else311_1:
  endif311:
    JR_NEQF VGV_B 4.0 else313_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB314:
  else313_1:
  endif313:
    JR endif308
  else308_1:
    JR_EQF VGV_B 3.0 or315
    JR_NEQF VGV_W 4.0 else308_2
  or315:
    JR_NEQF VGV_B 3.0 else316_1
    JR_NEQF VGV_W 4.0 else316_1
    MOVEF_F 1.0 VGV_W1B2
  else316_1:
  endif316:
    JR_NEQF VGV_W 4.0 else317_1
    MOVEF_F 118.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB318:
    WRITE32 ENDSUB_F_W1_0:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB319:
  else317_1:
  endif317:
    JR_NEQF VGV_B 3.0 else320_1
    JR_EQF VGV_W 4.0 else320_1
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB321:
    WRITE32 ENDSUB_F_B2_0:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB322:
  else320_1:
  endif320:
    JR endif308
  else308_2:
    JR_NEQF VGV_B 2.0 or323
    JR_EQF VGV_W 1.0 else308_3
  or323:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB324:
  else308_3:
  endif308:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else326_1
    JR_EQF VGV_W 4.0 else326_1
    JR_NEQF VGV_B 2.0 or327
    JR_EQF VGV_W 1.0 else326_1
  or327:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB328:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB329:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB330:
    MOVEF_F 93.0 VLV_DEG_2
    MOVEF_F -70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB331:
  else326_1:
  endif326:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB333:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB334:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB335:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB336:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while339:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile339
  whilebody339:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody339
  endwhile339:
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB351:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds353
	MOVEF_32 800.0 milliseconds353
	DATA32 timer353
	TIMER_WAIT milliseconds353 timer353
	TIMER_READY timer353
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds355
	MOVEF_32 800.0 milliseconds355
	DATA32 timer355
	TIMER_WAIT milliseconds355 timer355
	TIMER_READY timer355
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 1.0 0.0 'true' 

	DATA8 layer356
	DATA8 nos356
	DATA8 busy356
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer356 nos356
	JR_EQ8 0 nos356 motornotbusy356
  motorwaiting356:
	OUTPUT_TEST layer356 nos356 busy356
	JR_EQ8 busy356 0 motornotbusy356
	SLEEP
	JR motorwaiting356
  motornotbusy356:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB357:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -30.0
    DATA32 milliseconds360
	MOVEF_32 300.0 milliseconds360
	DATA32 timer360
	TIMER_WAIT milliseconds360 timer360
	TIMER_READY timer360
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB361:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_2
    MOVEF_F 70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB363:
    MOVEF_F 72.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB364:
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB365:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB366:
    MOVEF_F 570.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB367:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB368:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds370
	MOVEF_32 700.0 milliseconds370
	DATA32 timer370
	TIMER_WAIT milliseconds370 timer370
	TIMER_READY timer370
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB371:
    MOVEF_F 11.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB372:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB374:
    MOVEF_F 130.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB375:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB376:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB377:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB378:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 75.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB380:
    MOVEF_F 94.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB381:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB382:
    JR_EQF VGV_B 1.0 or384
    JR_NEQF VGV_W 2.0 else383_1
  or384:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB385:
    JR_NEQF VGV_W 2.0 else386_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB387:
  else386_1:
  endif386:
    JR_NEQF VGV_B 1.0 else388_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB389:
  else388_1:
  endif388:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB390:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB391:
    JR endif383
  else383_1:
    JR_EQF VGV_B 2.0 or392
    JR_NEQF VGV_W 1.0 else383_2
  or392:
    JR_NEQF VGV_B 2.0 else393_1
    JR_NEQF VGV_W 1.0 else393_1
    MOVEF_F 1.0 VGV_W1B2
  else393_1:
  endif393:
    JR_NEQF VGV_W 1.0 else394_1
    MOVEF_F 455.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB395:
    WRITE32 ENDSUB_F_W1_0:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB396:
  else394_1:
  endif394:
    JR_NEQF VGV_B 2.0 else397_1
    JR_EQF VGV_W 1.0 else397_1
    MOVEF_F 280.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB398:
    WRITE32 ENDSUB_F_B2_0:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB399:
  else397_1:
  endif397:
    JR_NEQF VGV_B 2.0 or401
    JR_EQF VGV_W 1.0 else400_1
  or401:
    MOVEF_F 75.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB402:
    MOVEF_F 94.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB403:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB404:
    JR endif400
  else400_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB405:
  else400_2:
  endif400:
  else383_2:
  endif383:
    JR_EQF VGV_B 4.0 or407
    JR_NEQF VGV_W 3.0 else406_1
  or407:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB408:
    JR_NEQF VGV_W 3.0 else409_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB410:
  else409_1:
  endif409:
    JR_NEQF VGV_B 4.0 else411_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB412:
  else411_1:
  endif411:
    JR endif406
  else406_1:
    JR_EQF VGV_B 3.0 or413
    JR_NEQF VGV_W 4.0 else406_2
  or413:
    JR_NEQF VGV_B 3.0 else414_1
    JR_NEQF VGV_W 4.0 else414_1
    MOVEF_F 1.0 VGV_W1B2
  else414_1:
  endif414:
    JR_NEQF VGV_W 4.0 else415_1
    MOVEF_F 45.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB416:
    WRITE32 ENDSUB_F_W1_0:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB417:
  else415_1:
  endif415:
    JR_NEQF VGV_B 3.0 else418_1
    JR_EQF VGV_W 4.0 else418_1
    MOVEF_F 227.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB419:
    WRITE32 ENDSUB_F_B2_0:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB420:
  else418_1:
  endif418:
    JR endif406
  else406_2:
    JR_NEQF VGV_B 2.0 or421
    JR_EQF VGV_W 1.0 else406_3
  or421:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB422:
  else406_3:
  endif406:
    JR_EQF VGV_B 3.0 else423_1
    JR_EQF VGV_W 4.0 else423_1
    JR_NEQF VGV_B 2.0 or424
    JR_EQF VGV_W 1.0 else423_1
  or424:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB425:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB426:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB427:
    JR endif423
  else423_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB428:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB429:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB430:
  else423_2:
  endif423:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB431:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB433:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB434:
    CALL MOTOR.RESETCOUNT 'BC'
  while436:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 68.0 endwhile436
  whilebody436:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 68.0 whilebody436
  endwhile436:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB448:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB449:
    MOVEF_F -50.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB450:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB451:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB452:
    MOVEF_F 230.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB453:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 85.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB455:
    MOVEF_F -35.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB456:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB457:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds460
	MOVEF_32 800.0 milliseconds460
	DATA32 timer460
	TIMER_WAIT milliseconds460 timer460
	TIMER_READY timer460
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB461:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB463:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB465:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB466:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB467:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB468:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB469:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 53.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB471:
    MOVEF_F 92.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB472:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB473:
    MOVEF_F -20.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB474:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB475:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf479
    DATA8 flag479
    DIVF VGV_TIME 1000.0 tmpf479
    CP_EQF 0.0 1000.0 flag479
    SELECTF flag479 0.0 tmpf479 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf482
    DATA8 flag482
    DIVF VGV_ZONE1 1000.0 tmpf482
    CP_EQF 0.0 1000.0 flag482
    SELECTF flag482 0.0 tmpf482 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf485
    DATA8 flag485
    DIVF VGV_ZONE2 1000.0 tmpf485
    CP_EQF 0.0 1000.0 flag485
    SELECTF flag485 0.0 tmpf485 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf489
    DATA8 flag489
    DIVF VGV_TIME 1000.0 tmpf489
    CP_EQF 0.0 1000.0 flag489
    SELECTF flag489 0.0 tmpf489 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB493:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf498
    DATA8 flag498
    DIVF F.0 F.1 tmpf498
    CP_EQF 0.0 F.1 flag498
    SELECTF flag498 0.0 tmpf498 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf503
    DATA8 flag503
    DIVF F.0 F.1 tmpf503
    CP_EQF 0.0 F.1 flag503
    SELECTF flag503 0.0 tmpf503 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds521
	MOVEF_32 500.0 milliseconds521
	DATA32 timer521
	TIMER_WAIT milliseconds521 timer521
	TIMER_READY timer521
  while522:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf526
    DATA8 flag526
    DIVF F.1 2.0 tmpf526
    CP_EQF 0.0 2.0 flag526
    SELECTF flag526 0.0 tmpf526 F.0

    JR_LTEQF F.0 35.0 endwhile522
  whilebody522:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf530
    DATA8 flag530
    DIVF F.1 2.0 tmpf530
    CP_EQF 0.0 2.0 flag530
    SELECTF flag530 0.0 tmpf530 F.0

    JR_GTF F.0 35.0 whilebody522
  endwhile522:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 23.0 0.0 'true' 

	DATA8 layer532
	DATA8 nos532
	DATA8 busy532
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer532 nos532
	JR_EQ8 0 nos532 motornotbusy532
  motorwaiting532:
	OUTPUT_TEST layer532 nos532 busy532
	JR_EQ8 busy532 0 motornotbusy532
	SLEEP
	JR motorwaiting532
  motornotbusy532:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else545_1
    JR_LTEQF VGV_R VGV_B else545_1
    MOVEF_F VGV_R VGV_MAX
    JR endif545
  else545_1:
    JR_LTEQF VGV_G VGV_R else545_2
    JR_LTEQF VGV_G VGV_B else545_2
    MOVEF_F VGV_G VGV_MAX
    JR endif545
  else545_2:
    JR_LTEQF VGV_B VGV_R else545_3
    JR_LTEQF VGV_B VGV_G else545_3
    MOVEF_F VGV_B VGV_MAX
  else545_3:
  endif545:
    JR_GTEQF VGV_R VGV_G else546_1
    JR_GTEQF VGV_R VGV_B else546_1
    MOVEF_F VGV_R VGV_MIN
    JR endif546
  else546_1:
    JR_GTEQF VGV_G VGV_R else546_2
    JR_GTEQF VGV_G VGV_B else546_2
    MOVEF_F VGV_G VGV_MIN
    JR endif546
  else546_2:
    JR_GTEQF VGV_B VGV_R else546_3
    JR_GTEQF VGV_B VGV_G else546_3
    MOVEF_F VGV_B VGV_MIN
  else546_3:
  endif546:
    JR_NEQF VGV_MAX VGV_MIN else547_1
    MOVEF_F 0.0 VGV_H
    JR endif547
  else547_1:
    JR_NEQF VGV_R VGV_MAX else548_1
    JR_LTF VGV_G VGV_B else549_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf553
    DATA8 flag553
    DIVF F.0 F.1 tmpf553
    CP_EQF 0.0 F.1 flag553
    SELECTF flag553 0.0 tmpf553 VGV_H

    JR endif549
  else549_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf557
    DATA8 flag557
    DIVF F.1 F.2 tmpf557
    CP_EQF 0.0 F.2 flag557
    SELECTF flag557 0.0 tmpf557 F.0

    ADDF F.0 360.0 VGV_H
  else549_2:
  endif549:
    JR endif548
  else548_1:
    JR_NEQF VGV_MAX VGV_G else559_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf563
    DATA8 flag563
    DIVF F.1 F.2 tmpf563
    CP_EQF 0.0 F.2 flag563
    SELECTF flag563 0.0 tmpf563 F.0

    ADDF F.0 120.0 VGV_H
    JR endif559
  else559_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf568
    DATA8 flag568
    DIVF F.1 F.2 tmpf568
    CP_EQF 0.0 F.2 flag568
    SELECTF flag568 0.0 tmpf568 F.0

    ADDF F.0 240.0 VGV_H
  else559_2:
  endif559:
  else548_2:
  endif548:
  else547_2:
  endif547:
    JR_NEQF VGV_MAX 0.0 else570_1
    MOVEF_F 0.0 VGV_S
    JR endif570
  else570_1:
    DATAF tmpf571
    DATA8 flag571
    DIVF VGV_MIN VGV_MAX tmpf571
    CP_EQF 0.0 VGV_MAX flag571
    SELECTF flag571 0.0 tmpf571 VGV_S

  else570_2:
  endif570:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
    MULF VGV_H VGV_S F.0
    MULF F.0 VGV_V VGV_HSV
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else575_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB577:
    MOVEF_F 160.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB578:
    JR_NEQF VGV_W 1.0 else579_1
    MOVEF_F 5.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB580:
  else579_1:
  endif579:
    JR endif575
  else575_1:
    MOVEF_F 95.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB581:
    MOVEF_F 90.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB582:
  else575_2:
  endif575:
    JR_NEQF VGV_W1B2 1.0 else583_1
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB584:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else585_1
    MOVEF_F 65.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB587:
    JR endif585
  else585_1:
    MOVEF_F 55.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB588:
  else585_2:
  endif585:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else590_1
    DATA32 milliseconds592
	MOVEF_32 700.0 milliseconds592
	DATA32 timer592
	TIMER_WAIT milliseconds592 timer592
	TIMER_READY timer592
  else590_1:
  endif590:
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB593:
    MOVEF_F 5.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB594:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else595_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB597:
  else595_1:
  endif595:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else598_1
    MOVEF_F 58.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB600:
    JR endif598
  else598_1:
    MOVEF_F 48.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB601:
  else598_2:
  endif598:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB602:
  else583_1:
  endif583:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else604_1
    DATA32 milliseconds606
	MOVEF_32 700.0 milliseconds606
	DATA32 timer606
	TIMER_WAIT milliseconds606 timer606
	TIMER_READY timer606
  else604_1:
  endif604:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 10.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB607:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB608:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else609_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB611:
  else609_1:
  endif609:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB612:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else613_1
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB615:
    JR endif613
  else613_1:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB616:
  else613_2:
  endif613:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB617:
    JR_EQF VGV_W1B2 1.0 else618_1
    JR_EQF VGV_W 4.0 else618_1
    MOVEF_F 65.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB619:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB620:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB621:
    MOVEF_F 30.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB622:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB623:
  else618_1:
  endif618:
    MOVEF_F 0.0 VGV_W1B2
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else625_1
    DATA32 milliseconds627
	MOVEF_32 1000.0 milliseconds627
	DATA32 timer627
	TIMER_WAIT milliseconds627 timer627
	TIMER_READY timer627
  else625_1:
  endif625:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB628:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else629_1
    JR_NEQF VGV_W 3.0 else631_1
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB632:
    JR endif631
  else631_1:
    MOVEF_F 17.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB633:
  else631_2:
  endif631:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB635:
  else629_1:
  endif629:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB637:
    MOVEF_F 22.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB638:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else640_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB642:
  else640_1:
  endif640:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else643_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB645:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB646:
    JR endif643
  else643_1:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB647:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB648:
  else643_2:
  endif643:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB650:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB651:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else653_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB655:
  else653_1:
  endif653:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else656_1
    JR_NEQF VGV_B 3.0 else656_1
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB658:
    JR endif656
  else656_1:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB659:
  else656_2:
  endif656:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB660:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB661:
    JR_NEQF VGV_B 2.0 else662_1
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB663:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB664:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB665:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB666:
  else662_1:
  endif662:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf669
    DATA8 flag669
    DIVF VLV_MM_1 F.1 tmpf669
    CP_EQF 0.0 F.1 flag669
    SELECTF flag669 0.0 tmpf669 F.0

    MULF F.0 360.0 VLV_L_1
    JR_GTEQF VLV_V_1 0.0 else671_1
    MOVEF_F -10.0 VLV_SP_1
    JR endif671
  else671_1:
    MOVEF_F 10.0 VLV_SP_1
  else671_2:
  endif671:
    MOVEF_F 0.0 VLV_DEG_1
    CALL MOTOR.RESETCOUNT 'BC'
  while673:
    JR_GTEQF VLV_DEG_1 VLV_L_1 endwhile673
  whilebody673:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf678
    DATA8 flag678
    DIVF F.0 2.0 tmpf678
    CP_EQF 0.0 2.0 flag678
    SELECTF flag678 0.0 tmpf678 VLV_DEG_1

    MULF VLV_L_1 0.7 F.0
    JR_LTEQF VLV_DEG_1 F.0 else679_1
    MATH ABS VLV_SP_1 F.0
    JR_LTEQF F.0 10.0 else679_1
    JR_LTEQF VLV_V_1 0.0 else682_1
    SUBF VLV_SP_1 0.2 VLV_SP_1
    JR endif682
  else682_1:
    ADDF VLV_SP_1 0.2 VLV_SP_1
  else682_2:
  endif682:
    JR endif679
  else679_1:
    MATH ABS VLV_SP_1 F.0
    MATH ABS VLV_V_1 F.1
    JR_GTEQF F.0 F.1 else679_2
    JR_LTEQF VLV_V_1 0.0 else687_1
    ADDF VLV_SP_1 0.2 VLV_SP_1
    JR endif687
  else687_1:
    SUBF VLV_SP_1 0.2 VLV_SP_1
  else687_2:
  endif687:
  else679_2:
  endif679:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_1
    MULF VLV_U_1 2.0 F.1
    ADDF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_1 2.0 F.1
    SUBF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_1 VLV_L_1 whilebody673
  endwhile673:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_2 F.0
    DATAF tmpf700
    DATA8 flag700
    DIVF F.0 360.0 tmpf700
    CP_EQF 0.0 360.0 flag700
    SELECTF flag700 0.0 tmpf700 VLV_L_2

    DATAF tmpf701
    DATA8 flag701
    DIVF VLV_L_2 210.38 tmpf701
    CP_EQF 0.0 210.38 flag701
    SELECTF flag701 0.0 tmpf701 F.0

    MULF F.0 360.0 VLV_L_2
    MOVEF_F 30.0 VLV_V_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_2
  while704:
    JR_GTF VLV_DEG_2 VLV_L_2 endwhile704
  whilebody704:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_2
    CALL MOTOR.STARTPOWER 'B' VLV_V_2
    MULF VLV_L_2 0.2 F.0
    JR_LTF VLV_DEG_2 F.0 or709
    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else708_1
  or709:
    JR_GTEQF VLV_SP_2 0.0 else712_1
    MOVEF_F -30.0 VLV_V_2
    JR endif712
  else712_1:
    MOVEF_F 30.0 VLV_V_2
  else712_2:
  endif712:
    JR endif708
  else708_1:
    MOVEF_F VLV_SP_2 VLV_V_2
  else708_2:
  endif708:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_2 VLV_L_2 whilebody704
  endwhile704:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf716
    DATA8 flag716
    DIVF F.0 360.0 tmpf716
    CP_EQF 0.0 360.0 flag716
    SELECTF flag716 0.0 tmpf716 VLV_L_3

    DATAF tmpf717
    DATA8 flag717
    DIVF VLV_L_3 210.38 tmpf717
    CP_EQF 0.0 210.38 flag717
    SELECTF flag717 0.0 tmpf717 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while720:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile720
  whilebody720:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'C' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or725
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else724_1
  or725:
    JR_GTEQF VLV_SP_3 0.0 else728_1
    MOVEF_F -30.0 VLV_V_3
    JR endif728
  else728_1:
    MOVEF_F 30.0 VLV_V_3
  else728_2:
  endif728:
    JR endif724
  else724_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else724_2:
  endif724:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody720
  endwhile720:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_4 F.0
    DATAF tmpf735
    DATA8 flag735
    DIVF F.0 360.0 tmpf735
    CP_EQF 0.0 360.0 flag735
    SELECTF flag735 0.0 tmpf735 VLV_L_4

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf738
    DATA8 flag738
    DIVF VLV_L_4 F.2 tmpf738
    CP_EQF 0.0 F.2 flag738
    SELECTF flag738 0.0 tmpf738 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf740
    DATA8 flag740
    DIVF F.0 2.0 tmpf740
    CP_EQF 0.0 2.0 flag740
    SELECTF flag740 0.0 tmpf740 VLV_L_4

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_4
    MOVEF_F 0.0 VLV_DEG_4
  while742:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile742
  whilebody742:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf748
    DATA8 flag748
    DIVF F.0 2.0 tmpf748
    CP_EQF 0.0 2.0 flag748
    SELECTF flag748 0.0 tmpf748 VLV_DEG_4

    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or750
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else749_1
  or750:
    MOVEF_F 30.0 VLV_V_4
    JR endif749
  else749_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else749_2:
  endif749:
    CALL MOTOR.STARTPOWER 'B' VLV_V_4
    SUBF 0.0 VLV_V_4 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody742
  endwhile742:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf761
    DATA8 flag761
    DIVF F.0 360.0 tmpf761
    CP_EQF 0.0 360.0 flag761
    SELECTF flag761 0.0 tmpf761 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf764
    DATA8 flag764
    DIVF VLV_L_5 F.2 tmpf764
    CP_EQF 0.0 F.2 flag764
    SELECTF flag764 0.0 tmpf764 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf766
    DATA8 flag766
    DIVF F.0 2.0 tmpf766
    CP_EQF 0.0 2.0 flag766
    SELECTF flag766 0.0 tmpf766 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while768:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile768
  whilebody768:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf774
    DATA8 flag774
    DIVF F.0 2.0 tmpf774
    CP_EQF 0.0 2.0 flag774
    SELECTF flag774 0.0 tmpf774 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or776
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else775_1
  or776:
    MOVEF_F 30.0 VLV_V_5
    JR endif775
  else775_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else775_2:
  endif775:
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_5
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody768
  endwhile768:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while785:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or786
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile785
  or786:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile785
  whilebody785:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or806
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and805
  or806:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody785
  and805:
  endwhile785:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while818:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or819
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile818
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile818
  or819:
  whilebody818:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody818
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and842
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody818
  and842:
  endwhile818:
    JR_GTEQF VLV_SP_9 0.0 else848_1
    MOVEF_F -70.0 VLV_SP_9
    JR endif848
  else848_1:
    MOVEF_F 70.0 VLV_SP_9
  else848_2:
  endif848:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_9
    DATA32 milliseconds850
	MOVEF_32 300.0 milliseconds850
	DATA32 timer850
	TIMER_WAIT milliseconds850 timer850
	TIMER_READY timer850
    DATA32 tmp851
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp851
    JR_NEQ32 0 tmp851 alreadylaunched851
    OBJECT_START TF_BEEP_0
  alreadylaunched851:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_10
    DATA8 layer853
	DATA8 no853
	DATA8 mode8853
	
	MOVEF_8 2.0 no853
	SUB8 no853 1 no853
	DIV8 no853 4 layer853
	MATH MOD8 no853 4 no853

	MOVEF_8 2.0 mode8853
	
	INPUT_DEVICE READY_RAW layer853 no853 0 mode8853 0
    DATA8 layer854
	DATA8 no854
	DATA8 mode8854
	
	MOVEF_8 3.0 no854
	SUB8 no854 1 no854
	DIV8 no854 4 layer854
	MATH MOD8 no854 4 no854

	MOVEF_8 2.0 mode8854
	
	INPUT_DEVICE READY_RAW layer854 no854 0 mode8854 0
  while855:
    JR_EQF VLV_WHITE_10 1.0 endwhile855
  whilebody855:
    CALL MOTOR.RESETCOUNT 'BC'
  while857:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or858
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile857
  or858:
  whilebody857:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody857
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody857
  endwhile857:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_10
  while873:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_10 endwhile873
  whilebody873:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_10 whilebody873
  endwhile873:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else887_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else887_1
    MOVEF_F 1.0 VLV_WHITE_10
  else887_1:
  endif887:
    JR_NEQF VLV_WHITE_10 1.0 whilebody855
  endwhile855:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer891
	DATA8 no891
	DATA8 mode8891
	
	MOVEF_8 2.0 no891
	SUB8 no891 1 no891
	DIV8 no891 4 layer891
	MATH MOD8 no891 4 no891

	MOVEF_8 0.0 mode8891
	
	INPUT_DEVICE READY_RAW layer891 no891 0 mode8891 0
    DATA8 layer892
	DATA8 no892
	DATA8 mode8892
	
	MOVEF_8 3.0 no892
	SUB8 no892 1 no892
	DIV8 no892 4 layer892
	MATH MOD8 no892 4 no892

	MOVEF_8 0.0 mode8892
	
	INPUT_DEVICE READY_RAW layer892 no892 0 mode8892 0
  while893:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile893
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile893
  whilebody893:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 0.8 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 0.8 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and905
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody893
  and905:
  endwhile893:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds912
	MOVEF_32 500.0 milliseconds912
	DATA32 timer912
	TIMER_WAIT milliseconds912 timer912
	TIMER_READY timer912
  while913:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf917
    DATA8 flag917
    DIVF F.1 2.0 tmpf917
    CP_EQF 0.0 2.0 flag917
    SELECTF flag917 0.0 tmpf917 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile913
  whilebody913:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf923
    DATA8 flag923
    DIVF F.1 2.0 tmpf923
    CP_EQF 0.0 2.0 flag923
    SELECTF flag923 0.0 tmpf923 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody913
  endwhile913:
    CALL MOTOR.STOP VLV_MOTOR_11 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_12 VLV_SP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds928
	MOVEF_32 500.0 milliseconds928
	DATA32 timer928
	TIMER_WAIT milliseconds928 timer928
	TIMER_READY timer928
  while929:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf933
    DATA8 flag933
    DIVF F.1 2.0 tmpf933
    CP_EQF 0.0 2.0 flag933
    SELECTF flag933 0.0 tmpf933 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile929
  whilebody929:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf938
    DATA8 flag938
    DIVF F.1 2.0 tmpf938
    CP_EQF 0.0 2.0 flag938
    SELECTF flag938 0.0 tmpf938 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody929
  endwhile929:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
  while944:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_LTEQF F.0 -23.0 endwhile944
  whilebody944:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_GTF F.0 -23.0 whilebody944
  endwhile944:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
