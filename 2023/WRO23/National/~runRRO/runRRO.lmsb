DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAF VLV_MM_1
DATAF VLV_V_1
DATAF VLV_DEG_2
DATAF VLV_SP_2
DATAF VLV_SP_10
DATAF VLV_SP_7
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_SP_6
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAS VLV_MOTOR_11 252
DATAF VLV_SP_11
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAF VLV_SP_9
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_WT
DATAF VGV_BL
DATAF VGV_L
DATAF VGV_U
DATAF VGV_SP
DATAF VGV_FIN
ARRAY16 VGV_RESLT 2
ARRAY16 VGV_RSLT 2
DATAF VGV_SUM
DATAF VGV_S1
DATAF VGV_S2
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_HSV
DATAF VLV_L_1
DATAF VLV_SP_1
DATAF VLV_DEG_1
DATAF VLV_U_1
DATAF VLV_L_2
DATAF VLV_V_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_U_9
DATAF VLV_WHITE_10
DATAF VLV_U_10
DATAF VLV_L_10
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_SP_7
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_6
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_WT
    MOVEF_F 0.0 VGV_BL
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_FIN
    CALL ARRAYCREATE_FLOAT VGV_RESLT
    CALL ARRAYCREATE_FLOAT VGV_RSLT
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_HSV
    MOVEF_F 0.0 VLV_L_1
    MOVEF_F 0.0 VLV_SP_1
    MOVEF_F 0.0 VLV_DEG_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_U_9
    MOVEF_F 0.0 VLV_WHITE_10
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_L_10
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 0
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch743
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch743:
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_SP_7
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_6
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_WT
    MOVEF_F 0.0 VGV_BL
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_FIN
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RESLT
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RSLT
    MOVEF_F 0.0 VGV_SUM
    TIMER_READ timeMC1
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 4.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_WT
    MOVEF_F 0.0 VGV_BL
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F 80.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB7:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F 50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB8:
    MOVEF_F 170.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB9:
    MOVEF_F 90.0 VLV_DEG_2
    MOVEF_F 50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB10:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB11:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB12:
    MOVEF_F 30.0 VLV_SP_7
    WRITE32 ENDSUB_F_LEFT_1:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT_1
CALLSUB13:
    CALL MOTOR.START 'AD' 30.0
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while16:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf20
    DATA8 flag20
    DIVF F.1 2.0 tmpf20
    CP_EQF 0.0 2.0 flag20
    SELECTF flag20 0.0 tmpf20 F.0

    JR_GTEQF F.0 VGV_L endwhile16
  whilebody16:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB21 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB21:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf25
    DATA8 flag25
    DIVF F.1 2.0 tmpf25
    CP_EQF 0.0 2.0 flag25
    SELECTF flag25 0.0 tmpf25 F.0

    JR_LTF F.0 VGV_L whilebody16
  endwhile16:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 647.215944113417 VGV_L
  while27:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF F.1 2.0 tmpf31
    CP_EQF 0.0 2.0 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    JR_GTEQF F.0 VGV_L endwhile27
  whilebody27:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB32:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf36
    DATA8 flag36
    DIVF F.1 2.0 tmpf36
    CP_EQF 0.0 2.0 flag36
    SELECTF flag36 0.0 tmpf36 F.0

    JR_LTF F.0 VGV_L whilebody27
  endwhile27:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB37:
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 15.0 0.0 'true' 

	DATA8 layer38
	DATA8 nos38
	DATA8 busy38
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer38 nos38
	JR_EQ8 0 nos38 motornotbusy38
  motorwaiting38:
	OUTPUT_TEST layer38 nos38 busy38
	JR_EQ8 busy38 0 motornotbusy38
	SLEEP
	JR motorwaiting38
  motornotbusy38:
    MOVEF_F 90.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB39:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB40:
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_RIGHT_1:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT_1
CALLSUB41:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 203.410725292788 VGV_L
  while43:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.1 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 F.0

    JR_GTEQF F.0 VGV_L endwhile43
  whilebody43:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB48 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB48:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF F.1 2.0 tmpf52
    CP_EQF 0.0 2.0 flag52
    SELECTF flag52 0.0 tmpf52 F.0

    JR_LTF F.0 VGV_L whilebody43
  endwhile43:
  while53:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile53
  whilebody53:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB55:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody53
  endwhile53:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F 70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB57 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB57:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB58 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB58:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB59:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB60:
    MOVEF_F 30.0 VLV_SP_7
    WRITE32 ENDSUB_F_LEFT_1:CALLSUB61 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT_1
CALLSUB61:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 203.410725292788 VGV_L
  while63:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf67
    DATA8 flag67
    DIVF F.1 2.0 tmpf67
    CP_EQF 0.0 2.0 flag67
    SELECTF flag67 0.0 tmpf67 F.0

    JR_GTEQF F.0 VGV_L endwhile63
  whilebody63:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB68 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB68:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF F.1 2.0 tmpf72
    CP_EQF 0.0 2.0 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    JR_LTF F.0 VGV_L whilebody63
  endwhile63:
  while73:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile73
  whilebody73:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB75 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB75:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody73
  endwhile73:
    MOVEF_F 30.0 VLV_SP_7
    WRITE32 ENDSUB_F_LEFT_1:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT_1
CALLSUB77:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB78 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while80:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf84
    DATA8 flag84
    DIVF F.1 2.0 tmpf84
    CP_EQF 0.0 2.0 flag84
    SELECTF flag84 0.0 tmpf84 F.0

    JR_GTEQF F.0 VGV_L endwhile80
  whilebody80:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB85 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB85:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf89
    DATA8 flag89
    DIVF F.1 2.0 tmpf89
    CP_EQF 0.0 2.0 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    JR_LTF F.0 VGV_L whilebody80
  endwhile80:
  while90:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or91
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile90
  or91:
  whilebody90:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB94 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB94:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody90
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody90
  endwhile90:
    MOVEF_F 110.0 VLV_DEG_2
    MOVEF_F 50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB97:
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB98 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB98:
    MOVEF_F 110.0 VLV_DEG_2
    MOVEF_F -50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB99 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB99:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB100:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while102:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf106
    DATA8 flag106
    DIVF F.1 2.0 tmpf106
    CP_EQF 0.0 2.0 flag106
    SELECTF flag106 0.0 tmpf106 F.0

    JR_GTEQF F.0 VGV_L endwhile102
  whilebody102:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB107:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf111
    DATA8 flag111
    DIVF F.1 2.0 tmpf111
    CP_EQF 0.0 2.0 flag111
    SELECTF flag111 0.0 tmpf111 F.0

    JR_LTF F.0 VGV_L whilebody102
  endwhile102:
  while112:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or113
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile112
  or113:
  whilebody112:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB116:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody112
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody112
  endwhile112:
    MOVEF_F 5.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB119:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB120:
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 7.0 0.0 'true' 

	DATA8 layer121
	DATA8 nos121
	DATA8 busy121
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer121 nos121
	JR_EQ8 0 nos121 motornotbusy121
  motorwaiting121:
	OUTPUT_TEST layer121 nos121 busy121
	JR_EQ8 busy121 0 motornotbusy121
	SLEEP
	JR motorwaiting121
  motornotbusy121:
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB122:
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB123:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F 50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB124 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB124:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB125:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB126:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB127:
    MOVEF_F 110.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB128:
    MOVEF_F 88.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB129 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB129:
    MOVEF_F 50.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB130 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB130:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB131 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB131:
    MOVEF_F 550.0 VLV_MM_1
    MOVEF_F -90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB132 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB132:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB133:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB134:
    MOVEF_F 110.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB135:
    MOVEF_F 88.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB136:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB137 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB137:
    MOVEF_F 185.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB138:
    WRITE32 ENDSUB_F_B2_0:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB139:
    MOVEF_F 110.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB140 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB140:
    MOVEF_F 88.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB141:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB142:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB143 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB143:
    WRITE32 ENDSUB_F_W2_0:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB144:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB145:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB146 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB146:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB147 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB147:
    MOVEF_F 93.0 VLV_DEG_2
    MOVEF_F -70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB148:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB150 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB150:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB151 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB151:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB152 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB152:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB153 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB153:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while156:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile156
  whilebody156:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody156
  endwhile156:
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB168:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds170
	MOVEF_32 800.0 milliseconds170
	DATA32 timer170
	TIMER_WAIT milliseconds170 timer170
	TIMER_READY timer170
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds172
	MOVEF_32 800.0 milliseconds172
	DATA32 timer172
	TIMER_WAIT milliseconds172 timer172
	TIMER_READY timer172
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 1.0 0.0 'true' 

	DATA8 layer173
	DATA8 nos173
	DATA8 busy173
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer173 nos173
	JR_EQ8 0 nos173 motornotbusy173
  motorwaiting173:
	OUTPUT_TEST layer173 nos173 busy173
	JR_EQ8 busy173 0 motornotbusy173
	SLEEP
	JR motorwaiting173
  motornotbusy173:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB174:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds176
	MOVEF_32 300.0 milliseconds176
	DATA32 timer176
	TIMER_WAIT milliseconds176 timer176
	TIMER_READY timer176
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB177:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_2
    MOVEF_F 70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB179:
    MOVEF_F 72.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB180:
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB181:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB182:
    MOVEF_F 1100.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB183:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB184:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB185:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB186:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB187:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB188:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB189:
    MOVEF_F 0.0 VGV_FIN
  while190:
    JR_NEQF VGV_FIN 0.0 endwhile190
  whilebody190:
    DATA8 layer191
	DATA8 no191
	DATA8 mode8191
	
	MOVEF_8 2.0 no191
	SUB8 no191 1 no191
	DIV8 no191 4 layer191
	MATH MOD8 no191 4 no191

	MOVEF_8 4.0 mode8191
	
	INPUT_DEVICE READY_RAW layer191 no191 0 mode8191 0
    CALL ARRAYSTORE_FLOAT 1.0 0.0 VGV_RESLT
    CALL MOTOR.RESETCOUNT 'BC'
  while194:
    CALL ARRAYGET_FLOAT 1.0 F.0 VGV_RSLT
    JR_GTEQF F.0 220.0 endwhile194
  whilebody194:
    CALL SENSOR.READRAW 2.0 3.0 VGV_RSLT
    CALL ARRAYGET_FLOAT 0.0 F.1 VGV_RSLT
    CALL ARRAYGET_FLOAT 1.0 F.2 VGV_RSLT
    ADDF F.1 F.2 F.0
    CALL ARRAYGET_FLOAT 2.0 F.1 VGV_RSLT
    ADDF F.0 F.1 VGV_SUM
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL ARRAYGET_FLOAT 1.0 F.0 VGV_RSLT
    JR_LTF F.0 220.0 whilebody194
  endwhile194:
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB212:
    CALL ARRAYGET_FLOAT 1.0 F.0 VGV_RSLT
    JR_LTEQF F.0 210.0 else213_1
    MOVEF_F 1.0 VGV_FIN
  else213_1:
  endif213:
    JR_EQF VGV_FIN 0.0 whilebody190
  endwhile190:
    DATA8 layer215
	DATA8 no215
	DATA8 mode8215
	
	MOVEF_8 2.0 no215
	SUB8 no215 1 no215
	DIV8 no215 4 layer215
	MATH MOD8 no215 4 no215

	MOVEF_8 0.0 mode8215
	
	INPUT_DEVICE READY_RAW layer215 no215 0 mode8215 0
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB216:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB217:
    MOVEF_F -50.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB218:
    MOVEF_F 250.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB219:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB220:
    MOVEF_F 230.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB221:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 85.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB223:
    MOVEF_F -35.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB224:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB225:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds228
	MOVEF_32 800.0 milliseconds228
	DATA32 timer228
	TIMER_WAIT milliseconds228 timer228
	TIMER_READY timer228
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F 50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB229:
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB230:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB231:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB232:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB233:
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_RIGHT_1:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT_1
CALLSUB234:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while236:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf240
    DATA8 flag240
    DIVF F.1 2.0 tmpf240
    CP_EQF 0.0 2.0 flag240
    SELECTF flag240 0.0 tmpf240 F.0

    JR_GTEQF F.0 VGV_L endwhile236
  whilebody236:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB241:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf245
    DATA8 flag245
    DIVF F.1 2.0 tmpf245
    CP_EQF 0.0 2.0 flag245
    SELECTF flag245 0.0 tmpf245 F.0

    JR_LTF F.0 VGV_L whilebody236
  endwhile236:
  while246:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 30.0 endwhile246
  whilebody246:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB248:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 30.0 whilebody246
  endwhile246:
    MOVEF_F 180.0 VLV_DEG_5
    MOVEF_F 70.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB250:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while252:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf256
    DATA8 flag256
    DIVF F.1 2.0 tmpf256
    CP_EQF 0.0 2.0 flag256
    SELECTF flag256 0.0 tmpf256 F.0

    JR_GTEQF F.0 VGV_L endwhile252
  whilebody252:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB257:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf261
    DATA8 flag261
    DIVF F.1 2.0 tmpf261
    CP_EQF 0.0 2.0 flag261
    SELECTF flag261 0.0 tmpf261 F.0

    JR_LTF F.0 VGV_L whilebody252
  endwhile252:
  while262:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 or263
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile262
  or263:
  whilebody262:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB266:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody262
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody262
  endwhile262:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB269:
    MOVEF_F 267.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB270:
    MOVEF_F 90.0 VLV_DEG_2
    MOVEF_F 50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB271:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB272:
    MOVEF_F 90.0 VLV_DEG_2
    MOVEF_F -50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB273:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while275:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf279
    DATA8 flag279
    DIVF F.1 2.0 tmpf279
    CP_EQF 0.0 2.0 flag279
    SELECTF flag279 0.0 tmpf279 F.0

    JR_GTEQF F.0 VGV_L endwhile275
  whilebody275:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB280:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf284
    DATA8 flag284
    DIVF F.1 2.0 tmpf284
    CP_EQF 0.0 2.0 flag284
    SELECTF flag284 0.0 tmpf284 F.0

    JR_LTF F.0 VGV_L whilebody275
  endwhile275:
  while285:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 or286
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 30.0 endwhile285
  or286:
  whilebody285:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB289:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody285
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 30.0 whilebody285
  endwhile285:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F 50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB292:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB293:
    MOVEF_F 350.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB294:
    MOVEF_F 170.0 VLV_DEG_5
    MOVEF_F 70.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB295:
    MOVEF_F 92.459420587631 VGV_L
  while296:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf300
    DATA8 flag300
    DIVF F.1 2.0 tmpf300
    CP_EQF 0.0 2.0 flag300
    SELECTF flag300 0.0 tmpf300 F.0

    JR_GTEQF F.0 VGV_L endwhile296
  whilebody296:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB301:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf305
    DATA8 flag305
    DIVF F.1 2.0 tmpf305
    CP_EQF 0.0 2.0 flag305
    SELECTF flag305 0.0 tmpf305 F.0

    JR_LTF F.0 VGV_L whilebody296
  endwhile296:
  while306:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 30.0 endwhile306
  whilebody306:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB308:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 30.0 whilebody306
  endwhile306:
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_RIGHT_1:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT_1
CALLSUB310:
    MOVEF_F 822.888843229916 VGV_L
  while311:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf315
    DATA8 flag315
    DIVF F.1 2.0 tmpf315
    CP_EQF 0.0 2.0 flag315
    SELECTF flag315 0.0 tmpf315 F.0

    JR_GTEQF F.0 VGV_L endwhile311
  whilebody311:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB316:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf320
    DATA8 flag320
    DIVF F.1 2.0 tmpf320
    CP_EQF 0.0 2.0 flag320
    SELECTF flag320 0.0 tmpf320 F.0

    JR_LTF F.0 VGV_L whilebody311
  endwhile311:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB321:
    MOVEF_F 230.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB322:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB323:
    MOVEF_F 170.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB324:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB325:
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_RIGHT_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT_1
CALLSUB326:
    MOVEF_F 92.459420587631 VGV_L
  while327:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf331
    DATA8 flag331
    DIVF F.1 2.0 tmpf331
    CP_EQF 0.0 2.0 flag331
    SELECTF flag331 0.0 tmpf331 F.0

    JR_GTEQF F.0 VGV_L endwhile327
  whilebody327:
    WRITE32 ENDSUB_F_LINE3_0:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_0
CALLSUB332:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf336
    DATA8 flag336
    DIVF F.1 2.0 tmpf336
    CP_EQF 0.0 2.0 flag336
    SELECTF flag336 0.0 tmpf336 F.0

    JR_LTF F.0 VGV_L whilebody327
  endwhile327:
  while337:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile337
  whilebody337:
    WRITE32 ENDSUB_F_LINE2_0:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_0
CALLSUB339:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody337
  endwhile337:
    MOVEF_F 180.0 VLV_DEG_2
    MOVEF_F 50.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB341:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -40.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB342:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB343:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB344:
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB345:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf350
    DATA8 flag350
    DIVF F.0 F.1 tmpf350
    CP_EQF 0.0 F.1 flag350
    SELECTF flag350 0.0 tmpf350 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf355
    DATA8 flag355
    DIVF F.0 F.1 tmpf355
    CP_EQF 0.0 F.1 flag355
    SELECTF flag355 0.0 tmpf355 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE2_0:
    MOVEF_F 0.7 VGV_K
    MOVEF_F 55.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_0:
SUB_F_LINE3_0:
    MOVEF_F 1.5 VGV_K
    MOVEF_F 30.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else386_1
    JR_LTEQF VGV_R VGV_B else386_1
    MOVEF_F VGV_R VGV_MAX
    JR endif386
  else386_1:
    JR_LTEQF VGV_G VGV_R else386_2
    JR_LTEQF VGV_G VGV_B else386_2
    MOVEF_F VGV_G VGV_MAX
    JR endif386
  else386_2:
    JR_LTEQF VGV_B VGV_R else386_3
    JR_LTEQF VGV_B VGV_G else386_3
    MOVEF_F VGV_B VGV_MAX
  else386_3:
  endif386:
    JR_GTEQF VGV_R VGV_G else387_1
    JR_GTEQF VGV_R VGV_B else387_1
    MOVEF_F VGV_R VGV_MIN
    JR endif387
  else387_1:
    JR_GTEQF VGV_G VGV_R else387_2
    JR_GTEQF VGV_G VGV_B else387_2
    MOVEF_F VGV_G VGV_MIN
    JR endif387
  else387_2:
    JR_GTEQF VGV_B VGV_R else387_3
    JR_GTEQF VGV_B VGV_G else387_3
    MOVEF_F VGV_B VGV_MIN
  else387_3:
  endif387:
    JR_NEQF VGV_MAX VGV_MIN else388_1
    MOVEF_F 0.0 VGV_H
    JR endif388
  else388_1:
    JR_NEQF VGV_R VGV_MAX else389_1
    JR_LTF VGV_G VGV_B else390_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf394
    DATA8 flag394
    DIVF F.0 F.1 tmpf394
    CP_EQF 0.0 F.1 flag394
    SELECTF flag394 0.0 tmpf394 VGV_H

    JR endif390
  else390_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf398
    DATA8 flag398
    DIVF F.1 F.2 tmpf398
    CP_EQF 0.0 F.2 flag398
    SELECTF flag398 0.0 tmpf398 F.0

    ADDF F.0 360.0 VGV_H
  else390_2:
  endif390:
    JR endif389
  else389_1:
    JR_NEQF VGV_MAX VGV_G else400_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf404
    DATA8 flag404
    DIVF F.1 F.2 tmpf404
    CP_EQF 0.0 F.2 flag404
    SELECTF flag404 0.0 tmpf404 F.0

    ADDF F.0 120.0 VGV_H
    JR endif400
  else400_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf409
    DATA8 flag409
    DIVF F.1 F.2 tmpf409
    CP_EQF 0.0 F.2 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    ADDF F.0 240.0 VGV_H
  else400_2:
  endif400:
  else389_2:
  endif389:
  else388_2:
  endif388:
    JR_NEQF VGV_MAX 0.0 else411_1
    MOVEF_F 0.0 VGV_S
    JR endif411
  else411_1:
    DATAF tmpf412
    DATA8 flag412
    DIVF VGV_MIN VGV_MAX tmpf412
    CP_EQF 0.0 VGV_MAX flag412
    SELECTF flag412 0.0 tmpf412 VGV_S

  else411_2:
  endif411:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
    MULF VGV_H VGV_S F.0
    MULF F.0 VGV_V VGV_HSV
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds417
	MOVEF_32 1500.0 milliseconds417
	DATA32 timer417
	TIMER_WAIT milliseconds417 timer417
	TIMER_READY timer417
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB418:
    ADDF VGV_WT 1.0 VGV_WT
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB420:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else421_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB423:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB424:
    JR endif421
  else421_1:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB425:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB426:
  else421_2:
  endif421:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds428
	MOVEF_32 1500.0 milliseconds428
	DATA32 timer428
	TIMER_WAIT milliseconds428 timer428
	TIMER_READY timer428
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB429:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB430:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB431:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB432:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB433:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB434:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB435:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf438
    DATA8 flag438
    DIVF VLV_MM_1 F.1 tmpf438
    CP_EQF 0.0 F.1 flag438
    SELECTF flag438 0.0 tmpf438 F.0

    MULF F.0 360.0 VLV_L_1
    JR_GTEQF VLV_V_1 0.0 else440_1
    MOVEF_F -10.0 VLV_SP_1
    JR endif440
  else440_1:
    MOVEF_F 10.0 VLV_SP_1
  else440_2:
  endif440:
    MOVEF_F 0.0 VLV_DEG_1
    CALL MOTOR.RESETCOUNT 'BC'
  while442:
    JR_GTEQF VLV_DEG_1 VLV_L_1 endwhile442
  whilebody442:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf447
    DATA8 flag447
    DIVF F.0 2.0 tmpf447
    CP_EQF 0.0 2.0 flag447
    SELECTF flag447 0.0 tmpf447 VLV_DEG_1

    MULF VLV_L_1 0.7 F.0
    JR_LTEQF VLV_DEG_1 F.0 else448_1
    MATH ABS VLV_SP_1 F.0
    JR_LTEQF F.0 10.0 else448_1
    JR_LTEQF VLV_V_1 0.0 else451_1
    SUBF VLV_SP_1 0.2 VLV_SP_1
    JR endif451
  else451_1:
    ADDF VLV_SP_1 0.2 VLV_SP_1
  else451_2:
  endif451:
    JR endif448
  else448_1:
    MATH ABS VLV_SP_1 F.0
    MATH ABS VLV_V_1 F.1
    JR_GTEQF F.0 F.1 else448_2
    JR_LTEQF VLV_V_1 0.0 else456_1
    ADDF VLV_SP_1 0.2 VLV_SP_1
    JR endif456
  else456_1:
    SUBF VLV_SP_1 0.2 VLV_SP_1
  else456_2:
  endif456:
  else448_2:
  endif448:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_1
    MULF VLV_U_1 2.0 F.1
    ADDF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_1 2.0 F.1
    SUBF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_1 VLV_L_1 whilebody442
  endwhile442:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_2 F.0
    DATAF tmpf469
    DATA8 flag469
    DIVF F.0 360.0 tmpf469
    CP_EQF 0.0 360.0 flag469
    SELECTF flag469 0.0 tmpf469 VLV_L_2

    DATAF tmpf470
    DATA8 flag470
    DIVF VLV_L_2 210.38 tmpf470
    CP_EQF 0.0 210.38 flag470
    SELECTF flag470 0.0 tmpf470 F.0

    MULF F.0 360.0 VLV_L_2
    MOVEF_F 30.0 VLV_V_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_2
  while473:
    JR_GTF VLV_DEG_2 VLV_L_2 endwhile473
  whilebody473:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_2
    CALL MOTOR.STARTPOWER 'B' VLV_V_2
    MULF VLV_L_2 0.2 F.0
    JR_LTF VLV_DEG_2 F.0 or478
    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else477_1
  or478:
    JR_GTEQF VLV_SP_2 0.0 else481_1
    MOVEF_F -30.0 VLV_V_2
    JR endif481
  else481_1:
    MOVEF_F 30.0 VLV_V_2
  else481_2:
  endif481:
    JR endif477
  else477_1:
    MOVEF_F VLV_SP_2 VLV_V_2
  else477_2:
  endif477:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_2 VLV_L_2 whilebody473
  endwhile473:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf485
    DATA8 flag485
    DIVF F.0 360.0 tmpf485
    CP_EQF 0.0 360.0 flag485
    SELECTF flag485 0.0 tmpf485 VLV_L_3

    DATAF tmpf486
    DATA8 flag486
    DIVF VLV_L_3 210.38 tmpf486
    CP_EQF 0.0 210.38 flag486
    SELECTF flag486 0.0 tmpf486 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while489:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile489
  whilebody489:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'C' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or494
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else493_1
  or494:
    JR_GTEQF VLV_SP_3 0.0 else497_1
    MOVEF_F -30.0 VLV_V_3
    JR endif497
  else497_1:
    MOVEF_F 30.0 VLV_V_3
  else497_2:
  endif497:
    JR endif493
  else493_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else493_2:
  endif493:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody489
  endwhile489:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_4 F.0
    DATAF tmpf504
    DATA8 flag504
    DIVF F.0 360.0 tmpf504
    CP_EQF 0.0 360.0 flag504
    SELECTF flag504 0.0 tmpf504 VLV_L_4

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf507
    DATA8 flag507
    DIVF VLV_L_4 F.2 tmpf507
    CP_EQF 0.0 F.2 flag507
    SELECTF flag507 0.0 tmpf507 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf509
    DATA8 flag509
    DIVF F.0 2.0 tmpf509
    CP_EQF 0.0 2.0 flag509
    SELECTF flag509 0.0 tmpf509 VLV_L_4

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_4
    MOVEF_F 0.0 VLV_DEG_4
  while511:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile511
  whilebody511:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf517
    DATA8 flag517
    DIVF F.0 2.0 tmpf517
    CP_EQF 0.0 2.0 flag517
    SELECTF flag517 0.0 tmpf517 VLV_DEG_4

    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or519
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else518_1
  or519:
    MOVEF_F 30.0 VLV_V_4
    JR endif518
  else518_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else518_2:
  endif518:
    CALL MOTOR.STARTPOWER 'B' VLV_V_4
    SUBF 0.0 VLV_V_4 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody511
  endwhile511:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf530
    DATA8 flag530
    DIVF F.0 360.0 tmpf530
    CP_EQF 0.0 360.0 flag530
    SELECTF flag530 0.0 tmpf530 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf533
    DATA8 flag533
    DIVF VLV_L_5 F.2 tmpf533
    CP_EQF 0.0 F.2 flag533
    SELECTF flag533 0.0 tmpf533 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf535
    DATA8 flag535
    DIVF F.0 2.0 tmpf535
    CP_EQF 0.0 2.0 flag535
    SELECTF flag535 0.0 tmpf535 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while537:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile537
  whilebody537:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf543
    DATA8 flag543
    DIVF F.0 2.0 tmpf543
    CP_EQF 0.0 2.0 flag543
    SELECTF flag543 0.0 tmpf543 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or545
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else544_1
  or545:
    MOVEF_F 30.0 VLV_V_5
    JR endif544
  else544_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else544_2:
  endif544:
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_5
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody537
  endwhile537:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_RIGHT_1:
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F VLV_SP_6 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB552:
    MOVEF_F 50.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB553:
    CALL MOTOR.START 'B' VLV_SP_6
    SUBF 0.0 VLV_SP_6 F.0
    CALL MOTOR.START 'C' F.0
  while557:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile557
  whilebody557:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody557
  endwhile557:
  while560:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile560
  whilebody560:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody560
  endwhile560:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB564:
RETSUB_F_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT_1:
SUB_F_LEFT_1:
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F VLV_SP_7 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB565:
    MOVEF_F 50.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB566:
    SUBF 0.0 VLV_SP_7 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VLV_SP_7
  while570:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile570
  whilebody570:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody570
  endwhile570:
  while573:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile573
  whilebody573:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody573
  endwhile573:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VLV_DEG_4
    MOVEF_F 20.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB577:
RETSUB_F_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT_1:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while580:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or581
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile580
  or581:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile580
  whilebody580:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or601
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and600
  or601:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody580
  and600:
  endwhile580:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while613:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or614
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile613
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile613
  or614:
  whilebody613:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody613
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and637
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody613
  and637:
  endwhile613:
    JR_GTEQF VLV_SP_9 0.0 else643_1
    MOVEF_F -70.0 VLV_SP_9
    JR endif643
  else643_1:
    MOVEF_F 70.0 VLV_SP_9
  else643_2:
  endif643:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_9
    DATA32 milliseconds645
	MOVEF_32 300.0 milliseconds645
	DATA32 timer645
	TIMER_WAIT milliseconds645 timer645
	TIMER_READY timer645
    DATA32 tmp646
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp646
    JR_NEQ32 0 tmp646 alreadylaunched646
    OBJECT_START TF_BEEP_0
  alreadylaunched646:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_10
    DATA8 layer648
	DATA8 no648
	DATA8 mode8648
	
	MOVEF_8 2.0 no648
	SUB8 no648 1 no648
	DIV8 no648 4 layer648
	MATH MOD8 no648 4 no648

	MOVEF_8 2.0 mode8648
	
	INPUT_DEVICE READY_RAW layer648 no648 0 mode8648 0
    DATA8 layer649
	DATA8 no649
	DATA8 mode8649
	
	MOVEF_8 3.0 no649
	SUB8 no649 1 no649
	DIV8 no649 4 layer649
	MATH MOD8 no649 4 no649

	MOVEF_8 2.0 mode8649
	
	INPUT_DEVICE READY_RAW layer649 no649 0 mode8649 0
  while650:
    JR_EQF VLV_WHITE_10 1.0 endwhile650
  whilebody650:
    CALL MOTOR.RESETCOUNT 'BC'
  while652:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or653
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile652
  or653:
  whilebody652:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody652
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody652
  endwhile652:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_10
  while668:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_10 endwhile668
  whilebody668:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_10 whilebody668
  endwhile668:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else682_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else682_1
    MOVEF_F 1.0 VLV_WHITE_10
  else682_1:
  endif682:
    JR_NEQF VLV_WHITE_10 1.0 whilebody650
  endwhile650:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer686
	DATA8 no686
	DATA8 mode8686
	
	MOVEF_8 2.0 no686
	SUB8 no686 1 no686
	DIV8 no686 4 layer686
	MATH MOD8 no686 4 no686

	MOVEF_8 0.0 mode8686
	
	INPUT_DEVICE READY_RAW layer686 no686 0 mode8686 0
    DATA8 layer687
	DATA8 no687
	DATA8 mode8687
	
	MOVEF_8 3.0 no687
	SUB8 no687 1 no687
	DIV8 no687 4 layer687
	MATH MOD8 no687 4 no687

	MOVEF_8 0.0 mode8687
	
	INPUT_DEVICE READY_RAW layer687 no687 0 mode8687 0
  while688:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile688
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile688
  whilebody688:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 0.8 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 0.8 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and700
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody688
  and700:
  endwhile688:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds707
	MOVEF_32 500.0 milliseconds707
	DATA32 timer707
	TIMER_WAIT milliseconds707 timer707
	TIMER_READY timer707
  while708:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf712
    DATA8 flag712
    DIVF F.1 2.0 tmpf712
    CP_EQF 0.0 2.0 flag712
    SELECTF flag712 0.0 tmpf712 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile708
  whilebody708:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf718
    DATA8 flag718
    DIVF F.1 2.0 tmpf718
    CP_EQF 0.0 2.0 flag718
    SELECTF flag718 0.0 tmpf718 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody708
  endwhile708:
    CALL MOTOR.STOP VLV_MOTOR_11 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_12 VLV_SP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds723
	MOVEF_32 500.0 milliseconds723
	DATA32 timer723
	TIMER_WAIT milliseconds723 timer723
	TIMER_READY timer723
  while724:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf728
    DATA8 flag728
    DIVF F.1 2.0 tmpf728
    CP_EQF 0.0 2.0 flag728
    SELECTF flag728 0.0 tmpf728 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile724
  whilebody724:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf733
    DATA8 flag733
    DIVF F.1 2.0 tmpf733
    CP_EQF 0.0 2.0 flag733
    SELECTF flag733 0.0 tmpf733 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody724
  endwhile724:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
  while739:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_LTEQF F.0 -26.5 endwhile739
  whilebody739:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_GTF F.0 -26.5 whilebody739
  endwhile739:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall SENSOR.READRAW            // FFA
{
	IN_F port
	IN_F values
	IN_16 resultarray
	
	DATA8 layer
	DATA8 no
	DATA32 values32
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_32 values values32

	JR_LTEQ32 values32 0 arrayempty
	ARRAY RESIZE resultarray values32

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 i
	DATA32 rawtmp
	MOVE32_32 0 i
loop:
	DATA8 tmp8
	DATAF tmpf

	MOVEF_F 0.0 tmpf
	JR_GTEQ32 i 8 nomoredata

	MOVE32_8 i tmp8
	READ32 rawvalue0 tmp8 rawtmp
	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp tmpf

nomoredata:	
	ARRAY_WRITE resultarray i tmpf

	ADD32 i 1 i
	JR_LT32 i values32 loop
	RETURN

arrayempty:
	ARRAY RESIZE resultarray 0
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
