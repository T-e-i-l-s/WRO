DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VK21_M
DATAF VV21_M
DATAF VB1_M
DATAF VW1_M
DATAF VB2_M
DATAF VW2_M
DATAF VRED_M
DATAF VMM_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VV_M
DATAF VK_M
DATAF VDIS_M
DATAF VT_M
DATAF VSP_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAF VI_M
DATAF VL_1
DATAF VSP_1
DATAF VDIS_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAS VMOTOR_7 252
DATAF VSPEED_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAF VO_9
DATAF VMM_9
DATAF VL_9
DATAF VO_10
DATAF VMM_10
DATAF VL_10
DATAF VO_11
DATAF VMM_11
DATAF VL_11
DATAF VO_12
DATAF VMM_12
DATAF VL_12
DATAF VO_13
DATAF VMM_13
DATAF VL_13
DATAF VO_14
DATAF VMM_14
DATAF VL_14
DATAF VO_15
DATAF VMM_15
DATAF VL_15
DATAF VO_16
DATAF VMM_16
DATAF VL_16
DATA32 RUNCOUNTER_TH_DOWN
DATA32 RUNCOUNTER_TH_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VDIS_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    MOVE32_32 0 RUNCOUNTER_TH_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_UP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_UP 1
    CALL GETANDINC32 RUNCOUNTER_TH_UP -1 RUNCOUNTER_TH_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
subcall PROGRAM_TH_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1064
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch1064:
    JR_NEQ32 SUBPROGRAM 1 dispatch1065
    WRITE32 ENDSUB_TH_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_UP
  dispatch1065:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VDIS_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 3.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.4 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.35 VK2_M
    MOVEF_F 50.0 VV2_M
    MOVEF_F 0.55 VK3_M
    MOVEF_F 20.0 VV3_M
    MOVEF_F 1.3 VK21_M
    MOVEF_F 30.0 VV21_M
    MOVEF_F 1.0 VB1_M
    MOVEF_F 3.0 VW1_M
    MOVEF_F 2.0 VB2_M
    MOVEF_F 4.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 2.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB539:
    MOVEF_F 88.0 VGRAD_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB540:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB541:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf543
    DATA8 flag543
    DIVF VMM_M 194.68 tmpf543
    CP_EQF 0.0 194.68 flag543
    SELECTF flag543 0.0 tmpf543 F.0

    MULF F.0 360.0 VL_M
  while545:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile545
  whilebody545:
    WRITE32 ENDSUB_LINE21:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB547:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody545
  endwhile545:
    MOVEF_F 1.0 VI_M
  for549:
    JR_GTF VI_M 4.0 endfor549
  forbody549:
    WRITE32 ENDSUB_COL:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB550:
    JR_NEQF VCOL_M 1.0 else551_1
    MOVEF_F VI_M VB1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif551
  else551_1:
    JR_NEQF VCOL_M 6.0 else551_2
    MOVEF_F VI_M VW1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else551_2:
  endif551:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf555
    DATA8 flag555
    DIVF VMM_M 194.68 tmpf555
    CP_EQF 0.0 194.68 flag555
    SELECTF flag555 0.0 tmpf555 F.0

    MULF F.0 360.0 VL_M
  while557:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile557
  whilebody557:
    WRITE32 ENDSUB_LINE21:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB559:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody557
  endwhile557:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody549
  endfor549:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf563
    DATA8 flag563
    DIVF VMM_M 194.68 tmpf563
    CP_EQF 0.0 194.68 flag563
    SELECTF flag563 0.0 tmpf563 F.0

    MULF F.0 360.0 VL_M
  while565:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile565
  whilebody565:
    WRITE32 ENDSUB_LINE21:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB567:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody565
  endwhile565:
    MOVEF_F 1.0 VI_M
  for569:
    JR_GTF VI_M 4.0 endfor569
  forbody569:
    WRITE32 ENDSUB_COL:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB570:
    JR_NEQF VCOL_M 1.0 else571_1
    MOVEF_F VI_M VB2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif571
  else571_1:
    JR_NEQF VCOL_M 6.0 else571_2
    MOVEF_F VI_M VW2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else571_2:
  endif571:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf575
    DATA8 flag575
    DIVF VMM_M 194.68 tmpf575
    CP_EQF 0.0 194.68 flag575
    SELECTF flag575 0.0 tmpf575 F.0

    MULF F.0 360.0 VL_M
  while577:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile577
  whilebody577:
    WRITE32 ENDSUB_LINE21:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB579:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody577
  endwhile577:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody569
  endfor569:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    MOVEF_F 15.0 VV21_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf592
    DATA8 flag592
    DIVF VMM_M 194.68 tmpf592
    CP_EQF 0.0 194.68 flag592
    SELECTF flag592 0.0 tmpf592 F.0

    MULF F.0 360.0 VL_M
  while594:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile594
  whilebody594:
    WRITE32 ENDSUB_LINE21:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB596:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody594
  endwhile594:
    MOVEF_F 30.0 VV21_M
    MOVEF_F 150.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB598:
    MOVEF_F 27.0 VGRAD_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB599:
    MOVEF_F 27.0 VGRAD_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB600:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.0 VMM_M
    DATAF tmpf602
    DATA8 flag602
    DIVF VMM_M 194.68 tmpf602
    CP_EQF 0.0 194.68 flag602
    SELECTF flag602 0.0 tmpf602 F.0

    MULF F.0 360.0 VL_M
  while604:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile604
  whilebody604:
    WRITE32 ENDSUB_LINE3:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB606:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody604
  endwhile604:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer609
	DATA8 no609
	DATA8 mode8609
	
	MOVEF_8 3.0 no609
	SUB8 no609 1 no609
	DIV8 no609 4 layer609
	MATH MOD8 no609 4 no609

	MOVEF_8 2.0 mode8609
	
	INPUT_DEVICE READY_RAW layer609 no609 0 mode8609 0
  while610:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile610
  whilebody610:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody610
  endwhile610:
    DATA8 layer622
	DATA8 no622
	DATA8 mode8622
	
	MOVEF_8 3.0 no622
	SUB8 no622 1 no622
	DIV8 no622 4 layer622
	MATH MOD8 no622 4 no622

	MOVEF_8 0.0 mode8622
	
	INPUT_DEVICE READY_RAW layer622 no622 0 mode8622 0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB623:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB624:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB625:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB626:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB627:
    CALL MOTOR.RESETCOUNT 'BC'
  while629:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile629
  whilebody629:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody629
  endwhile629:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB641 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB641:
    WRITE32 ENDSUB_RIGHT:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB642:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf644
    DATA8 flag644
    DIVF VMM_M 194.68 tmpf644
    CP_EQF 0.0 194.68 flag644
    SELECTF flag644 0.0 tmpf644 F.0

    MULF F.0 360.0 VL_M
  while646:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile646
  whilebody646:
    WRITE32 ENDSUB_LINE3:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB648:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody646
  endwhile646:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB650:
    WRITE32 ENDSUB_HSV:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB651:
    JR_LTEQF VRGB_M 40.0 else652_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else652_1:
  endif652:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 500.0 VMM_M
    DATAF tmpf655
    DATA8 flag655
    DIVF VMM_M 194.68 tmpf655
    CP_EQF 0.0 194.68 flag655
    SELECTF flag655 0.0 tmpf655 F.0

    MULF F.0 360.0 VL_M
  while657:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile657
  whilebody657:
    WRITE32 ENDSUB_LINE2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB659:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody657
  endwhile657:
    WRITE32 ENDSUB_HSV:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB661:
    JR_LTEQF VRGB_M 40.0 else662_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else662_1:
  endif662:
    MOVEF_F 350.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB664:
  while665:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile665
  whilebody665:
    WRITE32 ENDSUB_LINE3:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB667:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody665
  endwhile665:
    WRITE32 ENDSUB_RIGHT:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB669:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB670 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB670:
  while671:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile671
  whilebody671:
    WRITE32 ENDSUB_LINE2:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB673:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody671
  endwhile671:
    WRITE32 ENDSUB_RIGHT:CALLSUB675 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB675:
    MOVEF_F 300.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB676:
  while677:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile677
  whilebody677:
    WRITE32 ENDSUB_LINE3:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB679:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody677
  endwhile677:
    JR_NEQF VW1_M 3.0 else681_1
    MOVEF_F 1.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB682:
  else681_1:
  endif681:
    JR_NEQF VB1_M 2.0 else683_1
    MOVEF_F 1.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB684:
  else683_1:
  endif683:
    JR_NEQF VW1_M 2.0 else685_1
    MOVEF_F 1.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB686:
  else685_1:
  endif685:
    JR_NEQF VB1_M 3.0 else687_1
    MOVEF_F 1.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB688:
  else687_1:
  endif687:
    JR_NEQF VW1_M 4.0 else689_1
    MOVEF_F 1.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB690:
  else689_1:
  endif689:
    JR_NEQF VB1_M 4.0 else691_1
    MOVEF_F 1.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB692:
  else691_1:
  endif691:
    JR_NEQF VW1_M 1.0 else693_1
    MOVEF_F 1.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB694:
  else693_1:
  endif693:
    JR_NEQF VB1_M 1.0 else695_1
    MOVEF_F 1.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB696 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB696:
  else695_1:
  endif695:
    WRITE32 ENDSUB_AROUND:CALLSUB697 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB697:
    MOVEF_F 200.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB698:
  while699:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile699
  whilebody699:
    WRITE32 ENDSUB_LINE2:CALLSUB701 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB701:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody699
  endwhile699:
    WRITE32 ENDSUB_LEFT:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB703:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB704:
  while705:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile705
  whilebody705:
    WRITE32 ENDSUB_LINE3:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB707:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody705
  endwhile705:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB709:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds711
	MOVEF_32 1000.0 milliseconds711
	DATA32 timer711
	TIMER_WAIT milliseconds711 timer711
	TIMER_READY timer711
    MOVEF_F 140.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB712:
    MOVEF_F 92.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB713:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB714:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer716
	DATA8 no716
	DATA8 mode8716
	
	MOVEF_8 2.0 no716
	SUB8 no716 1 no716
	DIV8 no716 4 layer716
	MATH MOD8 no716 4 no716

	MOVEF_8 2.0 mode8716
	
	INPUT_DEVICE READY_RAW layer716 no716 0 mode8716 0
    DATA8 layer717
	DATA8 no717
	DATA8 mode8717
	
	MOVEF_8 3.0 no717
	SUB8 no717 1 no717
	DIV8 no717 4 layer717
	MATH MOD8 no717 4 no717

	MOVEF_8 2.0 mode8717
	
	INPUT_DEVICE READY_RAW layer717 no717 0 mode8717 0
  while718:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or719
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile718
  or719:
  whilebody718:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody718
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody718
  endwhile718:
    DATA8 layer724
	DATA8 no724
	DATA8 mode8724
	
	MOVEF_8 2.0 no724
	SUB8 no724 1 no724
	DIV8 no724 4 layer724
	MATH MOD8 no724 4 no724

	MOVEF_8 0.0 mode8724
	
	INPUT_DEVICE READY_RAW layer724 no724 0 mode8724 0
    DATA8 layer725
	DATA8 no725
	DATA8 mode8725
	
	MOVEF_8 3.0 no725
	SUB8 no725 1 no725
	DIV8 no725 4 layer725
	MATH MOD8 no725 4 no725

	MOVEF_8 0.0 mode8725
	
	INPUT_DEVICE READY_RAW layer725 no725 0 mode8725 0
  while726:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile726
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile726
  whilebody726:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and729
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody726
  and729:
  endwhile726:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB732:
    CALL MOTOR.START 'AD' 20.0
    DATA32 milliseconds734
	MOVEF_32 150.0 milliseconds734
	DATA32 timer734
	TIMER_WAIT milliseconds734 timer734
	TIMER_READY timer734
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB735:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB738:
    DATA32 tmp739
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp739
    JR_NEQ32 0 tmp739 alreadylaunched739
    OBJECT_START TTH_DOWN
  alreadylaunched739:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer741
	DATA8 no741
	DATA8 mode8741
	
	MOVEF_8 2.0 no741
	SUB8 no741 1 no741
	DIV8 no741 4 layer741
	MATH MOD8 no741 4 no741

	MOVEF_8 2.0 mode8741
	
	INPUT_DEVICE READY_RAW layer741 no741 0 mode8741 0
    DATA8 layer742
	DATA8 no742
	DATA8 mode8742
	
	MOVEF_8 3.0 no742
	SUB8 no742 1 no742
	DIV8 no742 4 layer742
	MATH MOD8 no742 4 no742

	MOVEF_8 2.0 mode8742
	
	INPUT_DEVICE READY_RAW layer742 no742 0 mode8742 0
  while743:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or744
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile743
  or744:
  whilebody743:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody743
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody743
  endwhile743:
    DATA8 layer749
	DATA8 no749
	DATA8 mode8749
	
	MOVEF_8 2.0 no749
	SUB8 no749 1 no749
	DIV8 no749 4 layer749
	MATH MOD8 no749 4 no749

	MOVEF_8 0.0 mode8749
	
	INPUT_DEVICE READY_RAW layer749 no749 0 mode8749 0
    DATA8 layer750
	DATA8 no750
	DATA8 mode8750
	
	MOVEF_8 3.0 no750
	SUB8 no750 1 no750
	DIV8 no750 4 layer750
	MATH MOD8 no750 4 no750

	MOVEF_8 0.0 mode8750
	
	INPUT_DEVICE READY_RAW layer750 no750 0 mode8750 0
  while751:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile751
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile751
  whilebody751:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and754
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody751
  and754:
  endwhile751:
    WRITE32 ENDSUB_LEFT:CALLSUB757 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB757:
    DATA32 tmp758
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp758
    JR_NEQ32 0 tmp758 alreadylaunched758
    OBJECT_START TTH_UP
  alreadylaunched758:
    MOVEF_F 600.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB759 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB759:
  while760:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile760
  whilebody760:
    WRITE32 ENDSUB_LINE3:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB762:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody760
  endwhile760:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else765_1
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB766:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB767 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB767:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB768:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB769:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB770 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB770:
    JR endif765
  else765_1:
    JR_NEQF VRED_M 4.0 else765_2
    MOVEF_F 120.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB771:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB772:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB773:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB774:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB775 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB775:
    JR endif765
  else765_2:
    JR_NEQF VRED_M 0.0 else765_3
    WRITE32 ENDSUB_RIGHT:CALLSUB776 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB776:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf778
    DATA8 flag778
    DIVF VMM_M 194.68 tmpf778
    CP_EQF 0.0 194.68 flag778
    SELECTF flag778 0.0 tmpf778 F.0

    MULF F.0 360.0 VL_M
  while780:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile780
  whilebody780:
    WRITE32 ENDSUB_LINE3:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB782:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody780
  endwhile780:
  while784:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or785
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile784
  or785:
  whilebody784:
    WRITE32 ENDSUB_LINE3:CALLSUB788 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB788:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody784
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody784
  endwhile784:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB791 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB791:
  while792:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or793
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile792
  or793:
  whilebody792:
    WRITE32 ENDSUB_LINE3:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB796:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody792
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody792
  endwhile792:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB799:
    WRITE32 ENDSUB_HSV:CALLSUB800 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB800:
    CALL SPEAKER.TONE 40.0 600.0 200.0
    JR_LTEQF VRGB_M 20.0 else802_1
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB803 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB803:
    MOVEF_F 2.0 VRED_M
    JR endif802
  else802_1:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB804 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB804:
    MOVEF_F 3.0 VRED_M
  else802_2:
  endif802:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB805:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB806 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB806:
    DATA32 milliseconds807
	MOVEF_32 500.0 milliseconds807
	DATA32 timer807
	TIMER_WAIT milliseconds807 timer807
	TIMER_READY timer807
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB808:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB809 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB809:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer811
	DATA8 no811
	DATA8 mode8811
	
	MOVEF_8 2.0 no811
	SUB8 no811 1 no811
	DIV8 no811 4 layer811
	MATH MOD8 no811 4 no811

	MOVEF_8 2.0 mode8811
	
	INPUT_DEVICE READY_RAW layer811 no811 0 mode8811 0
    DATA8 layer812
	DATA8 no812
	DATA8 mode8812
	
	MOVEF_8 3.0 no812
	SUB8 no812 1 no812
	DIV8 no812 4 layer812
	MATH MOD8 no812 4 no812

	MOVEF_8 2.0 mode8812
	
	INPUT_DEVICE READY_RAW layer812 no812 0 mode8812 0
  while813:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or814
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile813
  or814:
  whilebody813:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody813
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody813
  endwhile813:
    DATA8 layer819
	DATA8 no819
	DATA8 mode8819
	
	MOVEF_8 2.0 no819
	SUB8 no819 1 no819
	DIV8 no819 4 layer819
	MATH MOD8 no819 4 no819

	MOVEF_8 0.0 mode8819
	
	INPUT_DEVICE READY_RAW layer819 no819 0 mode8819 0
    DATA8 layer820
	DATA8 no820
	DATA8 mode8820
	
	MOVEF_8 3.0 no820
	SUB8 no820 1 no820
	DIV8 no820 4 layer820
	MATH MOD8 no820 4 no820

	MOVEF_8 0.0 mode8820
	
	INPUT_DEVICE READY_RAW layer820 no820 0 mode8820 0
  while821:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile821
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile821
  whilebody821:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and824
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody821
  and824:
  endwhile821:
    JR_NEQF VRED_M 2.0 else827_1
    WRITE32 ENDSUB_LEFT:CALLSUB828 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB828:
    JR endif827
  else827_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB829:
  else827_2:
  endif827:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 130.0 VMM_M
    DATAF tmpf831
    DATA8 flag831
    DIVF VMM_M 194.68 tmpf831
    CP_EQF 0.0 194.68 flag831
    SELECTF flag831 0.0 tmpf831 F.0

    MULF F.0 360.0 VL_M
  while833:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile833
  whilebody833:
    WRITE32 ENDSUB_LINE3:CALLSUB835 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB835:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody833
  endwhile833:
  while837:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or838
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile837
  or838:
  whilebody837:
    WRITE32 ENDSUB_LINE3:CALLSUB841 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB841:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody837
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody837
  endwhile837:
    WRITE32 ENDSUB_LEFT:CALLSUB844 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB844:
  else765_3:
  endif765:
    JR_EQF VRED_M 2.0 else845_1
    JR_EQF VRED_M 3.0 else845_1
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB846 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB846:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer848
	DATA8 no848
	DATA8 mode8848
	
	MOVEF_8 2.0 no848
	SUB8 no848 1 no848
	DIV8 no848 4 layer848
	MATH MOD8 no848 4 no848

	MOVEF_8 2.0 mode8848
	
	INPUT_DEVICE READY_RAW layer848 no848 0 mode8848 0
    DATA8 layer849
	DATA8 no849
	DATA8 mode8849
	
	MOVEF_8 3.0 no849
	SUB8 no849 1 no849
	DIV8 no849 4 layer849
	MATH MOD8 no849 4 no849

	MOVEF_8 2.0 mode8849
	
	INPUT_DEVICE READY_RAW layer849 no849 0 mode8849 0
  while850:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or851
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile850
  or851:
  whilebody850:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody850
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody850
  endwhile850:
    DATA8 layer856
	DATA8 no856
	DATA8 mode8856
	
	MOVEF_8 2.0 no856
	SUB8 no856 1 no856
	DIV8 no856 4 layer856
	MATH MOD8 no856 4 no856

	MOVEF_8 0.0 mode8856
	
	INPUT_DEVICE READY_RAW layer856 no856 0 mode8856 0
    DATA8 layer857
	DATA8 no857
	DATA8 mode8857
	
	MOVEF_8 3.0 no857
	SUB8 no857 1 no857
	DIV8 no857 4 layer857
	MATH MOD8 no857 4 no857

	MOVEF_8 0.0 mode8857
	
	INPUT_DEVICE READY_RAW layer857 no857 0 mode8857 0
  while858:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile858
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile858
  whilebody858:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and861
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody858
  and861:
  endwhile858:
    WRITE32 ENDSUB_RIGHT:CALLSUB864 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB864:
  else845_1:
  endif845:
    MOVEF_F 550.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB865 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB865:
  while866:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile866
  whilebody866:
    WRITE32 ENDSUB_LINE3:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB868:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody866
  endwhile866:
    WRITE32 ENDSUB_RIGHT:CALLSUB870 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB870:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf871
    DATA8 flag871
    DIVF VMM_M 194.68 tmpf871
    CP_EQF 0.0 194.68 flag871
    SELECTF flag871 0.0 tmpf871 F.0

    MULF F.0 360.0 VL_M
  while873:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile873
  whilebody873:
    WRITE32 ENDSUB_LINE3:CALLSUB875 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB875:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody873
  endwhile873:
  while877:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile877
  whilebody877:
    WRITE32 ENDSUB_LINE2:CALLSUB879 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB879:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody877
  endwhile877:
    JR_EQF VRED_M 1.0 or882
    JR_NEQF VRED_M 3.0 else881_1
  or882:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB883 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB883:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB884 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB884:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB885 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB885:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB886 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB886:
    JR endif881
  else881_1:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB887 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB887:
    MOVEF_F 35.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB888 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB888:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB889 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB889:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB890 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB890:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB891 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB891:
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB892:
    MOVEF_F 170.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB893 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB893:
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB894:
  else881_2:
  endif881:
    DATA32 tmp895
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp895
    JR_NEQ32 0 tmp895 alreadylaunched895
    OBJECT_START TTH_DOWN
  alreadylaunched895:
    WRITE32 ENDSUB_TOLINE:CALLSUB896 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB896:
    WRITE32 ENDSUB_RIGHT:CALLSUB897 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB897:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_M
    DATAF tmpf899
    DATA8 flag899
    DIVF VMM_M 194.68 tmpf899
    CP_EQF 0.0 194.68 flag899
    SELECTF flag899 0.0 tmpf899 F.0

    MULF F.0 360.0 VL_M
  while901:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile901
  whilebody901:
    WRITE32 ENDSUB_LINE3:CALLSUB903 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB903:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody901
  endwhile901:
    WRITE32 ENDSUB_AROUND:CALLSUB905 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB905:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB906 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB906:
  while907:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile907
  whilebody907:
    WRITE32 ENDSUB_LINE2:CALLSUB909 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB909:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody907
  endwhile907:
    WRITE32 ENDSUB_LEFT:CALLSUB911 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB911:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB912 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB912:
  while913:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile913
  whilebody913:
    WRITE32 ENDSUB_LINE2:CALLSUB915 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB915:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody913
  endwhile913:
    WRITE32 ENDSUB_LEFT:CALLSUB917 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB917:
    DATA32 tmp918
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp918
    JR_NEQ32 0 tmp918 alreadylaunched918
    OBJECT_START TTH_UP
  alreadylaunched918:
    MOVEF_F 1850.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB919 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB919:
    DATA32 tmp920
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp920
    JR_NEQ32 0 tmp920 alreadylaunched920
    OBJECT_START TTH_DOWN
  alreadylaunched920:
  while921:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile921
  whilebody921:
    WRITE32 ENDSUB_LINE3:CALLSUB923 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB923:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody921
  endwhile921:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB926 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB926:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf927
    DATA8 flag927
    DIVF VMM_M 194.68 tmpf927
    CP_EQF 0.0 194.68 flag927
    SELECTF flag927 0.0 tmpf927 F.0

    MULF F.0 360.0 VL_M
  while929:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile929
  whilebody929:
    WRITE32 ENDSUB_LINE3:CALLSUB931 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB931:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody929
  endwhile929:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer934
	DATA8 no934
	DATA8 mode8934
	
	MOVEF_8 3.0 no934
	SUB8 no934 1 no934
	DIV8 no934 4 layer934
	MATH MOD8 no934 4 no934

	MOVEF_8 2.0 mode8934
	
	INPUT_DEVICE READY_RAW layer934 no934 0 mode8934 0
  while935:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile935
  whilebody935:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody935
  endwhile935:
    DATA8 layer947
	DATA8 no947
	DATA8 mode8947
	
	MOVEF_8 3.0 no947
	SUB8 no947 1 no947
	DIV8 no947 4 layer947
	MATH MOD8 no947 4 no947

	MOVEF_8 0.0 mode8947
	
	INPUT_DEVICE READY_RAW layer947 no947 0 mode8947 0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB948 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB948:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB949 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB949:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB950 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB950:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB951:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB952 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB952:
  while953:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile953
  whilebody953:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody953
  endwhile953:
    WRITE32 ENDSUB_RIGHT:CALLSUB957 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB957:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB958 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB958:
  while959:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile959
  whilebody959:
    WRITE32 ENDSUB_LINE3:CALLSUB961 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB961:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody959
  endwhile959:
    JR_NEQF VW2_M 3.0 else963_1
    MOVEF_F 2.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB964 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB964:
  else963_1:
  endif963:
    JR_NEQF VB2_M 2.0 else965_1
    MOVEF_F 2.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB966 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB966:
  else965_1:
  endif965:
    JR_NEQF VW2_M 2.0 else967_1
    MOVEF_F 2.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB968 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB968:
  else967_1:
  endif967:
    JR_NEQF VB2_M 3.0 else969_1
    MOVEF_F 2.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB970 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB970:
  else969_1:
  endif969:
    JR_NEQF VW2_M 4.0 else971_1
    MOVEF_F 2.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB972 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB972:
  else971_1:
  endif971:
    JR_NEQF VB2_M 4.0 else973_1
    MOVEF_F 2.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB974:
  else973_1:
  endif973:
    JR_NEQF VW2_M 1.0 else975_1
    MOVEF_F 2.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB976 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB976:
  else975_1:
  endif975:
    JR_NEQF VB2_M 1.0 else977_1
    MOVEF_F 2.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB978 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB978:
  else977_1:
  endif977:
    WRITE32 ENDSUB_AROUND:CALLSUB979 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB979:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB980 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB980:
  while981:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile981
  whilebody981:
    WRITE32 ENDSUB_LINE3:CALLSUB983 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB983:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody981
  endwhile981:
    WRITE32 ENDSUB_LEFT:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB985:
    MOVEF_F 300.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB986 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB986:
  while987:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile987
  whilebody987:
    WRITE32 ENDSUB_LINE3:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB989:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody987
  endwhile987:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB991 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB991:
    MOVEF_F 100.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB992 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB992:
    MOVEF_F 355.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB993 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB993:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB994 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB994:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer996
	DATA8 no996
	DATA8 mode8996
	
	MOVEF_8 2.0 no996
	SUB8 no996 1 no996
	DIV8 no996 4 layer996
	MATH MOD8 no996 4 no996

	MOVEF_8 2.0 mode8996
	
	INPUT_DEVICE READY_RAW layer996 no996 0 mode8996 0
    DATA8 layer997
	DATA8 no997
	DATA8 mode8997
	
	MOVEF_8 3.0 no997
	SUB8 no997 1 no997
	DIV8 no997 4 layer997
	MATH MOD8 no997 4 no997

	MOVEF_8 2.0 mode8997
	
	INPUT_DEVICE READY_RAW layer997 no997 0 mode8997 0
  while998:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or999
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile998
  or999:
  whilebody998:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody998
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody998
  endwhile998:
    DATA8 layer1004
	DATA8 no1004
	DATA8 mode81004
	
	MOVEF_8 2.0 no1004
	SUB8 no1004 1 no1004
	DIV8 no1004 4 layer1004
	MATH MOD8 no1004 4 no1004

	MOVEF_8 0.0 mode81004
	
	INPUT_DEVICE READY_RAW layer1004 no1004 0 mode81004 0
    DATA8 layer1005
	DATA8 no1005
	DATA8 mode81005
	
	MOVEF_8 3.0 no1005
	SUB8 no1005 1 no1005
	DIV8 no1005 4 layer1005
	MATH MOD8 no1005 4 no1005

	MOVEF_8 0.0 mode81005
	
	INPUT_DEVICE READY_RAW layer1005 no1005 0 mode81005 0
  while1006:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile1006
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile1006
  whilebody1006:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and1009
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody1006
  and1009:
  endwhile1006:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1012 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1012:
    CALL MOTOR.START 'AD' 20.0
    DATA32 milliseconds1014
	MOVEF_32 150.0 milliseconds1014
	DATA32 timer1014
	TIMER_WAIT milliseconds1014 timer1014
	TIMER_READY timer1014
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1015 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1015:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1018 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1018:
    DATA32 tmp1019
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp1019
    JR_NEQ32 0 tmp1019 alreadylaunched1019
    OBJECT_START TTH_DOWN
  alreadylaunched1019:
    MOVEF_F 105.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1020 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1020:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_M
    DATA8 layer1022
	DATA8 no1022
	DATA8 mode81022
	
	MOVEF_8 2.0 no1022
	SUB8 no1022 1 no1022
	DIV8 no1022 4 layer1022
	MATH MOD8 no1022 4 no1022

	MOVEF_8 2.0 mode81022
	
	INPUT_DEVICE READY_RAW layer1022 no1022 0 mode81022 0
    DATA8 layer1023
	DATA8 no1023
	DATA8 mode81023
	
	MOVEF_8 3.0 no1023
	SUB8 no1023 1 no1023
	DIV8 no1023 4 layer1023
	MATH MOD8 no1023 4 no1023

	MOVEF_8 2.0 mode81023
	
	INPUT_DEVICE READY_RAW layer1023 no1023 0 mode81023 0
  while1024:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1025
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1024
  or1025:
  whilebody1024:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1024
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1024
  endwhile1024:
    DATA8 layer1039
	DATA8 no1039
	DATA8 mode81039
	
	MOVEF_8 2.0 no1039
	SUB8 no1039 1 no1039
	DIV8 no1039 4 layer1039
	MATH MOD8 no1039 4 no1039

	MOVEF_8 0.0 mode81039
	
	INPUT_DEVICE READY_RAW layer1039 no1039 0 mode81039 0
    DATA8 layer1040
	DATA8 no1040
	DATA8 mode81040
	
	MOVEF_8 3.0 no1040
	SUB8 no1040 1 no1040
	DIV8 no1040 4 layer1040
	MATH MOD8 no1040 4 no1040

	MOVEF_8 0.0 mode81040
	
	INPUT_DEVICE READY_RAW layer1040 no1040 0 mode81040 0
  while1041:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1041
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1041
  whilebody1041:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and1053
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1041
  and1053:
  endwhile1041:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 tmp1057
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp1057
    JR_NEQ32 0 tmp1057 alreadylaunched1057
    OBJECT_START TTH_UP
  alreadylaunched1057:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1058 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1058:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB1059 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB1059:
    DATA32 tmp1060
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp1060
    JR_NEQ32 0 tmp1060 alreadylaunched1060
    OBJECT_START TTH_UP
  alreadylaunched1060:
    MOVEF_F 145.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1061 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1061:
    MOVEF_F 40.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1062 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1062:
    CALL MOTOR.STOP 'AD' 'true'
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 F.1 tmpf15
    CP_EQF 0.0 F.1 flag15
    SELECTF flag15 0.0 tmpf15 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB25:
    WRITE32 ENDSUB_SEN2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB26:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB34:
    WRITE32 ENDSUB_SEN2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB35:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LINE21:
    WRITE32 ENDSUB_SEN2:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB43:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 30.0 VU_M
    MULF VU_M VK21_M F.1
    ADDF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK21_M F.1
    SUBF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE21:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE21:
SUB_LINE_TOMM:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VL_M
  while53:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile53
  whilebody53:
    WRITE32 ENDSUB_LINE3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB55:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody53
  endwhile53:
    MOVEF_F 20.0 VV_M
    MOVEF_F 0.55 VK_M
    SUBF VMM_M 100.0 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 194.68 tmpf58
    CP_EQF 0.0 194.68 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while61:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_GTEQF F.0 VL_M endwhile61
  whilebody61:
    WRITE32 ENDSUB_SEN1:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB66:
    WRITE32 ENDSUB_SEN2:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB67:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf78
    DATA8 flag78
    DIVF F.0 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 VDIS_M

    DATAF tmpf79
    DATA8 flag79
    DIVF VDIS_M 360.0 tmpf79
    CP_EQF 0.0 360.0 flag79
    SELECTF flag79 0.0 tmpf79 F.0

    MULF F.0 194.68 VDIS_M
    JR_LTEQF VMM_M 1000.0 else81_1
    MOVEF_F 0.8 VT_M
    JR endif81
  else81_1:
    MOVEF_F 0.4 VT_M
  else81_2:
  endif81:
    MULF VMM_M 0.4 F.0
    JR_GTEQF VDIS_M F.0 else82_1
    JR_GTEQF VV_M 95.0 else82_1
    ADDF VV_M 0.3 VV_M
    JR endif82
  else82_1:
    MULF VMM_M VT_M F.0
    JR_LTEQF VDIS_M F.0 else82_2
    JR_LTEQF VV_M 15.0 else82_2
    SUBF VV_M 0.3 VV_M
  else82_2:
  endif82:
    JR_GTEQF VV_M 35.0 else87_1
    MOVEF_F 0.6 VK_M
    JR endif87
  else87_1:
    JR_GTEQF VV_M 55.0 else87_2
    MOVEF_F 0.4 VK_M
    JR endif87
  else87_2:
    JR_GTEQF VV_M 100.0 else87_3
    MOVEF_F 0.45 VK_M
  else87_3:
  endif87:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf91
    DATA8 flag91
    DIVF F.1 2.0 tmpf91
    CP_EQF 0.0 2.0 flag91
    SELECTF flag91 0.0 tmpf91 F.0

    JR_LTF F.0 VL_M whilebody61
  endwhile61:
RETSUB_LINE_TOMM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_TOMM:
SUB_LEFT:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB92:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB93:
    CALL MOTOR.STARTPOWER 'B' -30.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while96:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile96
  whilebody96:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody96
  endwhile96:
  while99:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile99
  whilebody99:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody99
  endwhile99:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB103:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB104:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB105:
    CALL MOTOR.STARTPOWER 'B' 30.0
    CALL MOTOR.STARTPOWER 'C' -30.0
  while108:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile108
  whilebody108:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody108
  endwhile108:
  while111:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile111
  whilebody111:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody111
  endwhile111:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB115:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 170.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB116:
    CALL MOTOR.STARTPOWER 'B' -60.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while119:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile119
  whilebody119:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody119
  endwhile119:
  while122:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile122
  whilebody122:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody122
  endwhile122:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB126:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_TOLINE:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F -30.0 VSP_M
    DATA8 layer128
	DATA8 no128
	DATA8 mode8128
	
	MOVEF_8 2.0 no128
	SUB8 no128 1 no128
	DIV8 no128 4 layer128
	MATH MOD8 no128 4 no128

	MOVEF_8 2.0 mode8128
	
	INPUT_DEVICE READY_RAW layer128 no128 0 mode8128 0
    DATA8 layer129
	DATA8 no129
	DATA8 mode8129
	
	MOVEF_8 3.0 no129
	SUB8 no129 1 no129
	DIV8 no129 4 layer129
	MATH MOD8 no129 4 no129

	MOVEF_8 2.0 mode8129
	
	INPUT_DEVICE READY_RAW layer129 no129 0 mode8129 0
  while130:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or131
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile130
  or131:
  whilebody130:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody130
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody130
  endwhile130:
    DATA8 layer145
	DATA8 no145
	DATA8 mode8145
	
	MOVEF_8 2.0 no145
	SUB8 no145 1 no145
	DIV8 no145 4 layer145
	MATH MOD8 no145 4 no145

	MOVEF_8 0.0 mode8145
	
	INPUT_DEVICE READY_RAW layer145 no145 0 mode8145 0
    DATA8 layer146
	DATA8 no146
	DATA8 mode8146
	
	MOVEF_8 3.0 no146
	SUB8 no146 1 no146
	DIV8 no146 4 layer146
	MATH MOD8 no146 4 no146

	MOVEF_8 0.0 mode8146
	
	INPUT_DEVICE READY_RAW layer146 no146 0 mode8146 0
  while147:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile147
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile147
  whilebody147:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and159
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody147
  and159:
  endwhile147:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDIS_1
  while164:
    JR_GTF VDIS_1 VL_1 endwhile164
  whilebody164:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf177
    DATA8 flag177
    DIVF F.1 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 F.0

    MATH ABS F.0 VDIS_1
    JR_LTEQF VDIS_1 VL_1 whilebody164
  endwhile164:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf180
    DATA8 flag180
    DIVF VMM_2 194.68 tmpf180
    CP_EQF 0.0 194.68 flag180
    SELECTF flag180 0.0 tmpf180 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB183:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_3 F.0
    DATAF tmpf185
    DATA8 flag185
    DIVF F.0 360.0 tmpf185
    CP_EQF 0.0 360.0 flag185
    SELECTF flag185 0.0 tmpf185 VL_3

    DATAF tmpf186
    DATA8 flag186
    DIVF VL_3 200.96 tmpf186
    CP_EQF 0.0 200.96 flag186
    SELECTF flag186 0.0 tmpf186 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_3
  while190:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile190
  whilebody190:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody190
  endwhile190:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf198
    DATA8 flag198
    DIVF F.0 360.0 tmpf198
    CP_EQF 0.0 360.0 flag198
    SELECTF flag198 0.0 tmpf198 VL_4

    DATAF tmpf199
    DATA8 flag199
    DIVF VL_4 200.96 tmpf199
    CP_EQF 0.0 200.96 flag199
    SELECTF flag199 0.0 tmpf199 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_4
  while203:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile203
  whilebody203:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody203
  endwhile203:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf211
    DATA8 flag211
    DIVF F.0 360.0 tmpf211
    CP_EQF 0.0 360.0 flag211
    SELECTF flag211 0.0 tmpf211 VL_5

    DATAF tmpf212
    DATA8 flag212
    DIVF VL_5 200.96 tmpf212
    CP_EQF 0.0 200.96 flag212
    SELECTF flag212 0.0 tmpf212 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while217:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 2.0 tmpf223
    CP_EQF 0.0 2.0 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    DATAF tmpf224
    DATA8 flag224
    DIVF VL_5 2.0 tmpf224
    CP_EQF 0.0 2.0 flag224
    SELECTF flag224 0.0 tmpf224 F.1

    JR_GTF F.0 F.1 endwhile217
  whilebody217:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf230
    DATA8 flag230
    DIVF F.1 2.0 tmpf230
    CP_EQF 0.0 2.0 flag230
    SELECTF flag230 0.0 tmpf230 F.0

    DATAF tmpf231
    DATA8 flag231
    DIVF VL_5 2.0 tmpf231
    CP_EQF 0.0 2.0 flag231
    SELECTF flag231 0.0 tmpf231 F.1

    JR_LTEQF F.0 F.1 whilebody217
  endwhile217:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf234
    DATA8 flag234
    DIVF F.0 360.0 tmpf234
    CP_EQF 0.0 360.0 flag234
    SELECTF flag234 0.0 tmpf234 VL_6

    DATAF tmpf235
    DATA8 flag235
    DIVF VL_6 200.96 tmpf235
    CP_EQF 0.0 200.96 flag235
    SELECTF flag235 0.0 tmpf235 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while240:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf246
    DATA8 flag246
    DIVF F.1 2.0 tmpf246
    CP_EQF 0.0 2.0 flag246
    SELECTF flag246 0.0 tmpf246 F.0

    DATAF tmpf247
    DATA8 flag247
    DIVF VL_6 2.0 tmpf247
    CP_EQF 0.0 2.0 flag247
    SELECTF flag247 0.0 tmpf247 F.1

    JR_GTF F.0 F.1 endwhile240
  whilebody240:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf253
    DATA8 flag253
    DIVF F.1 2.0 tmpf253
    CP_EQF 0.0 2.0 flag253
    SELECTF flag253 0.0 tmpf253 F.0

    DATAF tmpf254
    DATA8 flag254
    DIVF VL_6 2.0 tmpf254
    CP_EQF 0.0 2.0 flag254
    SELECTF flag254 0.0 tmpf254 F.1

    JR_LTEQF F.0 F.1 whilebody240
  endwhile240:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    SUBF 0.0 VSPEED_7 F.0
    CALL MOTOR.SCHEDULE VMOTOR_7 F.0 0.0 130.0 0.0 'true' 

	DATA8 layer261
	DATA8 nos261
	DATA8 busy261
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_7 layer261 nos261
	JR_EQ8 0 nos261 motornotbusy261
  motorwaiting261:
	OUTPUT_TEST layer261 nos261 busy261
	JR_EQ8 busy261 0 motornotbusy261
	SLEEP
	JR motorwaiting261
  motornotbusy261:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_8 VSPEED_8
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds267
	MOVEF_32 600.0 milliseconds267
	DATA32 timer267
	TIMER_WAIT milliseconds267 timer267
	TIMER_READY timer267
    CALL MOTOR.STOP 'BC' 'true'
  while269:
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_LTEQF F.0 F.1 endwhile269
  whilebody269:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_GTF F.0 F.1 whilebody269
  endwhile269:
    CALL MOTOR.STARTPOWER VMOTOR_8 10.0
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else286_1
    JR_LTEQF VR_M VB_M else286_1
    MOVEF_F VR_M VMAX_M
    JR endif286
  else286_1:
    JR_LTEQF VG_M VR_M else286_2
    JR_LTEQF VG_M VB_M else286_2
    MOVEF_F VG_M VMAX_M
    JR endif286
  else286_2:
    JR_LTEQF VB_M VR_M else286_3
    JR_LTEQF VB_M VG_M else286_3
    MOVEF_F VB_M VMAX_M
  else286_3:
  endif286:
    JR_GTEQF VR_M VG_M else287_1
    JR_GTEQF VR_M VB_M else287_1
    MOVEF_F VR_M VMIN_M
    JR endif287
  else287_1:
    JR_GTEQF VG_M VR_M else287_2
    JR_GTEQF VG_M VB_M else287_2
    MOVEF_F VG_M VMIN_M
    JR endif287
  else287_2:
    JR_GTEQF VB_M VR_M else287_3
    JR_GTEQF VB_M VG_M else287_3
    MOVEF_F VB_M VMIN_M
  else287_3:
  endif287:
    JR_NEQF VMAX_M VMIN_M else288_1
    MOVEF_F 0.0 VH_M
    JR endif288
  else288_1:
    JR_NEQF VR_M VMAX_M else289_1
    JR_LTF VG_M VB_M else290_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf294
    DATA8 flag294
    DIVF F.0 F.1 tmpf294
    CP_EQF 0.0 F.1 flag294
    SELECTF flag294 0.0 tmpf294 VH_M

    JR endif290
  else290_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf298
    DATA8 flag298
    DIVF F.1 F.2 tmpf298
    CP_EQF 0.0 F.2 flag298
    SELECTF flag298 0.0 tmpf298 F.0

    ADDF F.0 360.0 VH_M
  else290_2:
  endif290:
    JR endif289
  else289_1:
    JR_NEQF VMAX_M VG_M else300_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf304
    DATA8 flag304
    DIVF F.1 F.2 tmpf304
    CP_EQF 0.0 F.2 flag304
    SELECTF flag304 0.0 tmpf304 F.0

    ADDF F.0 120.0 VH_M
    JR endif300
  else300_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf309
    DATA8 flag309
    DIVF F.1 F.2 tmpf309
    CP_EQF 0.0 F.2 flag309
    SELECTF flag309 0.0 tmpf309 F.0

    ADDF F.0 240.0 VH_M
  else300_2:
  endif300:
  else289_2:
  endif289:
  else288_2:
  endif288:
    JR_NEQF VMAX_M 0.0 else311_1
    MOVEF_F 0.0 VS_M
    JR endif311
  else311_1:
    DATAF tmpf312
    DATA8 flag312
    DIVF VMIN_M VMAX_M tmpf312
    CP_EQF 0.0 VMAX_M flag312
    SELECTF flag312 0.0 tmpf312 F.0

    SUBF 1.0 F.0 VS_M
  else311_2:
  endif311:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB315:
    JR_LTEQF VRGB_M 90.0 else316_1
    MOVEF_F 6.0 VCOL_M
    JR endif316
  else316_1:
    JR_LTEQF VRGB_M 25.0 else316_2
    MOVEF_F 1.0 VCOL_M
    JR endif316
  else316_2:
    MOVEF_F 0.0 VCOL_M
  else316_3:
  endif316:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_W1_1:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB317:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB318:
    MOVEF_F 95.0 VMM_9
    JR_NEQF VO_9 1.0 else319_1
    ADDF VMM_9 40.0 VMM_9
  else319_1:
  endif319:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB321:
    MOVEF_F VMM_9 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB322:
    WRITE32 ENDSUB_TOLINE:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB323:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB324:
    WRITE32 ENDSUB_RIGHT:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB325:
    MOVEF_F 65.0 VMM_9
    DATAF tmpf326
    DATA8 flag326
    DIVF VMM_9 194.68 tmpf326
    CP_EQF 0.0 194.68 flag326
    SELECTF flag326 0.0 tmpf326 F.0

    MULF F.0 360.0 VL_9
  while328:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_9 endwhile328
  whilebody328:
    WRITE32 ENDSUB_LINE3:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB330:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_9 whilebody328
  endwhile328:
  while332:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile332
  whilebody332:
    WRITE32 ENDSUB_LINE3:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB334:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody332
  endwhile332:
RETSUB_W1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1_1:
SUB_B1_1:
    MOVEF_F 115.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB336:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB337:
    MOVEF_F 85.0 VMM_10
    JR_NEQF VO_10 1.0 else338_1
    ADDF VMM_10 40.0 VMM_10
  else338_1:
  endif338:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB340:
    MOVEF_F VMM_10 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB341:
    WRITE32 ENDSUB_TOLINE:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB342:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB343:
    WRITE32 ENDSUB_RIGHT:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB344:
    MOVEF_F 65.0 VMM_10
    DATAF tmpf345
    DATA8 flag345
    DIVF VMM_10 194.68 tmpf345
    CP_EQF 0.0 194.68 flag345
    SELECTF flag345 0.0 tmpf345 F.0

    MULF F.0 360.0 VL_10
  while347:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile347
  whilebody347:
    WRITE32 ENDSUB_LINE3:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB349:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody347
  endwhile347:
  while351:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile351
  whilebody351:
    WRITE32 ENDSUB_LINE3:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB353:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody351
  endwhile351:
RETSUB_B1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1_1:
SUB_W2_1:
    WRITE32 ENDSUB_LEFT:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB355:
    MOVEF_F 170.0 VMM_11
    JR_NEQF VO_11 1.0 else356_1
    ADDF VMM_11 100.0 VMM_11
  else356_1:
  endif356:
    DATAF tmpf358
    DATA8 flag358
    DIVF VMM_11 194.68 tmpf358
    CP_EQF 0.0 194.68 flag358
    SELECTF flag358 0.0 tmpf358 F.0

    MULF F.0 360.0 VL_11
  while360:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile360
  whilebody360:
    WRITE32 ENDSUB_LINE3:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB362:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody360
  endwhile360:
  while364:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile364
  whilebody364:
    WRITE32 ENDSUB_LINE3:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB366:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody364
  endwhile364:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB368:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB369:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB370:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB371:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
    MOVEF_F 125.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB373:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB374:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB375:
    MOVEF_F 30.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB376:
    WRITE32 ENDSUB_TOLINE:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB377:
    WRITE32 ENDSUB_RIGHT:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB378:
    MOVEF_F 65.0 VMM_11
    DATAF tmpf379
    DATA8 flag379
    DIVF VMM_11 194.68 tmpf379
    CP_EQF 0.0 194.68 flag379
    SELECTF flag379 0.0 tmpf379 F.0

    MULF F.0 360.0 VL_11
  while381:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile381
  whilebody381:
    WRITE32 ENDSUB_LINE3:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB383:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody381
  endwhile381:
  while385:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile385
  whilebody385:
    WRITE32 ENDSUB_LINE3:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB387:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody385
  endwhile385:
RETSUB_W2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2_1:
SUB_B2_1:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB389:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB390:
    MOVEF_F 220.0 VMM_12
    JR_NEQF VO_12 1.0 else391_1
    ADDF VMM_12 40.0 VMM_12
  else391_1:
  endif391:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB393:
    MOVEF_F VMM_12 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB394:
    WRITE32 ENDSUB_TOLINE:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB395:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB396:
    WRITE32 ENDSUB_RIGHT:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB397:
    MOVEF_F 60.0 VMM_12
    DATAF tmpf398
    DATA8 flag398
    DIVF VMM_12 194.68 tmpf398
    CP_EQF 0.0 194.68 flag398
    SELECTF flag398 0.0 tmpf398 F.0

    MULF F.0 360.0 VL_12
  while400:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile400
  whilebody400:
    WRITE32 ENDSUB_LINE3:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB402:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody400
  endwhile400:
  while404:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile404
  whilebody404:
    WRITE32 ENDSUB_LINE3:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB406:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody404
  endwhile404:
RETSUB_B2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2_1:
SUB_W3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB408:
    MOVEF_F 170.0 VMM_13
    JR_NEQF VO_13 1.0 else409_1
    ADDF VMM_13 100.0 VMM_13
  else409_1:
  endif409:
    DATAF tmpf411
    DATA8 flag411
    DIVF VMM_13 194.68 tmpf411
    CP_EQF 0.0 194.68 flag411
    SELECTF flag411 0.0 tmpf411 F.0

    MULF F.0 360.0 VL_13
  while413:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile413
  whilebody413:
    WRITE32 ENDSUB_LINE3:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB415:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody413
  endwhile413:
  while417:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile417
  whilebody417:
    WRITE32 ENDSUB_LINE3:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB419:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody417
  endwhile417:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB421:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB422:
    MOVEF_F 340.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB423:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB424:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB425:
    MOVEF_F 195.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB426:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB427:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB428:
    MOVEF_F 100.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB429:
    WRITE32 ENDSUB_TOLINE:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB430:
    WRITE32 ENDSUB_RIGHT:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB431:
    MOVEF_F 65.0 VMM_13
    DATAF tmpf432
    DATA8 flag432
    DIVF VMM_13 194.68 tmpf432
    CP_EQF 0.0 194.68 flag432
    SELECTF flag432 0.0 tmpf432 F.0

    MULF F.0 360.0 VL_13
  while434:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile434
  whilebody434:
    WRITE32 ENDSUB_LINE3:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB436:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody434
  endwhile434:
  while438:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile438
  whilebody438:
    WRITE32 ENDSUB_LINE3:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB440:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody438
  endwhile438:
RETSUB_W3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W3_1:
SUB_B3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB442:
    MOVEF_F 200.0 VMM_14
    JR_NEQF VO_14 1.0 else443_1
    ADDF VMM_14 70.0 VMM_14
  else443_1:
  endif443:
    DATAF tmpf445
    DATA8 flag445
    DIVF VMM_14 194.68 tmpf445
    CP_EQF 0.0 194.68 flag445
    SELECTF flag445 0.0 tmpf445 F.0

    MULF F.0 360.0 VL_14
  while447:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile447
  whilebody447:
    WRITE32 ENDSUB_LINE3:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB449:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody447
  endwhile447:
  while451:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile451
  whilebody451:
    WRITE32 ENDSUB_LINE3:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB453:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody451
  endwhile451:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB455:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB456:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB457:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB458:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB459:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB460:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB461:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB462:
    WRITE32 ENDSUB_TOLINE:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB463:
    WRITE32 ENDSUB_RIGHT:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB464:
    MOVEF_F 65.0 VMM_14
    DATAF tmpf465
    DATA8 flag465
    DIVF VMM_14 194.68 tmpf465
    CP_EQF 0.0 194.68 flag465
    SELECTF flag465 0.0 tmpf465 F.0

    MULF F.0 360.0 VL_14
  while467:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile467
  whilebody467:
    WRITE32 ENDSUB_LINE3:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB469:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody467
  endwhile467:
  while471:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile471
  whilebody471:
    WRITE32 ENDSUB_LINE3:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB473:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody471
  endwhile471:
RETSUB_B3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B3_1:
SUB_W4_1:
    MOVEF_F 215.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB475:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB476:
    MOVEF_F 85.0 VMM_15
    JR_NEQF VO_15 1.0 else477_1
    ADDF VMM_15 40.0 VMM_15
  else477_1:
  endif477:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB479:
    MOVEF_F VMM_15 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB480:
    MOVEF_F 130.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB481:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB482:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB483:
    MOVEF_F 40.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB484:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB485:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB486:
    CALL MOTOR.STARTPOWER 'BC' -30.0
  while488:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or489
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile488
  or489:
  whilebody488:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody488
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody488
  endwhile488:
    WRITE32 ENDSUB_RIGHT:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB494:
    MOVEF_F 65.0 VMM_15
    DATAF tmpf495
    DATA8 flag495
    DIVF VMM_15 194.68 tmpf495
    CP_EQF 0.0 194.68 flag495
    SELECTF flag495 0.0 tmpf495 F.0

    MULF F.0 360.0 VL_15
  while497:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_15 endwhile497
  whilebody497:
    WRITE32 ENDSUB_LINE3:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB499:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_15 whilebody497
  endwhile497:
  while501:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile501
  whilebody501:
    WRITE32 ENDSUB_LINE3:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB503:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody501
  endwhile501:
RETSUB_W4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W4_1:
SUB_B4_1:
    MOVEF_F 390.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB505:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB506:
    MOVEF_F 80.0 VMM_16
    JR_NEQF VO_16 1.0 else507_1
    ADDF VMM_16 45.0 VMM_16
  else507_1:
  endif507:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB509:
    MOVEF_F VMM_16 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB510:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB511:
    MOVEF_F 115.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB512:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB513:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB514:
    MOVEF_F 10.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB515:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB516:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB517:
    WRITE32 ENDSUB_TOLINE:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB518:
    WRITE32 ENDSUB_RIGHT:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB519:
    MOVEF_F 65.0 VMM_16
    DATAF tmpf520
    DATA8 flag520
    DIVF VMM_16 194.68 tmpf520
    CP_EQF 0.0 194.68 flag520
    SELECTF flag520 0.0 tmpf520 F.0

    MULF F.0 360.0 VL_16
  while522:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_16 endwhile522
  whilebody522:
    WRITE32 ENDSUB_LINE3:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB524:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_16 whilebody522
  endwhile522:
  while526:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile526
  whilebody526:
    WRITE32 ENDSUB_LINE3:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB528:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody526
  endwhile526:
RETSUB_B4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B4_1:
SUB_TH_UP:
    CALL MOTOR.SCHEDULE 'AD' -50.0 0.0 130.0 0.0 'true' 

	DATA8 layer530
	DATA8 nos530
	DATA8 busy530
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer530 nos530
	JR_EQ8 0 nos530 motornotbusy530
  motorwaiting530:
	OUTPUT_TEST layer530 nos530 busy530
	JR_EQ8 busy530 0 motornotbusy530
	SLEEP
	JR motorwaiting530
  motornotbusy530:
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_TH_DOWN:
    CALL MOTOR.STARTPOWER 'AD' 50.0
    DATA32 milliseconds533
	MOVEF_32 600.0 milliseconds533
	DATA32 timer533
	TIMER_WAIT milliseconds533 timer533
	TIMER_READY timer533
  while534:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile534
  whilebody534:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody534
  endwhile534:
    CALL MOTOR.STARTPOWER 'AD' 10.0
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
