DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VB1_M
DATAF VW1_M
DATAF VB2_M
DATAF VW2_M
DATAF VRED_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VV_M
DATAF VRGB_M
DATAF VCOL_M
DATAF VN_M
DATAF VI_M
DATAF VMM_M
DATAF VL_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAS VMOTOR_7 252
DATAF VSPEED_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAF VOB_9
DATAF VOB_10
DATAF VMM_10
DATAF VL_10
DATAF VOB_11
DATAF VMM_11
DATAF VL_11
DATAF VOB_12
DATAF VMM_12
DATAF VL_12

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VOB_9
    MOVEF_F 0.0 VOB_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VOB_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VOB_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VOB_9
    MOVEF_F 0.0 VOB_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VOB_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VOB_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 3.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.4 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.35 VK2_M
    MOVEF_F 50.0 VV2_M
    MOVEF_F 0.55 VK3_M
    MOVEF_F 20.0 VV3_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB439:
    MOVEF_F 1.0 VOB_11
    WRITE32 ENDSUB_P2_1:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P2_1
CALLSUB440:
    MOVEF_F 2.0 VOB_12
    WRITE32 ENDSUB_P3_1:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P3_1
CALLSUB441:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB442:
    WRITE32 ENDSUB_FRZ:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB443:
    MOVEF_F 1.0 VI_M
  for444:
    JR_GTF VI_M 4.0 endfor444
  forbody444:
    WRITE32 ENDSUB_COL:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB445:
    JR_NEQF VCOL_M 1.0 else446_1
    MOVEF_F VI_M VB1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif446
  else446_1:
    JR_NEQF VCOL_M 6.0 else446_2
    MOVEF_F VI_M VW1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else446_2:
  endif446:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf450
    DATA8 flag450
    DIVF VMM_M 194.68 tmpf450
    CP_EQF 0.0 194.68 flag450
    SELECTF flag450 0.0 tmpf450 F.0

    MULF F.0 360.0 VL_M
  while452:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile452
  whilebody452:
    WRITE32 ENDSUB_LINE2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB454:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody452
  endwhile452:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody444
  endfor444:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf458
    DATA8 flag458
    DIVF VMM_M 194.68 tmpf458
    CP_EQF 0.0 194.68 flag458
    SELECTF flag458 0.0 tmpf458 F.0

    MULF F.0 360.0 VL_M
  while460:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile460
  whilebody460:
    WRITE32 ENDSUB_LINE2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB462:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody460
  endwhile460:
    MOVEF_F 1.0 VI_M
  for464:
    JR_GTF VI_M 4.0 endfor464
  forbody464:
    WRITE32 ENDSUB_COL:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB465:
    JR_NEQF VCOL_M 1.0 else466_1
    MOVEF_F VI_M VB2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif466
  else466_1:
    JR_NEQF VCOL_M 6.0 else466_2
    MOVEF_F VI_M VW2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else466_2:
  endif466:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf470
    DATA8 flag470
    DIVF VMM_M 194.68 tmpf470
    CP_EQF 0.0 194.68 flag470
    SELECTF flag470 0.0 tmpf470 F.0

    MULF F.0 360.0 VL_M
  while472:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile472
  whilebody472:
    WRITE32 ENDSUB_LINE2:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB474:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody472
  endwhile472:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody464
  endfor464:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    DATA8 layer486
	DATA8 no486
	DATA8 mode8486
	
	MOVEF_8 3.0 no486
	SUB8 no486 1 no486
	DIV8 no486 4 layer486
	MATH MOD8 no486 4 no486

	MOVEF_8 2.0 mode8486
	
	INPUT_DEVICE READY_RAW layer486 no486 0 mode8486 0
  while487:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile487
  whilebody487:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody487
  endwhile487:
    DATA8 layer499
	DATA8 no499
	DATA8 mode8499
	
	MOVEF_8 3.0 no499
	SUB8 no499 1 no499
	DIV8 no499 4 layer499
	MATH MOD8 no499 4 no499

	MOVEF_8 0.0 mode8499
	
	INPUT_DEVICE READY_RAW layer499 no499 0 mode8499 0
    MOVEF_F 10.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB500:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB501:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB502:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB503:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB504:
  while505:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile505
  whilebody505:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody505
  endwhile505:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB509:
    WRITE32 ENDSUB_RIGHT:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB510:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf512
    DATA8 flag512
    DIVF VMM_M 194.68 tmpf512
    CP_EQF 0.0 194.68 flag512
    SELECTF flag512 0.0 tmpf512 F.0

    MULF F.0 360.0 VL_M
  while514:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile514
  whilebody514:
    WRITE32 ENDSUB_LINE3:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB516:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody514
  endwhile514:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 700.0 VMM_M
    DATAF tmpf519
    DATA8 flag519
    DIVF VMM_M 194.68 tmpf519
    CP_EQF 0.0 194.68 flag519
    SELECTF flag519 0.0 tmpf519 F.0

    MULF F.0 360.0 VL_M
  while521:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile521
  whilebody521:
    WRITE32 ENDSUB_LINE2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB523:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody521
  endwhile521:
    WRITE32 ENDSUB_COL:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB525:
    JR_EQF VCOL_M 0.0 else526_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else526_1:
  endif526:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 500.0 VMM_M
    DATAF tmpf529
    DATA8 flag529
    DIVF VMM_M 194.68 tmpf529
    CP_EQF 0.0 194.68 flag529
    SELECTF flag529 0.0 tmpf529 F.0

    MULF F.0 360.0 VL_M
  while531:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile531
  whilebody531:
    WRITE32 ENDSUB_LINE2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB533:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody531
  endwhile531:
    WRITE32 ENDSUB_COL:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB535:
    JR_EQF VCOL_M 0.0 else536_1
    JR_NEQF VRED_M 0.0 else536_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else536_1:
  endif536:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 350.0 VMM_M
    DATAF tmpf539
    DATA8 flag539
    DIVF VMM_M 194.68 tmpf539
    CP_EQF 0.0 194.68 flag539
    SELECTF flag539 0.0 tmpf539 F.0

    MULF F.0 360.0 VL_M
  while541:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile541
  whilebody541:
    WRITE32 ENDSUB_LINE2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB543:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody541
  endwhile541:
  while545:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile545
  whilebody545:
    WRITE32 ENDSUB_LINE3:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB547:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody545
  endwhile545:
    WRITE32 ENDSUB_RIGHT:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB549:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 150.0 VMM_M
    DATAF tmpf551
    DATA8 flag551
    DIVF VMM_M 194.68 tmpf551
    CP_EQF 0.0 194.68 flag551
    SELECTF flag551 0.0 tmpf551 F.0

    MULF F.0 360.0 VL_M
  while553:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile553
  whilebody553:
    WRITE32 ENDSUB_LINE3:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB555:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody553
  endwhile553:
  while557:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile557
  whilebody557:
    WRITE32 ENDSUB_LINE2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB559:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody557
  endwhile557:
    WRITE32 ENDSUB_RIGHT:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB561:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf563
    DATA8 flag563
    DIVF VMM_M 194.68 tmpf563
    CP_EQF 0.0 194.68 flag563
    SELECTF flag563 0.0 tmpf563 F.0

    MULF F.0 360.0 VL_M
  while565:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile565
  whilebody565:
    WRITE32 ENDSUB_LINE3:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB567:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody565
  endwhile565:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_M
    DATAF tmpf570
    DATA8 flag570
    DIVF VMM_M 194.68 tmpf570
    CP_EQF 0.0 194.68 flag570
    SELECTF flag570 0.0 tmpf570 F.0

    MULF F.0 360.0 VL_M
  while572:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile572
  whilebody572:
    WRITE32 ENDSUB_LINE2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB574:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody572
  endwhile572:
  while576:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile576
  whilebody576:
    WRITE32 ENDSUB_LINE3:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB578:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody576
  endwhile576:
    JR_NEQF VW1_M 1.0 else580_1
    MOVEF_F 265.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB581:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB582:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB583:
    DATA32 milliseconds584
	MOVEF_32 500.0 milliseconds584
	DATA32 timer584
	TIMER_WAIT milliseconds584 timer584
	TIMER_READY timer584
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB585:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB586:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB587:
    CALL MOTOR.STARTPOWER 'BC' -20.0
    DATA8 layer589
	DATA8 no589
	DATA8 mode8589
	
	MOVEF_8 2.0 no589
	SUB8 no589 1 no589
	DIV8 no589 4 layer589
	MATH MOD8 no589 4 no589

	MOVEF_8 2.0 mode8589
	
	INPUT_DEVICE READY_RAW layer589 no589 0 mode8589 0
    DATA8 layer590
	DATA8 no590
	DATA8 mode8590
	
	MOVEF_8 3.0 no590
	SUB8 no590 1 no590
	DIV8 no590 4 layer590
	MATH MOD8 no590 4 no590

	MOVEF_8 2.0 mode8590
	
	INPUT_DEVICE READY_RAW layer590 no590 0 mode8590 0
  while591:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or592
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile591
  or592:
  whilebody591:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody591
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody591
  endwhile591:
    DATA8 layer597
	DATA8 no597
	DATA8 mode8597
	
	MOVEF_8 2.0 no597
	SUB8 no597 1 no597
	DIV8 no597 4 layer597
	MATH MOD8 no597 4 no597

	MOVEF_8 0.0 mode8597
	
	INPUT_DEVICE READY_RAW layer597 no597 0 mode8597 0
    DATA8 layer598
	DATA8 no598
	DATA8 mode8598
	
	MOVEF_8 3.0 no598
	SUB8 no598 1 no598
	DIV8 no598 4 layer598
	MATH MOD8 no598 4 no598

	MOVEF_8 0.0 mode8598
	
	INPUT_DEVICE READY_RAW layer598 no598 0 mode8598 0
  while599:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile599
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile599
  whilebody599:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and602
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody599
  and602:
  endwhile599:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB606:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf608
    DATA8 flag608
    DIVF VMM_M 194.68 tmpf608
    CP_EQF 0.0 194.68 flag608
    SELECTF flag608 0.0 tmpf608 F.0

    MULF F.0 360.0 VL_M
  while610:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile610
  whilebody610:
    WRITE32 ENDSUB_LINE3:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB612:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody610
  endwhile610:
  while614:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile614
  whilebody614:
    WRITE32 ENDSUB_LINE3:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB616:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody614
  endwhile614:
    WRITE32 ENDSUB_LEFT:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB618:
    JR endif580
  else580_1:
    JR_NEQF VW1_M 4.0 else580_2
    MOVEF_F 225.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB619:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB620:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB621:
    DATA32 milliseconds622
	MOVEF_32 500.0 milliseconds622
	DATA32 timer622
	TIMER_WAIT milliseconds622 timer622
	TIMER_READY timer622
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB623:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB624:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB625:
    MOVEF_F 100.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB626:
    MOVEF_F 180.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB627:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer629
	DATA8 no629
	DATA8 mode8629
	
	MOVEF_8 2.0 no629
	SUB8 no629 1 no629
	DIV8 no629 4 layer629
	MATH MOD8 no629 4 no629

	MOVEF_8 2.0 mode8629
	
	INPUT_DEVICE READY_RAW layer629 no629 0 mode8629 0
    DATA8 layer630
	DATA8 no630
	DATA8 mode8630
	
	MOVEF_8 3.0 no630
	SUB8 no630 1 no630
	DIV8 no630 4 layer630
	MATH MOD8 no630 4 no630

	MOVEF_8 2.0 mode8630
	
	INPUT_DEVICE READY_RAW layer630 no630 0 mode8630 0
  while631:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or632
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile631
  or632:
  whilebody631:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody631
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody631
  endwhile631:
    DATA8 layer637
	DATA8 no637
	DATA8 mode8637
	
	MOVEF_8 2.0 no637
	SUB8 no637 1 no637
	DIV8 no637 4 layer637
	MATH MOD8 no637 4 no637

	MOVEF_8 0.0 mode8637
	
	INPUT_DEVICE READY_RAW layer637 no637 0 mode8637 0
    DATA8 layer638
	DATA8 no638
	DATA8 mode8638
	
	MOVEF_8 3.0 no638
	SUB8 no638 1 no638
	DIV8 no638 4 layer638
	MATH MOD8 no638 4 no638

	MOVEF_8 0.0 mode8638
	
	INPUT_DEVICE READY_RAW layer638 no638 0 mode8638 0
  while639:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile639
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile639
  whilebody639:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and642
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody639
  and642:
  endwhile639:
    WRITE32 ENDSUB_LEFT:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB645:
    JR endif580
  else580_2:
    JR_NEQF VW1_M 2.0 else580_3
    WRITE32 ENDSUB_LEFT:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB646:
  while647:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or648
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile647
  or648:
  whilebody647:
    WRITE32 ENDSUB_LINE3:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB651:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody647
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody647
  endwhile647:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB654:
  while655:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or656
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile655
  or656:
  whilebody655:
    WRITE32 ENDSUB_LINE3:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB659:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody655
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody655
  endwhile655:
    MOVEF_F 28.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB662:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB663:
    MOVEF_F 180.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB664:
    DATA32 milliseconds665
	MOVEF_32 500.0 milliseconds665
	DATA32 timer665
	TIMER_WAIT milliseconds665 timer665
	TIMER_READY timer665
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB666:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB667:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB668:
    CALL MOTOR.STARTPOWER 'BC' -20.0
  while670:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or671
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile670
  or671:
  whilebody670:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody670
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody670
  endwhile670:
    WRITE32 ENDSUB_LEFT:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB676:
  while677:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or678
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile677
  or678:
  whilebody677:
    WRITE32 ENDSUB_LINE3:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB681:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody677
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody677
  endwhile677:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB684:
  while685:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile685
  whilebody685:
    WRITE32 ENDSUB_LINE3:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB687:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody685
  endwhile685:
    WRITE32 ENDSUB_AROUND:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB689:
    JR endif580
  else580_3:
    JR_NEQF VW1_M 3.0 else580_4
    WRITE32 ENDSUB_LEFT:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB690:
  while691:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or692
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile691
  or692:
  whilebody691:
    WRITE32 ENDSUB_LINE3:CALLSUB695 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB695:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody691
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody691
  endwhile691:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB698:
  while699:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or700
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile699
  or700:
  whilebody699:
    WRITE32 ENDSUB_LINE3:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB703:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody699
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody699
  endwhile699:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB706:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB707:
    MOVEF_F 330.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB708:
    DATA32 milliseconds709
	MOVEF_32 500.0 milliseconds709
	DATA32 timer709
	TIMER_WAIT milliseconds709 timer709
	TIMER_READY timer709
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB710:
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB711:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB712:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB713:
    MOVEF_F 220.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB714:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB715:
    MOVEF_F 410.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB716 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB716:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer718
	DATA8 no718
	DATA8 mode8718
	
	MOVEF_8 2.0 no718
	SUB8 no718 1 no718
	DIV8 no718 4 layer718
	MATH MOD8 no718 4 no718

	MOVEF_8 2.0 mode8718
	
	INPUT_DEVICE READY_RAW layer718 no718 0 mode8718 0
    DATA8 layer719
	DATA8 no719
	DATA8 mode8719
	
	MOVEF_8 3.0 no719
	SUB8 no719 1 no719
	DIV8 no719 4 layer719
	MATH MOD8 no719 4 no719

	MOVEF_8 2.0 mode8719
	
	INPUT_DEVICE READY_RAW layer719 no719 0 mode8719 0
  while720:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or721
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile720
  or721:
  whilebody720:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody720
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody720
  endwhile720:
    DATA8 layer726
	DATA8 no726
	DATA8 mode8726
	
	MOVEF_8 2.0 no726
	SUB8 no726 1 no726
	DIV8 no726 4 layer726
	MATH MOD8 no726 4 no726

	MOVEF_8 0.0 mode8726
	
	INPUT_DEVICE READY_RAW layer726 no726 0 mode8726 0
    DATA8 layer727
	DATA8 no727
	DATA8 mode8727
	
	MOVEF_8 3.0 no727
	SUB8 no727 1 no727
	DIV8 no727 4 layer727
	MATH MOD8 no727 4 no727

	MOVEF_8 0.0 mode8727
	
	INPUT_DEVICE READY_RAW layer727 no727 0 mode8727 0
  while728:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile728
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile728
  whilebody728:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and731
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody728
  and731:
  endwhile728:
    WRITE32 ENDSUB_LEFT:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB734:
  else580_4:
  endif580:
  while735:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or736
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile735
  or736:
  whilebody735:
    WRITE32 ENDSUB_LINE3:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB739:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody735
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody735
  endwhile735:
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB742:
    JR_EQF VB1_M 3.0 else743_1
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB744:
    MOVEF_F 87.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB745:
  else743_1:
  endif743:
    JR_NEQF VB1_M 1.0 else746_1
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB747:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB748:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB749:
    DATA32 milliseconds750
	MOVEF_32 500.0 milliseconds750
	DATA32 timer750
	TIMER_WAIT milliseconds750 timer750
	TIMER_READY timer750
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB751 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB751:
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB752:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB753:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB754:
    CALL MOTOR.STARTPOWER 'BC' -20.0
    DATA8 layer756
	DATA8 no756
	DATA8 mode8756
	
	MOVEF_8 2.0 no756
	SUB8 no756 1 no756
	DIV8 no756 4 layer756
	MATH MOD8 no756 4 no756

	MOVEF_8 2.0 mode8756
	
	INPUT_DEVICE READY_RAW layer756 no756 0 mode8756 0
    DATA8 layer757
	DATA8 no757
	DATA8 mode8757
	
	MOVEF_8 3.0 no757
	SUB8 no757 1 no757
	DIV8 no757 4 layer757
	MATH MOD8 no757 4 no757

	MOVEF_8 2.0 mode8757
	
	INPUT_DEVICE READY_RAW layer757 no757 0 mode8757 0
  while758:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or759
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile758
  or759:
  whilebody758:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody758
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody758
  endwhile758:
    DATA8 layer764
	DATA8 no764
	DATA8 mode8764
	
	MOVEF_8 2.0 no764
	SUB8 no764 1 no764
	DIV8 no764 4 layer764
	MATH MOD8 no764 4 no764

	MOVEF_8 0.0 mode8764
	
	INPUT_DEVICE READY_RAW layer764 no764 0 mode8764 0
    DATA8 layer765
	DATA8 no765
	DATA8 mode8765
	
	MOVEF_8 3.0 no765
	SUB8 no765 1 no765
	DIV8 no765 4 layer765
	MATH MOD8 no765 4 no765

	MOVEF_8 0.0 mode8765
	
	INPUT_DEVICE READY_RAW layer765 no765 0 mode8765 0
  while766:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile766
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile766
  whilebody766:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and769
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody766
  and769:
  endwhile766:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_LEFT:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB773:
    JR endif746
  else746_1:
    JR_NEQF VB1_M 4.0 else746_2
    MOVEF_F 300.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB774:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB775 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB775:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB776 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB776:
    DATA32 milliseconds777
	MOVEF_32 500.0 milliseconds777
	DATA32 timer777
	TIMER_WAIT milliseconds777 timer777
	TIMER_READY timer777
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB778 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB778:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB779:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB780 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB780:
    MOVEF_F 100.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB781 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB781:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB782:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer784
	DATA8 no784
	DATA8 mode8784
	
	MOVEF_8 2.0 no784
	SUB8 no784 1 no784
	DIV8 no784 4 layer784
	MATH MOD8 no784 4 no784

	MOVEF_8 2.0 mode8784
	
	INPUT_DEVICE READY_RAW layer784 no784 0 mode8784 0
    DATA8 layer785
	DATA8 no785
	DATA8 mode8785
	
	MOVEF_8 3.0 no785
	SUB8 no785 1 no785
	DIV8 no785 4 layer785
	MATH MOD8 no785 4 no785

	MOVEF_8 2.0 mode8785
	
	INPUT_DEVICE READY_RAW layer785 no785 0 mode8785 0
  while786:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or787
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile786
  or787:
  whilebody786:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
  endwhile786:
    DATA8 layer792
	DATA8 no792
	DATA8 mode8792
	
	MOVEF_8 2.0 no792
	SUB8 no792 1 no792
	DIV8 no792 4 layer792
	MATH MOD8 no792 4 no792

	MOVEF_8 0.0 mode8792
	
	INPUT_DEVICE READY_RAW layer792 no792 0 mode8792 0
    DATA8 layer793
	DATA8 no793
	DATA8 mode8793
	
	MOVEF_8 3.0 no793
	SUB8 no793 1 no793
	DIV8 no793 4 layer793
	MATH MOD8 no793 4 no793

	MOVEF_8 0.0 mode8793
	
	INPUT_DEVICE READY_RAW layer793 no793 0 mode8793 0
  while794:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile794
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile794
  whilebody794:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and797
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody794
  and797:
  endwhile794:
    WRITE32 ENDSUB_LEFT:CALLSUB800 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB800:
  while801:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or802
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile801
  or802:
  whilebody801:
    WRITE32 ENDSUB_LINE3:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB805:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody801
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody801
  endwhile801:
    MOVEF_F 180.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB808:
    WRITE32 ENDSUB_LEFT:CALLSUB809 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB809:
    JR endif746
  else746_2:
    JR_NEQF VB1_M 3.0 else746_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf811
    DATA8 flag811
    DIVF VMM_M 194.68 tmpf811
    CP_EQF 0.0 194.68 flag811
    SELECTF flag811 0.0 tmpf811 F.0

    MULF F.0 360.0 VL_M
  while813:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile813
  whilebody813:
    WRITE32 ENDSUB_LINE3:CALLSUB815 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB815:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody813
  endwhile813:
  while817:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or818
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile817
  or818:
  whilebody817:
    WRITE32 ENDSUB_LINE3:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB821:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody817
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody817
  endwhile817:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB824 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB824:
  while825:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or826
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile825
  or826:
  whilebody825:
    WRITE32 ENDSUB_LINE3:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB829:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody825
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody825
  endwhile825:
    MOVEF_F 28.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB832:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB833 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB833:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB834 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB834:
    DATA32 milliseconds835
	MOVEF_32 500.0 milliseconds835
	DATA32 timer835
	TIMER_WAIT milliseconds835 timer835
	TIMER_READY timer835
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB836 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB836:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB837 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB837:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 30.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB838 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB838:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer840
	DATA8 no840
	DATA8 mode8840
	
	MOVEF_8 2.0 no840
	SUB8 no840 1 no840
	DIV8 no840 4 layer840
	MATH MOD8 no840 4 no840

	MOVEF_8 2.0 mode8840
	
	INPUT_DEVICE READY_RAW layer840 no840 0 mode8840 0
    DATA8 layer841
	DATA8 no841
	DATA8 mode8841
	
	MOVEF_8 3.0 no841
	SUB8 no841 1 no841
	DIV8 no841 4 layer841
	MATH MOD8 no841 4 no841

	MOVEF_8 2.0 mode8841
	
	INPUT_DEVICE READY_RAW layer841 no841 0 mode8841 0
  while842:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or843
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile842
  or843:
  whilebody842:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody842
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody842
  endwhile842:
    DATA8 layer848
	DATA8 no848
	DATA8 mode8848
	
	MOVEF_8 2.0 no848
	SUB8 no848 1 no848
	DIV8 no848 4 layer848
	MATH MOD8 no848 4 no848

	MOVEF_8 0.0 mode8848
	
	INPUT_DEVICE READY_RAW layer848 no848 0 mode8848 0
    DATA8 layer849
	DATA8 no849
	DATA8 mode8849
	
	MOVEF_8 3.0 no849
	SUB8 no849 1 no849
	DIV8 no849 4 layer849
	MATH MOD8 no849 4 no849

	MOVEF_8 0.0 mode8849
	
	INPUT_DEVICE READY_RAW layer849 no849 0 mode8849 0
  while850:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile850
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile850
  whilebody850:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and853
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody850
  and853:
  endwhile850:
    WRITE32 ENDSUB_RIGHT:CALLSUB856 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB856:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.0 VMM_M
    DATAF tmpf858
    DATA8 flag858
    DIVF VMM_M 194.68 tmpf858
    CP_EQF 0.0 194.68 flag858
    SELECTF flag858 0.0 tmpf858 F.0

    MULF F.0 360.0 VL_M
  while860:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile860
  whilebody860:
    WRITE32 ENDSUB_LINE3:CALLSUB862 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB862:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody860
  endwhile860:
  while864:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile864
  whilebody864:
    WRITE32 ENDSUB_LINE3:CALLSUB866 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB866:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody864
  endwhile864:
    WRITE32 ENDSUB_RIGHT:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB868:
  else746_3:
  endif746:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf870
    DATA8 flag870
    DIVF VMM_M 194.68 tmpf870
    CP_EQF 0.0 194.68 flag870
    SELECTF flag870 0.0 tmpf870 F.0

    MULF F.0 360.0 VL_M
  while872:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile872
  whilebody872:
    WRITE32 ENDSUB_LINE3:CALLSUB874 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB874:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody872
  endwhile872:
  while876:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile876
  whilebody876:
    WRITE32 ENDSUB_LINE2:CALLSUB878 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB878:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody876
  endwhile876:
    WRITE32 ENDSUB_LEFT:CALLSUB880 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB880:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf881
    DATA8 flag881
    DIVF VMM_M 194.68 tmpf881
    CP_EQF 0.0 194.68 flag881
    SELECTF flag881 0.0 tmpf881 F.0

    MULF F.0 360.0 VL_M
  while883:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile883
  whilebody883:
    WRITE32 ENDSUB_LINE3:CALLSUB885 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB885:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody883
  endwhile883:
  while887:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile887
  whilebody887:
    WRITE32 ENDSUB_LINE2:CALLSUB889 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB889:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody887
  endwhile887:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB891 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB891:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds893
	MOVEF_32 1000.0 milliseconds893
	DATA32 timer893
	TIMER_WAIT milliseconds893 timer893
	TIMER_READY timer893
    MOVEF_F 130.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB894:
    MOVEF_F 92.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB895 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB895:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB896 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB896:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer898
	DATA8 no898
	DATA8 mode8898
	
	MOVEF_8 2.0 no898
	SUB8 no898 1 no898
	DIV8 no898 4 layer898
	MATH MOD8 no898 4 no898

	MOVEF_8 2.0 mode8898
	
	INPUT_DEVICE READY_RAW layer898 no898 0 mode8898 0
    DATA8 layer899
	DATA8 no899
	DATA8 mode8899
	
	MOVEF_8 3.0 no899
	SUB8 no899 1 no899
	DIV8 no899 4 layer899
	MATH MOD8 no899 4 no899

	MOVEF_8 2.0 mode8899
	
	INPUT_DEVICE READY_RAW layer899 no899 0 mode8899 0
  while900:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or901
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile900
  or901:
  whilebody900:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody900
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody900
  endwhile900:
    DATA8 layer906
	DATA8 no906
	DATA8 mode8906
	
	MOVEF_8 2.0 no906
	SUB8 no906 1 no906
	DIV8 no906 4 layer906
	MATH MOD8 no906 4 no906

	MOVEF_8 0.0 mode8906
	
	INPUT_DEVICE READY_RAW layer906 no906 0 mode8906 0
    DATA8 layer907
	DATA8 no907
	DATA8 mode8907
	
	MOVEF_8 3.0 no907
	SUB8 no907 1 no907
	DIV8 no907 4 layer907
	MATH MOD8 no907 4 no907

	MOVEF_8 0.0 mode8907
	
	INPUT_DEVICE READY_RAW layer907 no907 0 mode8907 0
  while908:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile908
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile908
  whilebody908:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and911
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody908
  and911:
  endwhile908:
    MOVEF_F 23.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB914 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB914:
    CALL MOTOR.START 'D' 25.0
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB916 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB916:
    CALL MOTOR.STOP 'D' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB919 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB919:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer921
	DATA8 no921
	DATA8 mode8921
	
	MOVEF_8 2.0 no921
	SUB8 no921 1 no921
	DIV8 no921 4 layer921
	MATH MOD8 no921 4 no921

	MOVEF_8 2.0 mode8921
	
	INPUT_DEVICE READY_RAW layer921 no921 0 mode8921 0
    DATA8 layer922
	DATA8 no922
	DATA8 mode8922
	
	MOVEF_8 3.0 no922
	SUB8 no922 1 no922
	DIV8 no922 4 layer922
	MATH MOD8 no922 4 no922

	MOVEF_8 2.0 mode8922
	
	INPUT_DEVICE READY_RAW layer922 no922 0 mode8922 0
  while923:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or924
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile923
  or924:
  whilebody923:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody923
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody923
  endwhile923:
    DATA8 layer929
	DATA8 no929
	DATA8 mode8929
	
	MOVEF_8 2.0 no929
	SUB8 no929 1 no929
	DIV8 no929 4 layer929
	MATH MOD8 no929 4 no929

	MOVEF_8 0.0 mode8929
	
	INPUT_DEVICE READY_RAW layer929 no929 0 mode8929 0
    DATA8 layer930
	DATA8 no930
	DATA8 mode8930
	
	MOVEF_8 3.0 no930
	SUB8 no930 1 no930
	DIV8 no930 4 layer930
	MATH MOD8 no930 4 no930

	MOVEF_8 0.0 mode8930
	
	INPUT_DEVICE READY_RAW layer930 no930 0 mode8930 0
  while931:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile931
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile931
  whilebody931:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and934
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody931
  and934:
  endwhile931:
    WRITE32 ENDSUB_LEFT:CALLSUB937 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB937:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F -30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB938 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB938:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf939
    DATA8 flag939
    DIVF VMM_M 194.68 tmpf939
    CP_EQF 0.0 194.68 flag939
    SELECTF flag939 0.0 tmpf939 F.0

    MULF F.0 360.0 VL_M
  while941:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile941
  whilebody941:
    WRITE32 ENDSUB_LINE3:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB943:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody941
  endwhile941:
    MOVEF_F 500.0 VMM_M
    DATAF tmpf945
    DATA8 flag945
    DIVF VMM_M 194.68 tmpf945
    CP_EQF 0.0 194.68 flag945
    SELECTF flag945 0.0 tmpf945 F.0

    MULF F.0 360.0 VL_M
  while947:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile947
  whilebody947:
    WRITE32 ENDSUB_LINE2:CALLSUB949 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB949:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody947
  endwhile947:
  while951:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile951
  whilebody951:
    WRITE32 ENDSUB_LINE3:CALLSUB953 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB953:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody951
  endwhile951:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else956_1
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB957 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB957:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB958 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB958:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB959 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB959:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB960 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB960:
    JR endif956
  else956_1:
    JR_NEQF VRED_M 4.0 else956_2
    MOVEF_F 120.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB961 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB961:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB962 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB962:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB963 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB963:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB964 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB964:
    JR endif956
  else956_2:
    JR_NEQF VRED_M 0.0 else956_3
    WRITE32 ENDSUB_RIGHT:CALLSUB965 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB965:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf967
    DATA8 flag967
    DIVF VMM_M 194.68 tmpf967
    CP_EQF 0.0 194.68 flag967
    SELECTF flag967 0.0 tmpf967 F.0

    MULF F.0 360.0 VL_M
  while969:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile969
  whilebody969:
    WRITE32 ENDSUB_LINE3:CALLSUB971 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB971:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody969
  endwhile969:
  while973:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or974
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile973
  or974:
  whilebody973:
    WRITE32 ENDSUB_LINE3:CALLSUB977 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB977:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody973
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody973
  endwhile973:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB980 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB980:
  while981:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or982
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile981
  or982:
  whilebody981:
    WRITE32 ENDSUB_LINE3:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB985:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody981
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody981
  endwhile981:
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
    WRITE32 ENDSUB_COL:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB989:
    MOVEF_F 12.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB990 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB990:
    JR_EQF VCOL_M 0.0 else991_1
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB992 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB992:
    JR endif991
  else991_1:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB993 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB993:
  else991_2:
  endif991:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB994 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB994:
    DATA32 milliseconds995
	MOVEF_32 500.0 milliseconds995
	DATA32 timer995
	TIMER_WAIT milliseconds995 timer995
	TIMER_READY timer995
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB996 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB996:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB997 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB997:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer999
	DATA8 no999
	DATA8 mode8999
	
	MOVEF_8 2.0 no999
	SUB8 no999 1 no999
	DIV8 no999 4 layer999
	MATH MOD8 no999 4 no999

	MOVEF_8 2.0 mode8999
	
	INPUT_DEVICE READY_RAW layer999 no999 0 mode8999 0
    DATA8 layer1000
	DATA8 no1000
	DATA8 mode81000
	
	MOVEF_8 3.0 no1000
	SUB8 no1000 1 no1000
	DIV8 no1000 4 layer1000
	MATH MOD8 no1000 4 no1000

	MOVEF_8 2.0 mode81000
	
	INPUT_DEVICE READY_RAW layer1000 no1000 0 mode81000 0
  while1001:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1002
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1001
  or1002:
  whilebody1001:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1001
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1001
  endwhile1001:
    DATA8 layer1007
	DATA8 no1007
	DATA8 mode81007
	
	MOVEF_8 2.0 no1007
	SUB8 no1007 1 no1007
	DIV8 no1007 4 layer1007
	MATH MOD8 no1007 4 no1007

	MOVEF_8 0.0 mode81007
	
	INPUT_DEVICE READY_RAW layer1007 no1007 0 mode81007 0
    DATA8 layer1008
	DATA8 no1008
	DATA8 mode81008
	
	MOVEF_8 3.0 no1008
	SUB8 no1008 1 no1008
	DIV8 no1008 4 layer1008
	MATH MOD8 no1008 4 no1008

	MOVEF_8 0.0 mode81008
	
	INPUT_DEVICE READY_RAW layer1008 no1008 0 mode81008 0
  while1009:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1009
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1009
  whilebody1009:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and1012
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1009
  and1012:
  endwhile1009:
    JR_LTEQF VV_M 7.0 else1015_1
    WRITE32 ENDSUB_LEFT:CALLSUB1016 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1016:
    MOVEF_F 2.0 VRED_M
    JR endif1015
  else1015_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB1017 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1017:
    MOVEF_F 3.0 VRED_M
  else1015_2:
  endif1015:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 130.0 VMM_M
    DATAF tmpf1019
    DATA8 flag1019
    DIVF VMM_M 194.68 tmpf1019
    CP_EQF 0.0 194.68 flag1019
    SELECTF flag1019 0.0 tmpf1019 F.0

    MULF F.0 360.0 VL_M
  while1021:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1021
  whilebody1021:
    WRITE32 ENDSUB_LINE3:CALLSUB1023 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1023:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1021
  endwhile1021:
  while1025:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or1026
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1025
  or1026:
  whilebody1025:
    WRITE32 ENDSUB_LINE3:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1029:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1025
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1025
  endwhile1025:
    WRITE32 ENDSUB_LEFT:CALLSUB1032 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1032:
  else956_3:
  endif956:
    JR_EQF VRED_M 2.0 else1033_1
    JR_EQF VRED_M 3.0 else1033_1
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1034 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1034:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer1036
	DATA8 no1036
	DATA8 mode81036
	
	MOVEF_8 2.0 no1036
	SUB8 no1036 1 no1036
	DIV8 no1036 4 layer1036
	MATH MOD8 no1036 4 no1036

	MOVEF_8 2.0 mode81036
	
	INPUT_DEVICE READY_RAW layer1036 no1036 0 mode81036 0
    DATA8 layer1037
	DATA8 no1037
	DATA8 mode81037
	
	MOVEF_8 3.0 no1037
	SUB8 no1037 1 no1037
	DIV8 no1037 4 layer1037
	MATH MOD8 no1037 4 no1037

	MOVEF_8 2.0 mode81037
	
	INPUT_DEVICE READY_RAW layer1037 no1037 0 mode81037 0
  while1038:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1039
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1038
  or1039:
  whilebody1038:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1038
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1038
  endwhile1038:
    DATA8 layer1044
	DATA8 no1044
	DATA8 mode81044
	
	MOVEF_8 2.0 no1044
	SUB8 no1044 1 no1044
	DIV8 no1044 4 layer1044
	MATH MOD8 no1044 4 no1044

	MOVEF_8 0.0 mode81044
	
	INPUT_DEVICE READY_RAW layer1044 no1044 0 mode81044 0
    DATA8 layer1045
	DATA8 no1045
	DATA8 mode81045
	
	MOVEF_8 3.0 no1045
	SUB8 no1045 1 no1045
	DIV8 no1045 4 layer1045
	MATH MOD8 no1045 4 no1045

	MOVEF_8 0.0 mode81045
	
	INPUT_DEVICE READY_RAW layer1045 no1045 0 mode81045 0
  while1046:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1046
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1046
  whilebody1046:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and1049
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1046
  and1049:
  endwhile1046:
    WRITE32 ENDSUB_RIGHT:CALLSUB1052 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1052:
  else1033_1:
  endif1033:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf1053
    DATA8 flag1053
    DIVF VMM_M 194.68 tmpf1053
    CP_EQF 0.0 194.68 flag1053
    SELECTF flag1053 0.0 tmpf1053 F.0

    MULF F.0 360.0 VL_M
  while1055:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1055
  whilebody1055:
    WRITE32 ENDSUB_LINE3:CALLSUB1057 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1057:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1055
  endwhile1055:
    MOVEF_F 300.0 VMM_M
    DATAF tmpf1059
    DATA8 flag1059
    DIVF VMM_M 194.68 tmpf1059
    CP_EQF 0.0 194.68 flag1059
    SELECTF flag1059 0.0 tmpf1059 F.0

    MULF F.0 360.0 VL_M
  while1061:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1061
  whilebody1061:
    WRITE32 ENDSUB_LINE2:CALLSUB1063 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1063:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1061
  endwhile1061:
  while1065:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1065
  whilebody1065:
    WRITE32 ENDSUB_LINE2:CALLSUB1067 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1067:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1065
  endwhile1065:
    WRITE32 ENDSUB_RIGHT:CALLSUB1069 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1069:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf1070
    DATA8 flag1070
    DIVF VMM_M 194.68 tmpf1070
    CP_EQF 0.0 194.68 flag1070
    SELECTF flag1070 0.0 tmpf1070 F.0

    MULF F.0 360.0 VL_M
  while1072:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1072
  whilebody1072:
    WRITE32 ENDSUB_LINE3:CALLSUB1074 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1074:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1072
  endwhile1072:
  while1076:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1076
  whilebody1076:
    WRITE32 ENDSUB_LINE2:CALLSUB1078 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1078:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1076
  endwhile1076:
    JR_EQF VRED_M 1.0 or1081
    JR_NEQF VRED_M 3.0 else1080_1
  or1081:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1082 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1082:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB1083 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB1083:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1084 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1084:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1085 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1085:
    JR endif1080
  else1080_1:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1086 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1086:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer1088
	DATA8 no1088
	DATA8 mode81088
	
	MOVEF_8 2.0 no1088
	SUB8 no1088 1 no1088
	DIV8 no1088 4 layer1088
	MATH MOD8 no1088 4 no1088

	MOVEF_8 2.0 mode81088
	
	INPUT_DEVICE READY_RAW layer1088 no1088 0 mode81088 0
    DATA8 layer1089
	DATA8 no1089
	DATA8 mode81089
	
	MOVEF_8 3.0 no1089
	SUB8 no1089 1 no1089
	DIV8 no1089 4 layer1089
	MATH MOD8 no1089 4 no1089

	MOVEF_8 2.0 mode81089
	
	INPUT_DEVICE READY_RAW layer1089 no1089 0 mode81089 0
  while1090:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1091
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1090
  or1091:
  whilebody1090:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1090
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1090
  endwhile1090:
    DATA8 layer1096
	DATA8 no1096
	DATA8 mode81096
	
	MOVEF_8 2.0 no1096
	SUB8 no1096 1 no1096
	DIV8 no1096 4 layer1096
	MATH MOD8 no1096 4 no1096

	MOVEF_8 0.0 mode81096
	
	INPUT_DEVICE READY_RAW layer1096 no1096 0 mode81096 0
    DATA8 layer1097
	DATA8 no1097
	DATA8 mode81097
	
	MOVEF_8 3.0 no1097
	SUB8 no1097 1 no1097
	DIV8 no1097 4 layer1097
	MATH MOD8 no1097 4 no1097

	MOVEF_8 0.0 mode81097
	
	INPUT_DEVICE READY_RAW layer1097 no1097 0 mode81097 0
  while1098:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1098
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1098
  whilebody1098:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and1101
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1098
  and1101:
  endwhile1098:
    MOVEF_F 45.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB1104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB1104:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 40.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB1105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB1105:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1106 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1106:
    MOVEF_F 45.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1107:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1108 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1108:
  else1080_2:
  endif1080:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer1110
	DATA8 no1110
	DATA8 mode81110
	
	MOVEF_8 2.0 no1110
	SUB8 no1110 1 no1110
	DIV8 no1110 4 layer1110
	MATH MOD8 no1110 4 no1110

	MOVEF_8 2.0 mode81110
	
	INPUT_DEVICE READY_RAW layer1110 no1110 0 mode81110 0
    DATA8 layer1111
	DATA8 no1111
	DATA8 mode81111
	
	MOVEF_8 3.0 no1111
	SUB8 no1111 1 no1111
	DIV8 no1111 4 layer1111
	MATH MOD8 no1111 4 no1111

	MOVEF_8 2.0 mode81111
	
	INPUT_DEVICE READY_RAW layer1111 no1111 0 mode81111 0
  while1112:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1113
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1112
  or1113:
  whilebody1112:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1112
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1112
  endwhile1112:
    DATA8 layer1118
	DATA8 no1118
	DATA8 mode81118
	
	MOVEF_8 2.0 no1118
	SUB8 no1118 1 no1118
	DIV8 no1118 4 layer1118
	MATH MOD8 no1118 4 no1118

	MOVEF_8 0.0 mode81118
	
	INPUT_DEVICE READY_RAW layer1118 no1118 0 mode81118 0
    DATA8 layer1119
	DATA8 no1119
	DATA8 mode81119
	
	MOVEF_8 3.0 no1119
	SUB8 no1119 1 no1119
	DIV8 no1119 4 layer1119
	MATH MOD8 no1119 4 no1119

	MOVEF_8 0.0 mode81119
	
	INPUT_DEVICE READY_RAW layer1119 no1119 0 mode81119 0
  while1120:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile1120
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile1120
  whilebody1120:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 and1123
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody1120
  and1123:
  endwhile1120:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB1127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1127:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf1129
    DATA8 flag1129
    DIVF VMM_M 194.68 tmpf1129
    CP_EQF 0.0 194.68 flag1129
    SELECTF flag1129 0.0 tmpf1129 F.0

    MULF F.0 360.0 VL_M
  while1131:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1131
  whilebody1131:
    WRITE32 ENDSUB_LINE3:CALLSUB1133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1133:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1131
  endwhile1131:
    WRITE32 ENDSUB_AROUND:CALLSUB1135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB1135:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf1137
    DATA8 flag1137
    DIVF VMM_M 194.68 tmpf1137
    CP_EQF 0.0 194.68 flag1137
    SELECTF flag1137 0.0 tmpf1137 F.0

    MULF F.0 360.0 VL_M
  while1139:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1139
  whilebody1139:
    WRITE32 ENDSUB_LINE3:CALLSUB1141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1141:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1139
  endwhile1139:
  while1143:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1143
  whilebody1143:
    WRITE32 ENDSUB_LINE2:CALLSUB1145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1145:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1143
  endwhile1143:
    WRITE32 ENDSUB_LEFT:CALLSUB1147 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1147:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf1148
    DATA8 flag1148
    DIVF VMM_M 194.68 tmpf1148
    CP_EQF 0.0 194.68 flag1148
    SELECTF flag1148 0.0 tmpf1148 F.0

    MULF F.0 360.0 VL_M
  while1150:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1150
  whilebody1150:
    WRITE32 ENDSUB_LINE3:CALLSUB1152 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1152:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1150
  endwhile1150:
  while1154:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1154
  whilebody1154:
    WRITE32 ENDSUB_LINE2:CALLSUB1156 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1156:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1154
  endwhile1154:
    WRITE32 ENDSUB_LEFT:CALLSUB1158 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1158:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf1159
    DATA8 flag1159
    DIVF VMM_M 194.68 tmpf1159
    CP_EQF 0.0 194.68 flag1159
    SELECTF flag1159 0.0 tmpf1159 F.0

    MULF F.0 360.0 VL_M
  while1161:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1161
  whilebody1161:
    WRITE32 ENDSUB_LINE3:CALLSUB1163 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1163:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1161
  endwhile1161:
    MOVEF_F 1700.0 VMM_M
    DATAF tmpf1165
    DATA8 flag1165
    DIVF VMM_M 194.68 tmpf1165
    CP_EQF 0.0 194.68 flag1165
    SELECTF flag1165 0.0 tmpf1165 F.0

    MULF F.0 360.0 VL_M
  while1167:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1167
  whilebody1167:
    WRITE32 ENDSUB_LINE2:CALLSUB1169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1169:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1167
  endwhile1167:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F -30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB1171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB1171:
  while1172:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1172
  whilebody1172:
    WRITE32 ENDSUB_LINE3:CALLSUB1174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1174:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1172
  endwhile1172:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB1177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1177:
    MOVEF_F 70.0 VMM_M
    DATAF tmpf1178
    DATA8 flag1178
    DIVF VMM_M 194.68 tmpf1178
    CP_EQF 0.0 194.68 flag1178
    SELECTF flag1178 0.0 tmpf1178 F.0

    MULF F.0 360.0 VL_M
  while1180:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1180
  whilebody1180:
    WRITE32 ENDSUB_LINE3:CALLSUB1182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1182:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1180
  endwhile1180:
    DATA8 layer1184
	DATA8 no1184
	DATA8 mode81184
	
	MOVEF_8 3.0 no1184
	SUB8 no1184 1 no1184
	DIV8 no1184 4 layer1184
	MATH MOD8 no1184 4 no1184

	MOVEF_8 2.0 mode81184
	
	INPUT_DEVICE READY_RAW layer1184 no1184 0 mode81184 0
  while1185:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile1185
  whilebody1185:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody1185
  endwhile1185:
    DATA8 layer1197
	DATA8 no1197
	DATA8 mode81197
	
	MOVEF_8 3.0 no1197
	SUB8 no1197 1 no1197
	DIV8 no1197 4 layer1197
	MATH MOD8 no1197 4 no1197

	MOVEF_8 0.0 mode81197
	
	INPUT_DEVICE READY_RAW layer1197 no1197 0 mode81197 0
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1198:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB1199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB1199:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1200:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB1201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB1201:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1202:
  while1203:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1203
  whilebody1203:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1203
  endwhile1203:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1207:
    WRITE32 ENDSUB_RIGHT:CALLSUB1208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1208:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 F.1 tmpf15
    CP_EQF 0.0 F.1 flag15
    SELECTF flag15 0.0 tmpf15 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB25:
    WRITE32 ENDSUB_SEN2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB26:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB34:
    WRITE32 ENDSUB_SEN2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB35:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LEFT:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB43:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB44:
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while47:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile47
  whilebody47:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody47
  endwhile47:
  while50:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile50
  whilebody50:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody50
  endwhile50:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB54:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB55:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB56:
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while59:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile59
  whilebody59:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody59
  endwhile59:
  while62:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile62
  whilebody62:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody62
  endwhile62:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB66:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 170.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB67:
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while70:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile70
  whilebody70:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody70
  endwhile70:
  while73:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile73
  whilebody73:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody73
  endwhile73:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB77:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while79:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf85
    DATA8 flag85
    DIVF F.1 2.0 tmpf85
    CP_EQF 0.0 2.0 flag85
    SELECTF flag85 0.0 tmpf85 F.0

    JR_GTF F.0 VL_1 endwhile79
  whilebody79:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf100
    DATA8 flag100
    DIVF F.1 2.0 tmpf100
    CP_EQF 0.0 2.0 flag100
    SELECTF flag100 0.0 tmpf100 F.0

    JR_LTEQF F.0 VL_1 whilebody79
  endwhile79:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf102
    DATA8 flag102
    DIVF VMM_2 194.68 tmpf102
    CP_EQF 0.0 194.68 flag102
    SELECTF flag102 0.0 tmpf102 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB105:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_3 F.0
    DATAF tmpf107
    DATA8 flag107
    DIVF F.0 360.0 tmpf107
    CP_EQF 0.0 360.0 flag107
    SELECTF flag107 0.0 tmpf107 VL_3

    DATAF tmpf108
    DATA8 flag108
    DIVF VL_3 200.96 tmpf108
    CP_EQF 0.0 200.96 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_3
  while112:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile112
  whilebody112:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody112
  endwhile112:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf119
    DATA8 flag119
    DIVF F.0 360.0 tmpf119
    CP_EQF 0.0 360.0 flag119
    SELECTF flag119 0.0 tmpf119 VL_4

    DATAF tmpf120
    DATA8 flag120
    DIVF VL_4 200.96 tmpf120
    CP_EQF 0.0 200.96 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_4
  while124:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile124
  whilebody124:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody124
  endwhile124:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf131
    DATA8 flag131
    DIVF F.0 360.0 tmpf131
    CP_EQF 0.0 360.0 flag131
    SELECTF flag131 0.0 tmpf131 VL_5

    DATAF tmpf132
    DATA8 flag132
    DIVF VL_5 200.96 tmpf132
    CP_EQF 0.0 200.96 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while137:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    DATAF tmpf144
    DATA8 flag144
    DIVF VL_5 2.0 tmpf144
    CP_EQF 0.0 2.0 flag144
    SELECTF flag144 0.0 tmpf144 F.1

    JR_GTF F.0 F.1 endwhile137
  whilebody137:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf150
    DATA8 flag150
    DIVF F.1 2.0 tmpf150
    CP_EQF 0.0 2.0 flag150
    SELECTF flag150 0.0 tmpf150 F.0

    DATAF tmpf151
    DATA8 flag151
    DIVF VL_5 2.0 tmpf151
    CP_EQF 0.0 2.0 flag151
    SELECTF flag151 0.0 tmpf151 F.1

    JR_LTEQF F.0 F.1 whilebody137
  endwhile137:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf154
    DATA8 flag154
    DIVF F.0 360.0 tmpf154
    CP_EQF 0.0 360.0 flag154
    SELECTF flag154 0.0 tmpf154 VL_6

    DATAF tmpf155
    DATA8 flag155
    DIVF VL_6 200.96 tmpf155
    CP_EQF 0.0 200.96 flag155
    SELECTF flag155 0.0 tmpf155 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while160:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf166
    DATA8 flag166
    DIVF F.1 2.0 tmpf166
    CP_EQF 0.0 2.0 flag166
    SELECTF flag166 0.0 tmpf166 F.0

    DATAF tmpf167
    DATA8 flag167
    DIVF VL_6 2.0 tmpf167
    CP_EQF 0.0 2.0 flag167
    SELECTF flag167 0.0 tmpf167 F.1

    JR_GTF F.0 F.1 endwhile160
  whilebody160:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf173
    DATA8 flag173
    DIVF F.1 2.0 tmpf173
    CP_EQF 0.0 2.0 flag173
    SELECTF flag173 0.0 tmpf173 F.0

    DATAF tmpf174
    DATA8 flag174
    DIVF VL_6 2.0 tmpf174
    CP_EQF 0.0 2.0 flag174
    SELECTF flag174 0.0 tmpf174 F.1

    JR_LTEQF F.0 F.1 whilebody160
  endwhile160:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    SUBF 0.0 VSPEED_7 F.0
    CALL MOTOR.SCHEDULE VMOTOR_7 F.0 0.0 120.0 0.0 'true' 

	DATA8 layer181
	DATA8 nos181
	DATA8 busy181
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_7 layer181 nos181
	JR_EQ8 0 nos181 motornotbusy181
  motorwaiting181:
	OUTPUT_TEST layer181 nos181 busy181
	JR_EQ8 busy181 0 motornotbusy181
	SLEEP
	JR motorwaiting181
  motornotbusy181:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_8 50.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds187
	MOVEF_32 600.0 milliseconds187
	DATA32 timer187
	TIMER_WAIT milliseconds187 timer187
	TIMER_READY timer187
    CALL MOTOR.STOP 'BC' 'true'
  while189:
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    JR_LTEQF F.0 35.0 endwhile189
  whilebody189:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    JR_GTF F.0 35.0 whilebody189
  endwhile189:
    CALL MOTOR.STARTPOWER VMOTOR_8 10.0
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else202_1
    JR_LTEQF VSRED_M VSBLUE_M else202_1
    MOVEF_F VSRED_M VMAX_M
    JR endif202
  else202_1:
    JR_LTEQF VSGREEN_M VSRED_M else202_2
    JR_LTEQF VSGREEN_M VSBLUE_M else202_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif202
  else202_2:
    JR_LTEQF VSBLUE_M VSRED_M else202_3
    JR_LTEQF VSBLUE_M VSGREEN_M else202_3
    MOVEF_F VSBLUE_M VMAX_M
  else202_3:
  endif202:
    JR_GTEQF VSRED_M VSGREEN_M else203_1
    JR_GTEQF VSRED_M VSBLUE_M else203_1
    MOVEF_F VSRED_M VMIN_M
    JR endif203
  else203_1:
    JR_GTEQF VSGREEN_M VSRED_M else203_2
    JR_GTEQF VSGREEN_M VSBLUE_M else203_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif203
  else203_2:
    JR_GTEQF VSBLUE_M VSRED_M else203_3
    JR_GTEQF VSBLUE_M VSGREEN_M else203_3
    MOVEF_F VSBLUE_M VMIN_M
  else203_3:
  endif203:
    JR_NEQF VMAX_M VMIN_M else204_1
    MOVEF_F 0.0 VH_M
    JR endif204
  else204_1:
    JR_NEQF VSRED_M VMAX_M else205_1
    JR_LTF VSGREEN_M VSBLUE_M else206_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf210
    DATA8 flag210
    DIVF F.0 F.1 tmpf210
    CP_EQF 0.0 F.1 flag210
    SELECTF flag210 0.0 tmpf210 VH_M

    JR endif206
  else206_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf214
    DATA8 flag214
    DIVF F.1 F.2 tmpf214
    CP_EQF 0.0 F.2 flag214
    SELECTF flag214 0.0 tmpf214 F.0

    ADDF F.0 360.0 VH_M
  else206_2:
  endif206:
    JR endif205
  else205_1:
    JR_NEQF VMAX_M VSGREEN_M else216_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf220
    DATA8 flag220
    DIVF F.1 F.2 tmpf220
    CP_EQF 0.0 F.2 flag220
    SELECTF flag220 0.0 tmpf220 F.0

    ADDF F.0 120.0 VH_M
    JR endif216
  else216_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf225
    DATA8 flag225
    DIVF F.1 F.2 tmpf225
    CP_EQF 0.0 F.2 flag225
    SELECTF flag225 0.0 tmpf225 F.0

    ADDF F.0 240.0 VH_M
  else216_2:
  endif216:
  else205_2:
  endif205:
  else204_2:
  endif204:
    JR_NEQF VMAX_M 0.0 else227_1
    MOVEF_F 0.0 VS_M
    JR endif227
  else227_1:
    DATAF tmpf228
    DATA8 flag228
    DIVF VMIN_M VMAX_M tmpf228
    CP_EQF 0.0 VMAX_M flag228
    SELECTF flag228 0.0 tmpf228 F.0

    SUBF 1.0 F.0 VS_M
  else227_2:
  endif227:
    MOVEF_F VMAX_M VV_M
    ADDF VSRED_M VSGREEN_M F.0
    ADDF F.0 VSBLUE_M VRGB_M
    JR_LTEQF VRGB_M 15.0 else232_1
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VRGB_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    JR_LTEQF VRGB_M 50.0 else236_1
    MOVEF_F 6.0 VCOL_M
    JR endif236
  else236_1:
    MOVEF_F 1.0 VCOL_M
  else236_2:
  endif236:
    JR endif232
  else232_1:
    MOVEF_F 0.0 VCOL_M
  else232_2:
  endif232:
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    CALL SENSOR.READRAWVALUE 1.0 0.0 VN_M
    JR_LTEQF VN_M 25.0 else238_1
    MOVEF_F 6.0 VCOL_M
    JR endif238
  else238_1:
    JR_LTEQF VN_M 8.0 else238_2
    MOVEF_F 1.0 VCOL_M
    JR endif238
  else238_2:
    MOVEF_F 0.0 VCOL_M
  else238_3:
  endif238:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_TOLINE:
    CALL MOTOR.STARTPOWER 'BC' -20.0
    DATA8 layer240
	DATA8 no240
	DATA8 mode8240
	
	MOVEF_8 2.0 no240
	SUB8 no240 1 no240
	DIV8 no240 4 layer240
	MATH MOD8 no240 4 no240

	MOVEF_8 2.0 mode8240
	
	INPUT_DEVICE READY_RAW layer240 no240 0 mode8240 0
    DATA8 layer241
	DATA8 no241
	DATA8 mode8241
	
	MOVEF_8 3.0 no241
	SUB8 no241 1 no241
	DIV8 no241 4 layer241
	MATH MOD8 no241 4 no241

	MOVEF_8 2.0 mode8241
	
	INPUT_DEVICE READY_RAW layer241 no241 0 mode8241 0
  while242:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or243
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile242
  or243:
  whilebody242:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody242
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody242
  endwhile242:
    DATA8 layer248
	DATA8 no248
	DATA8 mode8248
	
	MOVEF_8 2.0 no248
	SUB8 no248 1 no248
	DIV8 no248 4 layer248
	MATH MOD8 no248 4 no248

	MOVEF_8 0.0 mode8248
	
	INPUT_DEVICE READY_RAW layer248 no248 0 mode8248 0
    DATA8 layer249
	DATA8 no249
	DATA8 mode8249
	
	MOVEF_8 3.0 no249
	SUB8 no249 1 no249
	DIV8 no249 4 layer249
	MATH MOD8 no249 4 no249

	MOVEF_8 0.0 mode8249
	
	INPUT_DEVICE READY_RAW layer249 no249 0 mode8249 0
  while250:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile250
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile250
  whilebody250:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and253
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody250
  and253:
  endwhile250:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_P1_1:
    JR_NEQF VOB_9 1.0 else257_1
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB258:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB259:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB260:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB261:
    JR endif257
  else257_1:
    MOVEF_F 205.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB262:
    MOVEF_F 110.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB263:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB264:
    MOVEF_F 10.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB265:
  else257_2:
  endif257:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 10.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB266:
    WRITE32 ENDSUB_TOLINE:CALLSUB267 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB267:
    WRITE32 ENDSUB_RIGHT:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB268:
  while269:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile269
  whilebody269:
    WRITE32 ENDSUB_LINE3:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB271:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody269
  endwhile269:
RETSUB_P1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P1_1:
SUB_P4_1:
    JR_NEQF VOB_10 1.0 else273_1
    MOVEF_F 380.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB274:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB275:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB276:
    MOVEF_F 120.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB277:
    MOVEF_F 120.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB278:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB279:
    JR endif273
  else273_1:
    MOVEF_F 177.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB280:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB281:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB282:
    MOVEF_F 135.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB283:
    MOVEF_F 135.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB284:
    MOVEF_F 83.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB285:
  else273_2:
  endif273:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB286:
    WRITE32 ENDSUB_TOLINE:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB287:
    WRITE32 ENDSUB_AROUND:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB288:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_10
    DATAF tmpf290
    DATA8 flag290
    DIVF VMM_10 194.68 tmpf290
    CP_EQF 0.0 194.68 flag290
    SELECTF flag290 0.0 tmpf290 F.0

    MULF F.0 360.0 VL_10
  while292:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile292
  whilebody292:
    WRITE32 ENDSUB_LINE3:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB294:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody292
  endwhile292:
    WRITE32 ENDSUB_AROUND:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB296:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_10
    DATAF tmpf298
    DATA8 flag298
    DIVF VMM_10 194.68 tmpf298
    CP_EQF 0.0 194.68 flag298
    SELECTF flag298 0.0 tmpf298 F.0

    MULF F.0 360.0 VL_10
  while300:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile300
  whilebody300:
    WRITE32 ENDSUB_LINE3:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB302:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody300
  endwhile300:
  while304:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile304
  whilebody304:
    WRITE32 ENDSUB_LINE3:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB306:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody304
  endwhile304:
RETSUB_P4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P4_1:
SUB_P2_1:
    WRITE32 ENDSUB_LEFT:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB308:
    JR_NEQF VOB_11 2.0 else309_1
    MOVEF_F 300.0 VMM_11
    DATAF tmpf310
    DATA8 flag310
    DIVF VMM_11 194.68 tmpf310
    CP_EQF 0.0 194.68 flag310
    SELECTF flag310 0.0 tmpf310 F.0

    MULF F.0 360.0 VL_11
  while312:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile312
  whilebody312:
    WRITE32 ENDSUB_LINE3:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB314:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody312
  endwhile312:
  while316:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile316
  whilebody316:
    WRITE32 ENDSUB_LINE3:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB318:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody316
  endwhile316:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB320:
    MOVEF_F 80.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB321:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB322:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB323:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB324:
    MOVEF_F 25.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB325:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB326:
    WRITE32 ENDSUB_TOLINE:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB327:
    WRITE32 ENDSUB_LEFT:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB328:
    JR endif309
  else309_1:
    MOVEF_F 100.0 VMM_11
    DATAF tmpf329
    DATA8 flag329
    DIVF VMM_11 194.68 tmpf329
    CP_EQF 0.0 194.68 flag329
    SELECTF flag329 0.0 tmpf329 F.0

    MULF F.0 360.0 VL_11
  while331:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile331
  whilebody331:
    WRITE32 ENDSUB_LINE3:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB333:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody331
  endwhile331:
  while335:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile335
  whilebody335:
    WRITE32 ENDSUB_LINE3:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB337:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody335
  endwhile335:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB339:
    MOVEF_F 40.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB340:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB341:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB342:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB343:
    MOVEF_F 50.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB344:
    WRITE32 ENDSUB_TOLINE:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB345:
    WRITE32 ENDSUB_LEFT:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB346:
  else309_2:
  endif309:
    MOVEF_F 150.0 VMM_11
    DATAF tmpf347
    DATA8 flag347
    DIVF VMM_11 194.68 tmpf347
    CP_EQF 0.0 194.68 flag347
    SELECTF flag347 0.0 tmpf347 F.0

    MULF F.0 360.0 VL_11
  while349:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile349
  whilebody349:
    WRITE32 ENDSUB_LINE3:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB351:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody349
  endwhile349:
  while353:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile353
  whilebody353:
    WRITE32 ENDSUB_LINE3:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB355:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody353
  endwhile353:
    WRITE32 ENDSUB_RIGHT:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB357:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_11
    DATAF tmpf359
    DATA8 flag359
    DIVF VMM_11 194.68 tmpf359
    CP_EQF 0.0 194.68 flag359
    SELECTF flag359 0.0 tmpf359 F.0

    MULF F.0 360.0 VL_11
  while361:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile361
  whilebody361:
    WRITE32 ENDSUB_LINE3:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB363:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody361
  endwhile361:
    WRITE32 ENDSUB_AROUND:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB365:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_11
    DATAF tmpf367
    DATA8 flag367
    DIVF VMM_11 194.68 tmpf367
    CP_EQF 0.0 194.68 flag367
    SELECTF flag367 0.0 tmpf367 F.0

    MULF F.0 360.0 VL_11
  while369:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile369
  whilebody369:
    WRITE32 ENDSUB_LINE3:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB371:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody369
  endwhile369:
  while373:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile373
  whilebody373:
    WRITE32 ENDSUB_LINE3:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB375:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody373
  endwhile373:
RETSUB_P2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P2_1:
SUB_P3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB377:
    MOVEF_F 200.0 VMM_12
    DATAF tmpf378
    DATA8 flag378
    DIVF VMM_12 194.68 tmpf378
    CP_EQF 0.0 194.68 flag378
    SELECTF flag378 0.0 tmpf378 F.0

    MULF F.0 360.0 VL_12
  while380:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile380
  whilebody380:
    WRITE32 ENDSUB_LINE3:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB382:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody380
  endwhile380:
  while384:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile384
  whilebody384:
    WRITE32 ENDSUB_LINE3:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB386:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody384
  endwhile384:
    JR_NEQF VOB_12 1.0 else388_1
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB389:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB390:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB391:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB392:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB393:
    WRITE32 ENDSUB_TOLINE:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB394:
    WRITE32 ENDSUB_RIGHT:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB395:
    MOVEF_F 150.0 VMM_12
    JR endif388
  else388_1:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB396:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB397:
    MOVEF_F 295.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB398:
    MOVEF_F 20.0 VGRAD_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB399:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 10.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB400:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB401:
    MOVEF_F 75.0 VGRAD_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB402:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB403:
    MOVEF_F 105.0 VGRAD_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB404:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB405:
    WRITE32 ENDSUB_TOLINE:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB406:
    WRITE32 ENDSUB_RIGHT:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB407:
    MOVEF_F 100.0 VMM_12
  else388_2:
  endif388:
    CALL MOTOR.RESETCOUNT 'BC'
    DATAF tmpf409
    DATA8 flag409
    DIVF VMM_12 194.68 tmpf409
    CP_EQF 0.0 194.68 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    MULF F.0 360.0 VL_12
  while411:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile411
  whilebody411:
    WRITE32 ENDSUB_LINE3:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB413:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody411
  endwhile411:
  while415:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile415
  whilebody415:
    WRITE32 ENDSUB_LINE3:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB417:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody415
  endwhile415:
    WRITE32 ENDSUB_RIGHT:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB419:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_12
    DATAF tmpf421
    DATA8 flag421
    DIVF VMM_12 194.68 tmpf421
    CP_EQF 0.0 194.68 flag421
    SELECTF flag421 0.0 tmpf421 F.0

    MULF F.0 360.0 VL_12
  while423:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile423
  whilebody423:
    WRITE32 ENDSUB_LINE3:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB425:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody423
  endwhile423:
    WRITE32 ENDSUB_AROUND:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB427:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 150.0 VMM_12
    DATAF tmpf429
    DATA8 flag429
    DIVF VMM_12 194.68 tmpf429
    CP_EQF 0.0 194.68 flag429
    SELECTF flag429 0.0 tmpf429 F.0

    MULF F.0 360.0 VL_12
  while431:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile431
  whilebody431:
    WRITE32 ENDSUB_LINE3:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB433:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody431
  endwhile431:
  while435:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile435
  whilebody435:
    WRITE32 ENDSUB_LINE3:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB437:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody435
  endwhile435:
RETSUB_P3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P3_1:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
