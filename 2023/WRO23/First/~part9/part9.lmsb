DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VK21_M
DATAF VV21_M
DATAF VBLACK_M
DATAF VB1_M
DATAF VW1_M
DATAF VB2_M
DATAF VW2_M
DATAF VRED_M
DATAF VMM_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VV_M
DATAF VK_M
DATAF VDIS_M
DATAF VT_M
DATAF VSP_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAF VI_M
DATAF VL_1
DATAF VSP_1
DATAF VDIS_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAS VMOTOR_7 252
DATAF VSPEED_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAF VO_9
DATAF VMM_9
DATAF VL_9
DATAF VO_10
DATAF VMM_10
DATAF VL_10
DATAF VO_11
DATAF VMM_11
DATAF VL_11
DATAF VO_12
DATAF VMM_12
DATAF VL_12
DATAF VO_13
DATAF VMM_13
DATAF VL_13
DATAF VO_14
DATAF VMM_14
DATAF VL_14
DATAF VO_15
DATAF VMM_15
DATAF VL_15
DATAF VO_16
DATAF VMM_16
DATAF VL_16
DATA32 RUNCOUNTER_TH_DOWN
DATA32 RUNCOUNTER_TH_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VDIS_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    MOVE32_32 0 RUNCOUNTER_TH_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_UP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_UP 1
    CALL GETANDINC32 RUNCOUNTER_TH_UP -1 RUNCOUNTER_TH_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
subcall PROGRAM_TH_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1065
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch1065:
    JR_NEQ32 SUBPROGRAM 1 dispatch1066
    WRITE32 ENDSUB_TH_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_UP
  dispatch1066:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    MOVEF_F 0.0 VSP_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VDIS_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 2.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.55 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.4 VK2_M
    MOVEF_F 50.0 VV2_M
    MOVEF_F 0.6 VK3_M
    MOVEF_F 20.0 VV3_M
    MOVEF_F 1.4 VK21_M
    MOVEF_F 25.0 VV21_M
    MOVEF_F 10.0 VBLACK_M
    MOVEF_F 1.0 VB1_M
    MOVEF_F 3.0 VW1_M
    MOVEF_F 2.0 VB2_M
    MOVEF_F 4.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds541
	MOVEF_32 300.0 milliseconds541
	DATA32 timer541
	TIMER_WAIT milliseconds541 timer541
	TIMER_READY timer541
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB542:
    MOVEF_F 90.0 VGRAD_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB543:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds545
	MOVEF_32 700.0 milliseconds545
	DATA32 timer545
	TIMER_WAIT milliseconds545 timer545
	TIMER_READY timer545
    MOVEF_F 180.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB546:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf548
    DATA8 flag548
    DIVF VMM_M 194.68 tmpf548
    CP_EQF 0.0 194.68 flag548
    SELECTF flag548 0.0 tmpf548 F.0

    MULF F.0 360.0 VL_M
  while550:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile550
  whilebody550:
    WRITE32 ENDSUB_LINE21:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB552:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody550
  endwhile550:
    MOVEF_F 1.0 VI_M
  for554:
    JR_GTF VI_M 4.0 endfor554
  forbody554:
    WRITE32 ENDSUB_COL:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB555:
    JR_NEQF VCOL_M 1.0 else556_1
    MOVEF_F VI_M VB1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif556
  else556_1:
    JR_NEQF VCOL_M 6.0 else556_2
    MOVEF_F VI_M VW1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else556_2:
  endif556:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf560
    DATA8 flag560
    DIVF VMM_M 194.68 tmpf560
    CP_EQF 0.0 194.68 flag560
    SELECTF flag560 0.0 tmpf560 F.0

    MULF F.0 360.0 VL_M
  while562:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile562
  whilebody562:
    WRITE32 ENDSUB_LINE21:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB564:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody562
  endwhile562:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody554
  endfor554:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 70.0 VMM_M
    DATAF tmpf568
    DATA8 flag568
    DIVF VMM_M 194.68 tmpf568
    CP_EQF 0.0 194.68 flag568
    SELECTF flag568 0.0 tmpf568 F.0

    MULF F.0 360.0 VL_M
  while570:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile570
  whilebody570:
    WRITE32 ENDSUB_LINE21:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB572:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody570
  endwhile570:
    MOVEF_F 1.0 VI_M
  for574:
    JR_GTF VI_M 4.0 endfor574
  forbody574:
    WRITE32 ENDSUB_COL:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB575:
    JR_NEQF VCOL_M 1.0 else576_1
    MOVEF_F VI_M VB2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif576
  else576_1:
    JR_NEQF VCOL_M 6.0 else576_2
    MOVEF_F VI_M VW2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else576_2:
  endif576:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf580
    DATA8 flag580
    DIVF VMM_M 194.68 tmpf580
    CP_EQF 0.0 194.68 flag580
    SELECTF flag580 0.0 tmpf580 F.0

    MULF F.0 360.0 VL_M
  while582:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile582
  whilebody582:
    WRITE32 ENDSUB_LINE21:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB584:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody582
  endwhile582:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody574
  endfor574:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    MOVEF_F 15.0 VV21_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf597
    DATA8 flag597
    DIVF VMM_M 194.68 tmpf597
    CP_EQF 0.0 194.68 flag597
    SELECTF flag597 0.0 tmpf597 F.0

    MULF F.0 360.0 VL_M
  while599:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile599
  whilebody599:
    WRITE32 ENDSUB_LINE21:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB601:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody599
  endwhile599:
    MOVEF_F 30.0 VV21_M
    MOVEF_F 150.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB603:
    MOVEF_F 33.0 VGRAD_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB604:
    MOVEF_F 33.0 VGRAD_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB605:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.0 VMM_M
    DATAF tmpf607
    DATA8 flag607
    DIVF VMM_M 194.68 tmpf607
    CP_EQF 0.0 194.68 flag607
    SELECTF flag607 0.0 tmpf607 F.0

    MULF F.0 360.0 VL_M
  while609:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile609
  whilebody609:
    WRITE32 ENDSUB_LINE3:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB611:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody609
  endwhile609:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer614
	DATA8 no614
	DATA8 mode8614
	
	MOVEF_8 3.0 no614
	SUB8 no614 1 no614
	DIV8 no614 4 layer614
	MATH MOD8 no614 4 no614

	MOVEF_8 2.0 mode8614
	
	INPUT_DEVICE READY_RAW layer614 no614 0 mode8614 0
  while615:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile615
  whilebody615:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody615
  endwhile615:
    DATA8 layer627
	DATA8 no627
	DATA8 mode8627
	
	MOVEF_8 3.0 no627
	SUB8 no627 1 no627
	DIV8 no627 4 layer627
	MATH MOD8 no627 4 no627

	MOVEF_8 0.0 mode8627
	
	INPUT_DEVICE READY_RAW layer627 no627 0 mode8627 0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB628:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB629:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB630:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB631:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB632:
    CALL MOTOR.RESETCOUNT 'BC'
  while634:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile634
  whilebody634:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody634
  endwhile634:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB646:
    WRITE32 ENDSUB_RIGHT:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB647:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB649:
    WRITE32 ENDSUB_HSV:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB650:
    JR_LTEQF VRGB_M 60.0 else651_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else651_1:
  endif651:
  while653:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile653
  whilebody653:
    WRITE32 ENDSUB_LINE2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB655:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody653
  endwhile653:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB657:
    MOVEF_F 200.0 VMM_M
    DATAF tmpf658
    DATA8 flag658
    DIVF VMM_M 194.68 tmpf658
    CP_EQF 0.0 194.68 flag658
    SELECTF flag658 0.0 tmpf658 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while661:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf665
    DATA8 flag665
    DIVF F.1 2.0 tmpf665
    CP_EQF 0.0 2.0 flag665
    SELECTF flag665 0.0 tmpf665 F.0

    JR_GTEQF F.0 VL_M endwhile661
  whilebody661:
    WRITE32 ENDSUB_LINE2:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB666:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf670
    DATA8 flag670
    DIVF F.1 2.0 tmpf670
    CP_EQF 0.0 2.0 flag670
    SELECTF flag670 0.0 tmpf670 F.0

    JR_LTF F.0 VL_M whilebody661
  endwhile661:
    WRITE32 ENDSUB_HSV:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB671:
    JR_LTEQF VRGB_M 60.0 else672_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else672_1:
  endif672:
    MOVEF_F 350.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB674:
  while675:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile675
  whilebody675:
    WRITE32 ENDSUB_LINE3:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB677:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody675
  endwhile675:
    WRITE32 ENDSUB_RIGHT:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB679:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB680 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB680:
  while681:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile681
  whilebody681:
    WRITE32 ENDSUB_LINE3:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB683:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody681
  endwhile681:
    WRITE32 ENDSUB_RIGHT:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB685:
    MOVEF_F 300.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB686:
  while687:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile687
  whilebody687:
    WRITE32 ENDSUB_LINE3:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB689:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody687
  endwhile687:
    JR_NEQF VW1_M 3.0 else691_1
    MOVEF_F 1.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB692:
  else691_1:
  endif691:
    JR_NEQF VB1_M 2.0 else693_1
    MOVEF_F 1.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB694:
  else693_1:
  endif693:
    JR_NEQF VW1_M 2.0 else695_1
    MOVEF_F 1.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB696 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB696:
  else695_1:
  endif695:
    JR_NEQF VB1_M 3.0 else697_1
    MOVEF_F 1.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB698:
  else697_1:
  endif697:
    JR_NEQF VW1_M 4.0 else699_1
    MOVEF_F 1.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB700 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB700:
  else699_1:
  endif699:
    JR_NEQF VB1_M 4.0 else701_1
    MOVEF_F 1.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB702 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB702:
  else701_1:
  endif701:
    JR_NEQF VW1_M 1.0 else703_1
    MOVEF_F 1.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB704:
  else703_1:
  endif703:
    JR_NEQF VB1_M 1.0 else705_1
    MOVEF_F 1.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB706:
  else705_1:
  endif705:
    WRITE32 ENDSUB_AROUND:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB707:
    MOVEF_F 400.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB708:
  while709:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile709
  whilebody709:
    WRITE32 ENDSUB_LINE3:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB711:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody709
  endwhile709:
    WRITE32 ENDSUB_LEFT:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB713:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB714:
  while715:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile715
  whilebody715:
    WRITE32 ENDSUB_LINE3:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB717:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody715
  endwhile715:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB719:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds721
	MOVEF_32 1000.0 milliseconds721
	DATA32 timer721
	TIMER_WAIT milliseconds721 timer721
	TIMER_READY timer721
    MOVEF_F 135.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB722:
    DATA32 milliseconds723
	MOVEF_32 100.0 milliseconds723
	DATA32 timer723
	TIMER_WAIT milliseconds723 timer723
	TIMER_READY timer723
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB724:
    DATA32 milliseconds725
	MOVEF_32 100.0 milliseconds725
	DATA32 timer725
	TIMER_WAIT milliseconds725 timer725
	TIMER_READY timer725
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB726:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer728
	DATA8 no728
	DATA8 mode8728
	
	MOVEF_8 2.0 no728
	SUB8 no728 1 no728
	DIV8 no728 4 layer728
	MATH MOD8 no728 4 no728

	MOVEF_8 2.0 mode8728
	
	INPUT_DEVICE READY_RAW layer728 no728 0 mode8728 0
    DATA8 layer729
	DATA8 no729
	DATA8 mode8729
	
	MOVEF_8 3.0 no729
	SUB8 no729 1 no729
	DIV8 no729 4 layer729
	MATH MOD8 no729 4 no729

	MOVEF_8 2.0 mode8729
	
	INPUT_DEVICE READY_RAW layer729 no729 0 mode8729 0
  while730:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or731
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile730
  or731:
  whilebody730:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody730
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody730
  endwhile730:
    DATA8 layer736
	DATA8 no736
	DATA8 mode8736
	
	MOVEF_8 2.0 no736
	SUB8 no736 1 no736
	DIV8 no736 4 layer736
	MATH MOD8 no736 4 no736

	MOVEF_8 0.0 mode8736
	
	INPUT_DEVICE READY_RAW layer736 no736 0 mode8736 0
    DATA8 layer737
	DATA8 no737
	DATA8 mode8737
	
	MOVEF_8 3.0 no737
	SUB8 no737 1 no737
	DIV8 no737 4 layer737
	MATH MOD8 no737 4 no737

	MOVEF_8 0.0 mode8737
	
	INPUT_DEVICE READY_RAW layer737 no737 0 mode8737 0
  while738:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile738
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile738
  whilebody738:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M and741
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody738
  and741:
  endwhile738:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB744:
    CALL MOTOR.START 'AD' 30.0
    DATA32 milliseconds746
	MOVEF_32 200.0 milliseconds746
	DATA32 timer746
	TIMER_WAIT milliseconds746 timer746
	TIMER_READY timer746
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB747:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB750 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB750:
    DATA32 tmp751
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp751
    JR_NEQ32 0 tmp751 alreadylaunched751
    OBJECT_START TTH_DOWN
  alreadylaunched751:
    WRITE32 ENDSUB_TOLINE:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB752:
    WRITE32 ENDSUB_LEFT:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB753:
    DATA32 tmp754
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp754
    JR_NEQ32 0 tmp754 alreadylaunched754
    OBJECT_START TTH_UP
  alreadylaunched754:
    MOVEF_F 600.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB755:
  while756:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile756
  whilebody756:
    WRITE32 ENDSUB_LINE3:CALLSUB758 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB758:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody756
  endwhile756:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else761_1
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB762:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB763 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB763:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB764:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB765:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB766:
    JR endif761
  else761_1:
    JR_NEQF VRED_M 4.0 else761_2
    MOVEF_F 120.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB767 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB767:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB768:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB769:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB770 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB770:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB771:
    JR endif761
  else761_2:
    JR_NEQF VRED_M 0.0 else761_3
    WRITE32 ENDSUB_RIGHT:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB772:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf774
    DATA8 flag774
    DIVF VMM_M 194.68 tmpf774
    CP_EQF 0.0 194.68 flag774
    SELECTF flag774 0.0 tmpf774 F.0

    MULF F.0 360.0 VL_M
  while776:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile776
  whilebody776:
    WRITE32 ENDSUB_LINE3:CALLSUB778 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB778:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody776
  endwhile776:
  while780:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M or781
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile780
  or781:
  whilebody780:
    WRITE32 ENDSUB_LINE3:CALLSUB784 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB784:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody780
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody780
  endwhile780:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB787:
  while788:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M or789
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile788
  or789:
  whilebody788:
    WRITE32 ENDSUB_LINE3:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB792:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody788
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody788
  endwhile788:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB795 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB795:
    WRITE32 ENDSUB_HSV:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB796:
    CALL SPEAKER.TONE 40.0 600.0 200.0
    JR_LTEQF VRGB_M 25.0 else798_1
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB799:
    MOVEF_F 2.0 VRED_M
    JR endif798
  else798_1:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB800 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB800:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB801 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB801:
    MOVEF_F 3.0 VRED_M
  else798_2:
  endif798:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB802 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB802:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB803 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB803:
    DATA32 milliseconds804
	MOVEF_32 500.0 milliseconds804
	DATA32 timer804
	TIMER_WAIT milliseconds804 timer804
	TIMER_READY timer804
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB805:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB806 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB806:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer808
	DATA8 no808
	DATA8 mode8808
	
	MOVEF_8 2.0 no808
	SUB8 no808 1 no808
	DIV8 no808 4 layer808
	MATH MOD8 no808 4 no808

	MOVEF_8 2.0 mode8808
	
	INPUT_DEVICE READY_RAW layer808 no808 0 mode8808 0
    DATA8 layer809
	DATA8 no809
	DATA8 mode8809
	
	MOVEF_8 3.0 no809
	SUB8 no809 1 no809
	DIV8 no809 4 layer809
	MATH MOD8 no809 4 no809

	MOVEF_8 2.0 mode8809
	
	INPUT_DEVICE READY_RAW layer809 no809 0 mode8809 0
  while810:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or811
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile810
  or811:
  whilebody810:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody810
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody810
  endwhile810:
    DATA8 layer816
	DATA8 no816
	DATA8 mode8816
	
	MOVEF_8 2.0 no816
	SUB8 no816 1 no816
	DIV8 no816 4 layer816
	MATH MOD8 no816 4 no816

	MOVEF_8 0.0 mode8816
	
	INPUT_DEVICE READY_RAW layer816 no816 0 mode8816 0
    DATA8 layer817
	DATA8 no817
	DATA8 mode8817
	
	MOVEF_8 3.0 no817
	SUB8 no817 1 no817
	DIV8 no817 4 layer817
	MATH MOD8 no817 4 no817

	MOVEF_8 0.0 mode8817
	
	INPUT_DEVICE READY_RAW layer817 no817 0 mode8817 0
  while818:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile818
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile818
  whilebody818:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M and821
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody818
  and821:
  endwhile818:
    JR_NEQF VRED_M 2.0 else824_1
    WRITE32 ENDSUB_LEFT:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB825:
    JR endif824
  else824_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB826:
  else824_2:
  endif824:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 130.0 VMM_M
    DATAF tmpf828
    DATA8 flag828
    DIVF VMM_M 194.68 tmpf828
    CP_EQF 0.0 194.68 flag828
    SELECTF flag828 0.0 tmpf828 F.0

    MULF F.0 360.0 VL_M
  while830:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile830
  whilebody830:
    WRITE32 ENDSUB_LINE3:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB832:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody830
  endwhile830:
  while834:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M or835
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile834
  or835:
  whilebody834:
    WRITE32 ENDSUB_LINE3:CALLSUB838 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB838:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody834
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody834
  endwhile834:
    WRITE32 ENDSUB_LEFT:CALLSUB841 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB841:
  else761_3:
  endif761:
    JR_EQF VRED_M 2.0 else842_1
    JR_EQF VRED_M 3.0 else842_1
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB843 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB843:
    WRITE32 ENDSUB_TOLINE:CALLSUB844 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB844:
    WRITE32 ENDSUB_RIGHT:CALLSUB845 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB845:
  else842_1:
  endif842:
    JR_NEQF VRED_M 1.0 else846_1
  while847:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile847
  whilebody847:
    WRITE32 ENDSUB_LINE3:CALLSUB849 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB849:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody847
  endwhile847:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB851 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB851:
  else846_1:
  endif846:
    MOVEF_F 500.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB852:
  while853:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile853
  whilebody853:
    WRITE32 ENDSUB_LINE3:CALLSUB855 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB855:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody853
  endwhile853:
    WRITE32 ENDSUB_RIGHT:CALLSUB857 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB857:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf858
    DATA8 flag858
    DIVF VMM_M 194.68 tmpf858
    CP_EQF 0.0 194.68 flag858
    SELECTF flag858 0.0 tmpf858 F.0

    MULF F.0 360.0 VL_M
  while860:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile860
  whilebody860:
    WRITE32 ENDSUB_LINE3:CALLSUB862 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB862:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody860
  endwhile860:
  while864:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile864
  whilebody864:
    WRITE32 ENDSUB_LINE2:CALLSUB866 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB866:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody864
  endwhile864:
    JR_EQF VRED_M 1.0 or869
    JR_NEQF VRED_M 3.0 else868_1
  or869:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB870 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB870:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB871 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB871:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB872 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB872:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB873 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB873:
    JR endif868
  else868_1:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB874 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB874:
    MOVEF_F 35.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB875 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB875:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB876 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB876:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB877 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB877:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB878 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB878:
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB879 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB879:
    MOVEF_F 170.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB880 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB880:
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB881 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB881:
  else868_2:
  endif868:
    DATA32 tmp882
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp882
    JR_NEQ32 0 tmp882 alreadylaunched882
    OBJECT_START TTH_DOWN
  alreadylaunched882:
    WRITE32 ENDSUB_TOLINE:CALLSUB883 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB883:
    WRITE32 ENDSUB_RIGHT:CALLSUB884 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB884:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf886
    DATA8 flag886
    DIVF VMM_M 194.68 tmpf886
    CP_EQF 0.0 194.68 flag886
    SELECTF flag886 0.0 tmpf886 F.0

    MULF F.0 360.0 VL_M
  while888:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile888
  whilebody888:
    WRITE32 ENDSUB_LINE3:CALLSUB890 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB890:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody888
  endwhile888:
    WRITE32 ENDSUB_AROUND:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB892:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf894
    DATA8 flag894
    DIVF VMM_M 194.68 tmpf894
    CP_EQF 0.0 194.68 flag894
    SELECTF flag894 0.0 tmpf894 F.0

    MULF F.0 360.0 VL_M
  while896:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile896
  whilebody896:
    WRITE32 ENDSUB_LINE3:CALLSUB898 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB898:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody896
  endwhile896:
  while900:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile900
  whilebody900:
    WRITE32 ENDSUB_LINE2:CALLSUB902 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB902:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody900
  endwhile900:
    WRITE32 ENDSUB_LEFT:CALLSUB904 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB904:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB905 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB905:
  while906:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile906
  whilebody906:
    WRITE32 ENDSUB_LINE2:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB908:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody906
  endwhile906:
    WRITE32 ENDSUB_LEFT:CALLSUB910 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB910:
    DATA32 tmp911
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp911
    JR_NEQ32 0 tmp911 alreadylaunched911
    OBJECT_START TTH_UP
  alreadylaunched911:
    MOVEF_F 1850.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB912 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB912:
    DATA32 tmp913
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp913
    JR_NEQ32 0 tmp913 alreadylaunched913
    OBJECT_START TTH_DOWN
  alreadylaunched913:
  while914:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile914
  whilebody914:
    WRITE32 ENDSUB_LINE3:CALLSUB916 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB916:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody914
  endwhile914:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB919 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB919:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf920
    DATA8 flag920
    DIVF VMM_M 194.68 tmpf920
    CP_EQF 0.0 194.68 flag920
    SELECTF flag920 0.0 tmpf920 F.0

    MULF F.0 360.0 VL_M
  while922:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile922
  whilebody922:
    WRITE32 ENDSUB_LINE3:CALLSUB924 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB924:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody922
  endwhile922:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer927
	DATA8 no927
	DATA8 mode8927
	
	MOVEF_8 3.0 no927
	SUB8 no927 1 no927
	DIV8 no927 4 layer927
	MATH MOD8 no927 4 no927

	MOVEF_8 2.0 mode8927
	
	INPUT_DEVICE READY_RAW layer927 no927 0 mode8927 0
  while928:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile928
  whilebody928:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody928
  endwhile928:
    DATA8 layer940
	DATA8 no940
	DATA8 mode8940
	
	MOVEF_8 3.0 no940
	SUB8 no940 1 no940
	DIV8 no940 4 layer940
	MATH MOD8 no940 4 no940

	MOVEF_8 0.0 mode8940
	
	INPUT_DEVICE READY_RAW layer940 no940 0 mode8940 0
    MOVEF_F 110.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB941 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB941:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB942 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB942:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB943:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB944 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB944:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB945 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB945:
  while946:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile946
  whilebody946:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody946
  endwhile946:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB950 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB950:
    WRITE32 ENDSUB_RIGHT:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB951:
    MOVEF_F 1050.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB952 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB952:
  while953:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile953
  whilebody953:
    WRITE32 ENDSUB_LINE3:CALLSUB955 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB955:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody953
  endwhile953:
    JR_NEQF VW2_M 3.0 else957_1
    MOVEF_F 2.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB958 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB958:
  else957_1:
  endif957:
    JR_NEQF VB2_M 2.0 else959_1
    MOVEF_F 2.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB960 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB960:
  else959_1:
  endif959:
    JR_NEQF VW2_M 2.0 else961_1
    MOVEF_F 2.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB962 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB962:
  else961_1:
  endif961:
    JR_NEQF VB2_M 3.0 else963_1
    MOVEF_F 2.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB964 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB964:
  else963_1:
  endif963:
    JR_NEQF VW2_M 4.0 else965_1
    MOVEF_F 2.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB966 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB966:
  else965_1:
  endif965:
    JR_NEQF VB2_M 4.0 else967_1
    MOVEF_F 2.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB968 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB968:
  else967_1:
  endif967:
    JR_NEQF VW2_M 1.0 else969_1
    MOVEF_F 2.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB970 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB970:
  else969_1:
  endif969:
    JR_NEQF VB2_M 1.0 else971_1
    MOVEF_F 2.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB972 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB972:
  else971_1:
  endif971:
    WRITE32 ENDSUB_AROUND:CALLSUB973 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB973:
    MOVEF_F 1050.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB974:
  while975:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile975
  whilebody975:
    WRITE32 ENDSUB_LINE3:CALLSUB977 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB977:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody975
  endwhile975:
    WRITE32 ENDSUB_LEFT:CALLSUB979 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB979:
    MOVEF_F 300.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB980 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB980:
  while981:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile981
  whilebody981:
    WRITE32 ENDSUB_LINE3:CALLSUB983 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB983:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody981
  endwhile981:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB985:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB986 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB986:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB987 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB987:
    MOVEF_F 97.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB988 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB988:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer990
	DATA8 no990
	DATA8 mode8990
	
	MOVEF_8 2.0 no990
	SUB8 no990 1 no990
	DIV8 no990 4 layer990
	MATH MOD8 no990 4 no990

	MOVEF_8 2.0 mode8990
	
	INPUT_DEVICE READY_RAW layer990 no990 0 mode8990 0
    DATA8 layer991
	DATA8 no991
	DATA8 mode8991
	
	MOVEF_8 3.0 no991
	SUB8 no991 1 no991
	DIV8 no991 4 layer991
	MATH MOD8 no991 4 no991

	MOVEF_8 2.0 mode8991
	
	INPUT_DEVICE READY_RAW layer991 no991 0 mode8991 0
  while992:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or993
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile992
  or993:
  whilebody992:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody992
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody992
  endwhile992:
    DATA8 layer998
	DATA8 no998
	DATA8 mode8998
	
	MOVEF_8 2.0 no998
	SUB8 no998 1 no998
	DIV8 no998 4 layer998
	MATH MOD8 no998 4 no998

	MOVEF_8 0.0 mode8998
	
	INPUT_DEVICE READY_RAW layer998 no998 0 mode8998 0
    DATA8 layer999
	DATA8 no999
	DATA8 mode8999
	
	MOVEF_8 3.0 no999
	SUB8 no999 1 no999
	DIV8 no999 4 layer999
	MATH MOD8 no999 4 no999

	MOVEF_8 0.0 mode8999
	
	INPUT_DEVICE READY_RAW layer999 no999 0 mode8999 0
  while1000:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1000
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1000
  whilebody1000:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M and1003
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody1000
  and1003:
  endwhile1000:
    MOVEF_F 15.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1006 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1006:
    CALL MOTOR.START 'AD' 30.0
    DATA32 milliseconds1008
	MOVEF_32 200.0 milliseconds1008
	DATA32 timer1008
	TIMER_WAIT milliseconds1008 timer1008
	TIMER_READY timer1008
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1009 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1009:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1012 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1012:
    DATA32 tmp1013
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp1013
    JR_NEQ32 0 tmp1013 alreadylaunched1013
    OBJECT_START TTH_UP
  alreadylaunched1013:
    MOVEF_F 105.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1014 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1014:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VSP_M
    DATA8 layer1016
	DATA8 no1016
	DATA8 mode81016
	
	MOVEF_8 2.0 no1016
	SUB8 no1016 1 no1016
	DIV8 no1016 4 layer1016
	MATH MOD8 no1016 4 no1016

	MOVEF_8 2.0 mode81016
	
	INPUT_DEVICE READY_RAW layer1016 no1016 0 mode81016 0
    DATA8 layer1017
	DATA8 no1017
	DATA8 mode81017
	
	MOVEF_8 3.0 no1017
	SUB8 no1017 1 no1017
	DIV8 no1017 4 layer1017
	MATH MOD8 no1017 4 no1017

	MOVEF_8 2.0 mode81017
	
	INPUT_DEVICE READY_RAW layer1017 no1017 0 mode81017 0
  while1018:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1019
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1018
  or1019:
  whilebody1018:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1018
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1018
  endwhile1018:
    DATA8 layer1033
	DATA8 no1033
	DATA8 mode81033
	
	MOVEF_8 2.0 no1033
	SUB8 no1033 1 no1033
	DIV8 no1033 4 layer1033
	MATH MOD8 no1033 4 no1033

	MOVEF_8 0.0 mode81033
	
	INPUT_DEVICE READY_RAW layer1033 no1033 0 mode81033 0
    DATA8 layer1034
	DATA8 no1034
	DATA8 mode81034
	
	MOVEF_8 3.0 no1034
	SUB8 no1034 1 no1034
	DIV8 no1034 4 layer1034
	MATH MOD8 no1034 4 no1034

	MOVEF_8 0.0 mode81034
	
	INPUT_DEVICE READY_RAW layer1034 no1034 0 mode81034 0
  while1035:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1035
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1035
  whilebody1035:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M and1047
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody1035
  and1047:
  endwhile1035:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 tmp1051
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp1051
    JR_NEQ32 0 tmp1051 alreadylaunched1051
    OBJECT_START TTH_UP
  alreadylaunched1051:
    WRITE32 ENDSUB_LEFT:CALLSUB1052 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1052:
  while1053:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or1054
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1053
  or1054:
  whilebody1053:
    WRITE32 ENDSUB_LINE3:CALLSUB1057 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1057:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1053
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1053
  endwhile1053:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1060 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1060:
    MOVEF_F 40.0 VGRAD_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB1061 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB1061:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1062 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1062:
    CALL MOTOR.STOP 'AD' 'true'
    WRITE32 ENDSUB_FRZ:CALLSUB1064 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB1064:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 F.1 tmpf15
    CP_EQF 0.0 F.1 flag15
    SELECTF flag15 0.0 tmpf15 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB25:
    WRITE32 ENDSUB_SEN2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB26:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB34:
    WRITE32 ENDSUB_SEN2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB35:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LINE21:
    WRITE32 ENDSUB_SEN2:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB43:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 30.0 VU_M
    MULF VU_M VK21_M F.1
    ADDF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK21_M F.1
    SUBF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE21:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE21:
SUB_LINE_TOMM:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VL_M
  while53:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile53
  whilebody53:
    WRITE32 ENDSUB_LINE3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB55:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody53
  endwhile53:
    MOVEF_F 20.0 VV_M
    MOVEF_F 0.55 VK_M
    SUBF VMM_M 100.0 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 194.68 tmpf58
    CP_EQF 0.0 194.68 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while61:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_GTEQF F.0 VL_M endwhile61
  whilebody61:
    WRITE32 ENDSUB_SEN1:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB66:
    WRITE32 ENDSUB_SEN2:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB67:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf78
    DATA8 flag78
    DIVF F.0 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 VDIS_M

    DATAF tmpf79
    DATA8 flag79
    DIVF VDIS_M 360.0 tmpf79
    CP_EQF 0.0 360.0 flag79
    SELECTF flag79 0.0 tmpf79 F.0

    MULF F.0 194.68 VDIS_M
    JR_LTEQF VMM_M 1150.0 else81_1
    MOVEF_F 0.8 VT_M
    JR endif81
  else81_1:
    MOVEF_F 0.4 VT_M
  else81_2:
  endif81:
    MULF VMM_M 0.4 F.0
    JR_GTEQF VDIS_M F.0 else82_1
    JR_GTEQF VV_M 95.0 else82_1
    ADDF VV_M 0.5 VV_M
    JR endif82
  else82_1:
    MULF VMM_M VT_M F.0
    JR_LTEQF VDIS_M F.0 else82_2
    JR_LTEQF VV_M 15.0 else82_2
    SUBF VV_M 0.5 VV_M
  else82_2:
  endif82:
    JR_GTEQF VV_M 35.0 else87_1
    MOVEF_F 0.55 VK_M
    JR endif87
  else87_1:
    JR_GTEQF VV_M 55.0 else87_2
    MOVEF_F 0.35 VK_M
    JR endif87
  else87_2:
    JR_GTEQF VV_M 100.0 else87_3
    MOVEF_F 0.4 VK_M
  else87_3:
  endif87:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf91
    DATA8 flag91
    DIVF F.1 2.0 tmpf91
    CP_EQF 0.0 2.0 flag91
    SELECTF flag91 0.0 tmpf91 F.0

    JR_LTF F.0 VL_M whilebody61
  endwhile61:
RETSUB_LINE_TOMM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_TOMM:
SUB_LEFT:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB92:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB93:
    CALL MOTOR.STARTPOWER 'B' -30.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while96:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile96
  whilebody96:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody96
  endwhile96:
  while99:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile99
  whilebody99:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody99
  endwhile99:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB103:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB104:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB105:
    CALL MOTOR.STARTPOWER 'B' 30.0
    CALL MOTOR.STARTPOWER 'C' -30.0
  while108:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile108
  whilebody108:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody108
  endwhile108:
  while111:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile111
  whilebody111:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody111
  endwhile111:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB115:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 140.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB116:
    CALL MOTOR.STARTPOWER 'B' -40.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while119:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile119
  whilebody119:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody119
  endwhile119:
  while122:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile122
  whilebody122:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody122
  endwhile122:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB126:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_TOLINE:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F -30.0 VSP_M
    DATA8 layer128
	DATA8 no128
	DATA8 mode8128
	
	MOVEF_8 2.0 no128
	SUB8 no128 1 no128
	DIV8 no128 4 layer128
	MATH MOD8 no128 4 no128

	MOVEF_8 2.0 mode8128
	
	INPUT_DEVICE READY_RAW layer128 no128 0 mode8128 0
    DATA8 layer129
	DATA8 no129
	DATA8 mode8129
	
	MOVEF_8 3.0 no129
	SUB8 no129 1 no129
	DIV8 no129 4 layer129
	MATH MOD8 no129 4 no129

	MOVEF_8 2.0 mode8129
	
	INPUT_DEVICE READY_RAW layer129 no129 0 mode8129 0
  while130:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or131
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile130
  or131:
  whilebody130:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody130
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody130
  endwhile130:
    DATA8 layer145
	DATA8 no145
	DATA8 mode8145
	
	MOVEF_8 2.0 no145
	SUB8 no145 1 no145
	DIV8 no145 4 layer145
	MATH MOD8 no145 4 no145

	MOVEF_8 0.0 mode8145
	
	INPUT_DEVICE READY_RAW layer145 no145 0 mode8145 0
    DATA8 layer146
	DATA8 no146
	DATA8 mode8146
	
	MOVEF_8 3.0 no146
	SUB8 no146 1 no146
	DIV8 no146 4 layer146
	MATH MOD8 no146 4 no146

	MOVEF_8 0.0 mode8146
	
	INPUT_DEVICE READY_RAW layer146 no146 0 mode8146 0
  while147:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile147
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile147
  whilebody147:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and159
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody147
  and159:
  endwhile147:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDIS_1
  while164:
    JR_GTF VDIS_1 VL_1 endwhile164
  whilebody164:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf177
    DATA8 flag177
    DIVF F.1 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 F.0

    MATH ABS F.0 VDIS_1
    JR_LTEQF VDIS_1 VL_1 whilebody164
  endwhile164:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf180
    DATA8 flag180
    DIVF VMM_2 194.68 tmpf180
    CP_EQF 0.0 194.68 flag180
    SELECTF flag180 0.0 tmpf180 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB183:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_3 F.0
    DATAF tmpf185
    DATA8 flag185
    DIVF F.0 360.0 tmpf185
    CP_EQF 0.0 360.0 flag185
    SELECTF flag185 0.0 tmpf185 VL_3

    DATAF tmpf186
    DATA8 flag186
    DIVF VL_3 200.96 tmpf186
    CP_EQF 0.0 200.96 flag186
    SELECTF flag186 0.0 tmpf186 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_3
  while190:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile190
  whilebody190:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody190
  endwhile190:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf198
    DATA8 flag198
    DIVF F.0 360.0 tmpf198
    CP_EQF 0.0 360.0 flag198
    SELECTF flag198 0.0 tmpf198 VL_4

    DATAF tmpf199
    DATA8 flag199
    DIVF VL_4 200.96 tmpf199
    CP_EQF 0.0 200.96 flag199
    SELECTF flag199 0.0 tmpf199 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_4
  while203:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile203
  whilebody203:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody203
  endwhile203:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf211
    DATA8 flag211
    DIVF F.0 360.0 tmpf211
    CP_EQF 0.0 360.0 flag211
    SELECTF flag211 0.0 tmpf211 VL_5

    DATAF tmpf212
    DATA8 flag212
    DIVF VL_5 200.96 tmpf212
    CP_EQF 0.0 200.96 flag212
    SELECTF flag212 0.0 tmpf212 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while217:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 2.0 tmpf223
    CP_EQF 0.0 2.0 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    DATAF tmpf224
    DATA8 flag224
    DIVF VL_5 2.0 tmpf224
    CP_EQF 0.0 2.0 flag224
    SELECTF flag224 0.0 tmpf224 F.1

    JR_GTF F.0 F.1 endwhile217
  whilebody217:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf230
    DATA8 flag230
    DIVF F.1 2.0 tmpf230
    CP_EQF 0.0 2.0 flag230
    SELECTF flag230 0.0 tmpf230 F.0

    DATAF tmpf231
    DATA8 flag231
    DIVF VL_5 2.0 tmpf231
    CP_EQF 0.0 2.0 flag231
    SELECTF flag231 0.0 tmpf231 F.1

    JR_LTEQF F.0 F.1 whilebody217
  endwhile217:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf234
    DATA8 flag234
    DIVF F.0 360.0 tmpf234
    CP_EQF 0.0 360.0 flag234
    SELECTF flag234 0.0 tmpf234 VL_6

    DATAF tmpf235
    DATA8 flag235
    DIVF VL_6 200.96 tmpf235
    CP_EQF 0.0 200.96 flag235
    SELECTF flag235 0.0 tmpf235 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while240:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf246
    DATA8 flag246
    DIVF F.1 2.0 tmpf246
    CP_EQF 0.0 2.0 flag246
    SELECTF flag246 0.0 tmpf246 F.0

    DATAF tmpf247
    DATA8 flag247
    DIVF VL_6 2.0 tmpf247
    CP_EQF 0.0 2.0 flag247
    SELECTF flag247 0.0 tmpf247 F.1

    JR_GTF F.0 F.1 endwhile240
  whilebody240:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf253
    DATA8 flag253
    DIVF F.1 2.0 tmpf253
    CP_EQF 0.0 2.0 flag253
    SELECTF flag253 0.0 tmpf253 F.0

    DATAF tmpf254
    DATA8 flag254
    DIVF VL_6 2.0 tmpf254
    CP_EQF 0.0 2.0 flag254
    SELECTF flag254 0.0 tmpf254 F.1

    JR_LTEQF F.0 F.1 whilebody240
  endwhile240:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'AD'
    SUBF 0.0 VSPEED_7 F.0
    CALL MOTOR.SCHEDULE VMOTOR_7 F.0 0.0 180.0 0.0 'true' 

	DATA8 layer262
	DATA8 nos262
	DATA8 busy262
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_7 layer262 nos262
	JR_EQ8 0 nos262 motornotbusy262
  motorwaiting262:
	OUTPUT_TEST layer262 nos262 busy262
	JR_EQ8 busy262 0 motornotbusy262
	SLEEP
	JR motorwaiting262
  motornotbusy262:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_8 VSPEED_8
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds268
	MOVEF_32 600.0 milliseconds268
	DATA32 timer268
	TIMER_WAIT milliseconds268 timer268
	TIMER_READY timer268
    CALL MOTOR.STOP 'BC' 'true'
  while270:
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_LTEQF F.0 F.1 endwhile270
  whilebody270:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_GTF F.0 F.1 whilebody270
  endwhile270:
    CALL MOTOR.STOP VMOTOR_8 'true'
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else287_1
    JR_LTEQF VR_M VB_M else287_1
    MOVEF_F VR_M VMAX_M
    JR endif287
  else287_1:
    JR_LTEQF VG_M VR_M else287_2
    JR_LTEQF VG_M VB_M else287_2
    MOVEF_F VG_M VMAX_M
    JR endif287
  else287_2:
    JR_LTEQF VB_M VR_M else287_3
    JR_LTEQF VB_M VG_M else287_3
    MOVEF_F VB_M VMAX_M
  else287_3:
  endif287:
    JR_GTEQF VR_M VG_M else288_1
    JR_GTEQF VR_M VB_M else288_1
    MOVEF_F VR_M VMIN_M
    JR endif288
  else288_1:
    JR_GTEQF VG_M VR_M else288_2
    JR_GTEQF VG_M VB_M else288_2
    MOVEF_F VG_M VMIN_M
    JR endif288
  else288_2:
    JR_GTEQF VB_M VR_M else288_3
    JR_GTEQF VB_M VG_M else288_3
    MOVEF_F VB_M VMIN_M
  else288_3:
  endif288:
    JR_NEQF VMAX_M VMIN_M else289_1
    MOVEF_F 0.0 VH_M
    JR endif289
  else289_1:
    JR_NEQF VR_M VMAX_M else290_1
    JR_LTF VG_M VB_M else291_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf295
    DATA8 flag295
    DIVF F.0 F.1 tmpf295
    CP_EQF 0.0 F.1 flag295
    SELECTF flag295 0.0 tmpf295 VH_M

    JR endif291
  else291_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf299
    DATA8 flag299
    DIVF F.1 F.2 tmpf299
    CP_EQF 0.0 F.2 flag299
    SELECTF flag299 0.0 tmpf299 F.0

    ADDF F.0 360.0 VH_M
  else291_2:
  endif291:
    JR endif290
  else290_1:
    JR_NEQF VMAX_M VG_M else301_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf305
    DATA8 flag305
    DIVF F.1 F.2 tmpf305
    CP_EQF 0.0 F.2 flag305
    SELECTF flag305 0.0 tmpf305 F.0

    ADDF F.0 120.0 VH_M
    JR endif301
  else301_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf310
    DATA8 flag310
    DIVF F.1 F.2 tmpf310
    CP_EQF 0.0 F.2 flag310
    SELECTF flag310 0.0 tmpf310 F.0

    ADDF F.0 240.0 VH_M
  else301_2:
  endif301:
  else290_2:
  endif290:
  else289_2:
  endif289:
    JR_NEQF VMAX_M 0.0 else312_1
    MOVEF_F 0.0 VS_M
    JR endif312
  else312_1:
    DATAF tmpf313
    DATA8 flag313
    DIVF VMIN_M VMAX_M tmpf313
    CP_EQF 0.0 VMAX_M flag313
    SELECTF flag313 0.0 tmpf313 F.0

    SUBF 1.0 F.0 VS_M
  else312_2:
  endif312:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB316:
    JR_LTEQF VRGB_M 110.0 else317_1
    MOVEF_F 6.0 VCOL_M
    JR endif317
  else317_1:
    JR_LTEQF VRGB_M 20.0 else317_2
    MOVEF_F 1.0 VCOL_M
    JR endif317
  else317_2:
    MOVEF_F 0.0 VCOL_M
  else317_3:
  endif317:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_W1_1:
    MOVEF_F 260.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB318:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB319:
    MOVEF_F 95.0 VMM_9
    JR_NEQF VO_9 1.0 else320_1
    ADDF VMM_9 40.0 VMM_9
  else320_1:
  endif320:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB322:
    MOVEF_F VMM_9 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB323:
    WRITE32 ENDSUB_TOLINE:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB324:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB325:
    WRITE32 ENDSUB_RIGHT:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB326:
    MOVEF_F 65.0 VMM_9
    DATAF tmpf327
    DATA8 flag327
    DIVF VMM_9 194.68 tmpf327
    CP_EQF 0.0 194.68 flag327
    SELECTF flag327 0.0 tmpf327 F.0

    MULF F.0 360.0 VL_9
  while329:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_9 endwhile329
  whilebody329:
    WRITE32 ENDSUB_LINE3:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB331:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_9 whilebody329
  endwhile329:
  while333:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile333
  whilebody333:
    WRITE32 ENDSUB_LINE3:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB335:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody333
  endwhile333:
RETSUB_W1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1_1:
SUB_B1_1:
    MOVEF_F 115.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB337:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB338:
    MOVEF_F 85.0 VMM_10
    JR_NEQF VO_10 1.0 else339_1
    ADDF VMM_10 40.0 VMM_10
  else339_1:
  endif339:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB341:
    MOVEF_F VMM_10 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB342:
    WRITE32 ENDSUB_TOLINE:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB343:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB344:
    WRITE32 ENDSUB_RIGHT:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB345:
    MOVEF_F 65.0 VMM_10
    DATAF tmpf346
    DATA8 flag346
    DIVF VMM_10 194.68 tmpf346
    CP_EQF 0.0 194.68 flag346
    SELECTF flag346 0.0 tmpf346 F.0

    MULF F.0 360.0 VL_10
  while348:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile348
  whilebody348:
    WRITE32 ENDSUB_LINE3:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB350:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody348
  endwhile348:
  while352:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile352
  whilebody352:
    WRITE32 ENDSUB_LINE3:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB354:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody352
  endwhile352:
RETSUB_B1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1_1:
SUB_W2_1:
    WRITE32 ENDSUB_LEFT:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB356:
    MOVEF_F 170.0 VMM_11
    JR_NEQF VO_11 1.0 else357_1
    ADDF VMM_11 100.0 VMM_11
  else357_1:
  endif357:
    DATAF tmpf359
    DATA8 flag359
    DIVF VMM_11 194.68 tmpf359
    CP_EQF 0.0 194.68 flag359
    SELECTF flag359 0.0 tmpf359 F.0

    MULF F.0 360.0 VL_11
  while361:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile361
  whilebody361:
    WRITE32 ENDSUB_LINE3:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB363:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody361
  endwhile361:
  while365:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile365
  whilebody365:
    WRITE32 ENDSUB_LINE3:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB367:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody365
  endwhile365:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB369:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB370:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB371:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB373:
    MOVEF_F 135.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB374:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB375:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB376:
    MOVEF_F 30.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB377:
    WRITE32 ENDSUB_TOLINE:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB378:
    WRITE32 ENDSUB_RIGHT:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB379:
    MOVEF_F 55.0 VMM_11
    DATAF tmpf380
    DATA8 flag380
    DIVF VMM_11 194.68 tmpf380
    CP_EQF 0.0 194.68 flag380
    SELECTF flag380 0.0 tmpf380 F.0

    MULF F.0 360.0 VL_11
  while382:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile382
  whilebody382:
    WRITE32 ENDSUB_LINE3:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB384:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody382
  endwhile382:
  while386:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile386
  whilebody386:
    WRITE32 ENDSUB_LINE3:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB388:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody386
  endwhile386:
RETSUB_W2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2_1:
SUB_B2_1:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB390:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB391:
    MOVEF_F 220.0 VMM_12
    JR_NEQF VO_12 1.0 else392_1
    ADDF VMM_12 40.0 VMM_12
  else392_1:
  endif392:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB394:
    MOVEF_F VMM_12 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB395:
    WRITE32 ENDSUB_TOLINE:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB396:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB397:
    WRITE32 ENDSUB_RIGHT:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB398:
    MOVEF_F 60.0 VMM_12
    DATAF tmpf399
    DATA8 flag399
    DIVF VMM_12 194.68 tmpf399
    CP_EQF 0.0 194.68 flag399
    SELECTF flag399 0.0 tmpf399 F.0

    MULF F.0 360.0 VL_12
  while401:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile401
  whilebody401:
    WRITE32 ENDSUB_LINE3:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB403:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody401
  endwhile401:
  while405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile405
  whilebody405:
    WRITE32 ENDSUB_LINE3:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB407:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody405
  endwhile405:
RETSUB_B2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2_1:
SUB_W3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB409:
    MOVEF_F 170.0 VMM_13
    JR_NEQF VO_13 1.0 else410_1
    ADDF VMM_13 100.0 VMM_13
  else410_1:
  endif410:
    DATAF tmpf412
    DATA8 flag412
    DIVF VMM_13 194.68 tmpf412
    CP_EQF 0.0 194.68 flag412
    SELECTF flag412 0.0 tmpf412 F.0

    MULF F.0 360.0 VL_13
  while414:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile414
  whilebody414:
    WRITE32 ENDSUB_LINE3:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB416:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody414
  endwhile414:
  while418:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile418
  whilebody418:
    WRITE32 ENDSUB_LINE3:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB420:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody418
  endwhile418:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB422:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB423:
    MOVEF_F 340.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB424:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB425:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB426:
    MOVEF_F 195.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB427:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB428:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB429:
    MOVEF_F 100.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB430:
    WRITE32 ENDSUB_TOLINE:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB431:
    WRITE32 ENDSUB_RIGHT:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB432:
    MOVEF_F 65.0 VMM_13
    DATAF tmpf433
    DATA8 flag433
    DIVF VMM_13 194.68 tmpf433
    CP_EQF 0.0 194.68 flag433
    SELECTF flag433 0.0 tmpf433 F.0

    MULF F.0 360.0 VL_13
  while435:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile435
  whilebody435:
    WRITE32 ENDSUB_LINE3:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB437:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody435
  endwhile435:
  while439:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile439
  whilebody439:
    WRITE32 ENDSUB_LINE3:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB441:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody439
  endwhile439:
RETSUB_W3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W3_1:
SUB_B3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB443:
    MOVEF_F 200.0 VMM_14
    JR_NEQF VO_14 1.0 else444_1
    ADDF VMM_14 70.0 VMM_14
  else444_1:
  endif444:
    DATAF tmpf446
    DATA8 flag446
    DIVF VMM_14 194.68 tmpf446
    CP_EQF 0.0 194.68 flag446
    SELECTF flag446 0.0 tmpf446 F.0

    MULF F.0 360.0 VL_14
  while448:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile448
  whilebody448:
    WRITE32 ENDSUB_LINE3:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB450:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody448
  endwhile448:
  while452:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile452
  whilebody452:
    WRITE32 ENDSUB_LINE3:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB454:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody452
  endwhile452:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB456:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB457:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB458:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB459:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB460:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB461:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB462:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB463:
    WRITE32 ENDSUB_TOLINE:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB464:
    WRITE32 ENDSUB_RIGHT:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB465:
    MOVEF_F 65.0 VMM_14
    DATAF tmpf466
    DATA8 flag466
    DIVF VMM_14 194.68 tmpf466
    CP_EQF 0.0 194.68 flag466
    SELECTF flag466 0.0 tmpf466 F.0

    MULF F.0 360.0 VL_14
  while468:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile468
  whilebody468:
    WRITE32 ENDSUB_LINE3:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB470:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody468
  endwhile468:
  while472:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile472
  whilebody472:
    WRITE32 ENDSUB_LINE3:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB474:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody472
  endwhile472:
RETSUB_B3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B3_1:
SUB_W4_1:
    MOVEF_F 207.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB476:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB477:
    MOVEF_F 85.0 VMM_15
    JR_NEQF VO_15 1.0 else478_1
    ADDF VMM_15 40.0 VMM_15
  else478_1:
  endif478:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB480:
    MOVEF_F VMM_15 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB481:
    MOVEF_F 130.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB482:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB483:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB484:
    MOVEF_F 40.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB485:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB486:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB487:
    CALL MOTOR.STARTPOWER 'BC' -30.0
  while489:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 or490
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile489
  or490:
  whilebody489:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody489
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody489
  endwhile489:
    WRITE32 ENDSUB_RIGHT:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB495:
    MOVEF_F 65.0 VMM_15
    DATAF tmpf496
    DATA8 flag496
    DIVF VMM_15 194.68 tmpf496
    CP_EQF 0.0 194.68 flag496
    SELECTF flag496 0.0 tmpf496 F.0

    MULF F.0 360.0 VL_15
  while498:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_15 endwhile498
  whilebody498:
    WRITE32 ENDSUB_LINE3:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB500:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_15 whilebody498
  endwhile498:
  while502:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile502
  whilebody502:
    WRITE32 ENDSUB_LINE3:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB504:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody502
  endwhile502:
RETSUB_W4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W4_1:
SUB_B4_1:
    MOVEF_F 390.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB506:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB507:
    MOVEF_F 80.0 VMM_16
    JR_NEQF VO_16 1.0 else508_1
    ADDF VMM_16 45.0 VMM_16
  else508_1:
  endif508:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB510:
    MOVEF_F VMM_16 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB511:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB512:
    MOVEF_F 115.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB513:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB514:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB515:
    MOVEF_F 10.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB516:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB517:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB518:
    WRITE32 ENDSUB_TOLINE:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB519:
    WRITE32 ENDSUB_RIGHT:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB520:
    MOVEF_F 65.0 VMM_16
    DATAF tmpf521
    DATA8 flag521
    DIVF VMM_16 194.68 tmpf521
    CP_EQF 0.0 194.68 flag521
    SELECTF flag521 0.0 tmpf521 F.0

    MULF F.0 360.0 VL_16
  while523:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_16 endwhile523
  whilebody523:
    WRITE32 ENDSUB_LINE3:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB525:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_16 whilebody523
  endwhile523:
  while527:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile527
  whilebody527:
    WRITE32 ENDSUB_LINE3:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB529:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody527
  endwhile527:
RETSUB_B4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B4_1:
SUB_TH_UP:
    CALL MOTOR.SCHEDULE 'AD' -50.0 0.0 130.0 0.0 'true' 

	DATA8 layer531
	DATA8 nos531
	DATA8 busy531
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer531 nos531
	JR_EQ8 0 nos531 motornotbusy531
  motorwaiting531:
	OUTPUT_TEST layer531 nos531 busy531
	JR_EQ8 busy531 0 motornotbusy531
	SLEEP
	JR motorwaiting531
  motornotbusy531:
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_TH_DOWN:
    CALL MOTOR.STARTPOWER 'AD' 50.0
    DATA32 milliseconds534
	MOVEF_32 600.0 milliseconds534
	DATA32 timer534
	TIMER_WAIT milliseconds534 timer534
	TIMER_READY timer534
  while535:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile535
  whilebody535:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody535
  endwhile535:
    CALL MOTOR.STARTPOWER 'AD' 10.0
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
