DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VK21_M
DATAF VV21_M
DATAF VB1_M
DATAF VW1_M
DATAF VB2_M
DATAF VW2_M
DATAF VRED_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VV_M
DATAF VRGB_M
DATAF VCOL_M
DATAF VI_M
DATAF VMM_M
DATAF VL_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAS VMOTOR_7 252
DATAF VSPEED_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAF VOB_9
DATAF VSIDE_9
DATAF VOB_10
DATAF VSIDE_10
DATAF VMM_10
DATAF VL_10
DATAF VOB_11
DATAF VSIDE_11
DATAF VMM_11
DATAF VL_11
DATAF VOB_12
DATAF VSIDE_12
DATAF VMM_12
DATAF VL_12
DATA32 RUNCOUNTER_TH_DOWN
DATA32 RUNCOUNTER_TH_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VOB_9
    MOVEF_F 0.0 VSIDE_9
    MOVEF_F 0.0 VOB_10
    MOVEF_F 0.0 VSIDE_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VOB_11
    MOVEF_F 0.0 VSIDE_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VOB_12
    MOVEF_F 0.0 VSIDE_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    MOVE32_32 0 RUNCOUNTER_TH_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_UP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_UP 1
    CALL GETANDINC32 RUNCOUNTER_TH_UP -1 RUNCOUNTER_TH_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
subcall PROGRAM_TH_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1097
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch1097:
    JR_NEQ32 SUBPROGRAM 1 dispatch1098
    WRITE32 ENDSUB_TH_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_UP
  dispatch1098:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VOB_9
    MOVEF_F 0.0 VSIDE_9
    MOVEF_F 0.0 VOB_10
    MOVEF_F 0.0 VSIDE_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VOB_11
    MOVEF_F 0.0 VSIDE_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VOB_12
    MOVEF_F 0.0 VSIDE_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 3.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.4 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.35 VK2_M
    MOVEF_F 50.0 VV2_M
    MOVEF_F 0.55 VK3_M
    MOVEF_F 20.0 VV3_M
    MOVEF_F 1.0 VK21_M
    MOVEF_F 30.0 VV21_M
    MOVEF_F 2.0 VB1_M
    MOVEF_F 3.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 1.0 VI_M
  for481:
    JR_GTF VI_M 4.0 endfor481
  forbody481:
    WRITE32 ENDSUB_COL:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB482:
    JR_NEQF VCOL_M 1.0 else483_1
    MOVEF_F VI_M VB1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif483
  else483_1:
    JR_NEQF VCOL_M 6.0 else483_2
    MOVEF_F VI_M VW1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else483_2:
  endif483:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf487
    DATA8 flag487
    DIVF VMM_M 194.68 tmpf487
    CP_EQF 0.0 194.68 flag487
    SELECTF flag487 0.0 tmpf487 F.0

    MULF F.0 360.0 VL_M
  while489:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile489
  whilebody489:
    WRITE32 ENDSUB_LINE21:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB491:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody489
  endwhile489:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody481
  endfor481:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf495
    DATA8 flag495
    DIVF VMM_M 194.68 tmpf495
    CP_EQF 0.0 194.68 flag495
    SELECTF flag495 0.0 tmpf495 F.0

    MULF F.0 360.0 VL_M
  while497:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile497
  whilebody497:
    WRITE32 ENDSUB_LINE21:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB499:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody497
  endwhile497:
    MOVEF_F 1.0 VI_M
  for501:
    JR_GTF VI_M 4.0 endfor501
  forbody501:
    WRITE32 ENDSUB_COL:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB502:
    JR_NEQF VCOL_M 1.0 else503_1
    MOVEF_F VI_M VB2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif503
  else503_1:
    JR_NEQF VCOL_M 6.0 else503_2
    MOVEF_F VI_M VW2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else503_2:
  endif503:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf507
    DATA8 flag507
    DIVF VMM_M 194.68 tmpf507
    CP_EQF 0.0 194.68 flag507
    SELECTF flag507 0.0 tmpf507 F.0

    MULF F.0 360.0 VL_M
  while509:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile509
  whilebody509:
    WRITE32 ENDSUB_LINE21:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB511:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody509
  endwhile509:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody501
  endfor501:
    CALL MOTOR.STOP 'BC' 'true'
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB524:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB525:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB526:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 70.0 VMM_M
    DATAF tmpf528
    DATA8 flag528
    DIVF VMM_M 194.68 tmpf528
    CP_EQF 0.0 194.68 flag528
    SELECTF flag528 0.0 tmpf528 F.0

    MULF F.0 360.0 VL_M
  while530:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile530
  whilebody530:
    WRITE32 ENDSUB_LINE3:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB532:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody530
  endwhile530:
    DATA8 layer534
	DATA8 no534
	DATA8 mode8534
	
	MOVEF_8 3.0 no534
	SUB8 no534 1 no534
	DIV8 no534 4 layer534
	MATH MOD8 no534 4 no534

	MOVEF_8 2.0 mode8534
	
	INPUT_DEVICE READY_RAW layer534 no534 0 mode8534 0
  while535:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile535
  whilebody535:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody535
  endwhile535:
    DATA8 layer547
	DATA8 no547
	DATA8 mode8547
	
	MOVEF_8 3.0 no547
	SUB8 no547 1 no547
	DIV8 no547 4 layer547
	MATH MOD8 no547 4 no547

	MOVEF_8 0.0 mode8547
	
	INPUT_DEVICE READY_RAW layer547 no547 0 mode8547 0
    MOVEF_F 10.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB548:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB549:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB550:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB551:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB552:
  while553:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile553
  whilebody553:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody553
  endwhile553:
    WRITE32 ENDSUB_RIGHT:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB557:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf559
    DATA8 flag559
    DIVF VMM_M 194.68 tmpf559
    CP_EQF 0.0 194.68 flag559
    SELECTF flag559 0.0 tmpf559 F.0

    MULF F.0 360.0 VL_M
  while561:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile561
  whilebody561:
    WRITE32 ENDSUB_LINE3:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB563:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody561
  endwhile561:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 700.0 VMM_M
    DATAF tmpf566
    DATA8 flag566
    DIVF VMM_M 194.68 tmpf566
    CP_EQF 0.0 194.68 flag566
    SELECTF flag566 0.0 tmpf566 F.0

    MULF F.0 360.0 VL_M
  while568:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile568
  whilebody568:
    WRITE32 ENDSUB_LINE2:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB570:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody568
  endwhile568:
    WRITE32 ENDSUB_HSV:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB572:
    JR_LTEQF VV_M 17.0 else573_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else573_1:
  endif573:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 500.0 VMM_M
    DATAF tmpf576
    DATA8 flag576
    DIVF VMM_M 194.68 tmpf576
    CP_EQF 0.0 194.68 flag576
    SELECTF flag576 0.0 tmpf576 F.0

    MULF F.0 360.0 VL_M
  while578:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile578
  whilebody578:
    WRITE32 ENDSUB_LINE2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB580:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody578
  endwhile578:
    WRITE32 ENDSUB_HSV:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB582:
    JR_LTEQF VV_M 17.0 else583_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else583_1:
  endif583:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 350.0 VMM_M
    DATAF tmpf586
    DATA8 flag586
    DIVF VMM_M 194.68 tmpf586
    CP_EQF 0.0 194.68 flag586
    SELECTF flag586 0.0 tmpf586 F.0

    MULF F.0 360.0 VL_M
  while588:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile588
  whilebody588:
    WRITE32 ENDSUB_LINE2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB590:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody588
  endwhile588:
  while592:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile592
  whilebody592:
    WRITE32 ENDSUB_LINE3:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB594:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody592
  endwhile592:
    WRITE32 ENDSUB_RIGHT:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB596:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 150.0 VMM_M
    DATAF tmpf598
    DATA8 flag598
    DIVF VMM_M 194.68 tmpf598
    CP_EQF 0.0 194.68 flag598
    SELECTF flag598 0.0 tmpf598 F.0

    MULF F.0 360.0 VL_M
  while600:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile600
  whilebody600:
    WRITE32 ENDSUB_LINE3:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB602:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody600
  endwhile600:
  while604:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile604
  whilebody604:
    WRITE32 ENDSUB_LINE2:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB606:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody604
  endwhile604:
    WRITE32 ENDSUB_RIGHT:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB608:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf610
    DATA8 flag610
    DIVF VMM_M 194.68 tmpf610
    CP_EQF 0.0 194.68 flag610
    SELECTF flag610 0.0 tmpf610 F.0

    MULF F.0 360.0 VL_M
  while612:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile612
  whilebody612:
    WRITE32 ENDSUB_LINE3:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB614:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody612
  endwhile612:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_M
    DATAF tmpf617
    DATA8 flag617
    DIVF VMM_M 194.68 tmpf617
    CP_EQF 0.0 194.68 flag617
    SELECTF flag617 0.0 tmpf617 F.0

    MULF F.0 360.0 VL_M
  while619:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile619
  whilebody619:
    WRITE32 ENDSUB_LINE2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB621:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody619
  endwhile619:
  while623:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile623
  whilebody623:
    WRITE32 ENDSUB_LINE3:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB625:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody623
  endwhile623:
    JR_NEQF VW1_M 3.0 else627_1
    MOVEF_F 2.0 VOB_12
    MOVEF_F 1.0 VSIDE_12
    WRITE32 ENDSUB_P3_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P3_2
CALLSUB628:
  else627_1:
  endif627:
    JR_NEQF VB1_M 2.0 else629_1
    MOVEF_F 1.0 VOB_11
    MOVEF_F 1.0 VSIDE_11
    WRITE32 ENDSUB_P2_2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P2_2
CALLSUB630:
  else629_1:
  endif629:
    JR_NEQF VW1_M 2.0 else631_1
    MOVEF_F 2.0 VOB_11
    MOVEF_F 1.0 VSIDE_11
    WRITE32 ENDSUB_P2_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P2_2
CALLSUB632:
  else631_1:
  endif631:
    JR_NEQF VB1_M 3.0 else633_1
    MOVEF_F 1.0 VOB_12
    MOVEF_F 1.0 VSIDE_12
    WRITE32 ENDSUB_P3_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P3_2
CALLSUB634:
  else633_1:
  endif633:
    JR_NEQF VW1_M 4.0 else635_1
    MOVEF_F 2.0 VOB_10
    MOVEF_F 1.0 VSIDE_10
    WRITE32 ENDSUB_P4_2:CALLSUB636 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P4_2
CALLSUB636:
  else635_1:
  endif635:
    JR_NEQF VB1_M 4.0 else637_1
    MOVEF_F 1.0 VOB_10
    MOVEF_F 1.0 VSIDE_10
    WRITE32 ENDSUB_P4_2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P4_2
CALLSUB638:
  else637_1:
  endif637:
    JR_NEQF VW1_M 1.0 else639_1
    MOVEF_F 2.0 VOB_9
    MOVEF_F 1.0 VSIDE_9
    WRITE32 ENDSUB_P1_2:CALLSUB640 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P1_2
CALLSUB640:
  else639_1:
  endif639:
    JR_NEQF VB1_M 1.0 else641_1
    MOVEF_F 1.0 VOB_9
    MOVEF_F 1.0 VSIDE_9
    WRITE32 ENDSUB_P1_2:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P1_2
CALLSUB642:
  else641_1:
  endif641:
    WRITE32 ENDSUB_AROUND:CALLSUB643 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB643:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf645
    DATA8 flag645
    DIVF VMM_M 194.68 tmpf645
    CP_EQF 0.0 194.68 flag645
    SELECTF flag645 0.0 tmpf645 F.0

    MULF F.0 360.0 VL_M
  while647:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile647
  whilebody647:
    WRITE32 ENDSUB_LINE3:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB649:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody647
  endwhile647:
  while651:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile651
  whilebody651:
    WRITE32 ENDSUB_LINE2:CALLSUB653 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB653:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody651
  endwhile651:
    WRITE32 ENDSUB_LEFT:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB655:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf656
    DATA8 flag656
    DIVF VMM_M 194.68 tmpf656
    CP_EQF 0.0 194.68 flag656
    SELECTF flag656 0.0 tmpf656 F.0

    MULF F.0 360.0 VL_M
  while658:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile658
  whilebody658:
    WRITE32 ENDSUB_LINE3:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB660:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody658
  endwhile658:
  while662:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile662
  whilebody662:
    WRITE32 ENDSUB_LINE2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB664:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody662
  endwhile662:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB666:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds668
	MOVEF_32 1000.0 milliseconds668
	DATA32 timer668
	TIMER_WAIT milliseconds668 timer668
	TIMER_READY timer668
    MOVEF_F 130.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB669:
    MOVEF_F 92.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB670 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB670:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB671:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer673
	DATA8 no673
	DATA8 mode8673
	
	MOVEF_8 2.0 no673
	SUB8 no673 1 no673
	DIV8 no673 4 layer673
	MATH MOD8 no673 4 no673

	MOVEF_8 2.0 mode8673
	
	INPUT_DEVICE READY_RAW layer673 no673 0 mode8673 0
    DATA8 layer674
	DATA8 no674
	DATA8 mode8674
	
	MOVEF_8 3.0 no674
	SUB8 no674 1 no674
	DIV8 no674 4 layer674
	MATH MOD8 no674 4 no674

	MOVEF_8 2.0 mode8674
	
	INPUT_DEVICE READY_RAW layer674 no674 0 mode8674 0
  while675:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or676
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile675
  or676:
  whilebody675:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody675
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody675
  endwhile675:
    DATA8 layer681
	DATA8 no681
	DATA8 mode8681
	
	MOVEF_8 2.0 no681
	SUB8 no681 1 no681
	DIV8 no681 4 layer681
	MATH MOD8 no681 4 no681

	MOVEF_8 0.0 mode8681
	
	INPUT_DEVICE READY_RAW layer681 no681 0 mode8681 0
    DATA8 layer682
	DATA8 no682
	DATA8 mode8682
	
	MOVEF_8 3.0 no682
	SUB8 no682 1 no682
	DIV8 no682 4 layer682
	MATH MOD8 no682 4 no682

	MOVEF_8 0.0 mode8682
	
	INPUT_DEVICE READY_RAW layer682 no682 0 mode8682 0
  while683:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile683
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile683
  whilebody683:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and686
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody683
  and686:
  endwhile683:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB689:
    CALL MOTOR.START 'AD' 25.0
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB691 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB691:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB694:
    DATA32 tmp695
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp695
    JR_NEQ32 0 tmp695 alreadylaunched695
    OBJECT_START TTH_DOWN
  alreadylaunched695:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer697
	DATA8 no697
	DATA8 mode8697
	
	MOVEF_8 2.0 no697
	SUB8 no697 1 no697
	DIV8 no697 4 layer697
	MATH MOD8 no697 4 no697

	MOVEF_8 2.0 mode8697
	
	INPUT_DEVICE READY_RAW layer697 no697 0 mode8697 0
    DATA8 layer698
	DATA8 no698
	DATA8 mode8698
	
	MOVEF_8 3.0 no698
	SUB8 no698 1 no698
	DIV8 no698 4 layer698
	MATH MOD8 no698 4 no698

	MOVEF_8 2.0 mode8698
	
	INPUT_DEVICE READY_RAW layer698 no698 0 mode8698 0
  while699:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or700
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile699
  or700:
  whilebody699:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody699
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody699
  endwhile699:
    DATA8 layer705
	DATA8 no705
	DATA8 mode8705
	
	MOVEF_8 2.0 no705
	SUB8 no705 1 no705
	DIV8 no705 4 layer705
	MATH MOD8 no705 4 no705

	MOVEF_8 0.0 mode8705
	
	INPUT_DEVICE READY_RAW layer705 no705 0 mode8705 0
    DATA8 layer706
	DATA8 no706
	DATA8 mode8706
	
	MOVEF_8 3.0 no706
	SUB8 no706 1 no706
	DIV8 no706 4 layer706
	MATH MOD8 no706 4 no706

	MOVEF_8 0.0 mode8706
	
	INPUT_DEVICE READY_RAW layer706 no706 0 mode8706 0
  while707:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile707
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile707
  whilebody707:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and710
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody707
  and710:
  endwhile707:
    WRITE32 ENDSUB_LEFT:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB713:
    DATA32 tmp714
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp714
    JR_NEQ32 0 tmp714 alreadylaunched714
    OBJECT_START TTH_UP
  alreadylaunched714:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf715
    DATA8 flag715
    DIVF VMM_M 194.68 tmpf715
    CP_EQF 0.0 194.68 flag715
    SELECTF flag715 0.0 tmpf715 F.0

    MULF F.0 360.0 VL_M
  while717:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile717
  whilebody717:
    WRITE32 ENDSUB_LINE3:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB719:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody717
  endwhile717:
    MOVEF_F 500.0 VMM_M
    DATAF tmpf721
    DATA8 flag721
    DIVF VMM_M 194.68 tmpf721
    CP_EQF 0.0 194.68 flag721
    SELECTF flag721 0.0 tmpf721 F.0

    MULF F.0 360.0 VL_M
  while723:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile723
  whilebody723:
    WRITE32 ENDSUB_LINE2:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB725:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody723
  endwhile723:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf727
    DATA8 flag727
    DIVF VMM_M 194.68 tmpf727
    CP_EQF 0.0 194.68 flag727
    SELECTF flag727 0.0 tmpf727 F.0

    MULF F.0 360.0 VL_M
  while729:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile729
  whilebody729:
    WRITE32 ENDSUB_LINE3:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB731:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody729
  endwhile729:
  while733:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile733
  whilebody733:
    WRITE32 ENDSUB_LINE3:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB735:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody733
  endwhile733:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else738_1
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB739:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB740:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB741:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB742:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB743:
    JR endif738
  else738_1:
    JR_NEQF VRED_M 4.0 else738_2
    MOVEF_F 120.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB744:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB745:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB746:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB747:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB748:
    JR endif738
  else738_2:
    JR_NEQF VRED_M 0.0 else738_3
    WRITE32 ENDSUB_RIGHT:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB749:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf751
    DATA8 flag751
    DIVF VMM_M 194.68 tmpf751
    CP_EQF 0.0 194.68 flag751
    SELECTF flag751 0.0 tmpf751 F.0

    MULF F.0 360.0 VL_M
  while753:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile753
  whilebody753:
    WRITE32 ENDSUB_LINE3:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB755:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody753
  endwhile753:
  while757:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or758
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile757
  or758:
  whilebody757:
    WRITE32 ENDSUB_LINE3:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB761:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody757
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody757
  endwhile757:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB764:
  while765:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or766
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile765
  or766:
  whilebody765:
    WRITE32 ENDSUB_LINE3:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB769:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody765
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody765
  endwhile765:
    MOVEF_F 12.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB772:
    WRITE32 ENDSUB_HSV:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB773:
    CALL SPEAKER.TONE 40.0 600.0 200.0
    JR_EQF VSNUM_M 0.0 else775_1
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB776 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB776:
    JR endif775
  else775_1:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB777:
  else775_2:
  endif775:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB778 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB778:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB779:
    DATA32 milliseconds780
	MOVEF_32 500.0 milliseconds780
	DATA32 timer780
	TIMER_WAIT milliseconds780 timer780
	TIMER_READY timer780
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB781 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB781:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB782:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer784
	DATA8 no784
	DATA8 mode8784
	
	MOVEF_8 2.0 no784
	SUB8 no784 1 no784
	DIV8 no784 4 layer784
	MATH MOD8 no784 4 no784

	MOVEF_8 2.0 mode8784
	
	INPUT_DEVICE READY_RAW layer784 no784 0 mode8784 0
    DATA8 layer785
	DATA8 no785
	DATA8 mode8785
	
	MOVEF_8 3.0 no785
	SUB8 no785 1 no785
	DIV8 no785 4 layer785
	MATH MOD8 no785 4 no785

	MOVEF_8 2.0 mode8785
	
	INPUT_DEVICE READY_RAW layer785 no785 0 mode8785 0
  while786:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or787
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile786
  or787:
  whilebody786:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
  endwhile786:
    DATA8 layer792
	DATA8 no792
	DATA8 mode8792
	
	MOVEF_8 2.0 no792
	SUB8 no792 1 no792
	DIV8 no792 4 layer792
	MATH MOD8 no792 4 no792

	MOVEF_8 0.0 mode8792
	
	INPUT_DEVICE READY_RAW layer792 no792 0 mode8792 0
    DATA8 layer793
	DATA8 no793
	DATA8 mode8793
	
	MOVEF_8 3.0 no793
	SUB8 no793 1 no793
	DIV8 no793 4 layer793
	MATH MOD8 no793 4 no793

	MOVEF_8 0.0 mode8793
	
	INPUT_DEVICE READY_RAW layer793 no793 0 mode8793 0
  while794:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile794
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile794
  whilebody794:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and797
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody794
  and797:
  endwhile794:
    JR_EQF VSNUM_M 0.0 else800_1
    WRITE32 ENDSUB_LEFT:CALLSUB801 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB801:
    MOVEF_F 2.0 VRED_M
    JR endif800
  else800_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB802 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB802:
    MOVEF_F 3.0 VRED_M
  else800_2:
  endif800:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 130.0 VMM_M
    DATAF tmpf804
    DATA8 flag804
    DIVF VMM_M 194.68 tmpf804
    CP_EQF 0.0 194.68 flag804
    SELECTF flag804 0.0 tmpf804 F.0

    MULF F.0 360.0 VL_M
  while806:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile806
  whilebody806:
    WRITE32 ENDSUB_LINE3:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB808:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody806
  endwhile806:
  while810:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or811
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile810
  or811:
  whilebody810:
    WRITE32 ENDSUB_LINE3:CALLSUB814 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB814:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody810
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody810
  endwhile810:
    WRITE32 ENDSUB_LEFT:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB817:
  else738_3:
  endif738:
    JR_EQF VRED_M 2.0 else818_1
    JR_EQF VRED_M 3.0 else818_1
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB819:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer821
	DATA8 no821
	DATA8 mode8821
	
	MOVEF_8 2.0 no821
	SUB8 no821 1 no821
	DIV8 no821 4 layer821
	MATH MOD8 no821 4 no821

	MOVEF_8 2.0 mode8821
	
	INPUT_DEVICE READY_RAW layer821 no821 0 mode8821 0
    DATA8 layer822
	DATA8 no822
	DATA8 mode8822
	
	MOVEF_8 3.0 no822
	SUB8 no822 1 no822
	DIV8 no822 4 layer822
	MATH MOD8 no822 4 no822

	MOVEF_8 2.0 mode8822
	
	INPUT_DEVICE READY_RAW layer822 no822 0 mode8822 0
  while823:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or824
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile823
  or824:
  whilebody823:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody823
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody823
  endwhile823:
    DATA8 layer829
	DATA8 no829
	DATA8 mode8829
	
	MOVEF_8 2.0 no829
	SUB8 no829 1 no829
	DIV8 no829 4 layer829
	MATH MOD8 no829 4 no829

	MOVEF_8 0.0 mode8829
	
	INPUT_DEVICE READY_RAW layer829 no829 0 mode8829 0
    DATA8 layer830
	DATA8 no830
	DATA8 mode8830
	
	MOVEF_8 3.0 no830
	SUB8 no830 1 no830
	DIV8 no830 4 layer830
	MATH MOD8 no830 4 no830

	MOVEF_8 0.0 mode8830
	
	INPUT_DEVICE READY_RAW layer830 no830 0 mode8830 0
  while831:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile831
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile831
  whilebody831:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and834
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody831
  and834:
  endwhile831:
    WRITE32 ENDSUB_RIGHT:CALLSUB837 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB837:
  else818_1:
  endif818:
    MOVEF_F 200.0 VMM_M
    DATAF tmpf838
    DATA8 flag838
    DIVF VMM_M 194.68 tmpf838
    CP_EQF 0.0 194.68 flag838
    SELECTF flag838 0.0 tmpf838 F.0

    MULF F.0 360.0 VL_M
  while840:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile840
  whilebody840:
    WRITE32 ENDSUB_LINE3:CALLSUB842 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB842:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody840
  endwhile840:
    MOVEF_F 300.0 VMM_M
    DATAF tmpf844
    DATA8 flag844
    DIVF VMM_M 194.68 tmpf844
    CP_EQF 0.0 194.68 flag844
    SELECTF flag844 0.0 tmpf844 F.0

    MULF F.0 360.0 VL_M
  while846:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile846
  whilebody846:
    WRITE32 ENDSUB_LINE2:CALLSUB848 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB848:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody846
  endwhile846:
  while850:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile850
  whilebody850:
    WRITE32 ENDSUB_LINE2:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB852:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody850
  endwhile850:
    WRITE32 ENDSUB_RIGHT:CALLSUB854 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB854:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf855
    DATA8 flag855
    DIVF VMM_M 194.68 tmpf855
    CP_EQF 0.0 194.68 flag855
    SELECTF flag855 0.0 tmpf855 F.0

    MULF F.0 360.0 VL_M
  while857:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile857
  whilebody857:
    WRITE32 ENDSUB_LINE3:CALLSUB859 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB859:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody857
  endwhile857:
  while861:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile861
  whilebody861:
    WRITE32 ENDSUB_LINE2:CALLSUB863 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB863:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody861
  endwhile861:
    JR_EQF VRED_M 1.0 or866
    JR_NEQF VRED_M 3.0 else865_1
  or866:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB867 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB867:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB868:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB869 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB869:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB870 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB870:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB871 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB871:
    JR endif865
  else865_1:
    MOVEF_F 210.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB872 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB872:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer874
	DATA8 no874
	DATA8 mode8874
	
	MOVEF_8 2.0 no874
	SUB8 no874 1 no874
	DIV8 no874 4 layer874
	MATH MOD8 no874 4 no874

	MOVEF_8 2.0 mode8874
	
	INPUT_DEVICE READY_RAW layer874 no874 0 mode8874 0
    DATA8 layer875
	DATA8 no875
	DATA8 mode8875
	
	MOVEF_8 3.0 no875
	SUB8 no875 1 no875
	DIV8 no875 4 layer875
	MATH MOD8 no875 4 no875

	MOVEF_8 2.0 mode8875
	
	INPUT_DEVICE READY_RAW layer875 no875 0 mode8875 0
  while876:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or877
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile876
  or877:
  whilebody876:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody876
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody876
  endwhile876:
    DATA8 layer882
	DATA8 no882
	DATA8 mode8882
	
	MOVEF_8 2.0 no882
	SUB8 no882 1 no882
	DIV8 no882 4 layer882
	MATH MOD8 no882 4 no882

	MOVEF_8 0.0 mode8882
	
	INPUT_DEVICE READY_RAW layer882 no882 0 mode8882 0
    DATA8 layer883
	DATA8 no883
	DATA8 mode8883
	
	MOVEF_8 3.0 no883
	SUB8 no883 1 no883
	DIV8 no883 4 layer883
	MATH MOD8 no883 4 no883

	MOVEF_8 0.0 mode8883
	
	INPUT_DEVICE READY_RAW layer883 no883 0 mode8883 0
  while884:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile884
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile884
  whilebody884:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and887
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody884
  and887:
  endwhile884:
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB890 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB890:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB891 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB891:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB892:
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB893 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB893:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB894:
  else865_2:
  endif865:
    DATA32 tmp895
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp895
    JR_NEQ32 0 tmp895 alreadylaunched895
    OBJECT_START TTH_DOWN
  alreadylaunched895:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer897
	DATA8 no897
	DATA8 mode8897
	
	MOVEF_8 2.0 no897
	SUB8 no897 1 no897
	DIV8 no897 4 layer897
	MATH MOD8 no897 4 no897

	MOVEF_8 2.0 mode8897
	
	INPUT_DEVICE READY_RAW layer897 no897 0 mode8897 0
    DATA8 layer898
	DATA8 no898
	DATA8 mode8898
	
	MOVEF_8 3.0 no898
	SUB8 no898 1 no898
	DIV8 no898 4 layer898
	MATH MOD8 no898 4 no898

	MOVEF_8 2.0 mode8898
	
	INPUT_DEVICE READY_RAW layer898 no898 0 mode8898 0
  while899:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or900
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile899
  or900:
  whilebody899:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody899
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody899
  endwhile899:
    DATA8 layer905
	DATA8 no905
	DATA8 mode8905
	
	MOVEF_8 2.0 no905
	SUB8 no905 1 no905
	DIV8 no905 4 layer905
	MATH MOD8 no905 4 no905

	MOVEF_8 0.0 mode8905
	
	INPUT_DEVICE READY_RAW layer905 no905 0 mode8905 0
    DATA8 layer906
	DATA8 no906
	DATA8 mode8906
	
	MOVEF_8 3.0 no906
	SUB8 no906 1 no906
	DIV8 no906 4 layer906
	MATH MOD8 no906 4 no906

	MOVEF_8 0.0 mode8906
	
	INPUT_DEVICE READY_RAW layer906 no906 0 mode8906 0
  while907:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile907
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile907
  whilebody907:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 and910
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody907
  and910:
  endwhile907:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB914 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB914:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf916
    DATA8 flag916
    DIVF VMM_M 194.68 tmpf916
    CP_EQF 0.0 194.68 flag916
    SELECTF flag916 0.0 tmpf916 F.0

    MULF F.0 360.0 VL_M
  while918:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile918
  whilebody918:
    WRITE32 ENDSUB_LINE3:CALLSUB920 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB920:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody918
  endwhile918:
    WRITE32 ENDSUB_AROUND:CALLSUB922 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB922:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf924
    DATA8 flag924
    DIVF VMM_M 194.68 tmpf924
    CP_EQF 0.0 194.68 flag924
    SELECTF flag924 0.0 tmpf924 F.0

    MULF F.0 360.0 VL_M
  while926:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile926
  whilebody926:
    WRITE32 ENDSUB_LINE3:CALLSUB928 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB928:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody926
  endwhile926:
  while930:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile930
  whilebody930:
    WRITE32 ENDSUB_LINE2:CALLSUB932 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB932:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody930
  endwhile930:
    WRITE32 ENDSUB_LEFT:CALLSUB934 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB934:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf935
    DATA8 flag935
    DIVF VMM_M 194.68 tmpf935
    CP_EQF 0.0 194.68 flag935
    SELECTF flag935 0.0 tmpf935 F.0

    MULF F.0 360.0 VL_M
  while937:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile937
  whilebody937:
    WRITE32 ENDSUB_LINE3:CALLSUB939 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB939:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody937
  endwhile937:
  while941:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile941
  whilebody941:
    WRITE32 ENDSUB_LINE2:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB943:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody941
  endwhile941:
    WRITE32 ENDSUB_LEFT:CALLSUB945 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB945:
    DATA32 tmp946
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp946
    JR_NEQ32 0 tmp946 alreadylaunched946
    OBJECT_START TTH_UP
  alreadylaunched946:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf947
    DATA8 flag947
    DIVF VMM_M 194.68 tmpf947
    CP_EQF 0.0 194.68 flag947
    SELECTF flag947 0.0 tmpf947 F.0

    MULF F.0 360.0 VL_M
  while949:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile949
  whilebody949:
    WRITE32 ENDSUB_LINE3:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB951:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody949
  endwhile949:
    MOVEF_F 1700.0 VMM_M
    DATAF tmpf953
    DATA8 flag953
    DIVF VMM_M 194.68 tmpf953
    CP_EQF 0.0 194.68 flag953
    SELECTF flag953 0.0 tmpf953 F.0

    MULF F.0 360.0 VL_M
  while955:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile955
  whilebody955:
    WRITE32 ENDSUB_LINE2:CALLSUB957 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB957:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody955
  endwhile955:
    DATA32 tmp959
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp959
    JR_NEQ32 0 tmp959 alreadylaunched959
    OBJECT_START TTH_DOWN
  alreadylaunched959:
  while960:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile960
  whilebody960:
    WRITE32 ENDSUB_LINE3:CALLSUB962 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB962:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody960
  endwhile960:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB965 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB965:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf966
    DATA8 flag966
    DIVF VMM_M 194.68 tmpf966
    CP_EQF 0.0 194.68 flag966
    SELECTF flag966 0.0 tmpf966 F.0

    MULF F.0 360.0 VL_M
  while968:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile968
  whilebody968:
    WRITE32 ENDSUB_LINE3:CALLSUB970 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB970:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody968
  endwhile968:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer973
	DATA8 no973
	DATA8 mode8973
	
	MOVEF_8 3.0 no973
	SUB8 no973 1 no973
	DIV8 no973 4 layer973
	MATH MOD8 no973 4 no973

	MOVEF_8 2.0 mode8973
	
	INPUT_DEVICE READY_RAW layer973 no973 0 mode8973 0
  while974:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile974
  whilebody974:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody974
  endwhile974:
    DATA8 layer986
	DATA8 no986
	DATA8 mode8986
	
	MOVEF_8 3.0 no986
	SUB8 no986 1 no986
	DIV8 no986 4 layer986
	MATH MOD8 no986 4 no986

	MOVEF_8 0.0 mode8986
	
	INPUT_DEVICE READY_RAW layer986 no986 0 mode8986 0
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB987 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB987:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB988 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB988:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB989:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB990 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB990:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB991 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB991:
  while992:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile992
  whilebody992:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody992
  endwhile992:
    WRITE32 ENDSUB_RIGHT:CALLSUB996 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB996:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf998
    DATA8 flag998
    DIVF VMM_M 194.68 tmpf998
    CP_EQF 0.0 194.68 flag998
    SELECTF flag998 0.0 tmpf998 F.0

    MULF F.0 360.0 VL_M
  while1000:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1000
  whilebody1000:
    WRITE32 ENDSUB_LINE3:CALLSUB1002 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1002:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1000
  endwhile1000:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 700.0 VMM_M
    DATAF tmpf1005
    DATA8 flag1005
    DIVF VMM_M 194.68 tmpf1005
    CP_EQF 0.0 194.68 flag1005
    SELECTF flag1005 0.0 tmpf1005 F.0

    MULF F.0 360.0 VL_M
  while1007:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1007
  whilebody1007:
    WRITE32 ENDSUB_LINE2:CALLSUB1009 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1009:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1007
  endwhile1007:
  while1011:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1011
  whilebody1011:
    WRITE32 ENDSUB_LINE3:CALLSUB1013 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1013:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1011
  endwhile1011:
    JR_NEQF VW2_M 3.0 else1015_1
    MOVEF_F 2.0 VOB_12
    MOVEF_F 2.0 VSIDE_12
    WRITE32 ENDSUB_P3_2:CALLSUB1016 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P3_2
CALLSUB1016:
  else1015_1:
  endif1015:
    JR_NEQF VB2_M 2.0 else1017_1
    MOVEF_F 1.0 VOB_11
    MOVEF_F 2.0 VSIDE_11
    WRITE32 ENDSUB_P2_2:CALLSUB1018 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P2_2
CALLSUB1018:
  else1017_1:
  endif1017:
    JR_NEQF VW2_M 2.0 else1019_1
    MOVEF_F 2.0 VOB_11
    MOVEF_F 2.0 VSIDE_11
    WRITE32 ENDSUB_P2_2:CALLSUB1020 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P2_2
CALLSUB1020:
  else1019_1:
  endif1019:
    JR_NEQF VB2_M 3.0 else1021_1
    MOVEF_F 1.0 VOB_12
    MOVEF_F 2.0 VSIDE_12
    WRITE32 ENDSUB_P3_2:CALLSUB1022 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P3_2
CALLSUB1022:
  else1021_1:
  endif1021:
    JR_NEQF VW2_M 4.0 else1023_1
    MOVEF_F 2.0 VOB_10
    MOVEF_F 2.0 VSIDE_10
    WRITE32 ENDSUB_P4_2:CALLSUB1024 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P4_2
CALLSUB1024:
  else1023_1:
  endif1023:
    JR_NEQF VB2_M 4.0 else1025_1
    MOVEF_F 1.0 VOB_10
    MOVEF_F 2.0 VSIDE_10
    WRITE32 ENDSUB_P4_2:CALLSUB1026 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P4_2
CALLSUB1026:
  else1025_1:
  endif1025:
    JR_NEQF VW2_M 1.0 else1027_1
    MOVEF_F 2.0 VOB_9
    MOVEF_F 2.0 VSIDE_9
    WRITE32 ENDSUB_P1_2:CALLSUB1028 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P1_2
CALLSUB1028:
  else1027_1:
  endif1027:
    JR_NEQF VB2_M 1.0 else1029_1
    MOVEF_F 1.0 VOB_9
    MOVEF_F 2.0 VSIDE_9
    WRITE32 ENDSUB_P1_2:CALLSUB1030 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_P1_2
CALLSUB1030:
  else1029_1:
  endif1029:
    WRITE32 ENDSUB_AROUND:CALLSUB1031 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB1031:
    MOVEF_F 200.0 VMM_M
    DATAF tmpf1032
    DATA8 flag1032
    DIVF VMM_M 194.68 tmpf1032
    CP_EQF 0.0 194.68 flag1032
    SELECTF flag1032 0.0 tmpf1032 F.0

    MULF F.0 360.0 VL_M
  while1034:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1034
  whilebody1034:
    WRITE32 ENDSUB_LINE3:CALLSUB1036 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1036:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1034
  endwhile1034:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 700.0 VMM_M
    DATAF tmpf1039
    DATA8 flag1039
    DIVF VMM_M 194.68 tmpf1039
    CP_EQF 0.0 194.68 flag1039
    SELECTF flag1039 0.0 tmpf1039 F.0

    MULF F.0 360.0 VL_M
  while1041:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1041
  whilebody1041:
    WRITE32 ENDSUB_LINE2:CALLSUB1043 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1043:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1041
  endwhile1041:
  while1045:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1045
  whilebody1045:
    WRITE32 ENDSUB_LINE3:CALLSUB1047 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1047:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1045
  endwhile1045:
    WRITE32 ENDSUB_LEFT:CALLSUB1049 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1049:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf1050
    DATA8 flag1050
    DIVF VMM_M 194.68 tmpf1050
    CP_EQF 0.0 194.68 flag1050
    SELECTF flag1050 0.0 tmpf1050 F.0

    MULF F.0 360.0 VL_M
  while1052:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1052
  whilebody1052:
    WRITE32 ENDSUB_LINE3:CALLSUB1054 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1054:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1052
  endwhile1052:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf1057
    DATA8 flag1057
    DIVF VMM_M 194.68 tmpf1057
    CP_EQF 0.0 194.68 flag1057
    SELECTF flag1057 0.0 tmpf1057 F.0

    MULF F.0 360.0 VL_M
  while1059:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1059
  whilebody1059:
    WRITE32 ENDSUB_LINE2:CALLSUB1061 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1061:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1059
  endwhile1059:
  while1063:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1063
  whilebody1063:
    WRITE32 ENDSUB_LINE3:CALLSUB1065 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1065:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1063
  endwhile1063:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1067 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1067:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1068 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1068:
    MOVEF_F 545.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1069 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1069:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB1070 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB1070:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer1072
	DATA8 no1072
	DATA8 mode81072
	
	MOVEF_8 2.0 no1072
	SUB8 no1072 1 no1072
	DIV8 no1072 4 layer1072
	MATH MOD8 no1072 4 no1072

	MOVEF_8 2.0 mode81072
	
	INPUT_DEVICE READY_RAW layer1072 no1072 0 mode81072 0
    DATA8 layer1073
	DATA8 no1073
	DATA8 mode81073
	
	MOVEF_8 3.0 no1073
	SUB8 no1073 1 no1073
	DIV8 no1073 4 layer1073
	MATH MOD8 no1073 4 no1073

	MOVEF_8 2.0 mode81073
	
	INPUT_DEVICE READY_RAW layer1073 no1073 0 mode81073 0
  while1074:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1075
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1074
  or1075:
  whilebody1074:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1074
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1074
  endwhile1074:
    DATA8 layer1080
	DATA8 no1080
	DATA8 mode81080
	
	MOVEF_8 2.0 no1080
	SUB8 no1080 1 no1080
	DIV8 no1080 4 layer1080
	MATH MOD8 no1080 4 no1080

	MOVEF_8 0.0 mode81080
	
	INPUT_DEVICE READY_RAW layer1080 no1080 0 mode81080 0
    DATA8 layer1081
	DATA8 no1081
	DATA8 mode81081
	
	MOVEF_8 3.0 no1081
	SUB8 no1081 1 no1081
	DIV8 no1081 4 layer1081
	MATH MOD8 no1081 4 no1081

	MOVEF_8 0.0 mode81081
	
	INPUT_DEVICE READY_RAW layer1081 no1081 0 mode81081 0
  while1082:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile1082
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1082
  whilebody1082:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and1085
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1082
  and1085:
  endwhile1082:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1088 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1088:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1090 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1090:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1093 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1093:
    DATA32 tmp1094
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp1094
    JR_NEQ32 0 tmp1094 alreadylaunched1094
    OBJECT_START TTH_DOWN
  alreadylaunched1094:
    MOVEF_F 65.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1095 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1095:
    MOVEF_F 500.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1096 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1096:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 F.1 tmpf15
    CP_EQF 0.0 F.1 flag15
    SELECTF flag15 0.0 tmpf15 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB25:
    WRITE32 ENDSUB_SEN2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB26:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB34:
    WRITE32 ENDSUB_SEN2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB35:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LINE21:
    WRITE32 ENDSUB_SEN2:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB43:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M VK21_M F.1
    ADDF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK21_M F.1
    SUBF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE21:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE21:
SUB_LEFT:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB52:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB53:
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while56:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile56
  whilebody56:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody56
  endwhile56:
  while59:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile59
  whilebody59:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody59
  endwhile59:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB63:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB64 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB64:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB65 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB65:
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while68:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile68
  whilebody68:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody68
  endwhile68:
  while71:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile71
  whilebody71:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody71
  endwhile71:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB75 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB75:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 170.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB76 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB76:
    CALL MOTOR.STARTPOWER 'B' -70.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while79:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile79
  whilebody79:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody79
  endwhile79:
  while82:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile82
  whilebody82:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody82
  endwhile82:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB86:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while88:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf94
    DATA8 flag94
    DIVF F.1 2.0 tmpf94
    CP_EQF 0.0 2.0 flag94
    SELECTF flag94 0.0 tmpf94 F.0

    JR_GTF F.0 VL_1 endwhile88
  whilebody88:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf109
    DATA8 flag109
    DIVF F.1 2.0 tmpf109
    CP_EQF 0.0 2.0 flag109
    SELECTF flag109 0.0 tmpf109 F.0

    JR_LTEQF F.0 VL_1 whilebody88
  endwhile88:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf111
    DATA8 flag111
    DIVF VMM_2 194.68 tmpf111
    CP_EQF 0.0 194.68 flag111
    SELECTF flag111 0.0 tmpf111 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB114:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_3 F.0
    DATAF tmpf116
    DATA8 flag116
    DIVF F.0 360.0 tmpf116
    CP_EQF 0.0 360.0 flag116
    SELECTF flag116 0.0 tmpf116 VL_3

    DATAF tmpf117
    DATA8 flag117
    DIVF VL_3 200.96 tmpf117
    CP_EQF 0.0 200.96 flag117
    SELECTF flag117 0.0 tmpf117 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_3
  while121:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile121
  whilebody121:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf128
    DATA8 flag128
    DIVF F.0 360.0 tmpf128
    CP_EQF 0.0 360.0 flag128
    SELECTF flag128 0.0 tmpf128 VL_4

    DATAF tmpf129
    DATA8 flag129
    DIVF VL_4 200.96 tmpf129
    CP_EQF 0.0 200.96 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_4
  while133:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile133
  whilebody133:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody133
  endwhile133:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf140
    DATA8 flag140
    DIVF F.0 360.0 tmpf140
    CP_EQF 0.0 360.0 flag140
    SELECTF flag140 0.0 tmpf140 VL_5

    DATAF tmpf141
    DATA8 flag141
    DIVF VL_5 200.96 tmpf141
    CP_EQF 0.0 200.96 flag141
    SELECTF flag141 0.0 tmpf141 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while146:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf152
    DATA8 flag152
    DIVF F.1 2.0 tmpf152
    CP_EQF 0.0 2.0 flag152
    SELECTF flag152 0.0 tmpf152 F.0

    DATAF tmpf153
    DATA8 flag153
    DIVF VL_5 2.0 tmpf153
    CP_EQF 0.0 2.0 flag153
    SELECTF flag153 0.0 tmpf153 F.1

    JR_GTF F.0 F.1 endwhile146
  whilebody146:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf159
    DATA8 flag159
    DIVF F.1 2.0 tmpf159
    CP_EQF 0.0 2.0 flag159
    SELECTF flag159 0.0 tmpf159 F.0

    DATAF tmpf160
    DATA8 flag160
    DIVF VL_5 2.0 tmpf160
    CP_EQF 0.0 2.0 flag160
    SELECTF flag160 0.0 tmpf160 F.1

    JR_LTEQF F.0 F.1 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf163
    DATA8 flag163
    DIVF F.0 360.0 tmpf163
    CP_EQF 0.0 360.0 flag163
    SELECTF flag163 0.0 tmpf163 VL_6

    DATAF tmpf164
    DATA8 flag164
    DIVF VL_6 200.96 tmpf164
    CP_EQF 0.0 200.96 flag164
    SELECTF flag164 0.0 tmpf164 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while169:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf175
    DATA8 flag175
    DIVF F.1 2.0 tmpf175
    CP_EQF 0.0 2.0 flag175
    SELECTF flag175 0.0 tmpf175 F.0

    DATAF tmpf176
    DATA8 flag176
    DIVF VL_6 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.1

    JR_GTF F.0 F.1 endwhile169
  whilebody169:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf182
    DATA8 flag182
    DIVF F.1 2.0 tmpf182
    CP_EQF 0.0 2.0 flag182
    SELECTF flag182 0.0 tmpf182 F.0

    DATAF tmpf183
    DATA8 flag183
    DIVF VL_6 2.0 tmpf183
    CP_EQF 0.0 2.0 flag183
    SELECTF flag183 0.0 tmpf183 F.1

    JR_LTEQF F.0 F.1 whilebody169
  endwhile169:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    SUBF 0.0 VSPEED_7 F.0
    CALL MOTOR.SCHEDULE VMOTOR_7 F.0 0.0 130.0 0.0 'true' 

	DATA8 layer190
	DATA8 nos190
	DATA8 busy190
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_7 layer190 nos190
	JR_EQ8 0 nos190 motornotbusy190
  motorwaiting190:
	OUTPUT_TEST layer190 nos190 busy190
	JR_EQ8 busy190 0 motornotbusy190
	SLEEP
	JR motorwaiting190
  motornotbusy190:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_8 50.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds196
	MOVEF_32 600.0 milliseconds196
	DATA32 timer196
	TIMER_WAIT milliseconds196 timer196
	TIMER_READY timer196
    CALL MOTOR.STOP 'BC' 'true'
  while198:
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    JR_LTEQF F.0 35.0 endwhile198
  whilebody198:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    JR_GTF F.0 35.0 whilebody198
  endwhile198:
    CALL MOTOR.STARTPOWER VMOTOR_8 10.0
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else211_1
    JR_LTEQF VSRED_M VSBLUE_M else211_1
    MOVEF_F VSRED_M VMAX_M
    JR endif211
  else211_1:
    JR_LTEQF VSGREEN_M VSRED_M else211_2
    JR_LTEQF VSGREEN_M VSBLUE_M else211_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif211
  else211_2:
    JR_LTEQF VSBLUE_M VSRED_M else211_3
    JR_LTEQF VSBLUE_M VSGREEN_M else211_3
    MOVEF_F VSBLUE_M VMAX_M
  else211_3:
  endif211:
    JR_GTEQF VSRED_M VSGREEN_M else212_1
    JR_GTEQF VSRED_M VSBLUE_M else212_1
    MOVEF_F VSRED_M VMIN_M
    JR endif212
  else212_1:
    JR_GTEQF VSGREEN_M VSRED_M else212_2
    JR_GTEQF VSGREEN_M VSBLUE_M else212_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif212
  else212_2:
    JR_GTEQF VSBLUE_M VSRED_M else212_3
    JR_GTEQF VSBLUE_M VSGREEN_M else212_3
    MOVEF_F VSBLUE_M VMIN_M
  else212_3:
  endif212:
    JR_NEQF VMAX_M VMIN_M else213_1
    MOVEF_F 0.0 VH_M
    JR endif213
  else213_1:
    JR_NEQF VSRED_M VMAX_M else214_1
    JR_LTF VSGREEN_M VSBLUE_M else215_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf219
    DATA8 flag219
    DIVF F.0 F.1 tmpf219
    CP_EQF 0.0 F.1 flag219
    SELECTF flag219 0.0 tmpf219 VH_M

    JR endif215
  else215_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 F.2 tmpf223
    CP_EQF 0.0 F.2 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    ADDF F.0 360.0 VH_M
  else215_2:
  endif215:
    JR endif214
  else214_1:
    JR_NEQF VMAX_M VSGREEN_M else225_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf229
    DATA8 flag229
    DIVF F.1 F.2 tmpf229
    CP_EQF 0.0 F.2 flag229
    SELECTF flag229 0.0 tmpf229 F.0

    ADDF F.0 120.0 VH_M
    JR endif225
  else225_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf234
    DATA8 flag234
    DIVF F.1 F.2 tmpf234
    CP_EQF 0.0 F.2 flag234
    SELECTF flag234 0.0 tmpf234 F.0

    ADDF F.0 240.0 VH_M
  else225_2:
  endif225:
  else214_2:
  endif214:
  else213_2:
  endif213:
    JR_NEQF VMAX_M 0.0 else236_1
    MOVEF_F 0.0 VS_M
    JR endif236
  else236_1:
    DATAF tmpf237
    DATA8 flag237
    DIVF VMIN_M VMAX_M tmpf237
    CP_EQF 0.0 VMAX_M flag237
    SELECTF flag237 0.0 tmpf237 F.0

    SUBF 1.0 F.0 VS_M
  else236_2:
  endif236:
    MOVEF_F VMAX_M VV_M
    ADDF VSRED_M VSGREEN_M F.0
    ADDF F.0 VSBLUE_M VRGB_M
    JR_LTEQF VRGB_M 15.0 else241_1
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VRGB_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    JR_LTEQF VRGB_M 50.0 else245_1
    MOVEF_F 6.0 VCOL_M
    JR endif245
  else245_1:
    MOVEF_F 1.0 VCOL_M
  else245_2:
  endif245:
    JR endif241
  else241_1:
    MOVEF_F 0.0 VCOL_M
  else241_2:
  endif241:
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB246:
    JR_LTEQF VV_M 37.0 else247_1
    MOVEF_F 6.0 VCOL_M
    JR endif247
  else247_1:
    JR_LTEQF VV_M 10.0 else247_2
    MOVEF_F 1.0 VCOL_M
    JR endif247
  else247_2:
    MOVEF_F 0.0 VCOL_M
  else247_3:
  endif247:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_TOLINE:
    CALL MOTOR.STARTPOWER 'BC' -20.0
    DATA8 layer252
	DATA8 no252
	DATA8 mode8252
	
	MOVEF_8 2.0 no252
	SUB8 no252 1 no252
	DIV8 no252 4 layer252
	MATH MOD8 no252 4 no252

	MOVEF_8 2.0 mode8252
	
	INPUT_DEVICE READY_RAW layer252 no252 0 mode8252 0
    DATA8 layer253
	DATA8 no253
	DATA8 mode8253
	
	MOVEF_8 3.0 no253
	SUB8 no253 1 no253
	DIV8 no253 4 layer253
	MATH MOD8 no253 4 no253

	MOVEF_8 2.0 mode8253
	
	INPUT_DEVICE READY_RAW layer253 no253 0 mode8253 0
  while254:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or255
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile254
  or255:
  whilebody254:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody254
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody254
  endwhile254:
    DATA8 layer260
	DATA8 no260
	DATA8 mode8260
	
	MOVEF_8 2.0 no260
	SUB8 no260 1 no260
	DIV8 no260 4 layer260
	MATH MOD8 no260 4 no260

	MOVEF_8 0.0 mode8260
	
	INPUT_DEVICE READY_RAW layer260 no260 0 mode8260 0
    DATA8 layer261
	DATA8 no261
	DATA8 mode8261
	
	MOVEF_8 3.0 no261
	SUB8 no261 1 no261
	DIV8 no261 4 layer261
	MATH MOD8 no261 4 no261

	MOVEF_8 0.0 mode8261
	
	INPUT_DEVICE READY_RAW layer261 no261 0 mode8261 0
  while262:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile262
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile262
  whilebody262:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and265
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody262
  and265:
  endwhile262:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_P1_2:
    JR_NEQF VOB_9 1.0 else269_1
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB270:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB271:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB272:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB273:
    JR endif269
  else269_1:
    MOVEF_F 205.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB274:
    MOVEF_F 110.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB275:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB276:
    MOVEF_F 10.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB277:
  else269_2:
  endif269:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 10.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB278:
    JR_NEQF VSIDE_9 1.0 else279_1
    MOVEF_F 45.0 VMM_2
    MOVEF_F 10.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB280:
  else279_1:
  endif279:
    WRITE32 ENDSUB_TOLINE:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB281:
    JR_NEQF VOB_9 1.0 else282_1
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB283:
    JR endif282
  else282_1:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB284:
  else282_2:
  endif282:
    WRITE32 ENDSUB_RIGHT:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB285:
  while286:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile286
  whilebody286:
    WRITE32 ENDSUB_LINE3:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB288:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody286
  endwhile286:
RETSUB_P1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P1_2:
SUB_P4_2:
    JR_NEQF VOB_10 1.0 else290_1
    MOVEF_F 380.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB291:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB292:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB293:
    MOVEF_F 75.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB294:
    JR_NEQF VSIDE_10 1.0 else295_1
    MOVEF_F 45.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB296:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB297:
  else295_1:
  endif295:
    MOVEF_F 75.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB298:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB299:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB300:
    JR endif290
  else290_1:
    MOVEF_F 174.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB301:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB302:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB303:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB304:
    JR_NEQF VSIDE_10 1.0 else305_1
    MOVEF_F 45.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB306:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB307:
  else305_1:
  endif305:
    MOVEF_F 85.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB308:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB309:
    MOVEF_F 75.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB310:
  else290_2:
  endif290:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB311:
    WRITE32 ENDSUB_TOLINE:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB312:
    WRITE32 ENDSUB_AROUND:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB313:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_10
    DATAF tmpf315
    DATA8 flag315
    DIVF VMM_10 194.68 tmpf315
    CP_EQF 0.0 194.68 flag315
    SELECTF flag315 0.0 tmpf315 F.0

    MULF F.0 360.0 VL_10
  while317:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile317
  whilebody317:
    WRITE32 ENDSUB_LINE3:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB319:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody317
  endwhile317:
    WRITE32 ENDSUB_AROUND:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB321:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_10
    DATAF tmpf323
    DATA8 flag323
    DIVF VMM_10 194.68 tmpf323
    CP_EQF 0.0 194.68 flag323
    SELECTF flag323 0.0 tmpf323 F.0

    MULF F.0 360.0 VL_10
  while325:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile325
  whilebody325:
    WRITE32 ENDSUB_LINE3:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB327:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody325
  endwhile325:
  while329:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile329
  whilebody329:
    WRITE32 ENDSUB_LINE3:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB331:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody329
  endwhile329:
RETSUB_P4_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P4_2:
SUB_P2_2:
    JR_NEQF VOB_11 2.0 else333_1
    WRITE32 ENDSUB_LEFT:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB334:
    MOVEF_F 300.0 VMM_11
    DATAF tmpf335
    DATA8 flag335
    DIVF VMM_11 194.68 tmpf335
    CP_EQF 0.0 194.68 flag335
    SELECTF flag335 0.0 tmpf335 F.0

    MULF F.0 360.0 VL_11
  while337:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile337
  whilebody337:
    WRITE32 ENDSUB_LINE3:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB339:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody337
  endwhile337:
  while341:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile341
  whilebody341:
    WRITE32 ENDSUB_LINE3:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB343:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody341
  endwhile341:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB345:
    MOVEF_F 80.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB346:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB347:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB348:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB349:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB350:
    MOVEF_F 25.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB351:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB352:
    WRITE32 ENDSUB_TOLINE:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB353:
    WRITE32 ENDSUB_LEFT:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB354:
    MOVEF_F 150.0 VMM_11
    DATAF tmpf355
    DATA8 flag355
    DIVF VMM_11 194.68 tmpf355
    CP_EQF 0.0 194.68 flag355
    SELECTF flag355 0.0 tmpf355 F.0

    MULF F.0 360.0 VL_11
  while357:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile357
  whilebody357:
    WRITE32 ENDSUB_LINE3:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB359:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody357
  endwhile357:
  while361:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile361
  whilebody361:
    WRITE32 ENDSUB_LINE3:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB363:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody361
  endwhile361:
    WRITE32 ENDSUB_RIGHT:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB365:
    JR endif333
  else333_1:
    MOVEF_F 85.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB366:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB367:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB368:
    MOVEF_F 225.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB369:
    JR_NEQF VSIDE_11 1.0 else370_1
    MOVEF_F 45.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB371:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB372:
  else370_1:
  endif370:
    MOVEF_F 185.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB373:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB374:
    WRITE32 ENDSUB_TOLINE:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB375:
    WRITE32 ENDSUB_RIGHT:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB376:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_11
    DATAF tmpf378
    DATA8 flag378
    DIVF VMM_11 194.68 tmpf378
    CP_EQF 0.0 194.68 flag378
    SELECTF flag378 0.0 tmpf378 F.0

    MULF F.0 360.0 VL_11
  while380:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile380
  whilebody380:
    WRITE32 ENDSUB_LINE3:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB382:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody380
  endwhile380:
  while384:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile384
  whilebody384:
    WRITE32 ENDSUB_LINE3:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB386:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody384
  endwhile384:
    WRITE32 ENDSUB_AROUND:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB388:
  else333_2:
  endif333:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_11
    DATAF tmpf390
    DATA8 flag390
    DIVF VMM_11 194.68 tmpf390
    CP_EQF 0.0 194.68 flag390
    SELECTF flag390 0.0 tmpf390 F.0

    MULF F.0 360.0 VL_11
  while392:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile392
  whilebody392:
    WRITE32 ENDSUB_LINE3:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB394:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody392
  endwhile392:
    WRITE32 ENDSUB_AROUND:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB396:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_11
    DATAF tmpf398
    DATA8 flag398
    DIVF VMM_11 194.68 tmpf398
    CP_EQF 0.0 194.68 flag398
    SELECTF flag398 0.0 tmpf398 F.0

    MULF F.0 360.0 VL_11
  while400:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile400
  whilebody400:
    WRITE32 ENDSUB_LINE3:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB402:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody400
  endwhile400:
  while404:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile404
  whilebody404:
    WRITE32 ENDSUB_LINE3:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB406:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody404
  endwhile404:
RETSUB_P2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P2_2:
SUB_P3_2:
    WRITE32 ENDSUB_LEFT:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB408:
    MOVEF_F 200.0 VMM_12
    DATAF tmpf409
    DATA8 flag409
    DIVF VMM_12 194.68 tmpf409
    CP_EQF 0.0 194.68 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    MULF F.0 360.0 VL_12
  while411:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile411
  whilebody411:
    WRITE32 ENDSUB_LINE3:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB413:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody411
  endwhile411:
  while415:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile415
  whilebody415:
    WRITE32 ENDSUB_LINE3:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB417:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody415
  endwhile415:
    JR_NEQF VOB_12 1.0 else419_1
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB420:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB421:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB422:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB423:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB424:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB425:
    WRITE32 ENDSUB_TOLINE:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB426:
    WRITE32 ENDSUB_RIGHT:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB427:
    MOVEF_F 150.0 VMM_12
    JR endif419
  else419_1:
    MOVEF_F 33.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB428:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB429:
    MOVEF_F 292.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB430:
    MOVEF_F 13.0 VGRAD_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB431:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 6.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB432:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB433:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB434:
    MOVEF_F 75.0 VGRAD_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB435:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB436:
    MOVEF_F 115.0 VGRAD_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB437:
    MOVEF_F 290.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB438:
    WRITE32 ENDSUB_TOLINE:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB439:
    WRITE32 ENDSUB_RIGHT:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB440:
    MOVEF_F 70.0 VMM_12
  else419_2:
  endif419:
    CALL MOTOR.RESETCOUNT 'BC'
    DATAF tmpf442
    DATA8 flag442
    DIVF VMM_12 194.68 tmpf442
    CP_EQF 0.0 194.68 flag442
    SELECTF flag442 0.0 tmpf442 F.0

    MULF F.0 360.0 VL_12
  while444:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile444
  whilebody444:
    WRITE32 ENDSUB_LINE3:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB446:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody444
  endwhile444:
  while448:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile448
  whilebody448:
    WRITE32 ENDSUB_LINE3:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB450:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody448
  endwhile448:
    WRITE32 ENDSUB_RIGHT:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB452:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_12
    DATAF tmpf454
    DATA8 flag454
    DIVF VMM_12 194.68 tmpf454
    CP_EQF 0.0 194.68 flag454
    SELECTF flag454 0.0 tmpf454 F.0

    MULF F.0 360.0 VL_12
  while456:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile456
  whilebody456:
    WRITE32 ENDSUB_LINE3:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB458:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody456
  endwhile456:
    WRITE32 ENDSUB_AROUND:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB460:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 150.0 VMM_12
    DATAF tmpf462
    DATA8 flag462
    DIVF VMM_12 194.68 tmpf462
    CP_EQF 0.0 194.68 flag462
    SELECTF flag462 0.0 tmpf462 F.0

    MULF F.0 360.0 VL_12
  while464:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile464
  whilebody464:
    WRITE32 ENDSUB_LINE3:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB466:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody464
  endwhile464:
  while468:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile468
  whilebody468:
    WRITE32 ENDSUB_LINE3:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB470:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody468
  endwhile468:
RETSUB_P3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_P3_2:
SUB_TH_UP:
    CALL MOTOR.SCHEDULE 'AD' -50.0 0.0 130.0 0.0 'true' 

	DATA8 layer472
	DATA8 nos472
	DATA8 busy472
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer472 nos472
	JR_EQ8 0 nos472 motornotbusy472
  motorwaiting472:
	OUTPUT_TEST layer472 nos472 busy472
	JR_EQ8 busy472 0 motornotbusy472
	SLEEP
	JR motorwaiting472
  motornotbusy472:
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_TH_DOWN:
    CALL MOTOR.STARTPOWER 'AD' 50.0
    DATA32 milliseconds475
	MOVEF_32 600.0 milliseconds475
	DATA32 timer475
	TIMER_WAIT milliseconds475 timer475
	TIMER_READY timer475
  while476:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile476
  whilebody476:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody476
  endwhile476:
    CALL MOTOR.STARTPOWER 'AD' 10.0
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
