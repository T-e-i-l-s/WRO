DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VK21_M
DATAF VV21_M
DATAF VB1_M
DATAF VW1_M
DATAF VB2_M
DATAF VW2_M
DATAF VRED_M
DATAF VMM_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VV_M
DATAF VK_M
DATAF VDIS_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VRGB_M
DATAF VCOL_M
DATAF VSP_M
DATAF VI_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAS VMOTOR_7 252
DATAF VSPEED_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAF VO_9
DATAF VMM_9
DATAF VL_9
DATAF VO_10
DATAF VMM_10
DATAF VL_10
DATAF VO_11
DATAF VMM_11
DATAF VL_11
DATAF VO_12
DATAF VMM_12
DATAF VL_12
DATAF VO_13
DATAF VMM_13
DATAF VL_13
DATAF VO_14
DATAF VMM_14
DATAF VL_14
DATAF VO_15
DATAF VMM_15
DATAF VL_15
DATAF VO_16
DATAF VMM_16
DATAF VL_16
DATA32 RUNCOUNTER_TH_DOWN
DATA32 RUNCOUNTER_TH_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VSP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    MOVE32_32 0 RUNCOUNTER_TH_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_UP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_UP 1
    CALL GETANDINC32 RUNCOUNTER_TH_UP -1 RUNCOUNTER_TH_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
subcall PROGRAM_TH_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1039
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch1039:
    JR_NEQ32 SUBPROGRAM 1 dispatch1040
    WRITE32 ENDSUB_TH_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_UP
  dispatch1040:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VSP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    STRINGS DUPLICATE '' VMOTOR_7
    MOVEF_F 0.0 VSPEED_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    MOVEF_F 0.0 VO_9
    MOVEF_F 0.0 VMM_9
    MOVEF_F 0.0 VL_9
    MOVEF_F 0.0 VO_10
    MOVEF_F 0.0 VMM_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VO_11
    MOVEF_F 0.0 VMM_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VO_12
    MOVEF_F 0.0 VMM_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VO_13
    MOVEF_F 0.0 VMM_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VO_14
    MOVEF_F 0.0 VMM_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VO_15
    MOVEF_F 0.0 VMM_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VO_16
    MOVEF_F 0.0 VMM_16
    MOVEF_F 0.0 VL_16
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 1.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 3.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 2.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 3.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.4 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.35 VK2_M
    MOVEF_F 50.0 VV2_M
    MOVEF_F 0.55 VK3_M
    MOVEF_F 20.0 VV3_M
    MOVEF_F 1.3 VK21_M
    MOVEF_F 30.0 VV21_M
    MOVEF_F 1.0 VB1_M
    MOVEF_F 3.0 VW1_M
    MOVEF_F 2.0 VB2_M
    MOVEF_F 4.0 VW2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 5.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB561:
    MOVEF_F 88.0 VGRAD_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB562:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB563:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf565
    DATA8 flag565
    DIVF VMM_M 194.68 tmpf565
    CP_EQF 0.0 194.68 flag565
    SELECTF flag565 0.0 tmpf565 F.0

    MULF F.0 360.0 VL_M
  while567:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile567
  whilebody567:
    WRITE32 ENDSUB_LINE21:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB569:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody567
  endwhile567:
    MOVEF_F 1.0 VI_M
  for571:
    JR_GTF VI_M 4.0 endfor571
  forbody571:
    WRITE32 ENDSUB_COL:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB572:
    JR_NEQF VCOL_M 1.0 else573_1
    MOVEF_F VI_M VB1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif573
  else573_1:
    JR_NEQF VCOL_M 6.0 else573_2
    MOVEF_F VI_M VW1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else573_2:
  endif573:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf577
    DATA8 flag577
    DIVF VMM_M 194.68 tmpf577
    CP_EQF 0.0 194.68 flag577
    SELECTF flag577 0.0 tmpf577 F.0

    MULF F.0 360.0 VL_M
  while579:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile579
  whilebody579:
    WRITE32 ENDSUB_LINE21:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB581:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody579
  endwhile579:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody571
  endfor571:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 60.0 VMM_M
    DATAF tmpf585
    DATA8 flag585
    DIVF VMM_M 194.68 tmpf585
    CP_EQF 0.0 194.68 flag585
    SELECTF flag585 0.0 tmpf585 F.0

    MULF F.0 360.0 VL_M
  while587:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile587
  whilebody587:
    WRITE32 ENDSUB_LINE21:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB589:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody587
  endwhile587:
    MOVEF_F 1.0 VI_M
  for591:
    JR_GTF VI_M 4.0 endfor591
  forbody591:
    WRITE32 ENDSUB_COL:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB592:
    JR_NEQF VCOL_M 1.0 else593_1
    MOVEF_F VI_M VB2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif593
  else593_1:
    JR_NEQF VCOL_M 6.0 else593_2
    MOVEF_F VI_M VW2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else593_2:
  endif593:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf597
    DATA8 flag597
    DIVF VMM_M 194.68 tmpf597
    CP_EQF 0.0 194.68 flag597
    SELECTF flag597 0.0 tmpf597 F.0

    MULF F.0 360.0 VL_M
  while599:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile599
  whilebody599:
    WRITE32 ENDSUB_LINE21:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB601:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody599
  endwhile599:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody591
  endfor591:
    CALL MOTOR.STOP 'BC' 'true'
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    MOVEF_F 15.0 VV21_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf615
    DATA8 flag615
    DIVF VMM_M 194.68 tmpf615
    CP_EQF 0.0 194.68 flag615
    SELECTF flag615 0.0 tmpf615 F.0

    MULF F.0 360.0 VL_M
  while617:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile617
  whilebody617:
    WRITE32 ENDSUB_LINE21:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB619:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody617
  endwhile617:
    MOVEF_F 30.0 VV21_M
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB621:
    MOVEF_F 35.0 VGRAD_4
    MOVEF_F 30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB622:
    MOVEF_F 35.0 VGRAD_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB623:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 70.0 VMM_M
    DATAF tmpf625
    DATA8 flag625
    DIVF VMM_M 194.68 tmpf625
    CP_EQF 0.0 194.68 flag625
    SELECTF flag625 0.0 tmpf625 F.0

    MULF F.0 360.0 VL_M
  while627:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile627
  whilebody627:
    WRITE32 ENDSUB_LINE3:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB629:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody627
  endwhile627:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer632
	DATA8 no632
	DATA8 mode8632
	
	MOVEF_8 3.0 no632
	SUB8 no632 1 no632
	DIV8 no632 4 layer632
	MATH MOD8 no632 4 no632

	MOVEF_8 2.0 mode8632
	
	INPUT_DEVICE READY_RAW layer632 no632 0 mode8632 0
  while633:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile633
  whilebody633:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody633
  endwhile633:
    DATA8 layer645
	DATA8 no645
	DATA8 mode8645
	
	MOVEF_8 3.0 no645
	SUB8 no645 1 no645
	DIV8 no645 4 layer645
	MATH MOD8 no645 4 no645

	MOVEF_8 0.0 mode8645
	
	INPUT_DEVICE READY_RAW layer645 no645 0 mode8645 0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB646:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB647:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB648:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB649:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB650:
    CALL MOTOR.RESETCOUNT 'BC'
  while652:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile652
  whilebody652:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF -50.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody652
  endwhile652:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB664:
    WRITE32 ENDSUB_RIGHT:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB665:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf667
    DATA8 flag667
    DIVF VMM_M 194.68 tmpf667
    CP_EQF 0.0 194.68 flag667
    SELECTF flag667 0.0 tmpf667 F.0

    MULF F.0 360.0 VL_M
  while669:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile669
  whilebody669:
    WRITE32 ENDSUB_LINE3:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB671:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody669
  endwhile669:
    MOVEF_F 800.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB673:
    WRITE32 ENDSUB_HSV:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB674:
    JR_LTEQF VRGB_M 30.0 else675_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else675_1:
  endif675:
    MOVEF_F 500.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB677:
    WRITE32 ENDSUB_HSV:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB678:
    JR_LTEQF VRGB_M 30.0 else679_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else679_1:
  endif679:
    MOVEF_F 350.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB681:
  while682:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile682
  whilebody682:
    WRITE32 ENDSUB_LINE3:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB684:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody682
  endwhile682:
    WRITE32 ENDSUB_RIGHT:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB686:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB687:
  while688:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile688
  whilebody688:
    WRITE32 ENDSUB_LINE2:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB690:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody688
  endwhile688:
    WRITE32 ENDSUB_RIGHT:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB692:
    MOVEF_F 400.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB693:
  while694:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile694
  whilebody694:
    WRITE32 ENDSUB_LINE3:CALLSUB696 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB696:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody694
  endwhile694:
    JR_NEQF VW1_M 3.0 else698_1
    MOVEF_F 1.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB699 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB699:
  else698_1:
  endif698:
    JR_NEQF VB1_M 2.0 else700_1
    MOVEF_F 1.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB701 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB701:
  else700_1:
  endif700:
    JR_NEQF VW1_M 2.0 else702_1
    MOVEF_F 1.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB703:
  else702_1:
  endif702:
    JR_NEQF VB1_M 3.0 else704_1
    MOVEF_F 1.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB705 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB705:
  else704_1:
  endif704:
    JR_NEQF VW1_M 4.0 else706_1
    MOVEF_F 1.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB707:
  else706_1:
  endif706:
    JR_NEQF VB1_M 4.0 else708_1
    MOVEF_F 1.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB709:
  else708_1:
  endif708:
    JR_NEQF VW1_M 1.0 else710_1
    MOVEF_F 1.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB711:
  else710_1:
  endif710:
    JR_NEQF VB1_M 1.0 else712_1
    MOVEF_F 1.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB713:
  else712_1:
  endif712:
    WRITE32 ENDSUB_AROUND:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB714:
    MOVEF_F 200.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB715:
  while716:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile716
  whilebody716:
    WRITE32 ENDSUB_LINE2:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB718:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody716
  endwhile716:
    WRITE32 ENDSUB_LEFT:CALLSUB720 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB720:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB721 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB721:
  while722:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile722
  whilebody722:
    WRITE32 ENDSUB_LINE3:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB724:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody722
  endwhile722:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB726:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds728
	MOVEF_32 1000.0 milliseconds728
	DATA32 timer728
	TIMER_WAIT milliseconds728 timer728
	TIMER_READY timer728
    MOVEF_F 140.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB729 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB729:
    MOVEF_F 92.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB730 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB730:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB731:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer733
	DATA8 no733
	DATA8 mode8733
	
	MOVEF_8 2.0 no733
	SUB8 no733 1 no733
	DIV8 no733 4 layer733
	MATH MOD8 no733 4 no733

	MOVEF_8 2.0 mode8733
	
	INPUT_DEVICE READY_RAW layer733 no733 0 mode8733 0
    DATA8 layer734
	DATA8 no734
	DATA8 mode8734
	
	MOVEF_8 3.0 no734
	SUB8 no734 1 no734
	DIV8 no734 4 layer734
	MATH MOD8 no734 4 no734

	MOVEF_8 2.0 mode8734
	
	INPUT_DEVICE READY_RAW layer734 no734 0 mode8734 0
  while735:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or736
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile735
  or736:
  whilebody735:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody735
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody735
  endwhile735:
    DATA8 layer741
	DATA8 no741
	DATA8 mode8741
	
	MOVEF_8 2.0 no741
	SUB8 no741 1 no741
	DIV8 no741 4 layer741
	MATH MOD8 no741 4 no741

	MOVEF_8 0.0 mode8741
	
	INPUT_DEVICE READY_RAW layer741 no741 0 mode8741 0
    DATA8 layer742
	DATA8 no742
	DATA8 mode8742
	
	MOVEF_8 3.0 no742
	SUB8 no742 1 no742
	DIV8 no742 4 layer742
	MATH MOD8 no742 4 no742

	MOVEF_8 0.0 mode8742
	
	INPUT_DEVICE READY_RAW layer742 no742 0 mode8742 0
  while743:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile743
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile743
  whilebody743:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and746
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody743
  and746:
  endwhile743:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB749:
    CALL MOTOR.START 'AD' 20.0
    DATA32 milliseconds751
	MOVEF_32 150.0 milliseconds751
	DATA32 timer751
	TIMER_WAIT milliseconds751 timer751
	TIMER_READY timer751
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB752:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB755:
    DATA32 tmp756
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp756
    JR_NEQ32 0 tmp756 alreadylaunched756
    OBJECT_START TTH_DOWN
  alreadylaunched756:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer758
	DATA8 no758
	DATA8 mode8758
	
	MOVEF_8 2.0 no758
	SUB8 no758 1 no758
	DIV8 no758 4 layer758
	MATH MOD8 no758 4 no758

	MOVEF_8 2.0 mode8758
	
	INPUT_DEVICE READY_RAW layer758 no758 0 mode8758 0
    DATA8 layer759
	DATA8 no759
	DATA8 mode8759
	
	MOVEF_8 3.0 no759
	SUB8 no759 1 no759
	DIV8 no759 4 layer759
	MATH MOD8 no759 4 no759

	MOVEF_8 2.0 mode8759
	
	INPUT_DEVICE READY_RAW layer759 no759 0 mode8759 0
  while760:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or761
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile760
  or761:
  whilebody760:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody760
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody760
  endwhile760:
    DATA8 layer766
	DATA8 no766
	DATA8 mode8766
	
	MOVEF_8 2.0 no766
	SUB8 no766 1 no766
	DIV8 no766 4 layer766
	MATH MOD8 no766 4 no766

	MOVEF_8 0.0 mode8766
	
	INPUT_DEVICE READY_RAW layer766 no766 0 mode8766 0
    DATA8 layer767
	DATA8 no767
	DATA8 mode8767
	
	MOVEF_8 3.0 no767
	SUB8 no767 1 no767
	DIV8 no767 4 layer767
	MATH MOD8 no767 4 no767

	MOVEF_8 0.0 mode8767
	
	INPUT_DEVICE READY_RAW layer767 no767 0 mode8767 0
  while768:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile768
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile768
  whilebody768:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and771
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody768
  and771:
  endwhile768:
    WRITE32 ENDSUB_LEFT:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB774:
    DATA32 tmp775
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp775
    JR_NEQ32 0 tmp775 alreadylaunched775
    OBJECT_START TTH_UP
  alreadylaunched775:
    MOVEF_F 700.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB776 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB776:
  while777:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile777
  whilebody777:
    WRITE32 ENDSUB_LINE3:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB779:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody777
  endwhile777:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else782_1
    MOVEF_F 210.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB783 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB783:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB784 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB784:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB785 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB785:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB786 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB786:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB787:
    JR endif782
  else782_1:
    JR_NEQF VRED_M 4.0 else782_2
    MOVEF_F 120.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB788 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB788:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB789 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB789:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB790 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB790:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB791 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB791:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB792:
    JR endif782
  else782_2:
    JR_NEQF VRED_M 0.0 else782_3
    WRITE32 ENDSUB_RIGHT:CALLSUB793 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB793:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf795
    DATA8 flag795
    DIVF VMM_M 194.68 tmpf795
    CP_EQF 0.0 194.68 flag795
    SELECTF flag795 0.0 tmpf795 F.0

    MULF F.0 360.0 VL_M
  while797:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile797
  whilebody797:
    WRITE32 ENDSUB_LINE3:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB799:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody797
  endwhile797:
  while801:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or802
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile801
  or802:
  whilebody801:
    WRITE32 ENDSUB_LINE3:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB805:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody801
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody801
  endwhile801:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB808:
  while809:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or810
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile809
  or810:
  whilebody809:
    WRITE32 ENDSUB_LINE3:CALLSUB813 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB813:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody809
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody809
  endwhile809:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB816:
    WRITE32 ENDSUB_HSV:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB817:
    CALL SPEAKER.TONE 40.0 600.0 200.0
    JR_LTEQF VRGB_M 20.0 else819_1
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB820 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB820:
    MOVEF_F 2.0 VRED_M
    JR endif819
  else819_1:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB821:
    MOVEF_F 3.0 VRED_M
  else819_2:
  endif819:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB822:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB823:
    DATA32 milliseconds824
	MOVEF_32 500.0 milliseconds824
	DATA32 timer824
	TIMER_WAIT milliseconds824 timer824
	TIMER_READY timer824
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 40.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB825:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB826:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer828
	DATA8 no828
	DATA8 mode8828
	
	MOVEF_8 2.0 no828
	SUB8 no828 1 no828
	DIV8 no828 4 layer828
	MATH MOD8 no828 4 no828

	MOVEF_8 2.0 mode8828
	
	INPUT_DEVICE READY_RAW layer828 no828 0 mode8828 0
    DATA8 layer829
	DATA8 no829
	DATA8 mode8829
	
	MOVEF_8 3.0 no829
	SUB8 no829 1 no829
	DIV8 no829 4 layer829
	MATH MOD8 no829 4 no829

	MOVEF_8 2.0 mode8829
	
	INPUT_DEVICE READY_RAW layer829 no829 0 mode8829 0
  while830:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or831
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile830
  or831:
  whilebody830:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody830
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody830
  endwhile830:
    DATA8 layer836
	DATA8 no836
	DATA8 mode8836
	
	MOVEF_8 2.0 no836
	SUB8 no836 1 no836
	DIV8 no836 4 layer836
	MATH MOD8 no836 4 no836

	MOVEF_8 0.0 mode8836
	
	INPUT_DEVICE READY_RAW layer836 no836 0 mode8836 0
    DATA8 layer837
	DATA8 no837
	DATA8 mode8837
	
	MOVEF_8 3.0 no837
	SUB8 no837 1 no837
	DIV8 no837 4 layer837
	MATH MOD8 no837 4 no837

	MOVEF_8 0.0 mode8837
	
	INPUT_DEVICE READY_RAW layer837 no837 0 mode8837 0
  while838:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile838
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile838
  whilebody838:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and841
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody838
  and841:
  endwhile838:
    JR_NEQF VRED_M 2.0 else844_1
    WRITE32 ENDSUB_LEFT:CALLSUB845 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB845:
    JR endif844
  else844_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB846 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB846:
  else844_2:
  endif844:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 130.0 VMM_M
    DATAF tmpf848
    DATA8 flag848
    DIVF VMM_M 194.68 tmpf848
    CP_EQF 0.0 194.68 flag848
    SELECTF flag848 0.0 tmpf848 F.0

    MULF F.0 360.0 VL_M
  while850:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile850
  whilebody850:
    WRITE32 ENDSUB_LINE3:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB852:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody850
  endwhile850:
  while854:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or855
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile854
  or855:
  whilebody854:
    WRITE32 ENDSUB_LINE3:CALLSUB858 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB858:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody854
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody854
  endwhile854:
    WRITE32 ENDSUB_LEFT:CALLSUB861 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB861:
  else782_3:
  endif782:
    JR_EQF VRED_M 2.0 else862_1
    JR_EQF VRED_M 3.0 else862_1
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB863 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB863:
    CALL MOTOR.STARTPOWER 'BC' -30.0
    DATA8 layer865
	DATA8 no865
	DATA8 mode8865
	
	MOVEF_8 2.0 no865
	SUB8 no865 1 no865
	DIV8 no865 4 layer865
	MATH MOD8 no865 4 no865

	MOVEF_8 2.0 mode8865
	
	INPUT_DEVICE READY_RAW layer865 no865 0 mode8865 0
    DATA8 layer866
	DATA8 no866
	DATA8 mode8866
	
	MOVEF_8 3.0 no866
	SUB8 no866 1 no866
	DIV8 no866 4 layer866
	MATH MOD8 no866 4 no866

	MOVEF_8 2.0 mode8866
	
	INPUT_DEVICE READY_RAW layer866 no866 0 mode8866 0
  while867:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or868
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile867
  or868:
  whilebody867:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody867
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody867
  endwhile867:
    DATA8 layer873
	DATA8 no873
	DATA8 mode8873
	
	MOVEF_8 2.0 no873
	SUB8 no873 1 no873
	DIV8 no873 4 layer873
	MATH MOD8 no873 4 no873

	MOVEF_8 0.0 mode8873
	
	INPUT_DEVICE READY_RAW layer873 no873 0 mode8873 0
    DATA8 layer874
	DATA8 no874
	DATA8 mode8874
	
	MOVEF_8 3.0 no874
	SUB8 no874 1 no874
	DIV8 no874 4 layer874
	MATH MOD8 no874 4 no874

	MOVEF_8 0.0 mode8874
	
	INPUT_DEVICE READY_RAW layer874 no874 0 mode8874 0
  while875:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile875
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile875
  whilebody875:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and878
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody875
  and878:
  endwhile875:
    WRITE32 ENDSUB_RIGHT:CALLSUB881 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB881:
  else862_1:
  endif862:
    MOVEF_F 350.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB882 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB882:
  while883:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile883
  whilebody883:
    WRITE32 ENDSUB_LINE3:CALLSUB885 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB885:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody883
  endwhile883:
    WRITE32 ENDSUB_RIGHT:CALLSUB887 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB887:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf888
    DATA8 flag888
    DIVF VMM_M 194.68 tmpf888
    CP_EQF 0.0 194.68 flag888
    SELECTF flag888 0.0 tmpf888 F.0

    MULF F.0 360.0 VL_M
  while890:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile890
  whilebody890:
    WRITE32 ENDSUB_LINE3:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB892:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody890
  endwhile890:
  while894:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile894
  whilebody894:
    WRITE32 ENDSUB_LINE2:CALLSUB896 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB896:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody894
  endwhile894:
    JR_EQF VRED_M 1.0 or899
    JR_NEQF VRED_M 3.0 else898_1
  or899:
    MOVEF_F 310.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB900 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB900:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB901 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB901:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB902 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB902:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB903 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB903:
    JR endif898
  else898_1:
    MOVEF_F 130.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB904 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB904:
    MOVEF_F 35.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB905 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB905:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB906 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB906:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB907 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB907:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB908:
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB909 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB909:
    MOVEF_F 170.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB910 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB910:
    MOVEF_F 170.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB911 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB911:
  else898_2:
  endif898:
    DATA32 tmp912
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp912
    JR_NEQ32 0 tmp912 alreadylaunched912
    OBJECT_START TTH_DOWN
  alreadylaunched912:
    WRITE32 ENDSUB_TOLINE:CALLSUB913 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB913:
    WRITE32 ENDSUB_RIGHT:CALLSUB914 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB914:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 200.0 VMM_M
    DATAF tmpf916
    DATA8 flag916
    DIVF VMM_M 194.68 tmpf916
    CP_EQF 0.0 194.68 flag916
    SELECTF flag916 0.0 tmpf916 F.0

    MULF F.0 360.0 VL_M
  while918:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile918
  whilebody918:
    WRITE32 ENDSUB_LINE3:CALLSUB920 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB920:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody918
  endwhile918:
    WRITE32 ENDSUB_AROUND:CALLSUB922 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB922:
    MOVEF_F 80.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB923 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB923:
  while924:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile924
  whilebody924:
    WRITE32 ENDSUB_LINE2:CALLSUB926 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB926:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody924
  endwhile924:
    WRITE32 ENDSUB_LEFT:CALLSUB928 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB928:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB929 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB929:
  while930:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile930
  whilebody930:
    WRITE32 ENDSUB_LINE2:CALLSUB932 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB932:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody930
  endwhile930:
    WRITE32 ENDSUB_LEFT:CALLSUB934 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB934:
    DATA32 tmp935
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp935
    JR_NEQ32 0 tmp935 alreadylaunched935
    OBJECT_START TTH_UP
  alreadylaunched935:
    MOVEF_F 1900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB936 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB936:
    DATA32 tmp937
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp937
    JR_NEQ32 0 tmp937 alreadylaunched937
    OBJECT_START TTH_DOWN
  alreadylaunched937:
  while938:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile938
  whilebody938:
    WRITE32 ENDSUB_LINE3:CALLSUB940 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB940:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody938
  endwhile938:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB943:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf944
    DATA8 flag944
    DIVF VMM_M 194.68 tmpf944
    CP_EQF 0.0 194.68 flag944
    SELECTF flag944 0.0 tmpf944 F.0

    MULF F.0 360.0 VL_M
  while946:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile946
  whilebody946:
    WRITE32 ENDSUB_LINE3:CALLSUB948 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB948:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody946
  endwhile946:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer951
	DATA8 no951
	DATA8 mode8951
	
	MOVEF_8 3.0 no951
	SUB8 no951 1 no951
	DIV8 no951 4 layer951
	MATH MOD8 no951 4 no951

	MOVEF_8 2.0 mode8951
	
	INPUT_DEVICE READY_RAW layer951 no951 0 mode8951 0
  while952:
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 5.0 endwhile952
  whilebody952:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 5.0 whilebody952
  endwhile952:
    DATA8 layer964
	DATA8 no964
	DATA8 mode8964
	
	MOVEF_8 3.0 no964
	SUB8 no964 1 no964
	DIV8 no964 4 layer964
	MATH MOD8 no964 4 no964

	MOVEF_8 0.0 mode8964
	
	INPUT_DEVICE READY_RAW layer964 no964 0 mode8964 0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB965 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB965:
    STRINGS DUPLICATE 'AD' VMOTOR_7
    MOVEF_F 20.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB966 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB966:
    MOVEF_F 130.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB967 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB967:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB968 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB968:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB969 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB969:
  while970:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile970
  whilebody970:
    CALL MOTOR.STARTPOWER 'BC' -40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody970
  endwhile970:
    WRITE32 ENDSUB_RIGHT:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB974:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB975 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB975:
  while976:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile976
  whilebody976:
    WRITE32 ENDSUB_LINE3:CALLSUB978 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB978:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody976
  endwhile976:
    JR_NEQF VW2_M 3.0 else980_1
    MOVEF_F 2.0 VO_13
    WRITE32 ENDSUB_W3_1:CALLSUB981 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_1
CALLSUB981:
  else980_1:
  endif980:
    JR_NEQF VB2_M 2.0 else982_1
    MOVEF_F 2.0 VO_12
    WRITE32 ENDSUB_B2_1:CALLSUB983 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_1
CALLSUB983:
  else982_1:
  endif982:
    JR_NEQF VW2_M 2.0 else984_1
    MOVEF_F 2.0 VO_11
    WRITE32 ENDSUB_W2_1:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_1
CALLSUB985:
  else984_1:
  endif984:
    JR_NEQF VB2_M 3.0 else986_1
    MOVEF_F 2.0 VO_14
    WRITE32 ENDSUB_B3_1:CALLSUB987 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_1
CALLSUB987:
  else986_1:
  endif986:
    JR_NEQF VW2_M 4.0 else988_1
    MOVEF_F 2.0 VO_15
    WRITE32 ENDSUB_W4_1:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_1
CALLSUB989:
  else988_1:
  endif988:
    JR_NEQF VB2_M 4.0 else990_1
    MOVEF_F 2.0 VO_16
    WRITE32 ENDSUB_B4_1:CALLSUB991 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_1
CALLSUB991:
  else990_1:
  endif990:
    JR_NEQF VW2_M 1.0 else992_1
    MOVEF_F 2.0 VO_9
    WRITE32 ENDSUB_W1_1:CALLSUB993 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_1
CALLSUB993:
  else992_1:
  endif992:
    JR_NEQF VB2_M 1.0 else994_1
    MOVEF_F 2.0 VO_10
    WRITE32 ENDSUB_B1_1:CALLSUB995 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_1
CALLSUB995:
  else994_1:
  endif994:
    WRITE32 ENDSUB_AROUND:CALLSUB996 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB996:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB997 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB997:
  while998:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile998
  whilebody998:
    WRITE32 ENDSUB_LINE3:CALLSUB1000 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1000:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody998
  endwhile998:
    WRITE32 ENDSUB_LEFT:CALLSUB1002 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1002:
    MOVEF_F 300.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB1003 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB1003:
  while1004:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile1004
  whilebody1004:
    WRITE32 ENDSUB_LINE3:CALLSUB1006 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1006:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody1004
  endwhile1004:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1008 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1008:
    MOVEF_F 98.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1009 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1009:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1010 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1010:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB1011 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB1011:
    CALL MOTOR.STARTPOWER 'BC' 30.0
    DATA8 layer1013
	DATA8 no1013
	DATA8 mode81013
	
	MOVEF_8 2.0 no1013
	SUB8 no1013 1 no1013
	DIV8 no1013 4 layer1013
	MATH MOD8 no1013 4 no1013

	MOVEF_8 2.0 mode81013
	
	INPUT_DEVICE READY_RAW layer1013 no1013 0 mode81013 0
    DATA8 layer1014
	DATA8 no1014
	DATA8 mode81014
	
	MOVEF_8 3.0 no1014
	SUB8 no1014 1 no1014
	DIV8 no1014 4 layer1014
	MATH MOD8 no1014 4 no1014

	MOVEF_8 2.0 mode81014
	
	INPUT_DEVICE READY_RAW layer1014 no1014 0 mode81014 0
  while1015:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or1016
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile1015
  or1016:
  whilebody1015:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1015
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody1015
  endwhile1015:
    DATA8 layer1021
	DATA8 no1021
	DATA8 mode81021
	
	MOVEF_8 2.0 no1021
	SUB8 no1021 1 no1021
	DIV8 no1021 4 layer1021
	MATH MOD8 no1021 4 no1021

	MOVEF_8 0.0 mode81021
	
	INPUT_DEVICE READY_RAW layer1021 no1021 0 mode81021 0
    DATA8 layer1022
	DATA8 no1022
	DATA8 mode81022
	
	MOVEF_8 3.0 no1022
	SUB8 no1022 1 no1022
	DIV8 no1022 4 layer1022
	MATH MOD8 no1022 4 no1022

	MOVEF_8 0.0 mode81022
	
	INPUT_DEVICE READY_RAW layer1022 no1022 0 mode81022 0
  while1023:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile1023
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile1023
  whilebody1023:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 and1026
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody1023
  and1026:
  endwhile1023:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1029:
    CALL MOTOR.START 'AD' 20.0
    DATA32 milliseconds1031
	MOVEF_32 150.0 milliseconds1031
	DATA32 timer1031
	TIMER_WAIT milliseconds1031 timer1031
	TIMER_READY timer1031
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1032 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1032:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1035 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1035:
    DATA32 tmp1036
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp1036
    JR_NEQ32 0 tmp1036 alreadylaunched1036
    OBJECT_START TTH_DOWN
  alreadylaunched1036:
    MOVEF_F 70.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB1037 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB1037:
    MOVEF_F 650.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB1038 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1038:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf10
    DATA8 flag10
    DIVF F.0 F.1 tmpf10
    CP_EQF 0.0 F.1 flag10
    SELECTF flag10 0.0 tmpf10 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf15
    DATA8 flag15
    DIVF F.0 F.1 tmpf15
    CP_EQF 0.0 F.1 flag15
    SELECTF flag15 0.0 tmpf15 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB25 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB25:
    WRITE32 ENDSUB_SEN2:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB26:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB34:
    WRITE32 ENDSUB_SEN2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB35:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LINE21:
    WRITE32 ENDSUB_SEN2:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB43:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 30.0 VU_M
    MULF VU_M VK21_M F.1
    ADDF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK21_M F.1
    SUBF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE21:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE21:
SUB_LINE_TOMM:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while53:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile53
  whilebody53:
    WRITE32 ENDSUB_LINE3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB55:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody53
  endwhile53:
    MOVEF_F 20.0 VV_M
    MOVEF_F 0.55 VK_M
    SUBF VMM_M 50.0 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 194.68 tmpf58
    CP_EQF 0.0 194.68 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while61:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_GTEQF F.0 VL_M endwhile61
  whilebody61:
    WRITE32 ENDSUB_SEN1:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB66:
    WRITE32 ENDSUB_SEN2:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB67:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf78
    DATA8 flag78
    DIVF F.0 2.0 tmpf78
    CP_EQF 0.0 2.0 flag78
    SELECTF flag78 0.0 tmpf78 VDIS_M

    DATAF tmpf79
    DATA8 flag79
    DIVF VDIS_M 360.0 tmpf79
    CP_EQF 0.0 360.0 flag79
    SELECTF flag79 0.0 tmpf79 F.0

    MULF F.0 194.68 VDIS_M
    MULF VMM_M 0.5 F.0
    JR_GTEQF VDIS_M F.0 else81_1
    JR_GTEQF VV_M 90.0 else81_1
    ADDF VV_M 0.2 VV_M
    JR endif81
  else81_1:
    MULF VMM_M 0.5 F.0
    JR_LTEQF VDIS_M F.0 else81_2
    JR_LTEQF VV_M 15.0 else81_2
    SUBF VV_M 0.3 VV_M
  else81_2:
  endif81:
    JR_GTEQF VV_M 35.0 else86_1
    MOVEF_F 0.55 VK_M
    JR endif86
  else86_1:
    JR_GTEQF VV_M 55.0 else86_2
    MOVEF_F 0.35 VK_M
    JR endif86
  else86_2:
    JR_GTEQF VV_M 100.0 else86_3
    MOVEF_F 0.4 VK_M
  else86_3:
  endif86:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf90
    DATA8 flag90
    DIVF F.1 2.0 tmpf90
    CP_EQF 0.0 2.0 flag90
    SELECTF flag90 0.0 tmpf90 F.0

    JR_LTF F.0 VL_M whilebody61
  endwhile61:
RETSUB_LINE_TOMM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_TOMM:
SUB_LEFT:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB91 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB91:
    MOVEF_F 60.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB92:
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while95:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile95
  whilebody95:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody95
  endwhile95:
  while98:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile98
  whilebody98:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody98
  endwhile98:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB102:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB103:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB104:
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while107:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile107
  whilebody107:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody107
  endwhile107:
  while110:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile110
  whilebody110:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody110
  endwhile110:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB114:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 170.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB115:
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while118:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile118
  whilebody118:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody118
  endwhile118:
  while121:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile121
  whilebody121:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB125:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while127:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf133
    DATA8 flag133
    DIVF F.1 2.0 tmpf133
    CP_EQF 0.0 2.0 flag133
    SELECTF flag133 0.0 tmpf133 F.0

    JR_GTF F.0 VL_1 endwhile127
  whilebody127:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf148
    DATA8 flag148
    DIVF F.1 2.0 tmpf148
    CP_EQF 0.0 2.0 flag148
    SELECTF flag148 0.0 tmpf148 F.0

    JR_LTEQF F.0 VL_1 whilebody127
  endwhile127:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf150
    DATA8 flag150
    DIVF VMM_2 194.68 tmpf150
    CP_EQF 0.0 194.68 flag150
    SELECTF flag150 0.0 tmpf150 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB153 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB153:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_3 F.0
    DATAF tmpf155
    DATA8 flag155
    DIVF F.0 360.0 tmpf155
    CP_EQF 0.0 360.0 flag155
    SELECTF flag155 0.0 tmpf155 VL_3

    DATAF tmpf156
    DATA8 flag156
    DIVF VL_3 200.96 tmpf156
    CP_EQF 0.0 200.96 flag156
    SELECTF flag156 0.0 tmpf156 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_3
  while160:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile160
  whilebody160:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody160
  endwhile160:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf168
    DATA8 flag168
    DIVF F.0 360.0 tmpf168
    CP_EQF 0.0 360.0 flag168
    SELECTF flag168 0.0 tmpf168 VL_4

    DATAF tmpf169
    DATA8 flag169
    DIVF VL_4 200.96 tmpf169
    CP_EQF 0.0 200.96 flag169
    SELECTF flag169 0.0 tmpf169 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_4
  while173:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile173
  whilebody173:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody173
  endwhile173:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf181
    DATA8 flag181
    DIVF F.0 360.0 tmpf181
    CP_EQF 0.0 360.0 flag181
    SELECTF flag181 0.0 tmpf181 VL_5

    DATAF tmpf182
    DATA8 flag182
    DIVF VL_5 200.96 tmpf182
    CP_EQF 0.0 200.96 flag182
    SELECTF flag182 0.0 tmpf182 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -50.0
    CALL MOTOR.STARTPOWER 'C' 50.0
  while187:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf193
    DATA8 flag193
    DIVF F.1 2.0 tmpf193
    CP_EQF 0.0 2.0 flag193
    SELECTF flag193 0.0 tmpf193 F.0

    DATAF tmpf194
    DATA8 flag194
    DIVF VL_5 2.0 tmpf194
    CP_EQF 0.0 2.0 flag194
    SELECTF flag194 0.0 tmpf194 F.1

    JR_GTF F.0 F.1 endwhile187
  whilebody187:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf200
    DATA8 flag200
    DIVF F.1 2.0 tmpf200
    CP_EQF 0.0 2.0 flag200
    SELECTF flag200 0.0 tmpf200 F.0

    DATAF tmpf201
    DATA8 flag201
    DIVF VL_5 2.0 tmpf201
    CP_EQF 0.0 2.0 flag201
    SELECTF flag201 0.0 tmpf201 F.1

    JR_LTEQF F.0 F.1 whilebody187
  endwhile187:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf204
    DATA8 flag204
    DIVF F.0 360.0 tmpf204
    CP_EQF 0.0 360.0 flag204
    SELECTF flag204 0.0 tmpf204 VL_6

    DATAF tmpf205
    DATA8 flag205
    DIVF VL_6 200.96 tmpf205
    CP_EQF 0.0 200.96 flag205
    SELECTF flag205 0.0 tmpf205 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 50.0
    CALL MOTOR.STARTPOWER 'C' -50.0
  while210:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf216
    DATA8 flag216
    DIVF F.1 2.0 tmpf216
    CP_EQF 0.0 2.0 flag216
    SELECTF flag216 0.0 tmpf216 F.0

    DATAF tmpf217
    DATA8 flag217
    DIVF VL_6 2.0 tmpf217
    CP_EQF 0.0 2.0 flag217
    SELECTF flag217 0.0 tmpf217 F.1

    JR_GTF F.0 F.1 endwhile210
  whilebody210:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf223
    DATA8 flag223
    DIVF F.1 2.0 tmpf223
    CP_EQF 0.0 2.0 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    DATAF tmpf224
    DATA8 flag224
    DIVF VL_6 2.0 tmpf224
    CP_EQF 0.0 2.0 flag224
    SELECTF flag224 0.0 tmpf224 F.1

    JR_LTEQF F.0 F.1 whilebody210
  endwhile210:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    SUBF 0.0 VSPEED_7 F.0
    CALL MOTOR.SCHEDULE VMOTOR_7 F.0 0.0 130.0 0.0 'true' 

	DATA8 layer231
	DATA8 nos231
	DATA8 busy231
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_7 layer231 nos231
	JR_EQ8 0 nos231 motornotbusy231
  motorwaiting231:
	OUTPUT_TEST layer231 nos231 busy231
	JR_EQ8 busy231 0 motornotbusy231
	SLEEP
	JR motorwaiting231
  motornotbusy231:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_8 VSPEED_8
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds237
	MOVEF_32 600.0 milliseconds237
	DATA32 timer237
	TIMER_WAIT milliseconds237 timer237
	TIMER_READY timer237
    CALL MOTOR.STOP 'BC' 'true'
  while239:
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_LTEQF F.0 F.1 endwhile239
  whilebody239:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_8 F.0
    MULF VSPEED_8 0.2 F.1
    JR_GTF F.0 F.1 whilebody239
  endwhile239:
    CALL MOTOR.STARTPOWER VMOTOR_8 10.0
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    MOVEF_F VSRED_M VSRED_M
    MOVEF_F VSGREEN_M VSGREEN_M
    MOVEF_F VSBLUE_M VSBLUE_M
    JR_LTEQF VSRED_M VSGREEN_M else254_1
    JR_LTEQF VSRED_M VSBLUE_M else254_1
    MOVEF_F VSRED_M VMAX_M
    JR endif254
  else254_1:
    JR_LTEQF VSGREEN_M VSRED_M else254_2
    JR_LTEQF VSGREEN_M VSBLUE_M else254_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif254
  else254_2:
    JR_LTEQF VSBLUE_M VSRED_M else254_3
    JR_LTEQF VSBLUE_M VSGREEN_M else254_3
    MOVEF_F VSBLUE_M VMAX_M
  else254_3:
  endif254:
    JR_GTEQF VSRED_M VSGREEN_M else255_1
    JR_GTEQF VSRED_M VSBLUE_M else255_1
    MOVEF_F VSRED_M VMIN_M
    JR endif255
  else255_1:
    JR_GTEQF VSGREEN_M VSRED_M else255_2
    JR_GTEQF VSGREEN_M VSBLUE_M else255_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif255
  else255_2:
    JR_GTEQF VSBLUE_M VSRED_M else255_3
    JR_GTEQF VSBLUE_M VSGREEN_M else255_3
    MOVEF_F VSBLUE_M VMIN_M
  else255_3:
  endif255:
    JR_NEQF VMAX_M VMIN_M else256_1
    MOVEF_F 0.0 VH_M
    JR endif256
  else256_1:
    JR_NEQF VSRED_M VMAX_M else257_1
    JR_LTF VSGREEN_M VSBLUE_M else258_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf262
    DATA8 flag262
    DIVF F.0 F.1 tmpf262
    CP_EQF 0.0 F.1 flag262
    SELECTF flag262 0.0 tmpf262 VH_M

    JR endif258
  else258_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf266
    DATA8 flag266
    DIVF F.1 F.2 tmpf266
    CP_EQF 0.0 F.2 flag266
    SELECTF flag266 0.0 tmpf266 F.0

    ADDF F.0 360.0 VH_M
  else258_2:
  endif258:
    JR endif257
  else257_1:
    JR_NEQF VMAX_M VSGREEN_M else268_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf272
    DATA8 flag272
    DIVF F.1 F.2 tmpf272
    CP_EQF 0.0 F.2 flag272
    SELECTF flag272 0.0 tmpf272 F.0

    ADDF F.0 120.0 VH_M
    JR endif268
  else268_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf277
    DATA8 flag277
    DIVF F.1 F.2 tmpf277
    CP_EQF 0.0 F.2 flag277
    SELECTF flag277 0.0 tmpf277 F.0

    ADDF F.0 240.0 VH_M
  else268_2:
  endif268:
  else257_2:
  endif257:
  else256_2:
  endif256:
    JR_NEQF VMAX_M 0.0 else279_1
    MOVEF_F 0.0 VS_M
    JR endif279
  else279_1:
    DATAF tmpf280
    DATA8 flag280
    DIVF VMIN_M VMAX_M tmpf280
    CP_EQF 0.0 VMAX_M flag280
    SELECTF flag280 0.0 tmpf280 F.0

    SUBF 1.0 F.0 VS_M
  else279_2:
  endif279:
    MOVEF_F VMAX_M VV_M
    ADDF VSRED_M VSGREEN_M F.0
    ADDF F.0 VSBLUE_M VRGB_M
    JR_LTEQF VRGB_M 15.0 else284_1
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VRGB_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    JR_LTEQF VRGB_M 50.0 else288_1
    MOVEF_F 6.0 VCOL_M
    JR endif288
  else288_1:
    MOVEF_F 1.0 VCOL_M
  else288_2:
  endif288:
    JR endif284
  else284_1:
    MOVEF_F 0.0 VCOL_M
  else284_2:
  endif284:
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
    MULF VS_M 100.0 VS_M
    ADDF VSRED_M VSGREEN_M F.0
    ADDF F.0 VSBLUE_M VRGB_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VRGB_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB295:
    JR_LTEQF VRGB_M 90.0 else296_1
    MOVEF_F 6.0 VCOL_M
    JR endif296
  else296_1:
    JR_LTEQF VRGB_M 25.0 else296_2
    MOVEF_F 1.0 VCOL_M
    JR endif296
  else296_2:
    MOVEF_F 0.0 VCOL_M
  else296_3:
  endif296:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_TOLINE:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F -30.0 VSP_M
    DATA8 layer298
	DATA8 no298
	DATA8 mode8298
	
	MOVEF_8 2.0 no298
	SUB8 no298 1 no298
	DIV8 no298 4 layer298
	MATH MOD8 no298 4 no298

	MOVEF_8 2.0 mode8298
	
	INPUT_DEVICE READY_RAW layer298 no298 0 mode8298 0
    DATA8 layer299
	DATA8 no299
	DATA8 mode8299
	
	MOVEF_8 3.0 no299
	SUB8 no299 1 no299
	DIV8 no299 4 layer299
	MATH MOD8 no299 4 no299

	MOVEF_8 2.0 mode8299
	
	INPUT_DEVICE READY_RAW layer299 no299 0 mode8299 0
  while300:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or301
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile300
  or301:
  whilebody300:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody300
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody300
  endwhile300:
    DATA8 layer315
	DATA8 no315
	DATA8 mode8315
	
	MOVEF_8 2.0 no315
	SUB8 no315 1 no315
	DIV8 no315 4 layer315
	MATH MOD8 no315 4 no315

	MOVEF_8 0.0 mode8315
	
	INPUT_DEVICE READY_RAW layer315 no315 0 mode8315 0
    DATA8 layer316
	DATA8 no316
	DATA8 mode8316
	
	MOVEF_8 3.0 no316
	SUB8 no316 1 no316
	DIV8 no316 4 layer316
	MATH MOD8 no316 4 no316

	MOVEF_8 0.0 mode8316
	
	INPUT_DEVICE READY_RAW layer316 no316 0 mode8316 0
  while317:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile317
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile317
  whilebody317:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF VSP_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and329
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody317
  and329:
  endwhile317:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_W1_1:
    MOVEF_F 266.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB333:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB334:
    MOVEF_F 95.0 VMM_9
    JR_NEQF VO_9 1.0 else335_1
    ADDF VMM_9 40.0 VMM_9
  else335_1:
  endif335:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB337:
    MOVEF_F VMM_9 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB338:
    WRITE32 ENDSUB_TOLINE:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB339:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB340:
    WRITE32 ENDSUB_RIGHT:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB341:
    MOVEF_F 65.0 VMM_9
    DATAF tmpf342
    DATA8 flag342
    DIVF VMM_9 194.68 tmpf342
    CP_EQF 0.0 194.68 flag342
    SELECTF flag342 0.0 tmpf342 F.0

    MULF F.0 360.0 VL_9
  while344:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_9 endwhile344
  whilebody344:
    WRITE32 ENDSUB_LINE3:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB346:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_9 whilebody344
  endwhile344:
  while348:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile348
  whilebody348:
    WRITE32 ENDSUB_LINE3:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB350:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody348
  endwhile348:
RETSUB_W1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1_1:
SUB_B1_1:
    MOVEF_F 105.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB352:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB353:
    MOVEF_F 85.0 VMM_10
    JR_NEQF VO_10 1.0 else354_1
    ADDF VMM_10 40.0 VMM_10
  else354_1:
  endif354:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB356:
    MOVEF_F VMM_10 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB357:
    WRITE32 ENDSUB_TOLINE:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB358:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB359:
    WRITE32 ENDSUB_RIGHT:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB360:
    MOVEF_F 65.0 VMM_10
    DATAF tmpf361
    DATA8 flag361
    DIVF VMM_10 194.68 tmpf361
    CP_EQF 0.0 194.68 flag361
    SELECTF flag361 0.0 tmpf361 F.0

    MULF F.0 360.0 VL_10
  while363:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_10 endwhile363
  whilebody363:
    WRITE32 ENDSUB_LINE3:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB365:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_10 whilebody363
  endwhile363:
  while367:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile367
  whilebody367:
    WRITE32 ENDSUB_LINE3:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB369:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody367
  endwhile367:
RETSUB_B1_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1_1:
SUB_W2_1:
    WRITE32 ENDSUB_LEFT:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB371:
    MOVEF_F 170.0 VMM_11
    JR_NEQF VO_11 1.0 else372_1
    ADDF VMM_11 100.0 VMM_11
  else372_1:
  endif372:
    DATAF tmpf374
    DATA8 flag374
    DIVF VMM_11 194.68 tmpf374
    CP_EQF 0.0 194.68 flag374
    SELECTF flag374 0.0 tmpf374 F.0

    MULF F.0 360.0 VL_11
  while376:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile376
  whilebody376:
    WRITE32 ENDSUB_LINE3:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB378:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody376
  endwhile376:
  while380:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile380
  whilebody380:
    WRITE32 ENDSUB_LINE3:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB382:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody380
  endwhile380:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB384:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB385:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB386:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB387:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB388:
    MOVEF_F 125.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB389:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB390:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB391:
    MOVEF_F 30.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB392:
    WRITE32 ENDSUB_TOLINE:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB393:
    WRITE32 ENDSUB_RIGHT:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB394:
    MOVEF_F 65.0 VMM_11
    DATAF tmpf395
    DATA8 flag395
    DIVF VMM_11 194.68 tmpf395
    CP_EQF 0.0 194.68 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    MULF F.0 360.0 VL_11
  while397:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_11 endwhile397
  whilebody397:
    WRITE32 ENDSUB_LINE3:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB399:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_11 whilebody397
  endwhile397:
  while401:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile401
  whilebody401:
    WRITE32 ENDSUB_LINE3:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB403:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody401
  endwhile401:
RETSUB_W2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2_1:
SUB_B2_1:
    MOVEF_F 107.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB405:
    MOVEF_F 90.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB406:
    MOVEF_F 220.0 VMM_12
    JR_NEQF VO_12 1.0 else407_1
    ADDF VMM_12 40.0 VMM_12
  else407_1:
  endif407:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB409:
    MOVEF_F VMM_12 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB410:
    WRITE32 ENDSUB_TOLINE:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB411:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB412:
    WRITE32 ENDSUB_RIGHT:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB413:
    MOVEF_F 60.0 VMM_12
    DATAF tmpf414
    DATA8 flag414
    DIVF VMM_12 194.68 tmpf414
    CP_EQF 0.0 194.68 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    MULF F.0 360.0 VL_12
  while416:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_12 endwhile416
  whilebody416:
    WRITE32 ENDSUB_LINE3:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB418:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_12 whilebody416
  endwhile416:
  while420:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile420
  whilebody420:
    WRITE32 ENDSUB_LINE3:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB422:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody420
  endwhile420:
RETSUB_B2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2_1:
SUB_W3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB424:
    MOVEF_F 170.0 VMM_13
    JR_NEQF VO_13 1.0 else425_1
    ADDF VMM_13 100.0 VMM_13
  else425_1:
  endif425:
    DATAF tmpf427
    DATA8 flag427
    DIVF VMM_13 194.68 tmpf427
    CP_EQF 0.0 194.68 flag427
    SELECTF flag427 0.0 tmpf427 F.0

    MULF F.0 360.0 VL_13
  while429:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile429
  whilebody429:
    WRITE32 ENDSUB_LINE3:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB431:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody429
  endwhile429:
  while433:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile433
  whilebody433:
    WRITE32 ENDSUB_LINE3:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB435:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody433
  endwhile433:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB437:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB438:
    MOVEF_F 340.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB439:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB440:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB441:
    MOVEF_F 195.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB442:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB443:
    MOVEF_F 550.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB444:
    MOVEF_F 100.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB445:
    WRITE32 ENDSUB_TOLINE:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB446:
    WRITE32 ENDSUB_RIGHT:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB447:
    MOVEF_F 65.0 VMM_13
    DATAF tmpf448
    DATA8 flag448
    DIVF VMM_13 194.68 tmpf448
    CP_EQF 0.0 194.68 flag448
    SELECTF flag448 0.0 tmpf448 F.0

    MULF F.0 360.0 VL_13
  while450:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_13 endwhile450
  whilebody450:
    WRITE32 ENDSUB_LINE3:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB452:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_13 whilebody450
  endwhile450:
  while454:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile454
  whilebody454:
    WRITE32 ENDSUB_LINE3:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB456:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody454
  endwhile454:
RETSUB_W3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W3_1:
SUB_B3_1:
    WRITE32 ENDSUB_LEFT:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB458:
    MOVEF_F 200.0 VMM_14
    JR_NEQF VO_14 1.0 else459_1
    ADDF VMM_14 70.0 VMM_14
  else459_1:
  endif459:
    DATAF tmpf461
    DATA8 flag461
    DIVF VMM_14 194.68 tmpf461
    CP_EQF 0.0 194.68 flag461
    SELECTF flag461 0.0 tmpf461 F.0

    MULF F.0 360.0 VL_14
  while463:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile463
  whilebody463:
    WRITE32 ENDSUB_LINE3:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB465:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody463
  endwhile463:
  while467:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile467
  whilebody467:
    WRITE32 ENDSUB_LINE3:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB469:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody467
  endwhile467:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB471:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB472:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB473:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB474:
    MOVEF_F 15.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB475:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB476:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB477:
    MOVEF_F 75.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB478:
    WRITE32 ENDSUB_TOLINE:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB479:
    WRITE32 ENDSUB_RIGHT:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB480:
    MOVEF_F 65.0 VMM_14
    DATAF tmpf481
    DATA8 flag481
    DIVF VMM_14 194.68 tmpf481
    CP_EQF 0.0 194.68 flag481
    SELECTF flag481 0.0 tmpf481 F.0

    MULF F.0 360.0 VL_14
  while483:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_14 endwhile483
  whilebody483:
    WRITE32 ENDSUB_LINE3:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB485:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_14 whilebody483
  endwhile483:
  while487:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile487
  whilebody487:
    WRITE32 ENDSUB_LINE3:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB489:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody487
  endwhile487:
RETSUB_B3_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B3_1:
SUB_W4_1:
    MOVEF_F 215.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB491:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB492:
    MOVEF_F 85.0 VMM_15
    JR_NEQF VO_15 1.0 else493_1
    ADDF VMM_15 40.0 VMM_15
  else493_1:
  endif493:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB495:
    MOVEF_F VMM_15 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB496:
    MOVEF_F 130.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB497:
    STRINGS DUPLICATE 'D' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB498:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB499:
    MOVEF_F 40.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB500:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB501:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB502:
    CALL MOTOR.STARTPOWER 'BC' -30.0
  while504:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or505
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile504
  or505:
  whilebody504:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody504
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody504
  endwhile504:
    WRITE32 ENDSUB_RIGHT:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB510:
    MOVEF_F 65.0 VMM_15
    DATAF tmpf511
    DATA8 flag511
    DIVF VMM_15 194.68 tmpf511
    CP_EQF 0.0 194.68 flag511
    SELECTF flag511 0.0 tmpf511 F.0

    MULF F.0 360.0 VL_15
  while513:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_15 endwhile513
  whilebody513:
    WRITE32 ENDSUB_LINE3:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB515:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_15 whilebody513
  endwhile513:
  while517:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile517
  whilebody517:
    WRITE32 ENDSUB_LINE3:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB519:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody517
  endwhile517:
RETSUB_W4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W4_1:
SUB_B4_1:
    MOVEF_F 390.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB521:
    MOVEF_F 93.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB522:
    MOVEF_F 85.0 VMM_16
    JR_NEQF VO_16 1.0 else523_1
    ADDF VMM_16 45.0 VMM_16
  else523_1:
  endif523:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_DOWN_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB525:
    MOVEF_F VMM_16 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB526:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB527:
    MOVEF_F 110.0 VGRAD_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_LEFT1_2:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB528:
    STRINGS DUPLICATE 'A' VMOTOR_7
    MOVEF_F 50.0 VSPEED_7
    WRITE32 ENDSUB_UP_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB529:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB530:
    MOVEF_F 15.0 VGRAD_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB531:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB532:
    MOVEF_F 95.0 VGRAD_5
    WRITE32 ENDSUB_LEFT2_1:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB533:
    CALL MOTOR.STARTPOWER 'BC' -30.0
  while535:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or536
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile535
  or536:
  whilebody535:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody535
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody535
  endwhile535:
    WRITE32 ENDSUB_RIGHT:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB541:
    MOVEF_F 65.0 VMM_16
    DATAF tmpf542
    DATA8 flag542
    DIVF VMM_16 194.68 tmpf542
    CP_EQF 0.0 194.68 flag542
    SELECTF flag542 0.0 tmpf542 F.0

    MULF F.0 360.0 VL_16
  while544:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_16 endwhile544
  whilebody544:
    WRITE32 ENDSUB_LINE3:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB546:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_16 whilebody544
  endwhile544:
  while548:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile548
  whilebody548:
    WRITE32 ENDSUB_LINE3:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB550:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody548
  endwhile548:
RETSUB_B4_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B4_1:
SUB_TH_UP:
    CALL MOTOR.SCHEDULE 'AD' -50.0 0.0 130.0 0.0 'true' 

	DATA8 layer552
	DATA8 nos552
	DATA8 busy552
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer552 nos552
	JR_EQ8 0 nos552 motornotbusy552
  motorwaiting552:
	OUTPUT_TEST layer552 nos552 busy552
	JR_EQ8 busy552 0 motornotbusy552
	SLEEP
	JR motorwaiting552
  motornotbusy552:
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_TH_DOWN:
    CALL MOTOR.STARTPOWER 'AD' 50.0
    DATA32 milliseconds555
	MOVEF_32 600.0 milliseconds555
	DATA32 timer555
	TIMER_WAIT milliseconds555 timer555
	TIMER_READY timer555
  while556:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile556
  whilebody556:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody556
  endwhile556:
    CALL MOTOR.STARTPOWER 'AD' 10.0
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
