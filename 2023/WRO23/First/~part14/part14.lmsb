DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK1_M
DATAF VV1_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
DATAF VK21_M
DATAF VV21_M
DATAF VK31_M
DATAF VV31_M
DATAF VRD_M
DATAF VBLACK_M
DATAF VBC1_M
DATAF VWC1_M
DATAF VBC2_M
DATAF VWC2_M
DATAF VRED_M
DATAF VMM_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VV_M
DATAF VK_M
DATAF VDIS_M
DATAF VT_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAF VI_M
DATAF VN_M
DATAF VTIME_M
DATAF VSP_1
DATAF VWHITE_1
DATAF VU_1
DATAF VL_1
DATAF VL_2
DATAF VSP_2
DATAF VDIS_2
DATAF VV_2
DATAF VU_2
DATAF VMM_3
DATAF VSP_3
DATAF VL_3
DATAF VGRAD_4
DATAF VSP_4
DATAF VL_4
DATAF VGRAD_5
DATAF VSP_5
DATAF VL_5
DATAF VGRAD_6
DATAF VL_6
DATAF VGRAD_7
DATAF VL_7
DATAS VMOTOR_8 252
DATAF VSPEED_8
DATAS VMOTOR_9 252
DATAF VSPEED_9
DATAF VN_10
DATAF VI_10
DATAF VL_10
DATAF VN_11
DATAF VI_11
DATAF VL_11
DATAF VN_12
DATAF VI_12
DATAF VL_12
DATAF VN_13
DATAF VI_13
DATAF VL_13
DATAF VN_14
DATAF VI_14
DATAF VL_14
DATAF VN_15
DATAF VI_15
DATAF VL_15
DATAF VN_16
DATAF VI_16
DATAF VN_17
DATAF VI_17
DATA32 RUNCOUNTER_TH_DOWN
DATA32 RUNCOUNTER_TH_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VK31_M
    MOVEF_F 0.0 VV31_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VBC1_M
    MOVEF_F 0.0 VWC1_M
    MOVEF_F 0.0 VBC2_M
    MOVEF_F 0.0 VWC2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VWHITE_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDIS_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VMM_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VGRAD_7
    MOVEF_F 0.0 VL_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    STRINGS DUPLICATE '' VMOTOR_9
    MOVEF_F 0.0 VSPEED_9
    MOVEF_F 0.0 VN_10
    MOVEF_F 0.0 VI_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VN_11
    MOVEF_F 0.0 VI_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VN_12
    MOVEF_F 0.0 VI_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VN_13
    MOVEF_F 0.0 VI_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VN_14
    MOVEF_F 0.0 VI_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VN_15
    MOVEF_F 0.0 VI_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VN_16
    MOVEF_F 0.0 VI_16
    MOVEF_F 0.0 VN_17
    MOVEF_F 0.0 VI_17
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    MOVE32_32 0 RUNCOUNTER_TH_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_UP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_UP 1
    CALL GETANDINC32 RUNCOUNTER_TH_UP -1 RUNCOUNTER_TH_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
subcall PROGRAM_TH_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1111
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch1111:
    JR_NEQ32 SUBPROGRAM 1 dispatch1112
    WRITE32 ENDSUB_TH_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_UP
  dispatch1112:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VV1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    MOVEF_F 0.0 VK21_M
    MOVEF_F 0.0 VV21_M
    MOVEF_F 0.0 VK31_M
    MOVEF_F 0.0 VV31_M
    MOVEF_F 0.0 VRD_M
    MOVEF_F 0.0 VBLACK_M
    MOVEF_F 0.0 VBC1_M
    MOVEF_F 0.0 VWC1_M
    MOVEF_F 0.0 VBC2_M
    MOVEF_F 0.0 VWC2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VDIS_M
    MOVEF_F 0.0 VT_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VWHITE_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDIS_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VMM_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VGRAD_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VGRAD_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VGRAD_7
    MOVEF_F 0.0 VL_7
    STRINGS DUPLICATE '' VMOTOR_8
    MOVEF_F 0.0 VSPEED_8
    STRINGS DUPLICATE '' VMOTOR_9
    MOVEF_F 0.0 VSPEED_9
    MOVEF_F 0.0 VN_10
    MOVEF_F 0.0 VI_10
    MOVEF_F 0.0 VL_10
    MOVEF_F 0.0 VN_11
    MOVEF_F 0.0 VI_11
    MOVEF_F 0.0 VL_11
    MOVEF_F 0.0 VN_12
    MOVEF_F 0.0 VI_12
    MOVEF_F 0.0 VL_12
    MOVEF_F 0.0 VN_13
    MOVEF_F 0.0 VI_13
    MOVEF_F 0.0 VL_13
    MOVEF_F 0.0 VN_14
    MOVEF_F 0.0 VI_14
    MOVEF_F 0.0 VL_14
    MOVEF_F 0.0 VN_15
    MOVEF_F 0.0 VI_15
    MOVEF_F 0.0 VL_15
    MOVEF_F 0.0 VN_16
    MOVEF_F 0.0 VI_16
    MOVEF_F 0.0 VN_17
    MOVEF_F 0.0 VI_17
    TIMER_READ timeMC1
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.8 VK1_M
    MOVEF_F 75.0 VV1_M
    MOVEF_F 0.7 VK2_M
    MOVEF_F 55.0 VV2_M
    MOVEF_F 1.1 VK3_M
    MOVEF_F 30.0 VV3_M
    MOVEF_F 1.9 VK21_M
    MOVEF_F 45.0 VV21_M
    MOVEF_F 1.0 VK31_M
    MOVEF_F 20.0 VV31_M
    MOVEF_F 50.0 VRD_M
    MOVEF_F 20.0 VBLACK_M
    MOVEF_F 1.0 VBC1_M
    MOVEF_F 2.0 VWC1_M
    MOVEF_F 3.0 VBC2_M
    MOVEF_F 4.0 VWC2_M
    MOVEF_F 0.0 VRED_M
    MOVEF_F 0.0 VMM_M
    DATA32 tmp568
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp568
    JR_NEQ32 0 tmp568 alreadylaunched568
    OBJECT_START TTH_DOWN
  alreadylaunched568:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds570
	MOVEF_32 300.0 milliseconds570
	DATA32 timer570
	TIMER_WAIT milliseconds570 timer570
	TIMER_READY timer570
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB571:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F 40.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB572:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds574
	MOVEF_32 1000.0 milliseconds574
	DATA32 timer574
	TIMER_WAIT milliseconds574 timer574
	TIMER_READY timer574
    MOVEF_F 175.0 VMM_3
    MOVEF_F 35.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB575:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 70.0 VMM_M
    DATAF tmpf577
    DATA8 flag577
    DIVF VMM_M 194.68 tmpf577
    CP_EQF 0.0 194.68 flag577
    SELECTF flag577 0.0 tmpf577 F.0

    MULF F.0 360.0 VL_M
  while579:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile579
  whilebody579:
    WRITE32 ENDSUB_LINE31:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE31
CALLSUB581:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody579
  endwhile579:
    MOVEF_F 1.0 VI_M
  for583:
    JR_GTF VI_M 4.0 endfor583
  forbody583:
    WRITE32 ENDSUB_COL:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB584:
    JR_NEQF VCOL_M 1.0 else585_1
    MOVEF_F VI_M VBC1_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif585
  else585_1:
    JR_NEQF VCOL_M 6.0 else585_2
    MOVEF_F VI_M VWC1_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else585_2:
  endif585:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf589
    DATA8 flag589
    DIVF VMM_M 194.68 tmpf589
    CP_EQF 0.0 194.68 flag589
    SELECTF flag589 0.0 tmpf589 F.0

    MULF F.0 360.0 VL_M
  while591:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile591
  whilebody591:
    WRITE32 ENDSUB_LINE21:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB593:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody591
  endwhile591:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody583
  endfor583:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 70.0 VMM_M
    DATAF tmpf597
    DATA8 flag597
    DIVF VMM_M 194.68 tmpf597
    CP_EQF 0.0 194.68 flag597
    SELECTF flag597 0.0 tmpf597 F.0

    MULF F.0 360.0 VL_M
  while599:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile599
  whilebody599:
    WRITE32 ENDSUB_LINE21:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB601:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody599
  endwhile599:
    MOVEF_F 1.0 VI_M
  for603:
    JR_GTF VI_M 4.0 endfor603
  forbody603:
    WRITE32 ENDSUB_COL:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL
CALLSUB604:
    JR_NEQF VCOL_M 1.0 else605_1
    MOVEF_F VI_M VBC2_M
    CALL SPEAKER.TONE 40.0 250.0 200.0
    JR endif605
  else605_1:
    JR_NEQF VCOL_M 6.0 else605_2
    MOVEF_F VI_M VWC2_M
    CALL SPEAKER.TONE 40.0 1200.0 200.0
  else605_2:
  endif605:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf609
    DATA8 flag609
    DIVF VMM_M 194.68 tmpf609
    CP_EQF 0.0 194.68 flag609
    SELECTF flag609 0.0 tmpf609 F.0

    MULF F.0 360.0 VL_M
  while611:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile611
  whilebody611:
    WRITE32 ENDSUB_LINE21:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB613:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody611
  endwhile611:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 4.0 forbody603
  endfor603:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VBC1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VWC1_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 20.0 70.0 2.0 S.0
    STRINGS VALUE_FORMATTED VBC2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VWC2_M '%g' 99 S.0
    CALL LCD.TEXT 2.0 70.0 70.0 2.0 S.0
    MOVEF_F 15.0 VV21_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 50.0 VMM_M
    DATAF tmpf626
    DATA8 flag626
    DIVF VMM_M 194.68 tmpf626
    CP_EQF 0.0 194.68 flag626
    SELECTF flag626 0.0 tmpf626 F.0

    MULF F.0 360.0 VL_M
  while628:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile628
  whilebody628:
    WRITE32 ENDSUB_LINE21:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE21
CALLSUB630:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody628
  endwhile628:
    MOVEF_F 30.0 VV21_M
    MOVEF_F 150.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB632:
    MOVEF_F 30.0 VGRAD_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB633:
    MOVEF_F 30.0 VGRAD_4
    MOVEF_F 40.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB634:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.0 VMM_M
    DATAF tmpf636
    DATA8 flag636
    DIVF VMM_M 194.68 tmpf636
    CP_EQF 0.0 194.68 flag636
    SELECTF flag636 0.0 tmpf636 F.0

    MULF F.0 360.0 VL_M
  while638:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile638
  whilebody638:
    WRITE32 ENDSUB_LINE3:CALLSUB640 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB640:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody638
  endwhile638:
    CALL MOTOR.RESETCOUNT 'BC'
  while643:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VRD_M or644
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VRD_M endwhile643
  or644:
  whilebody643:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VRD_M whilebody643
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VRD_M whilebody643
  endwhile643:
    MOVEF_F 35.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB658:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB659:
    MOVEF_F 40.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB660:
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB661:
    MOVEF_F 150.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB662:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB663:
    WRITE32 ENDSUB_RIGHT:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB664:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 150.0 VMM_M
    DATAF tmpf666
    DATA8 flag666
    DIVF VMM_M 194.68 tmpf666
    CP_EQF 0.0 194.68 flag666
    SELECTF flag666 0.0 tmpf666 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while669:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf673
    DATA8 flag673
    DIVF F.1 2.0 tmpf673
    CP_EQF 0.0 2.0 flag673
    SELECTF flag673 0.0 tmpf673 F.0

    JR_GTEQF F.0 VL_M endwhile669
  whilebody669:
    WRITE32 ENDSUB_LINE3:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB674:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf678
    DATA8 flag678
    DIVF F.1 2.0 tmpf678
    CP_EQF 0.0 2.0 flag678
    SELECTF flag678 0.0 tmpf678 F.0

    JR_LTF F.0 VL_M whilebody669
  endwhile669:
    MOVEF_F 670.0 VMM_M
    DATAF tmpf679
    DATA8 flag679
    DIVF VMM_M 194.68 tmpf679
    CP_EQF 0.0 194.68 flag679
    SELECTF flag679 0.0 tmpf679 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while682:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf686
    DATA8 flag686
    DIVF F.1 2.0 tmpf686
    CP_EQF 0.0 2.0 flag686
    SELECTF flag686 0.0 tmpf686 F.0

    JR_GTEQF F.0 VL_M endwhile682
  whilebody682:
    WRITE32 ENDSUB_LINE1:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB687:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf691
    DATA8 flag691
    DIVF F.1 2.0 tmpf691
    CP_EQF 0.0 2.0 flag691
    SELECTF flag691 0.0 tmpf691 F.0

    JR_LTF F.0 VL_M whilebody682
  endwhile682:
    WRITE32 ENDSUB_HSV:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB692:
    JR_LTEQF VRGB_M 50.0 else693_1
    MOVEF_F 1.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else693_1:
  endif693:
  while695:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile695
  whilebody695:
    WRITE32 ENDSUB_LINE1:CALLSUB697 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB697:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody695
  endwhile695:
    MOVEF_F 20.0 VMM_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB699 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB699:
    MOVEF_F 200.0 VMM_M
    DATAF tmpf700
    DATA8 flag700
    DIVF VMM_M 194.68 tmpf700
    CP_EQF 0.0 194.68 flag700
    SELECTF flag700 0.0 tmpf700 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while703:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf707
    DATA8 flag707
    DIVF F.1 2.0 tmpf707
    CP_EQF 0.0 2.0 flag707
    SELECTF flag707 0.0 tmpf707 F.0

    JR_GTEQF F.0 VL_M endwhile703
  whilebody703:
    WRITE32 ENDSUB_LINE1:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB708:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf712
    DATA8 flag712
    DIVF F.1 2.0 tmpf712
    CP_EQF 0.0 2.0 flag712
    SELECTF flag712 0.0 tmpf712 F.0

    JR_LTF F.0 VL_M whilebody703
  endwhile703:
    WRITE32 ENDSUB_HSV:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB713:
    JR_LTEQF VRGB_M 50.0 else714_1
    MOVEF_F 4.0 VRED_M
    CALL SPEAKER.NOTE 50.0 'C#5' 300.0
  else714_1:
  endif714:
    MOVEF_F 350.0 VMM_M
    DATAF tmpf716
    DATA8 flag716
    DIVF VMM_M 194.68 tmpf716
    CP_EQF 0.0 194.68 flag716
    SELECTF flag716 0.0 tmpf716 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while719:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf723
    DATA8 flag723
    DIVF F.1 2.0 tmpf723
    CP_EQF 0.0 2.0 flag723
    SELECTF flag723 0.0 tmpf723 F.0

    JR_GTEQF F.0 VL_M endwhile719
  whilebody719:
    WRITE32 ENDSUB_LINE1:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE1
CALLSUB724:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf728
    DATA8 flag728
    DIVF F.1 2.0 tmpf728
    CP_EQF 0.0 2.0 flag728
    SELECTF flag728 0.0 tmpf728 F.0

    JR_LTF F.0 VL_M whilebody719
  endwhile719:
  while729:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile729
  whilebody729:
    WRITE32 ENDSUB_LINE2:CALLSUB731 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB731:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody729
  endwhile729:
    WRITE32 ENDSUB_RIGHT:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB733:
    MOVEF_F 50.0 VMM_M
    DATAF tmpf734
    DATA8 flag734
    DIVF VMM_M 194.68 tmpf734
    CP_EQF 0.0 194.68 flag734
    SELECTF flag734 0.0 tmpf734 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while737:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf741
    DATA8 flag741
    DIVF F.1 2.0 tmpf741
    CP_EQF 0.0 2.0 flag741
    SELECTF flag741 0.0 tmpf741 F.0

    JR_GTEQF F.0 VL_M endwhile737
  whilebody737:
    WRITE32 ENDSUB_LINE3:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB742:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf746
    DATA8 flag746
    DIVF F.1 2.0 tmpf746
    CP_EQF 0.0 2.0 flag746
    SELECTF flag746 0.0 tmpf746 F.0

    JR_LTF F.0 VL_M whilebody737
  endwhile737:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf747
    DATA8 flag747
    DIVF VMM_M 194.68 tmpf747
    CP_EQF 0.0 194.68 flag747
    SELECTF flag747 0.0 tmpf747 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while750:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf754
    DATA8 flag754
    DIVF F.1 2.0 tmpf754
    CP_EQF 0.0 2.0 flag754
    SELECTF flag754 0.0 tmpf754 F.0

    JR_GTEQF F.0 VL_M endwhile750
  whilebody750:
    WRITE32 ENDSUB_LINE2:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB755:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf759
    DATA8 flag759
    DIVF F.1 2.0 tmpf759
    CP_EQF 0.0 2.0 flag759
    SELECTF flag759 0.0 tmpf759 F.0

    JR_LTF F.0 VL_M whilebody750
  endwhile750:
  while760:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile760
  whilebody760:
    WRITE32 ENDSUB_LINE3:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB762:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody760
  endwhile760:
    WRITE32 ENDSUB_RIGHT:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB764:
    MOVEF_F 500.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB765:
  while766:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile766
  whilebody766:
    WRITE32 ENDSUB_LINE3:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB768:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody766
  endwhile766:
    MOVEF_F 0.0 VN_M
    JR_NEQF VWC1_M 3.0 else770_1
    MOVEF_F 1.0 VN_14
    MOVEF_F VN_M VI_14
    WRITE32 ENDSUB_W3_2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_2
CALLSUB771:
    ADDF VN_M 1.0 VN_M
  else770_1:
  endif770:
    JR_NEQF VBC1_M 3.0 else773_1
    MOVEF_F 1.0 VN_15
    MOVEF_F VN_M VI_15
    WRITE32 ENDSUB_B3_2:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_2
CALLSUB774:
    ADDF VN_M 1.0 VN_M
  else773_1:
  endif773:
    JR_NEQF VBC1_M 2.0 else776_1
    MOVEF_F 1.0 VN_13
    MOVEF_F VN_M VI_13
    WRITE32 ENDSUB_B2_2:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_2
CALLSUB777:
    ADDF VN_M 1.0 VN_M
  else776_1:
  endif776:
    JR_NEQF VWC1_M 2.0 else779_1
    MOVEF_F 1.0 VN_12
    MOVEF_F VN_M VI_12
    WRITE32 ENDSUB_W2_2:CALLSUB780 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_2
CALLSUB780:
    ADDF VN_M 1.0 VN_M
  else779_1:
  endif779:
    JR_NEQF VWC1_M 4.0 else782_1
    MOVEF_F 1.0 VN_16
    MOVEF_F VN_M VI_16
    WRITE32 ENDSUB_W4_2:CALLSUB783 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_2
CALLSUB783:
    ADDF VN_M 1.0 VN_M
  else782_1:
  endif782:
    JR_NEQF VBC1_M 4.0 else785_1
    MOVEF_F 1.0 VN_17
    MOVEF_F VN_M VI_17
    WRITE32 ENDSUB_B4_2:CALLSUB786 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_2
CALLSUB786:
    ADDF VN_M 1.0 VN_M
  else785_1:
  endif785:
    JR_NEQF VWC1_M 1.0 else788_1
    MOVEF_F 1.0 VN_10
    MOVEF_F VN_M VI_10
    WRITE32 ENDSUB_W1_2:CALLSUB789 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_2
CALLSUB789:
    ADDF VN_M 1.0 VN_M
  else788_1:
  endif788:
    JR_NEQF VBC1_M 1.0 else791_1
    MOVEF_F 1.0 VN_11
    MOVEF_F VN_M VI_11
    WRITE32 ENDSUB_B1_2:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_2
CALLSUB792:
    ADDF VN_M 1.0 VN_M
  else791_1:
  endif791:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf795
    DATA8 flag795
    DIVF VMM_M 194.68 tmpf795
    CP_EQF 0.0 194.68 flag795
    SELECTF flag795 0.0 tmpf795 F.0

    MULF F.0 360.0 VL_M
  while797:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile797
  whilebody797:
    WRITE32 ENDSUB_LINE3:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB799:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody797
  endwhile797:
  while801:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile801
  whilebody801:
    WRITE32 ENDSUB_LINE2:CALLSUB803 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB803:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody801
  endwhile801:
    MOVEF_F 95.0 VGRAD_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB805 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB805:
    MOVEF_F 60.0 VMM_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB806 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB806:
    MOVEF_F 95.0 VGRAD_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB807 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB807:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds809
	MOVEF_32 1500.0 milliseconds809
	DATA32 timer809
	TIMER_WAIT milliseconds809 timer809
	TIMER_READY timer809
    MOVEF_F 100.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB810 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB810:
    DATA32 milliseconds811
	MOVEF_32 100.0 milliseconds811
	DATA32 timer811
	TIMER_WAIT milliseconds811 timer811
	TIMER_READY timer811
    MOVEF_F 95.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB812 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB812:
    DATA32 milliseconds813
	MOVEF_32 100.0 milliseconds813
	DATA32 timer813
	TIMER_WAIT milliseconds813 timer813
	TIMER_READY timer813
    MOVEF_F 50.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB814 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB814:
    MOVEF_F 30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB815 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB815:
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB816:
    CALL MOTOR.START 'AD' 60.0
    DATA32 milliseconds818
	MOVEF_32 300.0 milliseconds818
	DATA32 timer818
	TIMER_WAIT milliseconds818 timer818
	TIMER_READY timer818
    MOVEF_F 70.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB819:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 80.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB822:
    MOVEF_F 80.0 VGRAD_5
    MOVEF_F -60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB823:
    MOVEF_F 70.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB824 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB824:
    DATA32 tmp825
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp825
    JR_NEQ32 0 tmp825 alreadylaunched825
    OBJECT_START TTH_DOWN
  alreadylaunched825:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB826:
    WRITE32 ENDSUB_LEFT:CALLSUB827 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB827:
    DATA32 tmp828
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp828
    JR_NEQ32 0 tmp828 alreadylaunched828
    OBJECT_START TTH_UP
  alreadylaunched828:
    MOVEF_F 500.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB829:
  while830:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile830
  whilebody830:
    WRITE32 ENDSUB_LINE3:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB832:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody830
  endwhile830:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VRED_M 1.0 else835_1
    MOVEF_F 115.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB836 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB836:
    DATA32 tmp837
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp837
    JR_NEQ32 0 tmp837 alreadylaunched837
    OBJECT_START TTH_DOWN
  alreadylaunched837:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB838 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB838:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB839 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB839:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB840 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB840:
    WRITE32 ENDSUB_RIGHT:CALLSUB841 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB841:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf843
    DATA8 flag843
    DIVF VMM_M 194.68 tmpf843
    CP_EQF 0.0 194.68 flag843
    SELECTF flag843 0.0 tmpf843 F.0

    MULF F.0 360.0 VL_M
  while845:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile845
  whilebody845:
    WRITE32 ENDSUB_LINE3:CALLSUB847 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB847:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody845
  endwhile845:
  while849:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 30.0 endwhile849
  whilebody849:
    WRITE32 ENDSUB_LINE2:CALLSUB851 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB851:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 30.0 whilebody849
  endwhile849:
    MOVEF_F 20.0 VMM_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB853 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB853:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 300.0 VMM_M
    DATAF tmpf855
    DATA8 flag855
    DIVF VMM_M 194.68 tmpf855
    CP_EQF 0.0 194.68 flag855
    SELECTF flag855 0.0 tmpf855 F.0

    MULF F.0 360.0 VL_M
  while857:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile857
  whilebody857:
    WRITE32 ENDSUB_LINE2:CALLSUB859 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB859:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody857
  endwhile857:
    JR endif835
  else835_1:
    JR_NEQF VRED_M 4.0 else835_2
    MOVEF_F 110.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB861 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB861:
    DATA32 tmp862
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp862
    JR_NEQ32 0 tmp862 alreadylaunched862
    OBJECT_START TTH_DOWN
  alreadylaunched862:
    MOVEF_F 90.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB863 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB863:
    MOVEF_F 115.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB864 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB864:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB865 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB865:
    MOVEF_F 70.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB866 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB866:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB867 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB867:
    WRITE32 ENDSUB_RIGHT:CALLSUB868 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB868:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf870
    DATA8 flag870
    DIVF VMM_M 194.68 tmpf870
    CP_EQF 0.0 194.68 flag870
    SELECTF flag870 0.0 tmpf870 F.0

    MULF F.0 360.0 VL_M
  while872:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile872
  whilebody872:
    WRITE32 ENDSUB_LINE3:CALLSUB874 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB874:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody872
  endwhile872:
    JR endif835
  else835_2:
    WRITE32 ENDSUB_RIGHT:CALLSUB876 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB876:
    DATA32 tmp877
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp877
    JR_NEQ32 0 tmp877 alreadylaunched877
    OBJECT_START TTH_DOWN
  alreadylaunched877:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 245.0 VMM_M
    DATAF tmpf879
    DATA8 flag879
    DIVF VMM_M 194.68 tmpf879
    CP_EQF 0.0 194.68 flag879
    SELECTF flag879 0.0 tmpf879 F.0

    MULF F.0 360.0 VL_M
  while881:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile881
  whilebody881:
    WRITE32 ENDSUB_LINE3:CALLSUB883 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB883:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody881
  endwhile881:
    WRITE32 ENDSUB_HSV:CALLSUB885 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB885:
    JR_LTEQF VRGB_M 18.0 else886_1
    MOVEF_F 2.0 VRED_M
    CALL SPEAKER.TONE 40.0 600.0 200.0
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB888 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB888:
    MOVEF_F 175.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB889 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB889:
    MOVEF_F 10.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB890 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB890:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 30.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB891 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB891:
    MOVEF_F 370.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB892 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB892:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB893 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB893:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB894:
    WRITE32 ENDSUB_RIGHT:CALLSUB895 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB895:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf897
    DATA8 flag897
    DIVF VMM_M 194.68 tmpf897
    CP_EQF 0.0 194.68 flag897
    SELECTF flag897 0.0 tmpf897 F.0

    MULF F.0 360.0 VL_M
  while899:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile899
  whilebody899:
    WRITE32 ENDSUB_LINE3:CALLSUB901 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB901:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody899
  endwhile899:
    JR endif886
  else886_1:
    MOVEF_F 3.0 VRED_M
    MOVEF_F 5.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB903 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB903:
    MOVEF_F 90.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB904 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB904:
    MOVEF_F 180.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB905 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB905:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 20.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB906 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB906:
    MOVEF_F 170.0 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB907 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB907:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB908:
    MOVEF_F 30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB909 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB909:
    WRITE32 ENDSUB_LEFT:CALLSUB910 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB910:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 80.0 VMM_M
    DATAF tmpf912
    DATA8 flag912
    DIVF VMM_M 194.68 tmpf912
    CP_EQF 0.0 194.68 flag912
    SELECTF flag912 0.0 tmpf912 F.0

    MULF F.0 360.0 VL_M
  while914:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile914
  whilebody914:
    WRITE32 ENDSUB_LINE3:CALLSUB916 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB916:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody914
  endwhile914:
  else886_2:
  endif886:
  else835_3:
  endif835:
    MOVEF_F 200.0 VMM_M
    DATAF tmpf918
    DATA8 flag918
    DIVF VMM_M 194.68 tmpf918
    CP_EQF 0.0 194.68 flag918
    SELECTF flag918 0.0 tmpf918 F.0

    MULF F.0 360.0 VL_M
  while920:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile920
  whilebody920:
    WRITE32 ENDSUB_LINE2:CALLSUB922 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB922:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody920
  endwhile920:
  while924:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile924
  whilebody924:
    WRITE32 ENDSUB_LINE2:CALLSUB926 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB926:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody924
  endwhile924:
    WRITE32 ENDSUB_RIGHT:CALLSUB928 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB928:
    MOVEF_F 80.0 VMM_M
    DATAF tmpf929
    DATA8 flag929
    DIVF VMM_M 194.68 tmpf929
    CP_EQF 0.0 194.68 flag929
    SELECTF flag929 0.0 tmpf929 F.0

    MULF F.0 360.0 VL_M
  while931:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile931
  whilebody931:
    WRITE32 ENDSUB_LINE3:CALLSUB933 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB933:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody931
  endwhile931:
  while935:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile935
  whilebody935:
    WRITE32 ENDSUB_LINE2:CALLSUB937 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB937:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody935
  endwhile935:
    JR_EQF VRED_M 1.0 or940
    JR_NEQF VRED_M 3.0 else939_1
  or940:
    MOVEF_F 310.0 VMM_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB941 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB941:
    STRINGS DUPLICATE 'AD' VMOTOR_9
    MOVEF_F 40.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB942 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB942:
    MOVEF_F 50.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB943 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB943:
    MOVEF_F 220.0 VMM_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB944 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB944:
    JR endif939
  else939_1:
    MOVEF_F 130.0 VMM_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB945 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB945:
    MOVEF_F 45.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB946 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB946:
    STRINGS DUPLICATE 'AD' VMOTOR_9
    MOVEF_F 40.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB947 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB947:
    MOVEF_F 70.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB948 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB948:
    MOVEF_F 40.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB949 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB949:
    MOVEF_F 30.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB950 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB950:
    MOVEF_F 170.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB951:
    MOVEF_F 220.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB952 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB952:
  else939_2:
  endif939:
    DATA32 tmp953
    CALL GETANDINC32 RUNCOUNTER_TH_UP 1  RUNCOUNTER_TH_UP tmp953
    JR_NEQ32 0 tmp953 alreadylaunched953
    OBJECT_START TTH_UP
  alreadylaunched953:
    MOVEF_F -40.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB954 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB954:
    MOVEF_F 35.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB955 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB955:
    MOVEF_F 60.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB956 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB956:
    CALL MOTOR.STARTPOWER 'B' 30.0
    CALL MOTOR.STARTPOWER 'C' -30.0
  while959:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile959
  whilebody959:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody959
  endwhile959:
  while962:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile962
  whilebody962:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody962
  endwhile962:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB966 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB966:
    MOVEF_F 150.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB967 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB967:
  while968:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile968
  whilebody968:
    WRITE32 ENDSUB_LINE2:CALLSUB970 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB970:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody968
  endwhile968:
    MOVEF_F 50.0 VGRAD_4
    MOVEF_F 45.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB972 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB972:
    MOVEF_F 50.0 VGRAD_5
    MOVEF_F 45.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB973 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB973:
    MOVEF_F 600.0 VMM_3
    MOVEF_F 80.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB974 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB974:
    MOVEF_F 75.0 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB975 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB975:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB976 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB976:
    MOVEF_F 50.0 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB977 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB977:
    MOVEF_F 20.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB978 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB978:
    MOVEF_F 25.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB979 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB979:
    CALL MOTOR.START 'AD' 40.0
    DATA32 milliseconds981
	MOVEF_32 300.0 milliseconds981
	DATA32 timer981
	TIMER_WAIT milliseconds981 timer981
	TIMER_READY timer981
    MOVEF_F 70.0 VMM_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB982 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB982:
    CALL MOTOR.STOP 'AD' 'false'
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 150.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB985 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB985:
    DATA32 milliseconds986
	MOVEF_32 100.0 milliseconds986
	DATA32 timer986
	TIMER_WAIT milliseconds986 timer986
	TIMER_READY timer986
    DATA32 tmp987
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp987
    JR_NEQ32 0 tmp987 alreadylaunched987
    OBJECT_START TTH_DOWN
  alreadylaunched987:
    MOVEF_F 90.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB988 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB988:
    MOVEF_F 300.0 VMM_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB989 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB989:
    MOVEF_F 30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB990 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB990:
    WRITE32 ENDSUB_RIGHT:CALLSUB991 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB991:
    MOVEF_F 100.0 VMM_M
    DATAF tmpf992
    DATA8 flag992
    DIVF VMM_M 194.68 tmpf992
    CP_EQF 0.0 194.68 flag992
    SELECTF flag992 0.0 tmpf992 F.0

    MULF F.0 360.0 VL_M
  while994:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile994
  whilebody994:
    WRITE32 ENDSUB_LINE3:CALLSUB996 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB996:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody994
  endwhile994:
  while998:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile998
  whilebody998:
    WRITE32 ENDSUB_LINE2:CALLSUB1000 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1000:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VBLACK_M whilebody998
  endwhile998:
    MOVEF_F 20.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1002 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1002:
    MOVEF_F 150.0 VMM_M
    DATAF tmpf1003
    DATA8 flag1003
    DIVF VMM_M 194.68 tmpf1003
    CP_EQF 0.0 194.68 flag1003
    SELECTF flag1003 0.0 tmpf1003 F.0

    MULF F.0 360.0 VL_M
  while1005:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile1005
  whilebody1005:
    WRITE32 ENDSUB_LINE2:CALLSUB1007 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1007:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody1005
  endwhile1005:
    CALL MOTOR.RESETCOUNT 'BC'
  while1010:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VRD_M or1011
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VRD_M endwhile1010
  or1011:
  whilebody1010:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VRD_M whilebody1010
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 VRD_M whilebody1010
  endwhile1010:
    MOVEF_F 100.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1025 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1025:
    MOVEF_F 10.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1026 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1026:
    STRINGS DUPLICATE 'AD' VMOTOR_8
    MOVEF_F 50.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB1027 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB1027:
    MOVEF_F 40.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1028 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1028:
    MOVEF_F 30.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB1029:
    MOVEF_F 150.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1030 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1030:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB1031 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB1031:
    WRITE32 ENDSUB_RIGHT:CALLSUB1032 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB1032:
    MOVEF_F 900.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB1033 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB1033:
  while1034:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1034
  whilebody1034:
    WRITE32 ENDSUB_LINE3:CALLSUB1036 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1036:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody1034
  endwhile1034:
    MOVEF_F 0.0 VN_M
    JR_NEQF VWC2_M 3.0 else1038_1
    MOVEF_F 2.0 VN_14
    MOVEF_F VN_M VI_14
    WRITE32 ENDSUB_W3_2:CALLSUB1039 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W3_2
CALLSUB1039:
    ADDF VN_M 1.0 VN_M
  else1038_1:
  endif1038:
    JR_NEQF VBC2_M 3.0 else1041_1
    MOVEF_F 2.0 VN_15
    MOVEF_F VN_M VI_15
    WRITE32 ENDSUB_B3_2:CALLSUB1042 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B3_2
CALLSUB1042:
    ADDF VN_M 1.0 VN_M
  else1041_1:
  endif1041:
    JR_NEQF VBC2_M 2.0 else1044_1
    MOVEF_F 2.0 VN_13
    MOVEF_F VN_M VI_13
    WRITE32 ENDSUB_B2_2:CALLSUB1045 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2_2
CALLSUB1045:
    ADDF VN_M 1.0 VN_M
  else1044_1:
  endif1044:
    JR_NEQF VWC2_M 2.0 else1047_1
    MOVEF_F 2.0 VN_12
    MOVEF_F VN_M VI_12
    WRITE32 ENDSUB_W2_2:CALLSUB1048 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2_2
CALLSUB1048:
    ADDF VN_M 1.0 VN_M
  else1047_1:
  endif1047:
    JR_NEQF VWC2_M 4.0 else1050_1
    MOVEF_F 2.0 VN_16
    MOVEF_F VN_M VI_16
    WRITE32 ENDSUB_W4_2:CALLSUB1051 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W4_2
CALLSUB1051:
    ADDF VN_M 1.0 VN_M
  else1050_1:
  endif1050:
    JR_NEQF VBC2_M 4.0 else1053_1
    MOVEF_F 2.0 VN_17
    MOVEF_F VN_M VI_17
    WRITE32 ENDSUB_B4_2:CALLSUB1054 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B4_2
CALLSUB1054:
    ADDF VN_M 1.0 VN_M
  else1053_1:
  endif1053:
    JR_NEQF VWC2_M 1.0 else1056_1
    MOVEF_F 2.0 VN_10
    MOVEF_F VN_M VI_10
    WRITE32 ENDSUB_W1_2:CALLSUB1057 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1_2
CALLSUB1057:
    ADDF VN_M 1.0 VN_M
  else1056_1:
  endif1056:
    JR_NEQF VBC2_M 1.0 else1059_1
    MOVEF_F 2.0 VN_11
    MOVEF_F VN_M VI_11
    WRITE32 ENDSUB_B1_2:CALLSUB1060 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1_2
CALLSUB1060:
    ADDF VN_M 1.0 VN_M
  else1059_1:
  endif1059:
    MOVEF_F 650.0 VMM_M
    WRITE32 ENDSUB_LINE_TOMM:CALLSUB1062 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_TOMM
CALLSUB1062:
  while1063:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile1063
  whilebody1063:
    WRITE32 ENDSUB_LINE2:CALLSUB1065 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1065:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody1063
  endwhile1063:
    WRITE32 ENDSUB_LEFT:CALLSUB1067 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB1067:
    MOVEF_F 50.0 VMM_M
    DATAF tmpf1068
    DATA8 flag1068
    DIVF VMM_M 194.68 tmpf1068
    CP_EQF 0.0 194.68 flag1068
    SELECTF flag1068 0.0 tmpf1068 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while1071:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1075
    DATA8 flag1075
    DIVF F.1 2.0 tmpf1075
    CP_EQF 0.0 2.0 flag1075
    SELECTF flag1075 0.0 tmpf1075 F.0

    JR_GTEQF F.0 VL_M endwhile1071
  whilebody1071:
    WRITE32 ENDSUB_LINE3:CALLSUB1076 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB1076:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1080
    DATA8 flag1080
    DIVF F.1 2.0 tmpf1080
    CP_EQF 0.0 2.0 flag1080
    SELECTF flag1080 0.0 tmpf1080 F.0

    JR_LTF F.0 VL_M whilebody1071
  endwhile1071:
    MOVEF_F 300.0 VMM_M
    DATAF tmpf1081
    DATA8 flag1081
    DIVF VMM_M 194.68 tmpf1081
    CP_EQF 0.0 194.68 flag1081
    SELECTF flag1081 0.0 tmpf1081 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while1084:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1088
    DATA8 flag1088
    DIVF F.1 2.0 tmpf1088
    CP_EQF 0.0 2.0 flag1088
    SELECTF flag1088 0.0 tmpf1088 F.0

    JR_GTEQF F.0 VL_M endwhile1084
  whilebody1084:
    WRITE32 ENDSUB_LINE2:CALLSUB1089 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1089:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1093
    DATA8 flag1093
    DIVF F.1 2.0 tmpf1093
    CP_EQF 0.0 2.0 flag1093
    SELECTF flag1093 0.0 tmpf1093 F.0

    JR_LTF F.0 VL_M whilebody1084
  endwhile1084:
  while1094:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or1095
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile1094
  or1095:
  whilebody1094:
    WRITE32 ENDSUB_LINE2:CALLSUB1098 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB1098:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody1094
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody1094
  endwhile1094:
    MOVEF_F 20.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1101:
    MOVEF_F 45.0 VGRAD_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB1102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB1102:
    MOVEF_F 80.0 VMM_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB1103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB1103:
    CALL MOTOR.STOP 'AD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VTIME_M
    CALL LCD.CLEAR
    DATAF tmpf1107
    DATA8 flag1107
    DIVF VTIME_M 1000.0 tmpf1107
    CP_EQF 0.0 1000.0 flag1107
    SELECTF flag1107 0.0 tmpf1107 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    WRITE32 ENDSUB_FRZ:CALLSUB1110 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB1110:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf11
    DATA8 flag11
    DIVF F.0 F.1 tmpf11
    CP_EQF 0.0 F.1 flag11
    SELECTF flag11 0.0 tmpf11 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf16
    DATA8 flag16
    DIVF F.0 F.1 tmpf16
    CP_EQF 0.0 F.1 flag16
    SELECTF flag16 0.0 tmpf16 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE1:
    WRITE32 ENDSUB_SEN1:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB17:
    WRITE32 ENDSUB_SEN2:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB18:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK1_M F.1
    ADDF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK1_M F.1
    SUBF VV1_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE1:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB26:
    WRITE32 ENDSUB_SEN2:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB27:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB35:
    WRITE32 ENDSUB_SEN2:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB36:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LINE21:
    WRITE32 ENDSUB_SEN2:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB44:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 30.0 VU_M
    MULF VU_M VK21_M F.1
    ADDF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK21_M F.1
    SUBF VV21_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE21:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE21:
SUB_LINE31:
    WRITE32 ENDSUB_SEN2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB53:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 30.0 VU_M
    MULF VU_M VK31_M F.1
    ADDF VV31_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK31_M F.1
    SUBF VV31_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE31:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE31:
SUB_LINE_TOMM:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VL_M
  while63:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile63
  whilebody63:
    WRITE32 ENDSUB_LINE3:CALLSUB65 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB65:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody63
  endwhile63:
    MOVEF_F 20.0 VV_M
    MOVEF_F 0.55 VK_M
    SUBF VMM_M 100.0 F.1
    DATAF tmpf68
    DATA8 flag68
    DIVF F.1 194.68 tmpf68
    CP_EQF 0.0 194.68 flag68
    SELECTF flag68 0.0 tmpf68 F.0

    MULF F.0 360.0 VL_M
    CALL MOTOR.RESETCOUNT 'BC'
  while71:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf75
    DATA8 flag75
    DIVF F.1 2.0 tmpf75
    CP_EQF 0.0 2.0 flag75
    SELECTF flag75 0.0 tmpf75 F.0

    JR_GTEQF F.0 VL_M endwhile71
  whilebody71:
    WRITE32 ENDSUB_SEN1:CALLSUB76 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB76:
    WRITE32 ENDSUB_SEN2:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB77:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf88
    DATA8 flag88
    DIVF F.0 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 VDIS_M

    DATAF tmpf89
    DATA8 flag89
    DIVF VDIS_M 360.0 tmpf89
    CP_EQF 0.0 360.0 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    MULF F.0 194.68 VDIS_M
    JR_LTEQF VMM_M 1150.0 else91_1
    MOVEF_F 0.8 VT_M
    JR endif91
  else91_1:
    JR_LTEQF VMM_M 350.0 else91_2
    MOVEF_F 0.6 VT_M
    JR endif91
  else91_2:
    MOVEF_F 0.4 VT_M
    MOVEF_F 40.0 VV_M
  else91_3:
  endif91:
    MULF VMM_M 0.4 F.0
    JR_GTEQF VDIS_M F.0 else92_1
    JR_GTEQF VV_M 95.0 else92_1
    ADDF VV_M 0.6 VV_M
    JR endif92
  else92_1:
    MULF VMM_M VT_M F.0
    JR_LTEQF VDIS_M F.0 else92_2
    JR_LTEQF VV_M 15.0 else92_2
    SUBF VV_M 0.6 VV_M
  else92_2:
  endif92:
    JR_GTEQF VV_M 35.0 else97_1
    MOVEF_F 0.9 VK_M
    JR endif97
  else97_1:
    JR_GTEQF VV_M 55.0 else97_2
    MOVEF_F 0.7 VK_M
    JR endif97
  else97_2:
    JR_GTEQF VV_M 100.0 else97_3
    MOVEF_F 0.75 VK_M
  else97_3:
  endif97:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf101
    DATA8 flag101
    DIVF F.1 2.0 tmpf101
    CP_EQF 0.0 2.0 flag101
    SELECTF flag101 0.0 tmpf101 F.0

    JR_LTF F.0 VL_M whilebody71
  endwhile71:
RETSUB_LINE_TOMM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_TOMM:
SUB_LEFT:
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB102:
    MOVEF_F 60.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB103:
    CALL MOTOR.STARTPOWER 'B' -30.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while106:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile106
  whilebody106:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody106
  endwhile106:
  while109:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile109
  whilebody109:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody109
  endwhile109:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB113:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB114:
    MOVEF_F 60.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB115:
    CALL MOTOR.STARTPOWER 'B' 30.0
    CALL MOTOR.STARTPOWER 'C' -30.0
  while118:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 30.0 endwhile118
  whilebody118:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 30.0 whilebody118
  endwhile118:
  while121:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile121
  whilebody121:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB125:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 140.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB126 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB126:
    CALL MOTOR.STARTPOWER 'B' -40.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while129:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 30.0 endwhile129
  whilebody129:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 30.0 whilebody129
  endwhile129:
  while132:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile132
  whilebody132:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody132
  endwhile132:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB136:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_1
    DATA8 layer138
	DATA8 no138
	DATA8 mode8138
	
	MOVEF_8 2.0 no138
	SUB8 no138 1 no138
	DIV8 no138 4 layer138
	MATH MOD8 no138 4 no138

	MOVEF_8 2.0 mode8138
	
	INPUT_DEVICE READY_RAW layer138 no138 0 mode8138 0
    DATA8 layer139
	DATA8 no139
	DATA8 mode8139
	
	MOVEF_8 3.0 no139
	SUB8 no139 1 no139
	DIV8 no139 4 layer139
	MATH MOD8 no139 4 no139

	MOVEF_8 2.0 mode8139
	
	INPUT_DEVICE READY_RAW layer139 no139 0 mode8139 0
  while140:
    JR_EQF VWHITE_1 1.0 endwhile140
  whilebody140:
  while141:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile141
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile141
  whilebody141:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 and153
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody141
  and153:
  endwhile141:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 9.2459420587631 VL_1
  while157:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_1 endwhile157
  whilebody157:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_1 whilebody157
  endwhile157:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else171_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else171_1
    MOVEF_F 1.0 VWHITE_1
  else171_1:
  endif171:
    JR_NEQF VWHITE_1 1.0 whilebody140
  endwhile140:
    DATA8 layer174
	DATA8 no174
	DATA8 mode8174
	
	MOVEF_8 2.0 no174
	SUB8 no174 1 no174
	DIV8 no174 4 layer174
	MATH MOD8 no174 4 no174

	MOVEF_8 0.0 mode8174
	
	INPUT_DEVICE READY_RAW layer174 no174 0 mode8174 0
    DATA8 layer175
	DATA8 no175
	DATA8 mode8175
	
	MOVEF_8 3.0 no175
	SUB8 no175 1 no175
	DIV8 no175 4 layer175
	MATH MOD8 no175 4 no175

	MOVEF_8 0.0 mode8175
	
	INPUT_DEVICE READY_RAW layer175 no175 0 mode8175 0
  while176:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile176
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile176
  whilebody176:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and188
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody176
  and188:
  endwhile176:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDIS_2
    MOVEF_F 15.0 VV_2
    JR_GTEQF VSP_2 0.0 else193_1
    MULF VV_2 -1.0 VV_2
  else193_1:
  endif193:
  while195:
    JR_GTF VDIS_2 VL_2 endwhile195
  whilebody195:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 0.8 F.1
    ADDF VV_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 0.8 F.1
    SUBF VV_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf208
    DATA8 flag208
    DIVF F.1 2.0 tmpf208
    CP_EQF 0.0 2.0 flag208
    SELECTF flag208 0.0 tmpf208 F.0

    MATH ABS F.0 VDIS_2
    MATH ABS VV_2 F.0
    MATH ABS VSP_2 F.1
    JR_GTEQF F.0 F.1 else210_1
    JR_LTEQF VSP_2 0.0 else213_1
    ADDF VV_2 0.2 VV_2
    JR endif213
  else213_1:
    SUBF VV_2 0.2 VV_2
  else213_2:
  endif213:
  else210_1:
  endif210:
    JR_LTEQF VDIS_2 VL_2 whilebody195
  endwhile195:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf217
    DATA8 flag217
    DIVF VMM_3 194.68 tmpf217
    CP_EQF 0.0 194.68 flag217
    SELECTF flag217 0.0 tmpf217 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_3 VL_2
    MOVEF_F VSP_3 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB220:
    MOVEF_F 0.0 VSP_3
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT1_2:
    MULF 1092.72 VGRAD_4 F.0
    DATAF tmpf222
    DATA8 flag222
    DIVF F.0 360.0 tmpf222
    CP_EQF 0.0 360.0 flag222
    SELECTF flag222 0.0 tmpf222 VL_4

    DATAF tmpf223
    DATA8 flag223
    DIVF VL_4 200.96 tmpf223
    CP_EQF 0.0 200.96 flag223
    SELECTF flag223 0.0 tmpf223 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_4
  while227:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile227
  whilebody227:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody227
  endwhile227:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT1_2:
    MULF 1092.72 VGRAD_5 F.0
    DATAF tmpf235
    DATA8 flag235
    DIVF F.0 360.0 tmpf235
    CP_EQF 0.0 360.0 flag235
    SELECTF flag235 0.0 tmpf235 VL_5

    DATAF tmpf236
    DATA8 flag236
    DIVF VL_5 200.96 tmpf236
    CP_EQF 0.0 200.96 flag236
    SELECTF flag236 0.0 tmpf236 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_5
  while240:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_5 endwhile240
  whilebody240:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_5 whilebody240
  endwhile240:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT2_1:
    MULF 1092.72 VGRAD_6 F.0
    DATAF tmpf248
    DATA8 flag248
    DIVF F.0 360.0 tmpf248
    CP_EQF 0.0 360.0 flag248
    SELECTF flag248 0.0 tmpf248 VL_6

    DATAF tmpf249
    DATA8 flag249
    DIVF VL_6 200.96 tmpf249
    CP_EQF 0.0 200.96 flag249
    SELECTF flag249 0.0 tmpf249 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' -30.0
    CALL MOTOR.STARTPOWER 'C' 30.0
  while254:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf260
    DATA8 flag260
    DIVF F.1 2.0 tmpf260
    CP_EQF 0.0 2.0 flag260
    SELECTF flag260 0.0 tmpf260 F.0

    DATAF tmpf261
    DATA8 flag261
    DIVF VL_6 2.0 tmpf261
    CP_EQF 0.0 2.0 flag261
    SELECTF flag261 0.0 tmpf261 F.1

    JR_GTF F.0 F.1 endwhile254
  whilebody254:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf267
    DATA8 flag267
    DIVF F.1 2.0 tmpf267
    CP_EQF 0.0 2.0 flag267
    SELECTF flag267 0.0 tmpf267 F.0

    DATAF tmpf268
    DATA8 flag268
    DIVF VL_6 2.0 tmpf268
    CP_EQF 0.0 2.0 flag268
    SELECTF flag268 0.0 tmpf268 F.1

    JR_LTEQF F.0 F.1 whilebody254
  endwhile254:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1092.72 VGRAD_7 F.0
    DATAF tmpf271
    DATA8 flag271
    DIVF F.0 360.0 tmpf271
    CP_EQF 0.0 360.0 flag271
    SELECTF flag271 0.0 tmpf271 VL_7

    DATAF tmpf272
    DATA8 flag272
    DIVF VL_7 200.96 tmpf272
    CP_EQF 0.0 200.96 flag272
    SELECTF flag272 0.0 tmpf272 F.0

    MULF F.0 360.0 VL_7
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' 40.0
    CALL MOTOR.STARTPOWER 'C' -40.0
  while277:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf283
    DATA8 flag283
    DIVF F.1 2.0 tmpf283
    CP_EQF 0.0 2.0 flag283
    SELECTF flag283 0.0 tmpf283 F.0

    DATAF tmpf284
    DATA8 flag284
    DIVF VL_7 2.0 tmpf284
    CP_EQF 0.0 2.0 flag284
    SELECTF flag284 0.0 tmpf284 F.1

    JR_GTF F.0 F.1 endwhile277
  whilebody277:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf290
    DATA8 flag290
    DIVF F.1 2.0 tmpf290
    CP_EQF 0.0 2.0 flag290
    SELECTF flag290 0.0 tmpf290 F.0

    DATAF tmpf291
    DATA8 flag291
    DIVF VL_7 2.0 tmpf291
    CP_EQF 0.0 2.0 flag291
    SELECTF flag291 0.0 tmpf291 F.1

    JR_LTEQF F.0 F.1 whilebody277
  endwhile277:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'AD'
    SUBF 0.0 VSPEED_8 F.0
    CALL MOTOR.START VMOTOR_8 F.0
    DATA32 milliseconds300
	MOVEF_32 200.0 milliseconds300
	DATA32 timer300
	TIMER_WAIT milliseconds300 timer300
	TIMER_READY timer300
  while301:
    CALL MOTOR.GETCOUNT VMOTOR_8 F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 180.0 endwhile301
    CALL MOTOR.GETSPEED VMOTOR_8 F.1
    MATH ABS F.1 F.0
    MULF VSPEED_8 0.3 F.1
    JR_LTEQF F.0 F.1 endwhile301
  whilebody301:
    CALL MOTOR.GETCOUNT VMOTOR_8 F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 180.0 and307
    CALL MOTOR.GETSPEED VMOTOR_8 F.1
    MATH ABS F.1 F.0
    MULF VSPEED_8 0.3 F.1
    JR_GTF F.0 F.1 whilebody301
  and307:
  endwhile301:
    CALL MOTOR.STOP 'ADBC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.STARTPOWER VMOTOR_9 VSPEED_9
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds318
	MOVEF_32 600.0 milliseconds318
	DATA32 timer318
	TIMER_WAIT milliseconds318 timer318
	TIMER_READY timer318
    CALL MOTOR.STOP 'BC' 'true'
  while320:
    CALL MOTOR.GETSPEED VMOTOR_9 F.0
    MULF VSPEED_9 0.6 F.1
    JR_LTEQF F.0 F.1 endwhile320
  whilebody320:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_9 F.0
    MULF VSPEED_9 0.6 F.1
    JR_GTF F.0 F.1 whilebody320
  endwhile320:
    CALL MOTOR.SCHEDULE VMOTOR_9 -20.0 0.0 20.0 0.0 'true' 

	DATA8 layer326
	DATA8 nos326
	DATA8 busy326
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_9 layer326 nos326
	JR_EQ8 0 nos326 motornotbusy326
  motorwaiting326:
	OUTPUT_TEST layer326 nos326 busy326
	JR_EQ8 busy326 0 motornotbusy326
	SLEEP
	JR motorwaiting326
  motornotbusy326:
    CALL MOTOR.STOP 'BC' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else337_1
    JR_LTEQF VR_M VB_M else337_1
    MOVEF_F VR_M VMAX_M
    JR endif337
  else337_1:
    JR_LTEQF VG_M VR_M else337_2
    JR_LTEQF VG_M VB_M else337_2
    MOVEF_F VG_M VMAX_M
    JR endif337
  else337_2:
    JR_LTEQF VB_M VR_M else337_3
    JR_LTEQF VB_M VG_M else337_3
    MOVEF_F VB_M VMAX_M
  else337_3:
  endif337:
    JR_GTEQF VR_M VG_M else338_1
    JR_GTEQF VR_M VB_M else338_1
    MOVEF_F VR_M VMIN_M
    JR endif338
  else338_1:
    JR_GTEQF VG_M VR_M else338_2
    JR_GTEQF VG_M VB_M else338_2
    MOVEF_F VG_M VMIN_M
    JR endif338
  else338_2:
    JR_GTEQF VB_M VR_M else338_3
    JR_GTEQF VB_M VG_M else338_3
    MOVEF_F VB_M VMIN_M
  else338_3:
  endif338:
    JR_NEQF VMAX_M VMIN_M else339_1
    MOVEF_F 0.0 VH_M
    JR endif339
  else339_1:
    JR_NEQF VR_M VMAX_M else340_1
    JR_LTF VG_M VB_M else341_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf345
    DATA8 flag345
    DIVF F.0 F.1 tmpf345
    CP_EQF 0.0 F.1 flag345
    SELECTF flag345 0.0 tmpf345 VH_M

    JR endif341
  else341_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf349
    DATA8 flag349
    DIVF F.1 F.2 tmpf349
    CP_EQF 0.0 F.2 flag349
    SELECTF flag349 0.0 tmpf349 F.0

    ADDF F.0 360.0 VH_M
  else341_2:
  endif341:
    JR endif340
  else340_1:
    JR_NEQF VMAX_M VG_M else351_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf355
    DATA8 flag355
    DIVF F.1 F.2 tmpf355
    CP_EQF 0.0 F.2 flag355
    SELECTF flag355 0.0 tmpf355 F.0

    ADDF F.0 120.0 VH_M
    JR endif351
  else351_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf360
    DATA8 flag360
    DIVF F.1 F.2 tmpf360
    CP_EQF 0.0 F.2 flag360
    SELECTF flag360 0.0 tmpf360 F.0

    ADDF F.0 240.0 VH_M
  else351_2:
  endif351:
  else340_2:
  endif340:
  else339_2:
  endif339:
    JR_NEQF VMAX_M 0.0 else362_1
    MOVEF_F 0.0 VS_M
    JR endif362
  else362_1:
    DATAF tmpf363
    DATA8 flag363
    DIVF VMIN_M VMAX_M tmpf363
    CP_EQF 0.0 VMAX_M flag363
    SELECTF flag363 0.0 tmpf363 F.0

    SUBF 1.0 F.0 VS_M
  else362_2:
  endif362:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB366:
    JR_LTEQF VV_M 17.0 else367_1
    JR_LTEQF VRGB_M 110.0 else368_1
    MOVEF_F 6.0 VCOL_M
    JR endif368
  else368_1:
    MOVEF_F 1.0 VCOL_M
  else368_2:
  endif368:
    JR endif367
  else367_1:
    MOVEF_F 0.0 VCOL_M
  else367_2:
  endif367:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_TOBASE:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 100.0 VMM_M
    DATAF tmpf370
    DATA8 flag370
    DIVF VMM_M 194.68 tmpf370
    CP_EQF 0.0 194.68 flag370
    SELECTF flag370 0.0 tmpf370 F.0

    MULF F.0 360.0 VL_M
  while372:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile372
  whilebody372:
    WRITE32 ENDSUB_LINE3:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3
CALLSUB374:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody372
  endwhile372:
  while376:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VBLACK_M endwhile376
  whilebody376:
    WRITE32 ENDSUB_SEN1:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB378:
    WRITE32 ENDSUB_SEN2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB379:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M 0.55 F.1
    ADDF 40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.55 F.1
    SUBF 40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 VBLACK_M whilebody376
  endwhile376:
RETSUB_TOBASE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOBASE:
SUB_W1_2:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds389
	MOVEF_32 100.0 milliseconds389
	DATA32 timer389
	TIMER_WAIT milliseconds389 timer389
	TIMER_READY timer389
    MOVEF_F 275.0 VMM_3
    MOVEF_F -25.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB390:
    MOVEF_F 90.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB391:
    MOVEF_F 130.0 VL_10
    JR_NEQF VN_10 2.0 else392_1
    SUBF VL_10 40.0 VL_10
  else392_1:
  endif392:
    MOVEF_F VL_10 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB394:
    STRINGS DUPLICATE 'D' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB395:
    SUBF VL_10 30.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB397:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB398:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB399:
    JR_NEQF VI_10 1.0 else400_1
    WRITE32 ENDSUB_LEFT:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB401:
    JR endif400
  else400_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB402:
    WRITE32 ENDSUB_TOBASE:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB403:
  else400_2:
  endif400:
RETSUB_W1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1_2:
SUB_B1_2:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds405
	MOVEF_32 100.0 milliseconds405
	DATA32 timer405
	TIMER_WAIT milliseconds405 timer405
	TIMER_READY timer405
    MOVEF_F 90.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB406:
    MOVEF_F 95.0 VGRAD_6
    WRITE32 ENDSUB_LEFT2_1:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB407:
    MOVEF_F 120.0 VL_11
    JR_NEQF VN_11 2.0 else408_1
    SUBF VL_11 45.0 VL_11
  else408_1:
  endif408:
    MOVEF_F VL_11 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB410:
    STRINGS DUPLICATE 'A' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB411:
    SUBF VL_11 30.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB413:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB414:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB415:
    JR_NEQF VI_11 1.0 else416_1
    WRITE32 ENDSUB_LEFT:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB417:
    JR endif416
  else416_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB418:
    WRITE32 ENDSUB_TOBASE:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB419:
  else416_2:
  endif416:
RETSUB_B1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1_2:
SUB_W2_2:
    MOVEF_F 92.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB420:
    MOVEF_F 200.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB421:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds423
	MOVEF_32 1000.0 milliseconds423
	DATA32 timer423
	TIMER_WAIT milliseconds423 timer423
	TIMER_READY timer423
    MOVEF_F 5.0 VL_12
    JR_NEQF VN_12 2.0 else424_1
    ADDF VL_12 45.0 VL_12
  else424_1:
  endif424:
    MOVEF_F VL_12 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB426:
    MOVEF_F 93.0 VGRAD_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB427:
    MOVEF_F 50.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB428:
    MOVEF_F -25.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB429:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds431
	MOVEF_32 100.0 milliseconds431
	DATA32 timer431
	TIMER_WAIT milliseconds431 timer431
	TIMER_READY timer431
    MOVEF_F 20.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB432:
    MOVEF_F 185.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB433:
    STRINGS DUPLICATE 'D' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB434:
    MOVEF_F 160.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB435:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB436:
    MOVEF_F 70.0 VGRAD_5
    MOVEF_F -60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB437:
    MOVEF_F 40.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB438:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB439:
    JR_NEQF VI_12 1.0 else440_1
    WRITE32 ENDSUB_LEFT:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB441:
    JR endif440
  else440_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB442:
    WRITE32 ENDSUB_TOBASE:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB443:
  else440_2:
  endif440:
RETSUB_W2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2_2:
SUB_B2_2:
    MOVEF_F 25.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB444:
    MOVEF_F 92.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB445:
    MOVEF_F 200.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB446:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds448
	MOVEF_32 1300.0 milliseconds448
	DATA32 timer448
	TIMER_WAIT milliseconds448 timer448
	TIMER_READY timer448
    MOVEF_F 30.0 VL_13
    JR_NEQF VN_13 2.0 else449_1
    ADDF VL_13 45.0 VL_13
  else449_1:
  endif449:
    MOVEF_F VL_13 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB451:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB452:
    MOVEF_F 40.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB453:
    MOVEF_F 290.0 VMM_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB454:
    STRINGS DUPLICATE 'A' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB455:
    MOVEF_F 100.0 VGRAD_5
    MOVEF_F -60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB456:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB457:
    MOVEF_F 70.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB458:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB459:
    JR_NEQF VI_13 1.0 else460_1
    WRITE32 ENDSUB_LEFT:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB461:
    JR endif460
  else460_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB462:
    WRITE32 ENDSUB_TOBASE:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB463:
  else460_2:
  endif460:
RETSUB_B2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2_2:
SUB_W3_2:
    MOVEF_F 320.0 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB464:
    MOVEF_F 92.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB465:
    MOVEF_F 200.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB466:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds468
	MOVEF_32 1000.0 milliseconds468
	DATA32 timer468
	TIMER_WAIT milliseconds468 timer468
	TIMER_READY timer468
    MOVEF_F 0.0 VL_14
    JR_NEQF VN_14 2.0 else469_1
    ADDF VL_14 40.0 VL_14
  else469_1:
  endif469:
    MOVEF_F VL_14 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB471:
    MOVEF_F 93.0 VGRAD_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB472:
    MOVEF_F 30.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB473:
    MOVEF_F 25.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB474:
    MOVEF_F 280.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB475:
    DATA32 milliseconds476
	MOVEF_32 100.0 milliseconds476
	DATA32 timer476
	TIMER_WAIT milliseconds476 timer476
	TIMER_READY timer476
    STRINGS DUPLICATE 'D' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB477:
    MOVEF_F 190.0 VGRAD_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB478:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB479:
    MOVEF_F 500.0 VMM_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB480:
    MOVEF_F 120.0 VGRAD_5
    MOVEF_F -60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB481:
    MOVEF_F 60.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB482:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB483:
    JR_NEQF VI_14 1.0 else484_1
    WRITE32 ENDSUB_LEFT:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB485:
    JR endif484
  else484_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB486:
    WRITE32 ENDSUB_TOBASE:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB487:
  else484_2:
  endif484:
RETSUB_W3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W3_2:
SUB_B3_2:
    MOVEF_F 90.0 VGRAD_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB488:
    DATA32 milliseconds489
	MOVEF_32 100.0 milliseconds489
	DATA32 timer489
	TIMER_WAIT milliseconds489 timer489
	TIMER_READY timer489
    MOVEF_F 90.0 VL_15
    JR_NEQF VN_15 2.0 else490_1
    SUBF VL_15 50.0 VL_15
  else490_1:
  endif490:
    DATA32 milliseconds492
	MOVEF_32 100.0 milliseconds492
	DATA32 timer492
	TIMER_WAIT milliseconds492 timer492
	TIMER_READY timer492
    MOVEF_F VL_15 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB493:
    DATA32 milliseconds494
	MOVEF_32 100.0 milliseconds494
	DATA32 timer494
	TIMER_WAIT milliseconds494 timer494
	TIMER_READY timer494
    MOVEF_F 95.0 VGRAD_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB495:
    DATA32 milliseconds496
	MOVEF_32 100.0 milliseconds496
	DATA32 timer496
	TIMER_WAIT milliseconds496 timer496
	TIMER_READY timer496
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB497:
    STRINGS DUPLICATE 'A' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB498:
    MOVEF_F 310.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB499:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB500:
    MOVEF_F 90.0 VGRAD_5
    MOVEF_F -60.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB501:
    MOVEF_F 120.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB502:
    MOVEF_F -20.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB503:
    JR_NEQF VI_15 1.0 else504_1
    WRITE32 ENDSUB_LEFT:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB505:
    JR endif504
  else504_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB506:
    WRITE32 ENDSUB_TOBASE:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB507:
  else504_2:
  endif504:
RETSUB_B3_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B3_2:
SUB_W4_2:
    MOVEF_F 130.0 VMM_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB508:
    MOVEF_F 93.0 VGRAD_4
    MOVEF_F 50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB509:
    JR_NEQF VN_16 2.0 else510_1
    MOVEF_F 15.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB511:
    JR endif510
  else510_1:
    MOVEF_F 30.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB512:
  else510_2:
  endif510:
    STRINGS DUPLICATE 'D' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB513:
    MOVEF_F 45.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB514:
    MOVEF_F 105.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB515:
    STRINGS DUPLICATE 'D' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB516:
    MOVEF_F 280.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB517:
    MOVEF_F 110.0 VGRAD_5
    MOVEF_F -50.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB518:
    JR_NEQF VN_16 2.0 else519_1
    MOVEF_F 50.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB520:
    JR endif519
  else519_1:
    MOVEF_F 30.0 VMM_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB521:
  else519_2:
  endif519:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB522:
    JR_NEQF VI_16 1.0 else523_1
    WRITE32 ENDSUB_LEFT:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB524:
    JR endif523
  else523_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB525:
    WRITE32 ENDSUB_TOBASE:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB526:
  else523_2:
  endif523:
RETSUB_W4_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W4_2:
SUB_B4_2:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds528
	MOVEF_32 100.0 milliseconds528
	DATA32 timer528
	TIMER_WAIT milliseconds528 timer528
	TIMER_READY timer528
    MOVEF_F 280.0 VMM_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB529:
    MOVEF_F 93.0 VGRAD_4
    MOVEF_F 50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB530:
    JR_NEQF VN_17 2.0 else531_1
    MOVEF_F 10.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB532:
    JR endif531
  else531_1:
    MOVEF_F 25.0 VMM_3
    MOVEF_F 20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB533:
  else531_2:
  endif531:
    STRINGS DUPLICATE 'A' VMOTOR_9
    MOVEF_F 20.0 VSPEED_9
    WRITE32 ENDSUB_DOWN_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB534:
    MOVEF_F 50.0 VMM_3
    MOVEF_F -20.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB535:
    MOVEF_F 98.0 VGRAD_7
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB536:
    STRINGS DUPLICATE 'A' VMOTOR_8
    MOVEF_F 60.0 VSPEED_8
    WRITE32 ENDSUB_UP_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB537:
    MOVEF_F 500.0 VMM_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB538:
    MOVEF_F 100.0 VGRAD_5
    MOVEF_F -50.0 VSP_5
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB539:
    MOVEF_F 30.0 VMM_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_TOMM_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB540:
    MOVEF_F -30.0 VSP_1
    WRITE32 ENDSUB_TOLINE_1:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB541:
    JR_NEQF VI_17 1.0 else542_1
    WRITE32 ENDSUB_LEFT:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB543:
    JR endif542
  else542_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB544:
    WRITE32 ENDSUB_TOBASE:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOBASE
CALLSUB545:
  else542_2:
  endif542:
RETSUB_B4_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B4_2:
SUB_TH_UP:
    CALL MOTOR.RESETCOUNT 'AD'
    CALL MOTOR.START 'AD' -50.0
    DATA32 milliseconds548
	MOVEF_32 200.0 milliseconds548
	DATA32 timer548
	TIMER_WAIT milliseconds548 timer548
	TIMER_READY timer548
  while549:
    CALL MOTOR.GETCOUNT 'AD' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 180.0 endwhile549
    CALL MOTOR.GETSPEED 'AD' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile549
  whilebody549:
    CALL MOTOR.GETCOUNT 'AD' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 180.0 and554
    CALL MOTOR.GETSPEED 'AD' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 15.0 whilebody549
  and554:
  endwhile549:
    CALL MOTOR.STOP 'AD' 'true'
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_TH_DOWN:
    CALL MOTOR.STARTPOWER 'AD' 50.0
    DATA32 milliseconds562
	MOVEF_32 600.0 milliseconds562
	DATA32 timer562
	TIMER_WAIT milliseconds562 timer562
	TIMER_READY timer562
  while563:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile563
  whilebody563:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody563
  endwhile563:
    CALL MOTOR.STARTPOWER 'AD' 10.0
    CALL SPEAKER.TONE 40.0 700.0 200.0
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
