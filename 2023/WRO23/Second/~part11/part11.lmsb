DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VK_M
DATAF VV_M
DATAF VMM_M
DATAF VK_ACCEL_M
DATAF VMAX1_M
DATAF VMIN1_M
DATAF VMAX2_M
DATAF VMIN2_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VDEG_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAS VFLAG_M 252
ARRAY16 VRES_M 2
DATAF VI_M
DATAF VW2_M
DATAF VB2_M
DATAF VW1_M
DATAF VB1_M
DATAF VW_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VTIME_M
DATAF VMODE_1
DATAF VMM_2
DATAF VV_2
DATAF VL_2
DATAF VSP_2
DATAF VDEG_2
DATAF VU_2
DATAF VDEG_3
DATAF VSP_3
DATAF VL_3
DATAF VV_3
DATAF VDEG_4
DATAF VSP_4
DATAF VL_4
DATAF VV_4
DATAF VDEG_5
DATAF VSP_5
DATAF VL_5
DATAF VV_5
DATAF VDEG_6
DATAF VSP_6
DATAF VL_6
DATAF VV_6
DATAF VSP_7
DATAF VSP_8
DATAF VSP_9
DATAF VSP_10
DATAF VWHITE_10
DATAF VU_10
DATAF VL_10
DATAS VMOTOR_11 252
DATAF VSP_11
DATAS VMOTOR_12 252
DATAF VSP_12
DATA32 RUNCOUNTER_TH_DOWN

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    CALL ARRAYCREATE_FLOAT VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch795
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch795:
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.5 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN2_M
    STRINGS DUPLICATE 'false' VFLAG_M
    DATA32 tmp453
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp453
    JR_NEQ32 0 tmp453 alreadylaunched453
    OBJECT_START TTH_DOWN
  alreadylaunched453:
    MOVEF_F 25.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB454:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB455:
  while456:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile456
  whilebody456:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody456
  endwhile456:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 240.394493527841 VL_M
  while469:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf473
    DATA8 flag473
    DIVF F.1 2.0 tmpf473
    CP_EQF 0.0 2.0 flag473
    SELECTF flag473 0.0 tmpf473 F.0

    JR_GTEQF F.0 VL_M endwhile469
  whilebody469:
    WRITE32 ENDSUB_LINE3_1SENS:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3_1SENS
CALLSUB474:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf478
    DATA8 flag478
    DIVF F.1 2.0 tmpf478
    CP_EQF 0.0 2.0 flag478
    SELECTF flag478 0.0 tmpf478 F.0

    JR_LTF F.0 VL_M whilebody469
  endwhile469:
    CALL VECTOR.INIT 4.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
  for480:
    JR_GTF VI_M 3.0 endfor480
  forbody480:
    WRITE32 ENDSUB_HSV:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB481:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while484:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf488
    DATA8 flag488
    DIVF F.1 2.0 tmpf488
    CP_EQF 0.0 2.0 flag488
    SELECTF flag488 0.0 tmpf488 F.0

    JR_GTEQF F.0 VL_M endwhile484
  whilebody484:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB489:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf493
    DATA8 flag493
    DIVF F.1 2.0 tmpf493
    CP_EQF 0.0 2.0 flag493
    SELECTF flag493 0.0 tmpf493 F.0

    JR_LTF F.0 VL_M whilebody484
  endwhile484:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody480
  endfor480:
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VI_M
  for495:
    JR_GTF VI_M 3.0 endfor495
  forbody495:
    CALL ARRAYGET_FLOAT VI_M VNUM_M VRES_M
    JR_LTEQF VNUM_M VMAX1_M else497_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VW2_M VB2_M
    MOVEF_F VNUM_M VMAX1_M
    MOVEF_F VI_M VW2_M
    JR endif497
  else497_1:
    JR_LTEQF VNUM_M VMAX2_M else497_2
    MOVEF_F VNUM_M VMAX2_M
    MOVEF_F VI_M VB2_M
  else497_2:
  endif497:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody495
  endfor495:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VL_M
  while500:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf504
    DATA8 flag504
    DIVF F.1 2.0 tmpf504
    CP_EQF 0.0 2.0 flag504
    SELECTF flag504 0.0 tmpf504 F.0

    JR_GTEQF F.0 VL_M endwhile500
  whilebody500:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB505:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf509
    DATA8 flag509
    DIVF F.1 2.0 tmpf509
    CP_EQF 0.0 2.0 flag509
    SELECTF flag509 0.0 tmpf509 F.0

    JR_LTF F.0 VL_M whilebody500
  endwhile500:
    MOVEF_F 0.0 VI_M
  for510:
    JR_GTF VI_M 3.0 endfor510
  forbody510:
    WRITE32 ENDSUB_HSV:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB511:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while514:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf518
    DATA8 flag518
    DIVF F.1 2.0 tmpf518
    CP_EQF 0.0 2.0 flag518
    SELECTF flag518 0.0 tmpf518 F.0

    JR_GTEQF F.0 VL_M endwhile514
  whilebody514:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB519:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf523
    DATA8 flag523
    DIVF F.1 2.0 tmpf523
    CP_EQF 0.0 2.0 flag523
    SELECTF flag523 0.0 tmpf523 F.0

    JR_LTF F.0 VL_M whilebody514
  endwhile514:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody510
  endfor510:
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VI_M
  for525:
    JR_GTF VI_M 3.0 endfor525
  forbody525:
    CALL ARRAYGET_FLOAT VI_M VNUM_M VRES_M
    JR_LTEQF VNUM_M VMAX1_M else527_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VW1_M VB1_M
    MOVEF_F VNUM_M VMAX1_M
    MOVEF_F VI_M VW1_M
    JR endif527
  else527_1:
    JR_LTEQF VNUM_M VMAX2_M else527_2
    MOVEF_F VNUM_M VMAX2_M
    MOVEF_F VI_M VB1_M
  else527_2:
  endif527:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody525
  endfor525:
    ADDF VB1_M 1.0 VB1_M
    ADDF VB2_M 1.0 VB2_M
    ADDF VW1_M 1.0 VW1_M
    ADDF VW2_M 1.0 VW2_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 110.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB542:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB544:
    MOVEF_F 60.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB545:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB546:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds548
	MOVEF_32 1000.0 milliseconds548
	DATA32 timer548
	TIMER_WAIT milliseconds548 timer548
	TIMER_READY timer548
    MOVEF_F 800.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB549:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB550:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB551:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds553
	MOVEF_32 1000.0 milliseconds553
	DATA32 timer553
	TIMER_WAIT milliseconds553 timer553
	TIMER_READY timer553
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB554:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB555:
    MOVEF_F 800.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB556:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB557:
    MOVEF_F 20.0 VDEG_4
    MOVEF_F 50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB558:
    MOVEF_F 95.0 VDEG_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB559:
    MOVEF_F 80.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB560:
    MOVEF_F 25.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB561:
    MOVEF_F 330.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB562:
    MOVEF_F 330.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB563:
    MOVEF_F 80.0 VDEG_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB564:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB565:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB566:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB567:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds569
	MOVEF_32 1200.0 milliseconds569
	DATA32 timer569
	TIMER_WAIT milliseconds569 timer569
	TIMER_READY timer569
    TIMER_READ timeMC2
    MOVEF_F VB1_M VB_M
    MOVEF_F VW1_M VW_M
    JR_NEQF VB_M 2.0 and573
    JR_EQF VW_M 1.0 or572
  and573:
    JR_NEQF VB_M 3.0 else571_1
    JR_NEQF VW_M 4.0 else571_1
  or572:
    MOVEF_F 105.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB574:
    MOVEF_F 93.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB575:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB576:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB577:
    JR_NEQF VB_M 2.0 else578_1
    MOVEF_F 310.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB579:
    WRITE32 ENDSUB_W1B2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB580:
    MOVEF_F 600.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB581:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds583
	MOVEF_32 1500.0 milliseconds583
	DATA32 timer583
	TIMER_WAIT milliseconds583 timer583
	TIMER_READY timer583
    CALL MOTOR.STOP 'BC' 'true'
    JR endif578
  else578_1:
    MOVEF_F 175.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB585:
    WRITE32 ENDSUB_W1B2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB586:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB587:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds589
	MOVEF_32 1500.0 milliseconds589
	DATA32 timer589
	TIMER_WAIT milliseconds589 timer589
	TIMER_READY timer589
    CALL MOTOR.STOP 'BC' 'true'
  else578_2:
  endif578:
    JR endif571
  else571_1:
    MOVEF_F 105.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB591:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB592:
    MOVEF_F 30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB593:
    JR_EQF VB_M 1.0 or595
    JR_NEQF VW_M 2.0 else594_1
  or595:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB596:
    JR_NEQF VW_M 2.0 else597_1
    WRITE32 ENDSUB_W2:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB598:
  else597_1:
  endif597:
    JR_NEQF VB_M 1.0 else599_1
    WRITE32 ENDSUB_B1:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB600:
  else599_1:
  endif599:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB601:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB602:
    JR endif594
  else594_1:
    JR_EQF VB_M 2.0 or603
    JR_NEQF VW_M 1.0 else594_2
  or603:
    MOVEF_F 7.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB604:
    JR_NEQF VB_M 2.0 else605_1
    MOVEF_F 8.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB606:
    WRITE32 ENDSUB_B2:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB607:
  else605_1:
  endif605:
    JR_NEQF VW_M 1.0 else608_1
    WRITE32 ENDSUB_W1:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB609:
  else608_1:
  endif608:
    MOVEF_F 105.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB610 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB610:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB611:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB612:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB613:
  else594_2:
  endif594:
    JR_EQF VW_M 3.0 or615
    JR_NEQF VB_M 4.0 else614_1
  or615:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds617
	MOVEF_32 300.0 milliseconds617
	DATA32 timer617
	TIMER_WAIT milliseconds617 timer617
	TIMER_READY timer617
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB618:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB619:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB620:
    JR_NEQF VW_M 3.0 else621_1
    WRITE32 ENDSUB_W2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB622:
  else621_1:
  endif621:
    JR_NEQF VB_M 4.0 else623_1
    WRITE32 ENDSUB_B1:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB624:
  else623_1:
  endif623:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB625:
    JR endif614
  else614_1:
    JR_EQF VW_M 4.0 or626
    JR_NEQF VB_M 3.0 else614_2
  or626:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB627:
    MOVEF_F 410.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB628:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB629:
    JR_NEQF VW_M 4.0 else630_1
    WRITE32 ENDSUB_W1:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB631:
  else630_1:
  endif630:
    JR_NEQF VB_M 3.0 else632_1
    WRITE32 ENDSUB_B2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB633:
  else632_1:
  endif632:
    MOVEF_F 105.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB634:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB635:
    JR endif614
  else614_2:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB636 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB636:
  else614_3:
  endif614:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB637:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB638:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB639 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB639:
    CALL MOTOR.START 'AD' -30.0
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds642
	MOVEF_32 1500.0 milliseconds642
	DATA32 timer642
	TIMER_WAIT milliseconds642 timer642
	TIMER_READY timer642
  else571_2:
  endif571:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE1_M
    STRINGS DUPLICATE 'true' VFLAG_M
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB644 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB644:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB645:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds647
	MOVEF_32 2000.0 milliseconds647
	DATA32 timer647
	TIMER_WAIT milliseconds647 timer647
	TIMER_READY timer647
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB649:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB650:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB652:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 40.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB654:
    MOVEF_F 45.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB655:
    MOVEF_F 400.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB656 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB656:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB657:
    MOVEF_F 35.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB658:
    MOVEF_F 150.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB659:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB660:
    MOVEF_F 100.0 VDEG_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB661:
    MOVEF_F 650.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB662:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB663 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB663:
    MOVEF_F 13.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB664:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB665:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB666:
    MOVEF_F 97.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB667:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB668:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds670
	MOVEF_32 1500.0 milliseconds670
	DATA32 timer670
	TIMER_WAIT milliseconds670 timer670
	TIMER_READY timer670
    TIMER_READ timeMC2
    MOVEF_F VB2_M VB_M
    MOVEF_F VW2_M VW_M
    JR_NEQF VB_M 2.0 and674
    JR_EQF VW_M 1.0 or673
  and674:
    JR_NEQF VB_M 3.0 else672_1
    JR_NEQF VW_M 4.0 else672_1
  or673:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB675 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB675:
    MOVEF_F 92.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB676:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB677:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB678:
    JR_NEQF VB_M 2.0 else679_1
    MOVEF_F 180.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB680 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB680:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB681:
    WRITE32 ENDSUB_W1B2:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB682:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB683:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB684:
    JR endif679
  else679_1:
    JR_NEQF VB_M 3.0 else679_2
    MOVEF_F 190.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB685:
    WRITE32 ENDSUB_W1B2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB686:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB687:
  else679_2:
  endif679:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB688:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB689:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds691
	MOVEF_32 1000.0 milliseconds691
	DATA32 timer691
	TIMER_WAIT milliseconds691 timer691
	TIMER_READY timer691
    JR endif672
  else672_1:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB692:
    MOVEF_F 88.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB693:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB694:
    MOVEF_F 30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB695 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB695:
    JR_EQF VW_M 2.0 or697
    JR_NEQF VB_M 1.0 else696_1
  or697:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB698:
    JR_NEQF VW_M 2.0 else699_1
    WRITE32 ENDSUB_W2:CALLSUB700 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB700:
  else699_1:
  endif699:
    JR_NEQF VB_M 1.0 else701_1
    WRITE32 ENDSUB_B1:CALLSUB702 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB702:
  else701_1:
  endif701:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB703:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB704:
  else696_1:
  endif696:
    JR_EQF VW_M 1.0 or706
    JR_NEQF VB_M 2.0 else705_1
  or706:
    JR_NEQF VW_M 1.0 else707_1
    WRITE32 ENDSUB_W1:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB708:
  else707_1:
  endif707:
    JR_NEQF VB_M 2.0 else709_1
    WRITE32 ENDSUB_B2:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB710:
  else709_1:
  endif709:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB711:
    MOVEF_F 89.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB712:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB713:
    MOVEF_F 20.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB714:
  else705_1:
  endif705:
    JR_EQF VW_M 3.0 or716
    JR_NEQF VB_M 4.0 else715_1
  or716:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB717:
    JR_NEQF VW_M 3.0 else718_1
    WRITE32 ENDSUB_W2:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB719:
  else718_1:
  endif718:
    JR_NEQF VB_M 4.0 else720_1
    WRITE32 ENDSUB_B1:CALLSUB721 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB721:
  else720_1:
  endif720:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB722:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB723:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB724:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds726
	MOVEF_32 1500.0 milliseconds726
	DATA32 timer726
	TIMER_WAIT milliseconds726 timer726
	TIMER_READY timer726
    JR endif715
  else715_1:
    JR_EQF VW_M 4.0 or727
    JR_NEQF VB_M 3.0 else715_2
  or727:
    MOVEF_F 500.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB728 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB728:
    JR_NEQF VW_M 4.0 else729_1
    WRITE32 ENDSUB_W1:CALLSUB730 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB730:
  else729_1:
  endif729:
    JR_NEQF VB_M 3.0 else731_1
    WRITE32 ENDSUB_B2:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB732:
  else731_1:
  endif731:
    JR endif715
  else715_2:
    MOVEF_F 350.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB733:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB734:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB735:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds737
	MOVEF_32 1500.0 milliseconds737
	DATA32 timer737
	TIMER_WAIT milliseconds737 timer737
	TIMER_READY timer737
  else715_3:
  endif715:
  else672_2:
  endif672:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE2_M
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB739:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB740:
    CALL MOTOR.RESETCOUNT 'BC'
  while742:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 55.0 endwhile742
  whilebody742:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 40.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 55.0 whilebody742
  endwhile742:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB754:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB755:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds757
	MOVEF_32 1000.0 milliseconds757
	DATA32 timer757
	TIMER_WAIT milliseconds757 timer757
	TIMER_READY timer757
    MOVEF_F 190.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB758 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB758:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB759 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB759:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB760 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB760:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB761:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds763
	MOVEF_32 1000.0 milliseconds763
	DATA32 timer763
	TIMER_WAIT milliseconds763 timer763
	TIMER_READY timer763
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB765:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB766:
    CALL MOTOR.START 'AD' -50.0
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB768:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB770 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB770:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB771:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB772:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB773:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds775
	MOVEF_32 1000.0 milliseconds775
	DATA32 timer775
	TIMER_WAIT milliseconds775 timer775
	TIMER_READY timer775
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 55.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB777:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB778 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB778:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB779:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds781
	MOVEF_32 1000.0 milliseconds781
	DATA32 timer781
	TIMER_WAIT milliseconds781 timer781
	TIMER_READY timer781
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB782:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VTIME_M
    CALL LCD.CLEAR
    DATAF tmpf785
    DATA8 flag785
    DIVF VTIME_M 1000.0 tmpf785
    CP_EQF 0.0 1000.0 flag785
    SELECTF flag785 0.0 tmpf785 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf788
    DATA8 flag788
    DIVF VZONE1_M 1000.0 tmpf788
    CP_EQF 0.0 1000.0 flag788
    SELECTF flag788 0.0 tmpf788 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf791
    DATA8 flag791
    DIVF VZONE2_M 1000.0 tmpf791
    CP_EQF 0.0 1000.0 flag791
    SELECTF flag791 0.0 tmpf791 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    WRITE32 ENDSUB_FRZ:CALLSUB794 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB794:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.0 F.1 tmpf12
    CP_EQF 0.0 F.1 flag12
    SELECTF flag12 0.0 tmpf12 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf17
    DATA8 flag17
    DIVF F.0 F.1 tmpf17
    CP_EQF 0.0 F.1 flag17
    SELECTF flag17 0.0 tmpf17 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE_1:
    JR_NEQF VMODE_1 1.0 else18_1
    MOVEF_F 0.7 VK_M
    MOVEF_F 85.0 VV_M
    JR endif18
  else18_1:
    JR_NEQF VMODE_1 2.0 else18_2
    MOVEF_F 0.7 VK_M
    MOVEF_F 55.0 VV_M
    JR endif18
  else18_2:
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
  else18_3:
  endif18:
    WRITE32 ENDSUB_LINE_FOL:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_FOL
CALLSUB19:
RETSUB_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_1:
SUB_LINE_FOL:
    WRITE32 ENDSUB_SEN1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB20:
    WRITE32 ENDSUB_SEN2:CALLSUB21 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB21:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE_FOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_FOL:
SUB_LINE_ACCELERATION:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF VMM_M F.1 tmpf31
    CP_EQF 0.0 F.1 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    MULF F.0 360.0 VL_M
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
    MOVEF_F 0.0 VDEG_M
    CALL MOTOR.RESETCOUNT 'BC'
  while34:
    JR_GTEQF VDEG_M VL_M endwhile34
  whilebody34:
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf38
    DATA8 flag38
    DIVF F.0 2.0 tmpf38
    CP_EQF 0.0 2.0 flag38
    SELECTF flag38 0.0 tmpf38 VDEG_M

    MULF VL_M 0.5 F.0
    JR_GTEQF VDEG_M F.0 else39_1
    JR_GTEQF VV_M 95.0 else39_1
    ADDF VV_M VK_ACCEL_M VV_M
    JR endif39
  else39_1:
    MULF 0.6 VL_M F.0
    JR_LTEQF VDEG_M F.0 else39_2
    JR_LTEQF VV_M 30.0 else39_2
    SUBF VV_M VK_ACCEL_M VV_M
  else39_2:
  endif39:
    JR_GTEQF VV_M 40.0 else44_1
    MOVEF_F 1.2 VK_M
    JR endif44
  else44_1:
    JR_GTEQF VV_M 65.0 else44_2
    MOVEF_F 0.8 VK_M
    JR endif44
  else44_2:
    JR_GTEQF VV_M 100.0 else44_3
    MOVEF_F 0.8 VK_M
  else44_3:
  endif44:
    WRITE32 ENDSUB_SEN1:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB45:
    WRITE32 ENDSUB_SEN2:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB46:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_M VL_M whilebody34
  endwhile34:
RETSUB_LINE_ACCELERATION:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_ACCELERATION:
SUB_LINE2_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE2_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2_1SENS:
SUB_LINE3_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.4 F.1
    ADDF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.4 F.1
    SUBF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE3_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3_1SENS:
SUB_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF VMM_2 F.1 tmpf72
    CP_EQF 0.0 F.1 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    MULF F.0 360.0 VL_2
    JR_GTEQF VV_2 0.0 else74_1
    MOVEF_F -20.0 VSP_2
    JR endif74
  else74_1:
    MOVEF_F 20.0 VSP_2
  else74_2:
  endif74:
    MOVEF_F 0.0 VDEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while76:
    JR_GTEQF VDEG_2 VL_2 endwhile76
  whilebody76:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf81
    DATA8 flag81
    DIVF F.0 2.0 tmpf81
    CP_EQF 0.0 2.0 flag81
    SELECTF flag81 0.0 tmpf81 VDEG_2

    MULF VL_2 0.8 F.0
    JR_LTEQF VDEG_2 F.0 else82_1
    MATH ABS VSP_2 F.0
    JR_LTEQF F.0 20.0 else82_1
    JR_LTEQF VV_2 0.0 else85_1
    SUBF VSP_2 0.3 VSP_2
    JR endif85
  else85_1:
    ADDF VSP_2 0.3 VSP_2
  else85_2:
  endif85:
    JR endif82
  else82_1:
    MATH ABS VSP_2 F.0
    MATH ABS VV_2 F.1
    JR_GTEQF F.0 F.1 else82_2
    JR_LTEQF VV_2 0.0 else90_1
    ADDF VSP_2 0.3 VSP_2
    JR endif90
  else90_1:
    SUBF VSP_2 0.3 VSP_2
  else90_2:
  endif90:
  else82_2:
  endif82:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 2.0 F.1
    ADDF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 2.0 F.1
    SUBF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_2 VL_2 whilebody76
  endwhile76:
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_RIGHT1_2:
    MULF 1092.72 VDEG_3 F.0
    DATAF tmpf103
    DATA8 flag103
    DIVF F.0 360.0 tmpf103
    CP_EQF 0.0 360.0 flag103
    SELECTF flag103 0.0 tmpf103 VL_3

    DATAF tmpf104
    DATA8 flag104
    DIVF VL_3 210.38 tmpf104
    CP_EQF 0.0 210.38 flag104
    SELECTF flag104 0.0 tmpf104 F.0

    MULF F.0 360.0 VL_3
    MOVEF_F 20.0 VV_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_3
  while107:
    JR_GTF VDEG_3 VL_3 endwhile107
  whilebody107:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VDEG_3
    CALL MOTOR.STARTPOWER 'B' VV_3
    MULF VL_3 0.2 F.0
    JR_LTF VDEG_3 F.0 or112
    MULF VL_3 0.8 F.0
    JR_LTEQF VDEG_3 F.0 else111_1
  or112:
    JR_GTEQF VSP_3 0.0 else115_1
    MOVEF_F -20.0 VV_3
    JR endif115
  else115_1:
    MOVEF_F 20.0 VV_3
  else115_2:
  endif115:
    JR endif111
  else111_1:
    MOVEF_F VSP_3 VV_3
  else111_2:
  endif111:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VDEG_3 VL_3 whilebody107
  endwhile107:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT1_2:
    MULF 1092.72 VDEG_4 F.0
    DATAF tmpf119
    DATA8 flag119
    DIVF F.0 360.0 tmpf119
    CP_EQF 0.0 360.0 flag119
    SELECTF flag119 0.0 tmpf119 VL_4

    DATAF tmpf120
    DATA8 flag120
    DIVF VL_4 210.38 tmpf120
    CP_EQF 0.0 210.38 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    MULF F.0 360.0 VL_4
    MOVEF_F 20.0 VV_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_4
  while123:
    JR_GTF VDEG_4 VL_4 endwhile123
  whilebody123:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VDEG_4
    CALL MOTOR.STARTPOWER 'C' VV_4
    MULF VL_4 0.2 F.0
    JR_LTF VDEG_4 F.0 or128
    MULF VL_4 0.8 F.0
    JR_LTEQF VDEG_4 F.0 else127_1
  or128:
    JR_GTEQF VSP_4 0.0 else131_1
    MOVEF_F -20.0 VV_4
    JR endif131
  else131_1:
    MOVEF_F 20.0 VV_4
  else131_2:
  endif131:
    JR endif127
  else127_1:
    MOVEF_F VSP_4 VV_4
  else127_2:
  endif127:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VDEG_4 VL_4 whilebody123
  endwhile123:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_5 F.0
    DATAF tmpf138
    DATA8 flag138
    DIVF F.0 360.0 tmpf138
    CP_EQF 0.0 360.0 flag138
    SELECTF flag138 0.0 tmpf138 VL_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf141
    DATA8 flag141
    DIVF VL_5 F.2 tmpf141
    CP_EQF 0.0 F.2 flag141
    SELECTF flag141 0.0 tmpf141 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf143
    DATA8 flag143
    DIVF F.0 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 VL_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 20.0 VV_5
    MOVEF_F 0.0 VDEG_5
  while145:
    JR_GTF VDEG_5 VL_5 endwhile145
  whilebody145:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf151
    DATA8 flag151
    DIVF F.0 2.0 tmpf151
    CP_EQF 0.0 2.0 flag151
    SELECTF flag151 0.0 tmpf151 VDEG_5

    MULF VL_5 0.2 F.0
    JR_LTF VDEG_5 F.0 or153
    MULF VL_5 0.8 F.0
    JR_LTEQF VDEG_5 F.0 else152_1
  or153:
    MOVEF_F 20.0 VV_5
    JR endif152
  else152_1:
    MOVEF_F VSP_5 VV_5
  else152_2:
  endif152:
    CALL MOTOR.STARTPOWER 'B' VV_5
    SUBF 0.0 VV_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VDEG_5 VL_5 whilebody145
  endwhile145:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_6 F.0
    DATAF tmpf164
    DATA8 flag164
    DIVF F.0 360.0 tmpf164
    CP_EQF 0.0 360.0 flag164
    SELECTF flag164 0.0 tmpf164 VL_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf167
    DATA8 flag167
    DIVF VL_6 F.2 tmpf167
    CP_EQF 0.0 F.2 flag167
    SELECTF flag167 0.0 tmpf167 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf169
    DATA8 flag169
    DIVF F.0 2.0 tmpf169
    CP_EQF 0.0 2.0 flag169
    SELECTF flag169 0.0 tmpf169 VL_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 20.0 VV_6
    MOVEF_F 0.0 VDEG_6
  while171:
    JR_GTF VDEG_6 VL_6 endwhile171
  whilebody171:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf177
    DATA8 flag177
    DIVF F.0 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 VDEG_6

    MULF VL_6 0.2 F.0
    JR_LTF VDEG_6 F.0 or179
    MULF VL_6 0.8 F.0
    JR_LTEQF VDEG_6 F.0 else178_1
  or179:
    MOVEF_F 20.0 VV_6
    JR endif178
  else178_1:
    MOVEF_F VSP_6 VV_6
  else178_2:
  endif178:
    SUBF 0.0 VV_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VV_6
    JR_LTEQF VDEG_6 VL_6 whilebody171
  endwhile171:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_7 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB186:
    MOVEF_F 50.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB187:
    CALL MOTOR.START 'B' VSP_7
    SUBF 0.0 VSP_7 F.0
    CALL MOTOR.START 'C' F.0
  while191:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile191
  whilebody191:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody191
  endwhile191:
  while194:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile194
  whilebody194:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody194
  endwhile194:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB198:
RETSUB_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT_1:
SUB_LEFT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_8 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB199:
    MOVEF_F 50.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB200:
    SUBF 0.0 VSP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_8
  while204:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile204
  whilebody204:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody204
  endwhile204:
  while207:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile207
  whilebody207:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody207
  endwhile207:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB211:
RETSUB_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT_1:
SUB_AROUND_1:
    MOVEF_F 140.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB212:
    SUBF 0.0 VSP_9 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_9
  while216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile216
  whilebody216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody216
  endwhile216:
  while219:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile219
  whilebody219:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody219
  endwhile219:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB223:
RETSUB_AROUND_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND_1:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_10
    DATA8 layer225
	DATA8 no225
	DATA8 mode8225
	
	MOVEF_8 2.0 no225
	SUB8 no225 1 no225
	DIV8 no225 4 layer225
	MATH MOD8 no225 4 no225

	MOVEF_8 2.0 mode8225
	
	INPUT_DEVICE READY_RAW layer225 no225 0 mode8225 0
    DATA8 layer226
	DATA8 no226
	DATA8 mode8226
	
	MOVEF_8 3.0 no226
	SUB8 no226 1 no226
	DIV8 no226 4 layer226
	MATH MOD8 no226 4 no226

	MOVEF_8 2.0 mode8226
	
	INPUT_DEVICE READY_RAW layer226 no226 0 mode8226 0
  while227:
    JR_EQF VWHITE_10 1.0 endwhile227
  whilebody227:
  while228:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or229
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile228
  or229:
  whilebody228:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody228
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody228
  endwhile228:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VL_10
  while244:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_10 endwhile244
  whilebody244:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_10 whilebody244
  endwhile244:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else258_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else258_1
    MOVEF_F 1.0 VWHITE_10
  else258_1:
  endif258:
    JR_NEQF VWHITE_10 1.0 whilebody227
  endwhile227:
    DATA8 layer261
	DATA8 no261
	DATA8 mode8261
	
	MOVEF_8 2.0 no261
	SUB8 no261 1 no261
	DIV8 no261 4 layer261
	MATH MOD8 no261 4 no261

	MOVEF_8 0.0 mode8261
	
	INPUT_DEVICE READY_RAW layer261 no261 0 mode8261 0
    DATA8 layer262
	DATA8 no262
	DATA8 mode8262
	
	MOVEF_8 3.0 no262
	SUB8 no262 1 no262
	DIV8 no262 4 layer262
	MATH MOD8 no262 4 no262

	MOVEF_8 0.0 mode8262
	
	INPUT_DEVICE READY_RAW layer262 no262 0 mode8262 0
  while263:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile263
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile263
  whilebody263:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and275
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody263
  and275:
  endwhile263:
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_UP_2:
    SUBF 0.0 VSP_11 F.0
    CALL MOTOR.START VMOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds281
	MOVEF_32 500.0 milliseconds281
	DATA32 timer281
	TIMER_WAIT milliseconds281 timer281
	TIMER_READY timer281
  while282:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf286
    DATA8 flag286
    DIVF F.1 2.0 tmpf286
    CP_EQF 0.0 2.0 flag286
    SELECTF flag286 0.0 tmpf286 F.0

    MULF VSP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile282
  whilebody282:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf292
    DATA8 flag292
    DIVF F.1 2.0 tmpf292
    CP_EQF 0.0 2.0 flag292
    SELECTF flag292 0.0 tmpf292 F.0

    MULF VSP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody282
  endwhile282:
    CALL MOTOR.STOP VMOTOR_11 'true'
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.START VMOTOR_12 VSP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds297
	MOVEF_32 500.0 milliseconds297
	DATA32 timer297
	TIMER_WAIT milliseconds297 timer297
	TIMER_READY timer297
  while298:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf302
    DATA8 flag302
    DIVF F.1 2.0 tmpf302
    CP_EQF 0.0 2.0 flag302
    SELECTF flag302 0.0 tmpf302 F.0

    MULF VSP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile298
  whilebody298:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf307
    DATA8 flag307
    DIVF F.1 2.0 tmpf307
    CP_EQF 0.0 2.0 flag307
    SELECTF flag307 0.0 tmpf307 F.0

    MULF VSP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody298
  endwhile298:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VMOTOR_12 -20.0 0.0 20.0 0.0 'true' 

	DATA8 layer310
	DATA8 nos310
	DATA8 busy310
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_12 layer310 nos310
	JR_EQ8 0 nos310 motornotbusy310
  motorwaiting310:
	OUTPUT_TEST layer310 nos310 busy310
	JR_EQ8 busy310 0 motornotbusy310
	SLEEP
	JR motorwaiting310
  motornotbusy310:
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_TH_DOWN:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds312
	MOVEF_32 500.0 milliseconds312
	DATA32 timer312
	TIMER_WAIT milliseconds312 timer312
	TIMER_READY timer312
  while313:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf317
    DATA8 flag317
    DIVF F.1 2.0 tmpf317
    CP_EQF 0.0 2.0 flag317
    SELECTF flag317 0.0 tmpf317 F.0

    JR_LTEQF F.0 35.0 endwhile313
  whilebody313:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf321
    DATA8 flag321
    DIVF F.1 2.0 tmpf321
    CP_EQF 0.0 2.0 flag321
    SELECTF flag321 0.0 tmpf321 F.0

    JR_GTF F.0 35.0 whilebody313
  endwhile313:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 20.0 0.0 'true' 

	DATA8 layer323
	DATA8 nos323
	DATA8 busy323
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer323 nos323
	JR_EQ8 0 nos323 motornotbusy323
  motorwaiting323:
	OUTPUT_TEST layer323 nos323 busy323
	JR_EQ8 busy323 0 motornotbusy323
	SLEEP
	JR motorwaiting323
  motornotbusy323:
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
SUB_TH_UP:
    CALL MOTOR.START 'AD' -50.0
    DATA32 milliseconds325
	MOVEF_32 300.0 milliseconds325
	DATA32 timer325
	TIMER_WAIT milliseconds325 timer325
	TIMER_READY timer325
  while326:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf330
    DATA8 flag330
    DIVF F.1 2.0 tmpf330
    CP_EQF 0.0 2.0 flag330
    SELECTF flag330 0.0 tmpf330 F.0

    JR_LTEQF F.0 25.0 endwhile326
  whilebody326:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf334
    DATA8 flag334
    DIVF F.1 2.0 tmpf334
    CP_EQF 0.0 2.0 flag334
    SELECTF flag334 0.0 tmpf334 F.0

    JR_GTF F.0 25.0 whilebody326
  endwhile326:
    CALL MOTOR.STOP 'AD' 'true'
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else347_1
    JR_LTEQF VR_M VB_M else347_1
    MOVEF_F VR_M VMAX_M
    JR endif347
  else347_1:
    JR_LTEQF VG_M VR_M else347_2
    JR_LTEQF VG_M VB_M else347_2
    MOVEF_F VG_M VMAX_M
    JR endif347
  else347_2:
    JR_LTEQF VB_M VR_M else347_3
    JR_LTEQF VB_M VG_M else347_3
    MOVEF_F VB_M VMAX_M
  else347_3:
  endif347:
    JR_GTEQF VR_M VG_M else348_1
    JR_GTEQF VR_M VB_M else348_1
    MOVEF_F VR_M VMIN_M
    JR endif348
  else348_1:
    JR_GTEQF VG_M VR_M else348_2
    JR_GTEQF VG_M VB_M else348_2
    MOVEF_F VG_M VMIN_M
    JR endif348
  else348_2:
    JR_GTEQF VB_M VR_M else348_3
    JR_GTEQF VB_M VG_M else348_3
    MOVEF_F VB_M VMIN_M
  else348_3:
  endif348:
    JR_NEQF VMAX_M VMIN_M else349_1
    MOVEF_F 0.0 VH_M
    JR endif349
  else349_1:
    JR_NEQF VR_M VMAX_M else350_1
    JR_LTF VG_M VB_M else351_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf355
    DATA8 flag355
    DIVF F.0 F.1 tmpf355
    CP_EQF 0.0 F.1 flag355
    SELECTF flag355 0.0 tmpf355 VH_M

    JR endif351
  else351_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf359
    DATA8 flag359
    DIVF F.1 F.2 tmpf359
    CP_EQF 0.0 F.2 flag359
    SELECTF flag359 0.0 tmpf359 F.0

    ADDF F.0 360.0 VH_M
  else351_2:
  endif351:
    JR endif350
  else350_1:
    JR_NEQF VMAX_M VG_M else361_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf365
    DATA8 flag365
    DIVF F.1 F.2 tmpf365
    CP_EQF 0.0 F.2 flag365
    SELECTF flag365 0.0 tmpf365 F.0

    ADDF F.0 120.0 VH_M
    JR endif361
  else361_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf370
    DATA8 flag370
    DIVF F.1 F.2 tmpf370
    CP_EQF 0.0 F.2 flag370
    SELECTF flag370 0.0 tmpf370 F.0

    ADDF F.0 240.0 VH_M
  else361_2:
  endif361:
  else350_2:
  endif350:
  else349_2:
  endif349:
    JR_NEQF VMAX_M 0.0 else372_1
    MOVEF_F 0.0 VS_M
    JR endif372
  else372_1:
    DATAF tmpf373
    DATA8 flag373
    DIVF VMIN_M VMAX_M tmpf373
    CP_EQF 0.0 VMAX_M flag373
    SELECTF flag373 0.0 tmpf373 F.0

    SUBF 1.0 F.0 VS_M
  else372_2:
  endif372:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB376:
    JR_LTEQF VRGB_M 110.0 else377_1
    MOVEF_F 6.0 VCOL_M
    JR endif377
  else377_1:
    JR_LTEQF VRGB_M 60.0 else377_2
    MOVEF_F 1.0 VCOL_M
  else377_2:
  endif377:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_W1B2:
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB378:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB379:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else380_1
    STRINGS DUPLICATE 'A' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB382:
    JR endif380
  else380_1:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB383:
  else380_2:
  endif380:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB384:
    MOVEF_F 180.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB385:
    JR_NEQF VB_M 3.0 else386_1
    MOVEF_F 73.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB387:
    JR endif386
  else386_1:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB388:
  else386_2:
  endif386:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB389:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB390:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 10.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB392:
    MOVEF_F 7.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB393:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else394_1
    STRINGS DUPLICATE 'D' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB396:
  else394_1:
  endif394:
    MOVEF_F 35.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB397:
    MOVEF_F 106.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB398:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB399:
RETSUB_W1B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1B2:
SUB_W1:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB400:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB401:
    MOVEF_F 320.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB402:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB403:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB404:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB406:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB407:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else408_1
    STRINGS DUPLICATE 'D' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB410:
  else408_1:
  endif408:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB411:
    MOVEF_F 97.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB412:
    MOVEF_F 350.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB413:
    MOVEF_F 95.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB414:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else415_1
    STRINGS DUPLICATE 'D' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB417:
  else415_1:
  endif415:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB418:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds420
	MOVEF_32 1500.0 milliseconds420
	DATA32 timer420
	TIMER_WAIT milliseconds420 timer420
	TIMER_READY timer420
RETSUB_W1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1:
SUB_W2:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB422:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB423:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else424_1
    STRINGS DUPLICATE 'D' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB426:
  else424_1:
  endif424:
RETSUB_W2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2:
SUB_B1:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB428:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB429:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else430_1
    STRINGS DUPLICATE 'A' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB432:
  else430_1:
  endif430:
RETSUB_B1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1:
SUB_B2:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB433:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB434:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB435:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB436:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB437:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB439:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB440:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else441_1
    STRINGS DUPLICATE 'A' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB443:
  else441_1:
  endif441:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB444:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB445:
    MOVEF_F 95.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB446:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else447_1
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB449:
  else447_1:
  endif447:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB450:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds452
	MOVEF_32 1500.0 milliseconds452
	DATA32 timer452
	TIMER_WAIT milliseconds452 timer452
	TIMER_READY timer452
RETSUB_B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
