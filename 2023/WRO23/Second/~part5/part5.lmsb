DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VK_M
DATAF VV_M
DATAF VMM_M
DATAF VK_ACCEL_M
DATAF VMAX1_M
DATAF VMIN1_M
DATAF VMAX2_M
DATAF VMIN2_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VDEG_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAS VFLAG_M 252
DATAF VW1_M
DATAF VB1_M
DATAF VW2_M
DATAF VB2_M
DATAF VMAX1_IND_M
DATAF VMAX2_IND_M
ARRAY16 VRES_M 2
DATAF VI_M
DATAF VMODE_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VDEG_2
DATAF VU_2
DATAF VDEG_3
DATAF VSP_3
DATAF VL_3
DATAF VDEG_4
DATAF VSP_4
DATAF VL_4
DATAF VDEG_5
DATAF VSP_5
DATAF VL_5
DATAF VDEG_6
DATAF VSP_6
DATAF VL_6
DATAF VSP_7
DATAF VSP_8
DATAF VSP_9
DATAF VSP_10
DATAF VWHITE_10
DATAF VU_10
DATAF VL_10
DATAS VMOTOR_11 252
DATAF VSP_11
DATAS VMOTOR_12 252
DATAF VSP_12
DATA32 RUNCOUNTER_TH_DOWN

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VMAX1_IND_M
    MOVEF_F 0.0 VMAX2_IND_M
    CALL ARRAYCREATE_FLOAT VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_TH_DOWN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch609
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch609:
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VMAX1_IND_M
    MOVEF_F 0.0 VMAX2_IND_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.5 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN2_M
    STRINGS DUPLICATE 'false' VFLAG_M
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB351:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB352:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB353:
    MOVEF_F 30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB354:
    DATA32 tmp355
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp355
    JR_NEQ32 0 tmp355 alreadylaunched355
    OBJECT_START TTH_DOWN
  alreadylaunched355:
    MOVEF_F 25.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB356:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB357:
  while358:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile358
  whilebody358:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody358
  endwhile358:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VL_M
  while371:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf375
    DATA8 flag375
    DIVF F.1 2.0 tmpf375
    CP_EQF 0.0 2.0 flag375
    SELECTF flag375 0.0 tmpf375 F.0

    JR_GTEQF F.0 VL_M endwhile371
  whilebody371:
    WRITE32 ENDSUB_LINE3_1SENS:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3_1SENS
CALLSUB376:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf380
    DATA8 flag380
    DIVF F.1 2.0 tmpf380
    CP_EQF 0.0 2.0 flag380
    SELECTF flag380 0.0 tmpf380 F.0

    JR_LTF F.0 VL_M whilebody371
  endwhile371:
    MOVEF_F 0.0 VW1_M
    MOVEF_F 1.0 VB1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 1.0 VB2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX1_IND_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX2_IND_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
  for382:
    JR_GTF VI_M 3.0 endfor382
  forbody382:
    WRITE32 ENDSUB_HSV:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB383:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while386:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf390
    DATA8 flag390
    DIVF F.1 2.0 tmpf390
    CP_EQF 0.0 2.0 flag390
    SELECTF flag390 0.0 tmpf390 F.0

    JR_GTEQF F.0 VL_M endwhile386
  whilebody386:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB391:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 2.0 tmpf395
    CP_EQF 0.0 2.0 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    JR_LTF F.0 VL_M whilebody386
  endwhile386:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody382
  endfor382:
    MOVEF_F 0.0 VI_M
  for397:
    JR_GTF VI_M 3.0 endfor397
  forbody397:
    CALL ARRAYGET_FLOAT VI_M F.0 VRES_M
    JR_LTEQF F.0 VMAX1_M else398_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VMAX1_IND_M VMAX2_IND_M
    CALL ARRAYGET_FLOAT VI_M VMAX1_M VRES_M
    MOVEF_F VI_M VMAX1_IND_M
    JR endif398
  else398_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VRES_M
    JR_LTEQF F.0 VMAX2_M else398_2
    CALL ARRAYGET_FLOAT VI_M VMAX2_M VRES_M
    MOVEF_F VI_M VMAX2_IND_M
  else398_2:
  endif398:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody397
  endfor397:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while405:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf409
    DATA8 flag409
    DIVF F.1 2.0 tmpf409
    CP_EQF 0.0 2.0 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    JR_GTEQF F.0 VL_M endwhile405
  whilebody405:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB410:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf414
    DATA8 flag414
    DIVF F.1 2.0 tmpf414
    CP_EQF 0.0 2.0 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    JR_LTF F.0 VL_M whilebody405
  endwhile405:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMAX1_IND_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_IND_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX1_IND_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX2_IND_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
  for421:
    JR_GTF VI_M 3.0 endfor421
  forbody421:
    WRITE32 ENDSUB_HSV:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB422:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while425:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf429
    DATA8 flag429
    DIVF F.1 2.0 tmpf429
    CP_EQF 0.0 2.0 flag429
    SELECTF flag429 0.0 tmpf429 F.0

    JR_GTEQF F.0 VL_M endwhile425
  whilebody425:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB430:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf434
    DATA8 flag434
    DIVF F.1 2.0 tmpf434
    CP_EQF 0.0 2.0 flag434
    SELECTF flag434 0.0 tmpf434 F.0

    JR_LTF F.0 VL_M whilebody425
  endwhile425:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody421
  endfor421:
    MOVEF_F 0.0 VI_M
  for436:
    JR_GTF VI_M 3.0 endfor436
  forbody436:
    CALL ARRAYGET_FLOAT VI_M F.0 VRES_M
    JR_LTEQF F.0 VMAX1_M else437_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VMAX1_IND_M VMAX2_IND_M
    CALL ARRAYGET_FLOAT VI_M VMAX1_M VRES_M
    MOVEF_F VI_M VMAX1_IND_M
    JR endif437
  else437_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VRES_M
    JR_LTEQF F.0 VMAX2_M else437_2
    CALL ARRAYGET_FLOAT VI_M VMAX2_M VRES_M
    MOVEF_F VI_M VMAX2_IND_M
  else437_2:
  endif437:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody436
  endfor436:
    STRINGS VALUE_FORMATTED VMAX1_IND_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 70.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_IND_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 70.0 50.0 2.0 S.0
    MOVEF_F 150.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB447:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB449:
    MOVEF_F 90.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB450:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB451:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds453
	MOVEF_32 1000.0 milliseconds453
	DATA32 timer453
	TIMER_WAIT milliseconds453 timer453
	TIMER_READY timer453
    MOVEF_F 800.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB454:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB455:
    MOVEF_F 140.0 VMM_2
    MOVEF_F -40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB456:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds458
	MOVEF_32 1000.0 milliseconds458
	DATA32 timer458
	TIMER_WAIT milliseconds458 timer458
	TIMER_READY timer458
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB459:
    MOVEF_F 87.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB460:
    MOVEF_F 950.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB461:
    MOVEF_F 25.0 VDEG_4
    MOVEF_F 50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB462:
    MOVEF_F 75.0 VDEG_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB463:
    MOVEF_F 80.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB464:
    MOVEF_F 25.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB465:
    MOVEF_F 20.0 VDEG_3
    MOVEF_F 50.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB466:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB467:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB468:
    MOVEF_F 20.0 VDEG_3
    MOVEF_F -50.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB469:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB470:
    MOVEF_F 60.0 VDEG_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB471:
    MOVEF_F 350.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB472:
    MOVEF_F 85.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB473:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB474:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds476
	MOVEF_32 1200.0 milliseconds476
	DATA32 timer476
	TIMER_WAIT milliseconds476 timer476
	TIMER_READY timer476
    MOVEF_F 1.0 VW1_M
    MOVEF_F 2.0 VB1_M
    MOVEF_F 4.0 VW2_M
    MOVEF_F 2.0 VB2_M
    JR_NEQF VW1_M 1.0 else477_1
    JR_NEQF VB1_M 2.0 else477_1
    MOVEF_F 110.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB478:
    MOVEF_F 93.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB479:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB480:
    JR endif477
  else477_1:
    MOVEF_F 110.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB481 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB481:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB482:
    MOVEF_F 30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB483:
  else477_2:
  endif477:
    JR_NEQF VW1_M 1.0 else484_1
    JR_NEQF VB1_M 2.0 else484_1
    WRITE32 ENDSUB_W1B2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB485:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB486:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds488
	MOVEF_32 1500.0 milliseconds488
	DATA32 timer488
	TIMER_WAIT milliseconds488 timer488
	TIMER_READY timer488
    JR endif484
  else484_1:
    JR_EQF VW1_M 1.0 or489
    JR_EQF VW1_M 2.0 or489
    JR_EQF VB1_M 1.0 or489
    JR_NEQF VB1_M 2.0 else484_2
  or489:
    JR_EQF VW1_M 1.0 or491
    JR_EQF VW1_M 2.0 or491
    JR_NEQF VB1_M 1.0 else490_1
  or491:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB492:
    JR_NEQF VW1_M 1.0 else493_1
    WRITE32 ENDSUB_W1:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB494:
  else493_1:
  endif493:
    JR_NEQF VW1_M 2.0 else495_1
    WRITE32 ENDSUB_W2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB496:
  else495_1:
  endif495:
    JR_NEQF VB1_M 1.0 else497_1
    WRITE32 ENDSUB_B1:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB498:
  else497_1:
  endif497:
  else490_1:
  endif490:
    JR_NEQF VB1_M 2.0 else499_1
    WRITE32 ENDSUB_B2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB500:
  else499_1:
  endif499:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB501:
  else484_2:
  endif484:
    JR_NEQF VW1_M 4.0 else502_1
    JR_NEQF VB1_M 3.0 else502_1
    MOVEF_F 500.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB503:
    MOVEF_F 185.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB504:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB505:
    WRITE32 ENDSUB_W1B2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB506:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds508
	MOVEF_32 1000.0 milliseconds508
	DATA32 timer508
	TIMER_WAIT milliseconds508 timer508
	TIMER_READY timer508
    JR endif502
  else502_1:
    JR_EQF VW1_M 3.0 or509
    JR_EQF VW1_M 4.0 or509
    JR_EQF VB1_M 3.0 or509
    JR_NEQF VB1_M 4.0 else502_2
  or509:
    MOVEF_F 500.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB510:
    JR_EQF VW1_M 4.0 or512
    JR_EQF VW1_M 3.0 or512
    JR_NEQF VB1_M 4.0 else511_1
  or512:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB513:
    JR_NEQF VW1_M 4.0 else514_1
    WRITE32 ENDSUB_W1:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB515:
  else514_1:
  endif514:
    JR_NEQF VW1_M 3.0 else516_1
    WRITE32 ENDSUB_W2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB517:
  else516_1:
  endif516:
    JR_NEQF VB1_M 4.0 else518_1
    WRITE32 ENDSUB_B1:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB519:
  else518_1:
  endif518:
  else511_1:
  endif511:
    JR_NEQF VB1_M 3.0 else520_1
    WRITE32 ENDSUB_B2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB521:
  else520_1:
  endif520:
  else502_2:
  endif502:
    JR_NEQF VW1_M 1.0 or523
    JR_EQF VB1_M 2.0 else522_1
  or523:
    JR_NEQF VW1_M 4.0 or524
    JR_EQF VB1_M 3.0 else522_1
  or524:
    MOVEF_F 80.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB525:
    MOVEF_F 85.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB526:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB527:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds529
	MOVEF_32 1000.0 milliseconds529
	DATA32 timer529
	TIMER_WAIT milliseconds529 timer529
	TIMER_READY timer529
  else522_1:
  endif522:
    STRINGS DUPLICATE 'true' VFLAG_M
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB530:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB531:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB532:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB533:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB534:
    MOVEF_F 110.0 VDEG_4
    MOVEF_F 50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB535:
    MOVEF_F 300.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB536:
    MOVEF_F 50.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB537:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB538:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB539:
    MOVEF_F 80.0 VDEG_3
    MOVEF_F -40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB540:
    MOVEF_F 650.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB541:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB542:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB543:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB544:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB545:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB546:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB547:
    CALL MOTOR.START 'BC' -20.0
    DATA32 milliseconds549
	MOVEF_32 1500.0 milliseconds549
	DATA32 timer549
	TIMER_WAIT milliseconds549 timer549
	TIMER_READY timer549
    JR_NEQF VW2_M 1.0 else550_1
    JR_NEQF VB2_M 2.0 else550_1
    MOVEF_F 80.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB551:
    MOVEF_F 93.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB552:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB553:
    JR endif550
  else550_1:
    MOVEF_F 80.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB554:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB555:
    MOVEF_F 30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB556:
  else550_2:
  endif550:
    JR_NEQF VW2_M 1.0 else557_1
    JR_NEQF VB2_M 2.0 else557_1
    WRITE32 ENDSUB_W1B2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB558:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB559:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds561
	MOVEF_32 1500.0 milliseconds561
	DATA32 timer561
	TIMER_WAIT milliseconds561 timer561
	TIMER_READY timer561
    JR endif557
  else557_1:
    JR_EQF VW2_M 1.0 or562
    JR_EQF VW2_M 2.0 or562
    JR_EQF VB2_M 1.0 or562
    JR_NEQF VB2_M 2.0 else557_2
  or562:
    JR_EQF VW2_M 1.0 or564
    JR_EQF VW2_M 2.0 or564
    JR_NEQF VB2_M 1.0 else563_1
  or564:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB565:
    JR_NEQF VW2_M 1.0 else566_1
    WRITE32 ENDSUB_W1:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB567:
  else566_1:
  endif566:
    JR_NEQF VW2_M 2.0 else568_1
    WRITE32 ENDSUB_W2:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB569:
  else568_1:
  endif568:
    JR_NEQF VB2_M 1.0 else570_1
    WRITE32 ENDSUB_B1:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB571:
  else570_1:
  endif570:
  else563_1:
  endif563:
    JR_NEQF VB2_M 2.0 else572_1
    WRITE32 ENDSUB_B2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB573:
  else572_1:
  endif572:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB574:
  else557_2:
  endif557:
    JR_NEQF VW2_M 4.0 else575_1
    JR_NEQF VB2_M 3.0 else575_1
    MOVEF_F 500.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB576:
    MOVEF_F 185.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB577:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB578:
    WRITE32 ENDSUB_W1B2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB579:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds581
	MOVEF_32 1000.0 milliseconds581
	DATA32 timer581
	TIMER_WAIT milliseconds581 timer581
	TIMER_READY timer581
    JR endif575
  else575_1:
    JR_EQF VW2_M 3.0 or582
    JR_EQF VW2_M 4.0 or582
    JR_EQF VB2_M 3.0 or582
    JR_NEQF VB2_M 4.0 else575_2
  or582:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB583:
    JR_EQF VW2_M 4.0 or585
    JR_EQF VW2_M 3.0 or585
    JR_NEQF VB2_M 4.0 else584_1
  or585:
    JR_NEQF VW2_M 4.0 else586_1
    WRITE32 ENDSUB_W1:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB587:
  else586_1:
  endif586:
    JR_NEQF VW2_M 3.0 else588_1
    WRITE32 ENDSUB_W2:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB589:
  else588_1:
  endif588:
    JR_NEQF VB2_M 4.0 else590_1
    WRITE32 ENDSUB_B1:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB591:
  else590_1:
  endif590:
  else584_1:
  endif584:
    JR_NEQF VB2_M 3.0 else592_1
    WRITE32 ENDSUB_B2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB593:
  else592_1:
  endif592:
  else575_2:
  endif575:
    JR_NEQF VW2_M 1.0 or595
    JR_EQF VB2_M 2.0 else594_1
  or595:
    JR_NEQF VW2_M 4.0 or596
    JR_EQF VB2_M 3.0 else594_1
  or596:
    MOVEF_F 80.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB597:
    MOVEF_F 85.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB598:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB599:
    CALL MOTOR.START 'BC' -30.0
    DATA32 milliseconds601
	MOVEF_32 1000.0 milliseconds601
	DATA32 timer601
	TIMER_WAIT milliseconds601 timer601
	TIMER_READY timer601
  else594_1:
  endif594:
    MOVEF_F 10.0 VDEG_4
    MOVEF_F -30.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB602:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -70.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB603:
    MOVEF_F -25.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB604:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB605:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F -30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB606:
    DATA32 tmp607
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp607
    JR_NEQ32 0 tmp607 alreadylaunched607
    OBJECT_START TTH_DOWN
  alreadylaunched607:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB608:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.0 F.1 tmpf12
    CP_EQF 0.0 F.1 flag12
    SELECTF flag12 0.0 tmpf12 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf17
    DATA8 flag17
    DIVF F.0 F.1 tmpf17
    CP_EQF 0.0 F.1 flag17
    SELECTF flag17 0.0 tmpf17 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE_1:
    JR_NEQF VMODE_1 1.0 else18_1
    MOVEF_F 0.7 VK_M
    MOVEF_F 85.0 VV_M
    JR endif18
  else18_1:
    JR_NEQF VMODE_1 2.0 else18_2
    MOVEF_F 0.7 VK_M
    MOVEF_F 55.0 VV_M
    JR endif18
  else18_2:
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
  else18_3:
  endif18:
    WRITE32 ENDSUB_LINE_FOL:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_FOL
CALLSUB19:
RETSUB_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_1:
SUB_LINE_FOL:
    WRITE32 ENDSUB_SEN1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB20:
    WRITE32 ENDSUB_SEN2:CALLSUB21 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB21:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE_FOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_FOL:
SUB_LINE_ACCELERATION:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF VMM_M F.1 tmpf31
    CP_EQF 0.0 F.1 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    MULF F.0 360.0 VL_M
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
    MOVEF_F 0.0 VDEG_M
    CALL MOTOR.RESETCOUNT 'BC'
  while34:
    JR_GTEQF VDEG_M VL_M endwhile34
  whilebody34:
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf38
    DATA8 flag38
    DIVF F.0 2.0 tmpf38
    CP_EQF 0.0 2.0 flag38
    SELECTF flag38 0.0 tmpf38 VDEG_M

    MULF VL_M 0.5 F.0
    JR_GTEQF VDEG_M F.0 else39_1
    JR_GTEQF VV_M 95.0 else39_1
    ADDF VV_M VK_ACCEL_M VV_M
    JR endif39
  else39_1:
    MULF 0.6 VL_M F.0
    JR_LTEQF VDEG_M F.0 else39_2
    JR_LTEQF VV_M 30.0 else39_2
    SUBF VV_M VK_ACCEL_M VV_M
  else39_2:
  endif39:
    JR_GTEQF VV_M 40.0 else44_1
    MOVEF_F 1.2 VK_M
    JR endif44
  else44_1:
    JR_GTEQF VV_M 65.0 else44_2
    MOVEF_F 0.8 VK_M
    JR endif44
  else44_2:
    JR_GTEQF VV_M 100.0 else44_3
    MOVEF_F 0.8 VK_M
  else44_3:
  endif44:
    WRITE32 ENDSUB_SEN1:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB45:
    WRITE32 ENDSUB_SEN2:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB46:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_M VL_M whilebody34
  endwhile34:
RETSUB_LINE_ACCELERATION:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_ACCELERATION:
SUB_LINE2_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE2_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2_1SENS:
SUB_LINE3_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.4 F.1
    ADDF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.4 F.1
    SUBF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE3_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3_1SENS:
SUB_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF VMM_2 F.1 tmpf72
    CP_EQF 0.0 F.1 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    MULF F.0 360.0 VL_2
    MOVEF_F 0.0 VDEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while75:
    JR_GTEQF VDEG_2 VL_2 endwhile75
  whilebody75:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf80
    DATA8 flag80
    DIVF F.0 2.0 tmpf80
    CP_EQF 0.0 2.0 flag80
    SELECTF flag80 0.0 tmpf80 VDEG_2

    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 0.8 F.1
    ADDF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 0.8 F.1
    SUBF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_2 VL_2 whilebody75
  endwhile75:
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_RIGHT1_2:
    MULF 1092.72 VDEG_3 F.0
    DATAF tmpf91
    DATA8 flag91
    DIVF F.0 360.0 tmpf91
    CP_EQF 0.0 360.0 flag91
    SELECTF flag91 0.0 tmpf91 VL_3

    DATAF tmpf92
    DATA8 flag92
    DIVF VL_3 210.38 tmpf92
    CP_EQF 0.0 210.38 flag92
    SELECTF flag92 0.0 tmpf92 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_3
  while96:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile96
  whilebody96:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody96
  endwhile96:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT1_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_4 F.0
    DATAF tmpf107
    DATA8 flag107
    DIVF F.0 360.0 tmpf107
    CP_EQF 0.0 360.0 flag107
    SELECTF flag107 0.0 tmpf107 VL_4

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 67.0 F.1
    DATAF tmpf110
    DATA8 flag110
    DIVF VL_4 F.1 tmpf110
    CP_EQF 0.0 F.1 flag110
    SELECTF flag110 0.0 tmpf110 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_4
  while114:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile114
  whilebody114:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody114
  endwhile114:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_5 F.0
    DATAF tmpf125
    DATA8 flag125
    DIVF F.0 360.0 tmpf125
    CP_EQF 0.0 360.0 flag125
    SELECTF flag125 0.0 tmpf125 VL_5

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 68.0 F.1
    DATAF tmpf128
    DATA8 flag128
    DIVF VL_5 F.1 tmpf128
    CP_EQF 0.0 F.1 flag128
    SELECTF flag128 0.0 tmpf128 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_5
    SUBF 0.0 VSP_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
  while134:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf140
    DATA8 flag140
    DIVF F.1 2.0 tmpf140
    CP_EQF 0.0 2.0 flag140
    SELECTF flag140 0.0 tmpf140 F.0

    DATAF tmpf141
    DATA8 flag141
    DIVF VL_5 2.0 tmpf141
    CP_EQF 0.0 2.0 flag141
    SELECTF flag141 0.0 tmpf141 F.1

    JR_GTF F.0 F.1 endwhile134
  whilebody134:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf147
    DATA8 flag147
    DIVF F.1 2.0 tmpf147
    CP_EQF 0.0 2.0 flag147
    SELECTF flag147 0.0 tmpf147 F.0

    DATAF tmpf148
    DATA8 flag148
    DIVF VL_5 2.0 tmpf148
    CP_EQF 0.0 2.0 flag148
    SELECTF flag148 0.0 tmpf148 F.1

    JR_LTEQF F.0 F.1 whilebody134
  endwhile134:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_6 F.0
    DATAF tmpf154
    DATA8 flag154
    DIVF F.0 360.0 tmpf154
    CP_EQF 0.0 360.0 flag154
    SELECTF flag154 0.0 tmpf154 VL_6

    MOVEF_F 3.1415926535897932384 F.2
    MULF F.2 68.0 F.1
    DATAF tmpf157
    DATA8 flag157
    DIVF VL_6 F.1 tmpf157
    CP_EQF 0.0 F.1 flag157
    SELECTF flag157 0.0 tmpf157 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    SUBF 0.0 VSP_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VSP_6
  while163:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf169
    DATA8 flag169
    DIVF F.1 2.0 tmpf169
    CP_EQF 0.0 2.0 flag169
    SELECTF flag169 0.0 tmpf169 F.0

    DATAF tmpf170
    DATA8 flag170
    DIVF VL_6 2.0 tmpf170
    CP_EQF 0.0 2.0 flag170
    SELECTF flag170 0.0 tmpf170 F.1

    JR_GTF F.0 F.1 endwhile163
  whilebody163:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF F.1 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    DATAF tmpf177
    DATA8 flag177
    DIVF VL_6 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 F.1

    JR_LTEQF F.0 F.1 whilebody163
  endwhile163:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_7 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB179:
    MOVEF_F 50.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB180:
    CALL MOTOR.START 'B' VSP_7
    SUBF 0.0 VSP_7 F.0
    CALL MOTOR.START 'C' F.0
  while184:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile184
  whilebody184:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody184
  endwhile184:
  while187:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile187
  whilebody187:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody187
  endwhile187:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB191:
RETSUB_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT_1:
SUB_LEFT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_8 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB192:
    MOVEF_F 50.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB193:
    SUBF 0.0 VSP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_8
  while197:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile197
  whilebody197:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody197
  endwhile197:
  while200:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile200
  whilebody200:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody200
  endwhile200:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB204:
RETSUB_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT_1:
SUB_AROUND_1:
    MOVEF_F 140.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB205:
    SUBF 0.0 VSP_9 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_9
  while209:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile209
  whilebody209:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody209
  endwhile209:
  while212:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile212
  whilebody212:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody212
  endwhile212:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB216:
RETSUB_AROUND_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND_1:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_10
    DATA8 layer218
	DATA8 no218
	DATA8 mode8218
	
	MOVEF_8 2.0 no218
	SUB8 no218 1 no218
	DIV8 no218 4 layer218
	MATH MOD8 no218 4 no218

	MOVEF_8 2.0 mode8218
	
	INPUT_DEVICE READY_RAW layer218 no218 0 mode8218 0
    DATA8 layer219
	DATA8 no219
	DATA8 mode8219
	
	MOVEF_8 3.0 no219
	SUB8 no219 1 no219
	DIV8 no219 4 layer219
	MATH MOD8 no219 4 no219

	MOVEF_8 2.0 mode8219
	
	INPUT_DEVICE READY_RAW layer219 no219 0 mode8219 0
  while220:
    JR_EQF VWHITE_10 1.0 endwhile220
  whilebody220:
  while221:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile221
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile221
  whilebody221:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 and233
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody221
  and233:
  endwhile221:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VL_10
  while237:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_10 endwhile237
  whilebody237:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_10 whilebody237
  endwhile237:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else251_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else251_1
    MOVEF_F 1.0 VWHITE_10
  else251_1:
  endif251:
    JR_NEQF VWHITE_10 1.0 whilebody220
  endwhile220:
    DATA8 layer254
	DATA8 no254
	DATA8 mode8254
	
	MOVEF_8 2.0 no254
	SUB8 no254 1 no254
	DIV8 no254 4 layer254
	MATH MOD8 no254 4 no254

	MOVEF_8 0.0 mode8254
	
	INPUT_DEVICE READY_RAW layer254 no254 0 mode8254 0
    DATA8 layer255
	DATA8 no255
	DATA8 mode8255
	
	MOVEF_8 3.0 no255
	SUB8 no255 1 no255
	DIV8 no255 4 layer255
	MATH MOD8 no255 4 no255

	MOVEF_8 0.0 mode8255
	
	INPUT_DEVICE READY_RAW layer255 no255 0 mode8255 0
  while256:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile256
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile256
  whilebody256:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and268
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody256
  and268:
  endwhile256:
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_UP_2:
    SUBF 0.0 VSP_11 F.0
    CALL MOTOR.START VMOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds274
	MOVEF_32 500.0 milliseconds274
	DATA32 timer274
	TIMER_WAIT milliseconds274 timer274
	TIMER_READY timer274
  while275:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 25.0 or276
    CALL MOTOR.GETSPEED 'D' F.0
    JR_LTEQF F.0 25.0 endwhile275
  or276:
  whilebody275:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 25.0 whilebody275
    CALL MOTOR.GETSPEED 'D' F.0
    JR_GTF F.0 25.0 whilebody275
  endwhile275:
    CALL MOTOR.STOP VMOTOR_11 'true'
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.START VMOTOR_12 VSP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds285
	MOVEF_32 500.0 milliseconds285
	DATA32 timer285
	TIMER_WAIT milliseconds285 timer285
	TIMER_READY timer285
  while286:
    CALL MOTOR.GETSPEED 'AD' F.0
    MULF VSP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile286
  whilebody286:
    CALL MOTOR.GETSPEED 'AD' F.0
    MULF VSP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody286
  endwhile286:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VMOTOR_12 -20.0 0.0 21.0 0.0 'true' 

	DATA8 layer292
	DATA8 nos292
	DATA8 busy292
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_12 layer292 nos292
	JR_EQ8 0 nos292 motornotbusy292
  motorwaiting292:
	OUTPUT_TEST layer292 nos292 busy292
	JR_EQ8 busy292 0 motornotbusy292
	SLEEP
	JR motorwaiting292
  motornotbusy292:
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_TH_DOWN:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds294
	MOVEF_32 500.0 milliseconds294
	DATA32 timer294
	TIMER_WAIT milliseconds294 timer294
	TIMER_READY timer294
  while295:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_LTEQF F.0 35.0 endwhile295
  whilebody295:
    CALL MOTOR.GETSPEED 'AD' F.0
    JR_GTF F.0 35.0 whilebody295
  endwhile295:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 24.0 0.0 'true' 

	DATA8 layer299
	DATA8 nos299
	DATA8 busy299
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer299 nos299
	JR_EQ8 0 nos299 motornotbusy299
  motorwaiting299:
	OUTPUT_TEST layer299 nos299 busy299
	JR_EQ8 busy299 0 motornotbusy299
	SLEEP
	JR motorwaiting299
  motornotbusy299:
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
SUB_TH_UP:
    CALL MOTOR.START 'AD' -50.0
    DATA32 milliseconds301
	MOVEF_32 300.0 milliseconds301
	DATA32 timer301
	TIMER_WAIT milliseconds301 timer301
	TIMER_READY timer301
  while302:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 25.0 or303
    CALL MOTOR.GETSPEED 'D' F.0
    JR_LTEQF F.0 25.0 endwhile302
  or303:
  whilebody302:
    CALL MOTOR.GETSPEED 'A' F.0
    JR_GTF F.0 25.0 whilebody302
    CALL MOTOR.GETSPEED 'D' F.0
    JR_GTF F.0 25.0 whilebody302
  endwhile302:
    CALL MOTOR.STOP 'AD' 'true'
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else320_1
    JR_LTEQF VR_M VB_M else320_1
    MOVEF_F VR_M VMAX_M
    JR endif320
  else320_1:
    JR_LTEQF VG_M VR_M else320_2
    JR_LTEQF VG_M VB_M else320_2
    MOVEF_F VG_M VMAX_M
    JR endif320
  else320_2:
    JR_LTEQF VB_M VR_M else320_3
    JR_LTEQF VB_M VG_M else320_3
    MOVEF_F VB_M VMAX_M
  else320_3:
  endif320:
    JR_GTEQF VR_M VG_M else321_1
    JR_GTEQF VR_M VB_M else321_1
    MOVEF_F VR_M VMIN_M
    JR endif321
  else321_1:
    JR_GTEQF VG_M VR_M else321_2
    JR_GTEQF VG_M VB_M else321_2
    MOVEF_F VG_M VMIN_M
    JR endif321
  else321_2:
    JR_GTEQF VB_M VR_M else321_3
    JR_GTEQF VB_M VG_M else321_3
    MOVEF_F VB_M VMIN_M
  else321_3:
  endif321:
    JR_NEQF VMAX_M VMIN_M else322_1
    MOVEF_F 0.0 VH_M
    JR endif322
  else322_1:
    JR_NEQF VR_M VMAX_M else323_1
    JR_LTF VG_M VB_M else324_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf328
    DATA8 flag328
    DIVF F.0 F.1 tmpf328
    CP_EQF 0.0 F.1 flag328
    SELECTF flag328 0.0 tmpf328 VH_M

    JR endif324
  else324_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf332
    DATA8 flag332
    DIVF F.1 F.2 tmpf332
    CP_EQF 0.0 F.2 flag332
    SELECTF flag332 0.0 tmpf332 F.0

    ADDF F.0 360.0 VH_M
  else324_2:
  endif324:
    JR endif323
  else323_1:
    JR_NEQF VMAX_M VG_M else334_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf338
    DATA8 flag338
    DIVF F.1 F.2 tmpf338
    CP_EQF 0.0 F.2 flag338
    SELECTF flag338 0.0 tmpf338 F.0

    ADDF F.0 120.0 VH_M
    JR endif334
  else334_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf343
    DATA8 flag343
    DIVF F.1 F.2 tmpf343
    CP_EQF 0.0 F.2 flag343
    SELECTF flag343 0.0 tmpf343 F.0

    ADDF F.0 240.0 VH_M
  else334_2:
  endif334:
  else323_2:
  endif323:
  else322_2:
  endif322:
    JR_NEQF VMAX_M 0.0 else345_1
    MOVEF_F 0.0 VS_M
    JR endif345
  else345_1:
    DATAF tmpf346
    DATA8 flag346
    DIVF VMIN_M VMAX_M tmpf346
    CP_EQF 0.0 VMAX_M flag346
    SELECTF flag346 0.0 tmpf346 F.0

    SUBF 1.0 F.0 VS_M
  else345_2:
  endif345:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB349:
    JR_LTEQF VRGB_M 110.0 else350_1
    MOVEF_F 6.0 VCOL_M
    JR endif350
  else350_1:
    JR_LTEQF VRGB_M 60.0 else350_2
    MOVEF_F 1.0 VCOL_M
  else350_2:
  endif350:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_W1B2:
RETSUB_W1B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1B2:
SUB_W1:
RETSUB_W1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1:
SUB_W2:
RETSUB_W2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2:
SUB_B1:
RETSUB_B1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1:
SUB_B2:
RETSUB_B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
