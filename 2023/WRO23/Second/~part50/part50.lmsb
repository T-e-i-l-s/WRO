DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAF VLV_MM_1
DATAF VLV_V_1
DATAF VLV_DEG_2
DATAF VLV_SP_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAS VLV_MOTOR_11 252
DATAF VLV_SP_11
DATAF VLV_SP_9
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_SP_10
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
DATAF VGV_Z1
DATAF VGV_Z2
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_SUM
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_1
DATAF VLV_SP_1
DATAF VLV_DEG_1
DATAF VLV_U_1
DATAF VLV_L_2
DATAF VLV_V_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_U_9
DATAF VLV_WHITE_10
DATAF VLV_U_10
DATAF VLV_L_10
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_1
    MOVEF_F 0.0 VLV_SP_1
    MOVEF_F 0.0 VLV_DEG_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_U_9
    MOVEF_F 0.0 VLV_WHITE_10
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_L_10
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch877
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch877:
    JR_NEQ32 SUBPROGRAM 1 dispatch878
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch878:
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp9
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp9
    JR_NEQ32 0 tmp9 alreadylaunched9
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched9:
    MOVEF_F 15.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB10:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB11:
    CALL MOTOR.RESETCOUNT 'BC'
  while13:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile13
  whilebody13:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody13
  endwhile13:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while26:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf30
    DATA8 flag30
    DIVF F.1 2.0 tmpf30
    CP_EQF 0.0 2.0 flag30
    SELECTF flag30 0.0 tmpf30 F.0

    JR_GTEQF F.0 VGV_L endwhile26
  whilebody26:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB31:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf35
    DATA8 flag35
    DIVF F.1 2.0 tmpf35
    CP_EQF 0.0 2.0 flag35
    SELECTF flag35 0.0 tmpf35 F.0

    JR_LTF F.0 VGV_L whilebody26
  endwhile26:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  or38:
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB52:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while54:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_GTEQF F.0 VGV_L endwhile54
  whilebody54:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB59:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    JR_LTF F.0 VGV_L whilebody54
  endwhile54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while65:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTEQF F.0 VGV_L endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB70:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 2.0 tmpf74
    CP_EQF 0.0 2.0 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    JR_LTF F.0 VGV_L whilebody65
  endwhile65:
    MOVEF_F 3.0 VGV_Z1
    MOVEF_F 1.0 VGV_Z2
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for76:
    JR_GTF VGV_I 3.0 endfor76
  forbody76:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB77:
    JR_LTF VGV_NUM 2.0 else78_1
    JR_GTF VGV_NUM 3.0 else78_1
    ADDF VGV_I 1.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif78
  else78_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else78_2:
  endif78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while84:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    JR_GTEQF F.0 VGV_L endwhile84
  whilebody84:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB89:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf93
    DATA8 flag93
    DIVF F.1 2.0 tmpf93
    CP_EQF 0.0 2.0 flag93
    SELECTF flag93 0.0 tmpf93 F.0

    JR_LTF F.0 VGV_L whilebody84
  endwhile84:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody76
  endfor76:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for97:
    JR_GTF VGV_I 3.0 endfor97
  forbody97:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else101_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif101
  else101_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else101_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else101_2:
  endif101:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody97
  endfor97:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while104:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_GTEQF F.0 VGV_L endwhile104
  whilebody104:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB109 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB109:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 2.0 tmpf113
    CP_EQF 0.0 2.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    JR_LTF F.0 VGV_L whilebody104
  endwhile104:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for114:
    JR_GTF VGV_I 3.0 endfor114
  forbody114:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB115:
    JR_LTEQF VGV_B 30.0 else116_1
    JR_GTEQF VGV_B 50.0 else116_1
    ADDF VGV_I 1.0 VGV_Z1
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif116
  else116_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else116_2:
  endif116:
    JR_GTEQF VGV_I 2.0 else121_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while123:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    JR_GTEQF F.0 VGV_L endwhile123
  whilebody123:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB128:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 2.0 tmpf132
    CP_EQF 0.0 2.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    JR_LTF F.0 VGV_L whilebody123
  endwhile123:
    JR endif121
  else121_1:
    JR_NEQF VGV_I 2.0 else121_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while134:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf138
    DATA8 flag138
    DIVF F.1 2.0 tmpf138
    CP_EQF 0.0 2.0 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    JR_GTEQF F.0 VGV_L endwhile134
  whilebody134:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB139:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    JR_LTF F.0 VGV_L whilebody134
  endwhile134:
  else121_2:
  endif121:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody114
  endfor114:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB145:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for148:
    JR_GTF VGV_I 3.0 endfor148
  forbody148:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else152_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif152
  else152_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else152_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else152_2:
  endif152:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody148
  endfor148:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B1 VGV_W1 VGV_Z1
    ADDF VGV_B2 VGV_W2 VGV_Z2
    SUBF 20.0 VGV_B1 F.2
    SUBF F.2 VGV_B2 F.1
    SUBF F.1 VGV_W1 F.0
    SUBF F.0 VGV_W2 VGV_SUM
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_2
    MOVEF_F 40.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB173:
    MOVEF_F 35.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB174:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while176:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf180
    DATA8 flag180
    DIVF F.1 2.0 tmpf180
    CP_EQF 0.0 2.0 flag180
    SELECTF flag180 0.0 tmpf180 F.0

    JR_GTEQF F.0 VGV_L endwhile176
  whilebody176:
    MOVEF_F 1.6 VGV_K
    MOVEF_F 23.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf193
    DATA8 flag193
    DIVF F.1 2.0 tmpf193
    CP_EQF 0.0 2.0 flag193
    SELECTF flag193 0.0 tmpf193 F.0

    JR_LTF F.0 VGV_L whilebody176
  endwhile176:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB194:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB196:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB197:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB198:
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB199:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB200:
    MOVEF_F 780.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB201:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB202:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB203:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB204:
    MOVEF_F 90.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB205:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB206:
    MOVEF_F 970.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB207:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 910.0 'true'

	DATA8 layer208
	DATA8 nos208
	DATA8 busy208
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer208 nos208
	JR_EQ8 0 nos208 motornotbusy208
  motorwaiting208:
	OUTPUT_TEST layer208 nos208 busy208
	JR_EQ8 busy208 0 motornotbusy208
	SLEEP
	JR motorwaiting208
  motornotbusy208:
    MOVEF_F 630.0 VLV_MM_1
    MOVEF_F 70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB209:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB210:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 910.0 'true'

	DATA8 layer211
	DATA8 nos211
	DATA8 busy211
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer211 nos211
	JR_EQ8 0 nos211 motornotbusy211
  motorwaiting211:
	OUTPUT_TEST layer211 nos211 busy211
	JR_EQ8 busy211 0 motornotbusy211
	SLEEP
	JR motorwaiting211
  motornotbusy211:
    MOVEF_F 320.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB212:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB213:
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB214:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB215:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 105.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB217:
    MOVEF_F 88.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB218:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB219:
    JR_EQF VGV_B 1.0 or221
    JR_NEQF VGV_W 2.0 else220_1
  or221:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB222:
    JR_NEQF VGV_W 2.0 else223_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB224:
  else223_1:
  endif223:
    JR_NEQF VGV_B 1.0 else225_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB226:
  else225_1:
  endif225:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB227:
    JR endif220
  else220_1:
    JR_EQF VGV_B 2.0 or228
    JR_NEQF VGV_W 1.0 else220_2
  or228:
    JR_NEQF VGV_B 2.0 else229_1
    JR_NEQF VGV_W 1.0 else229_1
    MOVEF_F 1.0 VGV_W1B2
  else229_1:
  endif229:
    JR_NEQF VGV_W 1.0 else230_1
    MOVEF_F 365.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB231:
    WRITE32 ENDSUB_F_W1_0:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB232:
  else230_1:
  endif230:
    JR_NEQF VGV_B 2.0 else233_1
    JR_EQF VGV_W 1.0 else233_1
    MOVEF_F 185.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB234:
    WRITE32 ENDSUB_F_B2_0:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB235:
  else233_1:
  endif233:
    JR_NEQF VGV_B 2.0 or237
    JR_EQF VGV_W 1.0 else236_1
  or237:
    MOVEF_F 105.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB238 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB238:
    MOVEF_F 88.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB239:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB240:
    JR endif236
  else236_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB241:
  else236_2:
  endif236:
  else220_2:
  endif220:
    JR_EQF VGV_B 4.0 or243
    JR_NEQF VGV_W 3.0 else242_1
  or243:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB244:
    JR_NEQF VGV_W 3.0 else245_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB246:
  else245_1:
  endif245:
    JR_NEQF VGV_B 4.0 else247_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB248:
  else247_1:
  endif247:
    JR endif242
  else242_1:
    JR_EQF VGV_B 3.0 or249
    JR_NEQF VGV_W 4.0 else242_2
  or249:
    JR_NEQF VGV_B 3.0 else250_1
    JR_NEQF VGV_W 4.0 else250_1
    MOVEF_F 1.0 VGV_W1B2
  else250_1:
  endif250:
    JR_NEQF VGV_W 4.0 else251_1
    MOVEF_F 118.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB252:
    WRITE32 ENDSUB_F_W1_0:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB253:
  else251_1:
  endif251:
    JR_NEQF VGV_B 3.0 else254_1
    JR_EQF VGV_W 4.0 else254_1
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB255:
    WRITE32 ENDSUB_F_B2_0:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB256:
  else254_1:
  endif254:
    JR endif242
  else242_2:
    JR_NEQF VGV_B 2.0 or257
    JR_EQF VGV_W 1.0 else242_3
  or257:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB258:
  else242_3:
  endif242:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else260_1
    JR_EQF VGV_W 4.0 else260_1
    JR_NEQF VGV_B 2.0 or261
    JR_EQF VGV_W 1.0 else260_1
  or261:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB262:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB263:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB264:
    MOVEF_F 93.0 VLV_DEG_2
    MOVEF_F -70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB265:
  else260_1:
  endif260:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB267 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB267:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB268:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB269:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB270:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while273:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile273
  whilebody273:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody273
  endwhile273:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB285:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds288
	MOVEF_32 800.0 milliseconds288
	DATA32 timer288
	TIMER_WAIT milliseconds288 timer288
	TIMER_READY timer288
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 3.0 0.0 'true' 

	DATA8 layer289
	DATA8 nos289
	DATA8 busy289
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer289 nos289
	JR_EQ8 0 nos289 motornotbusy289
  motorwaiting289:
	OUTPUT_TEST layer289 nos289 busy289
	JR_EQ8 busy289 0 motornotbusy289
	SLEEP
	JR motorwaiting289
  motornotbusy289:
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB290:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB293:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_2
    MOVEF_F 70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB295:
    MOVEF_F 72.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB296:
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB297:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB299:
    MOVEF_F 570.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB301:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds303
	MOVEF_32 700.0 milliseconds303
	DATA32 timer303
	TIMER_WAIT milliseconds303 timer303
	TIMER_READY timer303
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB304:
    MOVEF_F 8.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB305:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB307:
    MOVEF_F 130.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB308:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB309:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB310:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB311:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB313:
    MOVEF_F 88.3 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB314:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB315:
    JR_EQF VGV_B 1.0 or317
    JR_NEQF VGV_W 2.0 else316_1
  or317:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB318:
    JR_NEQF VGV_W 2.0 else319_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB320:
  else319_1:
  endif319:
    JR_NEQF VGV_B 1.0 else321_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB322:
  else321_1:
  endif321:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB323:
    JR endif316
  else316_1:
    JR_EQF VGV_B 2.0 or324
    JR_NEQF VGV_W 1.0 else316_2
  or324:
    JR_NEQF VGV_B 2.0 else325_1
    JR_NEQF VGV_W 1.0 else325_1
    MOVEF_F 1.0 VGV_W1B2
  else325_1:
  endif325:
    JR_NEQF VGV_W 1.0 else326_1
    MOVEF_F 455.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB327:
    WRITE32 ENDSUB_F_W1_0:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB328:
  else326_1:
  endif326:
    JR_NEQF VGV_B 2.0 else329_1
    JR_EQF VGV_W 1.0 else329_1
    MOVEF_F 280.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB330:
    WRITE32 ENDSUB_F_B2_0:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB331:
  else329_1:
  endif329:
    JR_NEQF VGV_B 2.0 or333
    JR_EQF VGV_W 1.0 else332_1
  or333:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB334:
    MOVEF_F 88.3 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB335:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB336:
    JR endif332
  else332_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB337:
  else332_2:
  endif332:
  else316_2:
  endif316:
    JR_EQF VGV_B 4.0 or339
    JR_NEQF VGV_W 3.0 else338_1
  or339:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB340:
    JR_NEQF VGV_W 3.0 else341_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB342:
  else341_1:
  endif341:
    JR_NEQF VGV_B 4.0 else343_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB344:
  else343_1:
  endif343:
    JR endif338
  else338_1:
    JR_EQF VGV_B 3.0 or345
    JR_NEQF VGV_W 4.0 else338_2
  or345:
    JR_NEQF VGV_B 3.0 else346_1
    JR_NEQF VGV_W 4.0 else346_1
    MOVEF_F 1.0 VGV_W1B2
  else346_1:
  endif346:
    JR_NEQF VGV_W 4.0 else347_1
    MOVEF_F 52.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB348:
    WRITE32 ENDSUB_F_W1_0:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB349:
  else347_1:
  endif347:
    JR_NEQF VGV_B 3.0 else350_1
    JR_EQF VGV_W 4.0 else350_1
    MOVEF_F 230.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB351:
    WRITE32 ENDSUB_F_B2_0:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB352:
  else350_1:
  endif350:
    JR endif338
  else338_2:
    JR_NEQF VGV_B 2.0 or353
    JR_EQF VGV_W 1.0 else338_3
  or353:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB354:
  else338_3:
  endif338:
    JR_EQF VGV_B 3.0 else355_1
    JR_EQF VGV_W 4.0 else355_1
    JR_NEQF VGV_B 2.0 or356
    JR_EQF VGV_W 1.0 else355_1
  or356:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB357:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB358:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB359:
    JR endif355
  else355_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB360:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB361:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB362:
  else355_2:
  endif355:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB363:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB365:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB366:
    CALL MOTOR.RESETCOUNT 'BC'
  while368:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 58.0 endwhile368
  whilebody368:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 58.0 whilebody368
  endwhile368:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB380:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB381:
    MOVEF_F -50.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB382:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB383:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB384:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB385:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB386:
    MOVEF_F -35.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB387:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB388:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds391
	MOVEF_32 800.0 milliseconds391
	DATA32 timer391
	TIMER_WAIT milliseconds391 timer391
	TIMER_READY timer391
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB392:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB394:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB396:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB397:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB398:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB399:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB400:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 47.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB402:
    MOVEF_F 92.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB403:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB404:
    MOVEF_F -20.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB405:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB406:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf410
    DATA8 flag410
    DIVF VGV_TIME 1000.0 tmpf410
    CP_EQF 0.0 1000.0 flag410
    SELECTF flag410 0.0 tmpf410 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf413
    DATA8 flag413
    DIVF VGV_ZONE1 1000.0 tmpf413
    CP_EQF 0.0 1000.0 flag413
    SELECTF flag413 0.0 tmpf413 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf416
    DATA8 flag416
    DIVF VGV_ZONE2 1000.0 tmpf416
    CP_EQF 0.0 1000.0 flag416
    SELECTF flag416 0.0 tmpf416 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf420
    DATA8 flag420
    DIVF VGV_TIME 1000.0 tmpf420
    CP_EQF 0.0 1000.0 flag420
    SELECTF flag420 0.0 tmpf420 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB424:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf429
    DATA8 flag429
    DIVF F.0 F.1 tmpf429
    CP_EQF 0.0 F.1 flag429
    SELECTF flag429 0.0 tmpf429 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf434
    DATA8 flag434
    DIVF F.0 F.1 tmpf434
    CP_EQF 0.0 F.1 flag434
    SELECTF flag434 0.0 tmpf434 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds452
	MOVEF_32 500.0 milliseconds452
	DATA32 timer452
	TIMER_WAIT milliseconds452 timer452
	TIMER_READY timer452
  while453:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf457
    DATA8 flag457
    DIVF F.1 2.0 tmpf457
    CP_EQF 0.0 2.0 flag457
    SELECTF flag457 0.0 tmpf457 F.0

    JR_LTEQF F.0 35.0 endwhile453
  whilebody453:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf461
    DATA8 flag461
    DIVF F.1 2.0 tmpf461
    CP_EQF 0.0 2.0 flag461
    SELECTF flag461 0.0 tmpf461 F.0

    JR_GTF F.0 35.0 whilebody453
  endwhile453:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 26.0 0.0 'true' 

	DATA8 layer463
	DATA8 nos463
	DATA8 busy463
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer463 nos463
	JR_EQ8 0 nos463 motornotbusy463
  motorwaiting463:
	OUTPUT_TEST layer463 nos463 busy463
	JR_EQ8 busy463 0 motornotbusy463
	SLEEP
	JR motorwaiting463
  motornotbusy463:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else476_1
    JR_LTEQF VGV_R VGV_B else476_1
    MOVEF_F VGV_R VGV_MAX
    JR endif476
  else476_1:
    JR_LTEQF VGV_G VGV_R else476_2
    JR_LTEQF VGV_G VGV_B else476_2
    MOVEF_F VGV_G VGV_MAX
    JR endif476
  else476_2:
    JR_LTEQF VGV_B VGV_R else476_3
    JR_LTEQF VGV_B VGV_G else476_3
    MOVEF_F VGV_B VGV_MAX
  else476_3:
  endif476:
    JR_GTEQF VGV_R VGV_G else477_1
    JR_GTEQF VGV_R VGV_B else477_1
    MOVEF_F VGV_R VGV_MIN
    JR endif477
  else477_1:
    JR_GTEQF VGV_G VGV_R else477_2
    JR_GTEQF VGV_G VGV_B else477_2
    MOVEF_F VGV_G VGV_MIN
    JR endif477
  else477_2:
    JR_GTEQF VGV_B VGV_R else477_3
    JR_GTEQF VGV_B VGV_G else477_3
    MOVEF_F VGV_B VGV_MIN
  else477_3:
  endif477:
    JR_NEQF VGV_MAX VGV_MIN else478_1
    MOVEF_F 0.0 VGV_H
    JR endif478
  else478_1:
    JR_NEQF VGV_R VGV_MAX else479_1
    JR_LTF VGV_G VGV_B else480_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf484
    DATA8 flag484
    DIVF F.0 F.1 tmpf484
    CP_EQF 0.0 F.1 flag484
    SELECTF flag484 0.0 tmpf484 VGV_H

    JR endif480
  else480_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf488
    DATA8 flag488
    DIVF F.1 F.2 tmpf488
    CP_EQF 0.0 F.2 flag488
    SELECTF flag488 0.0 tmpf488 F.0

    ADDF F.0 360.0 VGV_H
  else480_2:
  endif480:
    JR endif479
  else479_1:
    JR_NEQF VGV_MAX VGV_G else490_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf494
    DATA8 flag494
    DIVF F.1 F.2 tmpf494
    CP_EQF 0.0 F.2 flag494
    SELECTF flag494 0.0 tmpf494 F.0

    ADDF F.0 120.0 VGV_H
    JR endif490
  else490_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf499
    DATA8 flag499
    DIVF F.1 F.2 tmpf499
    CP_EQF 0.0 F.2 flag499
    SELECTF flag499 0.0 tmpf499 F.0

    ADDF F.0 240.0 VGV_H
  else490_2:
  endif490:
  else479_2:
  endif479:
  else478_2:
  endif478:
    JR_NEQF VGV_MAX 0.0 else501_1
    MOVEF_F 0.0 VGV_S
    JR endif501
  else501_1:
    DATAF tmpf502
    DATA8 flag502
    DIVF VGV_MIN VGV_MAX tmpf502
    CP_EQF 0.0 VGV_MAX flag502
    SELECTF flag502 0.0 tmpf502 VGV_S

  else501_2:
  endif501:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else504_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB506:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB507:
    JR_NEQF VGV_W 1.0 else508_1
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB509:
  else508_1:
  endif508:
    JR endif504
  else504_1:
    MOVEF_F 95.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB510:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB511:
  else504_2:
  endif504:
    JR_NEQF VGV_W1B2 1.0 else512_1
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB513:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else514_1
    MOVEF_F 65.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB516:
    JR endif514
  else514_1:
    MOVEF_F 50.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB517:
  else514_2:
  endif514:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else519_1
    DATA32 milliseconds521
	MOVEF_32 700.0 milliseconds521
	DATA32 timer521
	TIMER_WAIT milliseconds521 timer521
	TIMER_READY timer521
  else519_1:
  endif519:
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB522:
    MOVEF_F 7.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB523:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else524_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB526:
  else524_1:
  endif524:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else527_1
    MOVEF_F 58.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB529:
    JR endif527
  else527_1:
    MOVEF_F 43.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB530:
  else527_2:
  endif527:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB531:
  else512_1:
  endif512:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else533_1
    DATA32 milliseconds535
	MOVEF_32 1300.0 milliseconds535
	DATA32 timer535
	TIMER_WAIT milliseconds535 timer535
	TIMER_READY timer535
  else533_1:
  endif533:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 10.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB536:
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB537:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else538_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB540:
  else538_1:
  endif538:
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB541:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else542_1
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB544:
    JR endif542
  else542_1:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB545:
  else542_2:
  endif542:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB546:
    JR_EQF VGV_W1B2 1.0 else547_1
    JR_EQF VGV_W 4.0 else547_1
    MOVEF_F 65.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB548:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB549:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB550:
    MOVEF_F 30.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB551:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB552:
  else547_1:
  endif547:
    MOVEF_F 0.0 VGV_W1B2
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else554_1
    DATA32 milliseconds556
	MOVEF_32 1000.0 milliseconds556
	DATA32 timer556
	TIMER_WAIT milliseconds556 timer556
	TIMER_READY timer556
  else554_1:
  endif554:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB557:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else558_1
    JR_NEQF VGV_W 3.0 else560_1
    MOVEF_F 32.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB561:
    JR endif560
  else560_1:
    MOVEF_F 17.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB562:
  else560_2:
  endif560:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB564:
  else558_1:
  endif558:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB566:
    MOVEF_F 26.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB567:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else569_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB571:
  else569_1:
  endif569:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else572_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB574:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB575:
    JR endif572
  else572_1:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB576:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB577:
  else572_2:
  endif572:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB579:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB580:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else582_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB584:
  else582_1:
  endif582:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else585_1
    JR_NEQF VGV_B 3.0 else585_1
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB587:
    JR endif585
  else585_1:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB588:
  else585_2:
  endif585:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB589:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB590:
    JR_NEQF VGV_B 2.0 else591_1
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB592:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB593:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB594:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB595:
  else591_1:
  endif591:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf598
    DATA8 flag598
    DIVF VLV_MM_1 F.1 tmpf598
    CP_EQF 0.0 F.1 flag598
    SELECTF flag598 0.0 tmpf598 F.0

    MULF F.0 360.0 VLV_L_1
    JR_GTEQF VLV_V_1 0.0 else600_1
    MOVEF_F -10.0 VLV_SP_1
    JR endif600
  else600_1:
    MOVEF_F 10.0 VLV_SP_1
  else600_2:
  endif600:
    MOVEF_F 0.0 VLV_DEG_1
    CALL MOTOR.RESETCOUNT 'BC'
  while602:
    JR_GTEQF VLV_DEG_1 VLV_L_1 endwhile602
  whilebody602:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf607
    DATA8 flag607
    DIVF F.0 2.0 tmpf607
    CP_EQF 0.0 2.0 flag607
    SELECTF flag607 0.0 tmpf607 VLV_DEG_1

    MULF VLV_L_1 0.7 F.0
    JR_LTEQF VLV_DEG_1 F.0 else608_1
    MATH ABS VLV_SP_1 F.0
    JR_LTEQF F.0 10.0 else608_1
    JR_LTEQF VLV_V_1 0.0 else611_1
    SUBF VLV_SP_1 0.2 VLV_SP_1
    JR endif611
  else611_1:
    ADDF VLV_SP_1 0.2 VLV_SP_1
  else611_2:
  endif611:
    JR endif608
  else608_1:
    MATH ABS VLV_SP_1 F.0
    MATH ABS VLV_V_1 F.1
    JR_GTEQF F.0 F.1 else608_2
    JR_LTEQF VLV_V_1 0.0 else616_1
    ADDF VLV_SP_1 0.2 VLV_SP_1
    JR endif616
  else616_1:
    SUBF VLV_SP_1 0.2 VLV_SP_1
  else616_2:
  endif616:
  else608_2:
  endif608:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_1
    MULF VLV_U_1 2.0 F.1
    ADDF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_1 2.0 F.1
    SUBF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_1 VLV_L_1 whilebody602
  endwhile602:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_2 F.0
    DATAF tmpf629
    DATA8 flag629
    DIVF F.0 360.0 tmpf629
    CP_EQF 0.0 360.0 flag629
    SELECTF flag629 0.0 tmpf629 VLV_L_2

    DATAF tmpf630
    DATA8 flag630
    DIVF VLV_L_2 210.38 tmpf630
    CP_EQF 0.0 210.38 flag630
    SELECTF flag630 0.0 tmpf630 F.0

    MULF F.0 360.0 VLV_L_2
    MOVEF_F 30.0 VLV_V_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_2
  while633:
    JR_GTF VLV_DEG_2 VLV_L_2 endwhile633
  whilebody633:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_2
    CALL MOTOR.STARTPOWER 'B' VLV_V_2
    MULF VLV_L_2 0.2 F.0
    JR_LTF VLV_DEG_2 F.0 or638
    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else637_1
  or638:
    JR_GTEQF VLV_SP_2 0.0 else641_1
    MOVEF_F -30.0 VLV_V_2
    JR endif641
  else641_1:
    MOVEF_F 30.0 VLV_V_2
  else641_2:
  endif641:
    JR endif637
  else637_1:
    MOVEF_F VLV_SP_2 VLV_V_2
  else637_2:
  endif637:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_2 VLV_L_2 whilebody633
  endwhile633:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf645
    DATA8 flag645
    DIVF F.0 360.0 tmpf645
    CP_EQF 0.0 360.0 flag645
    SELECTF flag645 0.0 tmpf645 VLV_L_3

    DATAF tmpf646
    DATA8 flag646
    DIVF VLV_L_3 210.38 tmpf646
    CP_EQF 0.0 210.38 flag646
    SELECTF flag646 0.0 tmpf646 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while649:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile649
  whilebody649:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'C' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or654
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else653_1
  or654:
    JR_GTEQF VLV_SP_3 0.0 else657_1
    MOVEF_F -30.0 VLV_V_3
    JR endif657
  else657_1:
    MOVEF_F 30.0 VLV_V_3
  else657_2:
  endif657:
    JR endif653
  else653_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else653_2:
  endif653:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody649
  endwhile649:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_4 F.0
    DATAF tmpf664
    DATA8 flag664
    DIVF F.0 360.0 tmpf664
    CP_EQF 0.0 360.0 flag664
    SELECTF flag664 0.0 tmpf664 VLV_L_4

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf667
    DATA8 flag667
    DIVF VLV_L_4 F.2 tmpf667
    CP_EQF 0.0 F.2 flag667
    SELECTF flag667 0.0 tmpf667 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf669
    DATA8 flag669
    DIVF F.0 2.0 tmpf669
    CP_EQF 0.0 2.0 flag669
    SELECTF flag669 0.0 tmpf669 VLV_L_4

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_4
    MOVEF_F 0.0 VLV_DEG_4
  while671:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile671
  whilebody671:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf677
    DATA8 flag677
    DIVF F.0 2.0 tmpf677
    CP_EQF 0.0 2.0 flag677
    SELECTF flag677 0.0 tmpf677 VLV_DEG_4

    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or679
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else678_1
  or679:
    MOVEF_F 30.0 VLV_V_4
    JR endif678
  else678_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else678_2:
  endif678:
    CALL MOTOR.STARTPOWER 'B' VLV_V_4
    SUBF 0.0 VLV_V_4 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody671
  endwhile671:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf690
    DATA8 flag690
    DIVF F.0 360.0 tmpf690
    CP_EQF 0.0 360.0 flag690
    SELECTF flag690 0.0 tmpf690 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf693
    DATA8 flag693
    DIVF VLV_L_5 F.2 tmpf693
    CP_EQF 0.0 F.2 flag693
    SELECTF flag693 0.0 tmpf693 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf695
    DATA8 flag695
    DIVF F.0 2.0 tmpf695
    CP_EQF 0.0 2.0 flag695
    SELECTF flag695 0.0 tmpf695 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while697:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile697
  whilebody697:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf703
    DATA8 flag703
    DIVF F.0 2.0 tmpf703
    CP_EQF 0.0 2.0 flag703
    SELECTF flag703 0.0 tmpf703 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or705
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else704_1
  or705:
    MOVEF_F 30.0 VLV_V_5
    JR endif704
  else704_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else704_2:
  endif704:
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_5
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody697
  endwhile697:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while714:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or715
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile714
  or715:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile714
  whilebody714:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or735
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and734
  or735:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody714
  and734:
  endwhile714:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while747:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or748
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile747
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile747
  or748:
  whilebody747:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody747
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and771
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody747
  and771:
  endwhile747:
    JR_GTEQF VLV_SP_9 0.0 else777_1
    MOVEF_F -70.0 VLV_SP_9
    JR endif777
  else777_1:
    MOVEF_F 70.0 VLV_SP_9
  else777_2:
  endif777:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_9
    DATA32 milliseconds779
	MOVEF_32 300.0 milliseconds779
	DATA32 timer779
	TIMER_WAIT milliseconds779 timer779
	TIMER_READY timer779
    DATA32 tmp780
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp780
    JR_NEQ32 0 tmp780 alreadylaunched780
    OBJECT_START TF_BEEP_0
  alreadylaunched780:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_10
    DATA8 layer782
	DATA8 no782
	DATA8 mode8782
	
	MOVEF_8 2.0 no782
	SUB8 no782 1 no782
	DIV8 no782 4 layer782
	MATH MOD8 no782 4 no782

	MOVEF_8 2.0 mode8782
	
	INPUT_DEVICE READY_RAW layer782 no782 0 mode8782 0
    DATA8 layer783
	DATA8 no783
	DATA8 mode8783
	
	MOVEF_8 3.0 no783
	SUB8 no783 1 no783
	DIV8 no783 4 layer783
	MATH MOD8 no783 4 no783

	MOVEF_8 2.0 mode8783
	
	INPUT_DEVICE READY_RAW layer783 no783 0 mode8783 0
  while784:
    JR_EQF VLV_WHITE_10 1.0 endwhile784
  whilebody784:
    CALL MOTOR.RESETCOUNT 'BC'
  while786:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or787
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile786
  or787:
  whilebody786:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody786
  endwhile786:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_10
  while802:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_10 endwhile802
  whilebody802:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_10 whilebody802
  endwhile802:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else816_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else816_1
    MOVEF_F 1.0 VLV_WHITE_10
  else816_1:
  endif816:
    JR_NEQF VLV_WHITE_10 1.0 whilebody784
  endwhile784:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer820
	DATA8 no820
	DATA8 mode8820
	
	MOVEF_8 2.0 no820
	SUB8 no820 1 no820
	DIV8 no820 4 layer820
	MATH MOD8 no820 4 no820

	MOVEF_8 0.0 mode8820
	
	INPUT_DEVICE READY_RAW layer820 no820 0 mode8820 0
    DATA8 layer821
	DATA8 no821
	DATA8 mode8821
	
	MOVEF_8 3.0 no821
	SUB8 no821 1 no821
	DIV8 no821 4 layer821
	MATH MOD8 no821 4 no821

	MOVEF_8 0.0 mode8821
	
	INPUT_DEVICE READY_RAW layer821 no821 0 mode8821 0
  while822:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile822
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile822
  whilebody822:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 0.8 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 0.8 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and834
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody822
  and834:
  endwhile822:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds841
	MOVEF_32 500.0 milliseconds841
	DATA32 timer841
	TIMER_WAIT milliseconds841 timer841
	TIMER_READY timer841
  while842:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf846
    DATA8 flag846
    DIVF F.1 2.0 tmpf846
    CP_EQF 0.0 2.0 flag846
    SELECTF flag846 0.0 tmpf846 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile842
  whilebody842:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf852
    DATA8 flag852
    DIVF F.1 2.0 tmpf852
    CP_EQF 0.0 2.0 flag852
    SELECTF flag852 0.0 tmpf852 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody842
  endwhile842:
    CALL MOTOR.STOP VLV_MOTOR_11 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_12 VLV_SP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds857
	MOVEF_32 500.0 milliseconds857
	DATA32 timer857
	TIMER_WAIT milliseconds857 timer857
	TIMER_READY timer857
  while858:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf862
    DATA8 flag862
    DIVF F.1 2.0 tmpf862
    CP_EQF 0.0 2.0 flag862
    SELECTF flag862 0.0 tmpf862 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile858
  whilebody858:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf867
    DATA8 flag867
    DIVF F.1 2.0 tmpf867
    CP_EQF 0.0 2.0 flag867
    SELECTF flag867 0.0 tmpf867 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody858
  endwhile858:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
  while873:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_LTEQF F.0 -23.0 endwhile873
  whilebody873:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_GTF F.0 -23.0 whilebody873
  endwhile873:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
