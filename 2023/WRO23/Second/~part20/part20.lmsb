DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VK_M
DATAF VV_M
DATAF VMM_M
DATAF VK_ACCEL_M
DATAF VMAX1_M
DATAF VMIN1_M
DATAF VMAX2_M
DATAF VMIN2_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VDEG_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAS VFLAG_M 252
DATAF VW_M
DATAF VW1_M
DATAF VW2_M
DATAF VB1_M
DATAF VB2_M
DATAF VI_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VTIME_M
DATAF VMODE_1
DATAF VMM_2
DATAF VV_2
DATAF VL_2
DATAF VSP_2
DATAF VDEG_2
DATAF VU_2
DATAF VDEG_3
DATAF VSP_3
DATAF VL_3
DATAF VV_3
DATAF VDEG_4
DATAF VSP_4
DATAF VL_4
DATAF VV_4
DATAF VDEG_5
DATAF VSP_5
DATAF VL_5
DATAF VV_5
DATAF VDEG_6
DATAF VSP_6
DATAF VL_6
DATAF VV_6
DATAF VSP_7
DATAF VSP_8
DATAF VSP_9
DATAF VSP_10
DATAF VU_10
DATAF VSP_11
DATAF VWHITE_11
DATAF VU_11
DATAF VL_11
DATAS VMOTOR_12 252
DATAF VSP_12
DATAS VMOTOR_13 252
DATAF VSP_13
DATA32 RUNCOUNTER_BEEP
DATA32 RUNCOUNTER_TH_DOWN

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VSP_11
    MOVEF_F 0.0 VWHITE_11
    MOVEF_F 0.0 VU_11
    MOVEF_F 0.0 VL_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    STRINGS DUPLICATE '' VMOTOR_13
    MOVEF_F 0.0 VSP_13
    MOVE32_32 0 RUNCOUNTER_BEEP
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TBEEP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_BEEP 0
    CALL GETANDINC32 RUNCOUNTER_BEEP -1 RUNCOUNTER_BEEP tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 1
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_BEEP
subcall PROGRAM_TH_DOWN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch853
    WRITE32 ENDSUB_BEEP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BEEP
  dispatch853:
    JR_NEQ32 SUBPROGRAM 1 dispatch854
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch854:
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VSP_11
    MOVEF_F 0.0 VWHITE_11
    MOVEF_F 0.0 VU_11
    MOVEF_F 0.0 VL_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    STRINGS DUPLICATE '' VMOTOR_13
    MOVEF_F 0.0 VSP_13
    TIMER_READ timeMC1
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.5 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN2_M
    STRINGS DUPLICATE 'false' VFLAG_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VB_M
    DATA32 tmp528
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp528
    JR_NEQ32 0 tmp528 alreadylaunched528
    OBJECT_START TTH_DOWN
  alreadylaunched528:
    MOVEF_F 25.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB529:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB530:
  while531:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile531
  whilebody531:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody531
  endwhile531:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 221.902609410314 VL_M
  while544:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf548
    DATA8 flag548
    DIVF F.1 2.0 tmpf548
    CP_EQF 0.0 2.0 flag548
    SELECTF flag548 0.0 tmpf548 F.0

    JR_GTEQF F.0 VL_M endwhile544
  whilebody544:
    WRITE32 ENDSUB_LINE3_1SENS:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3_1SENS
CALLSUB549:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf553
    DATA8 flag553
    DIVF F.1 2.0 tmpf553
    CP_EQF 0.0 2.0 flag553
    SELECTF flag553 0.0 tmpf553 F.0

    JR_LTF F.0 VL_M whilebody544
  endwhile544:
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VI_M
  for554:
    JR_GTF VI_M 3.0 endfor554
  forbody554:
    WRITE32 ENDSUB_COL1:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL1
CALLSUB555:
    JR_NEQF VCOL_M 1.0 else556_1
    MOVEF_F VI_M VB2_M
    JR endif556
  else556_1:
    JR_NEQF VCOL_M 6.0 else556_2
    MOVEF_F VI_M VW2_M
  else556_2:
  endif556:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VL_M
  while558:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf562
    DATA8 flag562
    DIVF F.1 2.0 tmpf562
    CP_EQF 0.0 2.0 flag562
    SELECTF flag562 0.0 tmpf562 F.0

    JR_GTEQF F.0 VL_M endwhile558
  whilebody558:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB563:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf567
    DATA8 flag567
    DIVF F.1 2.0 tmpf567
    CP_EQF 0.0 2.0 flag567
    SELECTF flag567 0.0 tmpf567 F.0

    JR_LTF F.0 VL_M whilebody558
  endwhile558:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody554
  endfor554:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VL_M
  while570:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf574
    DATA8 flag574
    DIVF F.1 2.0 tmpf574
    CP_EQF 0.0 2.0 flag574
    SELECTF flag574 0.0 tmpf574 F.0

    JR_GTEQF F.0 VL_M endwhile570
  whilebody570:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB575:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf579
    DATA8 flag579
    DIVF F.1 2.0 tmpf579
    CP_EQF 0.0 2.0 flag579
    SELECTF flag579 0.0 tmpf579 F.0

    JR_LTF F.0 VL_M whilebody570
  endwhile570:
    MOVEF_F 0.0 VI_M
  for580:
    JR_GTF VI_M 3.0 endfor580
  forbody580:
    WRITE32 ENDSUB_COL1:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_COL1
CALLSUB581:
    JR_NEQF VCOL_M 1.0 else582_1
    MOVEF_F VI_M VB1_M
    JR endif582
  else582_1:
    JR_NEQF VCOL_M 6.0 else582_2
    MOVEF_F VI_M VW1_M
  else582_2:
  endif582:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while584:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf588
    DATA8 flag588
    DIVF F.1 2.0 tmpf588
    CP_EQF 0.0 2.0 flag588
    SELECTF flag588 0.0 tmpf588 F.0

    JR_GTEQF F.0 VL_M endwhile584
  whilebody584:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB589:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf593
    DATA8 flag593
    DIVF F.1 2.0 tmpf593
    CP_EQF 0.0 2.0 flag593
    SELECTF flag593 0.0 tmpf593 F.0

    JR_LTF F.0 VL_M whilebody584
  endwhile584:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody580
  endfor580:
    ADDF VB1_M 1.0 VB1_M
    ADDF VB2_M 1.0 VB2_M
    ADDF VW1_M 1.0 VW1_M
    ADDF VW2_M 1.0 VW2_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB608:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB610 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB610:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB611:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB612:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB613:
    MOVEF_F 700.0 VMM_2
    MOVEF_F 95.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB614:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB615:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB616:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB617:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB618:
    MOVEF_F 93.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB619:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB620:
    MOVEF_F 900.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB621:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB622:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB623:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB624:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB625:
    MOVEF_F 400.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB626:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB627:
    MOVEF_F 25.0 VDEG_3
    MOVEF_F 30.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB628:
    MOVEF_F 25.0 VDEG_3
    MOVEF_F -30.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB629:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB630:
    MOVEF_F 40.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB631:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB632:
    MOVEF_F 60.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB633:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB634:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB635:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB636 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB636:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB637:
    TIMER_READ timeMC2
    MOVEF_F VB1_M VB_M
    MOVEF_F VW1_M VW_M
    JR_NEQF VB_M 2.0 and641
    JR_EQF VW_M 1.0 or640
  and641:
    JR_NEQF VB_M 3.0 else639_1
    JR_NEQF VW_M 4.0 else639_1
  or640:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB642:
    MOVEF_F 92.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB643 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB643:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB644 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB644:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB645:
    JR_NEQF VB_M 2.0 else646_1
    MOVEF_F 310.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB647:
    WRITE32 ENDSUB_W1B2:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB648:
    MOVEF_F 600.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB649:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB650:
    JR endif646
  else646_1:
    MOVEF_F 175.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB651:
    WRITE32 ENDSUB_W1B2:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB652:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB653 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB653:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB654:
  else646_2:
  endif646:
    JR endif639
  else639_1:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB655:
    MOVEF_F 92.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB656 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB656:
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB657:
    JR_EQF VB_M 1.0 or659
    JR_NEQF VW_M 2.0 else658_1
  or659:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB660:
    JR_NEQF VW_M 2.0 else661_1
    WRITE32 ENDSUB_W2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB662:
  else661_1:
  endif661:
    JR_NEQF VB_M 1.0 else663_1
    WRITE32 ENDSUB_B1:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB664:
  else663_1:
  endif663:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB665:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds667
	MOVEF_32 100.0 milliseconds667
	DATA32 timer667
	TIMER_WAIT milliseconds667 timer667
	TIMER_READY timer667
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB668:
    JR endif658
  else658_1:
    JR_EQF VB_M 2.0 or669
    JR_NEQF VW_M 1.0 else658_2
  or669:
    JR_NEQF VB_M 2.0 else670_1
    WRITE32 ENDSUB_B2:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB671:
  else670_1:
  endif670:
    JR_NEQF VW_M 1.0 else672_1
    WRITE32 ENDSUB_W1:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB673:
  else672_1:
  endif672:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB674:
    MOVEF_F 92.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB675 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB675:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB676:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds678
	MOVEF_32 100.0 milliseconds678
	DATA32 timer678
	TIMER_WAIT milliseconds678 timer678
	TIMER_READY timer678
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB679:
  else658_2:
  endif658:
    JR_EQF VW_M 3.0 or681
    JR_NEQF VB_M 4.0 else680_1
  or681:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds683
	MOVEF_32 300.0 milliseconds683
	DATA32 timer683
	TIMER_WAIT milliseconds683 timer683
	TIMER_READY timer683
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB684:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB685:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB686:
    JR_NEQF VW_M 3.0 else687_1
    WRITE32 ENDSUB_W2:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB688:
  else687_1:
  endif687:
    JR_NEQF VB_M 4.0 else689_1
    WRITE32 ENDSUB_B1:CALLSUB690 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB690:
  else689_1:
  endif689:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB691 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB691:
    JR endif680
  else680_1:
    JR_EQF VW_M 4.0 or692
    JR_NEQF VB_M 3.0 else680_2
  or692:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB693:
    MOVEF_F 415.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB694:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB695 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB695:
    JR_NEQF VW_M 4.0 else696_1
    WRITE32 ENDSUB_W1:CALLSUB697 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB697:
  else696_1:
  endif696:
    JR_NEQF VB_M 3.0 else698_1
    WRITE32 ENDSUB_B2:CALLSUB699 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB699:
  else698_1:
  endif698:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB700 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB700:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB701 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB701:
    JR endif680
  else680_2:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB702 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB702:
  else680_3:
  endif680:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB703:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB704:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB705 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB705:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB706:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB708:
  else639_2:
  endif639:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE1_M
    STRINGS DUPLICATE 'true' VFLAG_M
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB710:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB711:
    MOVEF_F -35.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB712:
    DATA32 tmp713
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp713
    JR_NEQ32 0 tmp713 alreadylaunched713
    OBJECT_START TTH_DOWN
  alreadylaunched713:
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB714:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB715:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 60.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB717:
    MOVEF_F 40.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB718:
    MOVEF_F 45.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB719:
    MOVEF_F 350.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB720 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB720:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB722:
    MOVEF_F 650.0 VMM_2
    MOVEF_F -90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB723:
    STRINGS DUPLICATE 'AD' VMOTOR_13
    MOVEF_F 40.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB724:
    MOVEF_F 13.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB725:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB726:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB727 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB727:
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB728 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB728:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB729 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB729:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB730 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB730:
    TIMER_READ timeMC2
    MOVEF_F VB2_M VB_M
    MOVEF_F VW2_M VW_M
    JR_NEQF VB_M 2.0 and734
    JR_EQF VW_M 1.0 or733
  and734:
    JR_NEQF VB_M 3.0 else732_1
    JR_NEQF VW_M 4.0 else732_1
  or733:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB735:
    MOVEF_F 92.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB736:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB737 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB737:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB738:
    JR_NEQF VB_M 2.0 else739_1
    MOVEF_F 180.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB740:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB741:
    WRITE32 ENDSUB_W1B2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB742:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB743:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB744:
    JR endif739
  else739_1:
    JR_NEQF VB_M 3.0 else739_2
    MOVEF_F 190.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB745:
    WRITE32 ENDSUB_W1B2:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB746:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB747:
  else739_2:
  endif739:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB748:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB749:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB750 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB750:
    JR endif732
  else732_1:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB751 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB751:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB752:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB753:
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB754:
    JR_EQF VW_M 2.0 or756
    JR_NEQF VB_M 1.0 else755_1
  or756:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB757 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB757:
    JR_NEQF VW_M 2.0 else758_1
    WRITE32 ENDSUB_W2:CALLSUB759 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB759:
  else758_1:
  endif758:
    JR_NEQF VB_M 1.0 else760_1
    WRITE32 ENDSUB_B1:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB761:
  else760_1:
  endif760:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB762 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB762:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds764
	MOVEF_32 100.0 milliseconds764
	DATA32 timer764
	TIMER_WAIT milliseconds764 timer764
	TIMER_READY timer764
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB765:
  else755_1:
  endif755:
    JR_EQF VW_M 1.0 or767
    JR_NEQF VB_M 2.0 else766_1
  or767:
    JR_NEQF VW_M 1.0 else768_1
    WRITE32 ENDSUB_W1:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB769:
  else768_1:
  endif768:
    JR_NEQF VB_M 2.0 else770_1
    WRITE32 ENDSUB_B2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB771:
  else770_1:
  endif770:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB772:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB773 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB773:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB774 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB774:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds776
	MOVEF_32 100.0 milliseconds776
	DATA32 timer776
	TIMER_WAIT milliseconds776 timer776
	TIMER_READY timer776
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB777:
  else766_1:
  endif766:
    JR_EQF VW_M 3.0 or779
    JR_NEQF VB_M 4.0 else778_1
  or779:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB780 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB780:
    JR_NEQF VW_M 3.0 else781_1
    WRITE32 ENDSUB_W2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB782:
  else781_1:
  endif781:
    JR_NEQF VB_M 4.0 else783_1
    WRITE32 ENDSUB_B1:CALLSUB784 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB784:
  else783_1:
  endif783:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB785 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB785:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB786 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB786:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB787:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB788 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB788:
    JR endif778
  else778_1:
    JR_EQF VW_M 4.0 or789
    JR_NEQF VB_M 3.0 else778_2
  or789:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB790 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB790:
    JR_NEQF VW_M 4.0 else791_1
    MOVEF_F 40.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB792:
    WRITE32 ENDSUB_W1:CALLSUB793 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB793:
  else791_1:
  endif791:
    JR_NEQF VB_M 3.0 else794_1
    WRITE32 ENDSUB_B2:CALLSUB795 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB795:
  else794_1:
  endif794:
    JR endif778
  else778_2:
    MOVEF_F 350.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB796:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB797 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB797:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 70.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB798 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB798:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB799 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB799:
  else778_3:
  endif778:
  else732_2:
  endif732:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE2_M
    MOVEF_F 40.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB801 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB801:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB802 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB802:
    CALL MOTOR.RESETCOUNT 'BC'
  while804:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 55.0 endwhile804
  whilebody804:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 55.0 whilebody804
  endwhile804:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB816:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB817:
    MOVEF_F -50.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB818 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB818:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB819:
    MOVEF_F 100.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB820 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB820:
    MOVEF_F 150.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB821:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB822 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB822:
    MOVEF_F -55.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB823:
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB825:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB826:
    CALL MOTOR.START 'AD' -50.0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB828 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB828:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB830 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB830:
    MOVEF_F 450.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB831 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB831:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB832:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -95.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB833 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB833:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB834 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB834:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 35.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB836 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB836:
    MOVEF_F 89.0 VDEG_5
    MOVEF_F 40.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB837 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB837:
    MOVEF_F -50.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB838 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB838:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB839 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB839:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VTIME_M
    CALL LCD.CLEAR
    DATAF tmpf843
    DATA8 flag843
    DIVF VTIME_M 1000.0 tmpf843
    CP_EQF 0.0 1000.0 flag843
    SELECTF flag843 0.0 tmpf843 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf846
    DATA8 flag846
    DIVF VZONE1_M 1000.0 tmpf846
    CP_EQF 0.0 1000.0 flag846
    SELECTF flag846 0.0 tmpf846 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf849
    DATA8 flag849
    DIVF VZONE2_M 1000.0 tmpf849
    CP_EQF 0.0 1000.0 flag849
    SELECTF flag849 0.0 tmpf849 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    WRITE32 ENDSUB_FRZ:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB852:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf11
    DATA8 flag11
    DIVF F.0 F.1 tmpf11
    CP_EQF 0.0 F.1 flag11
    SELECTF flag11 0.0 tmpf11 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf16
    DATA8 flag16
    DIVF F.0 F.1 tmpf16
    CP_EQF 0.0 F.1 flag16
    SELECTF flag16 0.0 tmpf16 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE_1:
    JR_NEQF VMODE_1 1.0 else17_1
    MOVEF_F 0.7 VK_M
    MOVEF_F 85.0 VV_M
    JR endif17
  else17_1:
    JR_NEQF VMODE_1 2.0 else17_2
    MOVEF_F 0.7 VK_M
    MOVEF_F 55.0 VV_M
    JR endif17
  else17_2:
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
  else17_3:
  endif17:
    WRITE32 ENDSUB_LINE_FOL:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_FOL
CALLSUB18:
RETSUB_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_1:
SUB_LINE_FOL:
    WRITE32 ENDSUB_SEN1:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB19:
    WRITE32 ENDSUB_SEN2:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB20:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE_FOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_FOL:
SUB_LINE_ACCELERATION:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf30
    DATA8 flag30
    DIVF VMM_M F.1 tmpf30
    CP_EQF 0.0 F.1 flag30
    SELECTF flag30 0.0 tmpf30 F.0

    MULF F.0 360.0 VL_M
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
    MOVEF_F 0.0 VDEG_M
    CALL MOTOR.RESETCOUNT 'BC'
  while33:
    JR_GTEQF VDEG_M VL_M endwhile33
  whilebody33:
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf37
    DATA8 flag37
    DIVF F.0 2.0 tmpf37
    CP_EQF 0.0 2.0 flag37
    SELECTF flag37 0.0 tmpf37 VDEG_M

    MULF VL_M 0.5 F.0
    JR_GTEQF VDEG_M F.0 else38_1
    JR_GTEQF VV_M 95.0 else38_1
    ADDF VV_M VK_ACCEL_M VV_M
    JR endif38
  else38_1:
    MULF 0.6 VL_M F.0
    JR_LTEQF VDEG_M F.0 else38_2
    JR_LTEQF VV_M 30.0 else38_2
    SUBF VV_M VK_ACCEL_M VV_M
  else38_2:
  endif38:
    JR_GTEQF VV_M 40.0 else43_1
    MOVEF_F 1.2 VK_M
    JR endif43
  else43_1:
    JR_GTEQF VV_M 65.0 else43_2
    MOVEF_F 0.8 VK_M
    JR endif43
  else43_2:
    JR_GTEQF VV_M 100.0 else43_3
    MOVEF_F 0.8 VK_M
  else43_3:
  endif43:
    WRITE32 ENDSUB_SEN1:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB44:
    WRITE32 ENDSUB_SEN2:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB45:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_M VL_M whilebody33
  endwhile33:
RETSUB_LINE_ACCELERATION:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_ACCELERATION:
SUB_LINE2_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.5 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.5 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE2_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2_1SENS:
SUB_LINE3_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.4 F.1
    ADDF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.4 F.1
    SUBF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE3_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3_1SENS:
SUB_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf71
    DATA8 flag71
    DIVF VMM_2 F.1 tmpf71
    CP_EQF 0.0 F.1 flag71
    SELECTF flag71 0.0 tmpf71 F.0

    MULF F.0 360.0 VL_2
    JR_GTEQF VV_2 0.0 else73_1
    MOVEF_F -10.0 VSP_2
    JR endif73
  else73_1:
    MOVEF_F 10.0 VSP_2
  else73_2:
  endif73:
    MOVEF_F 0.0 VDEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while75:
    JR_GTEQF VDEG_2 VL_2 endwhile75
  whilebody75:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf80
    DATA8 flag80
    DIVF F.0 2.0 tmpf80
    CP_EQF 0.0 2.0 flag80
    SELECTF flag80 0.0 tmpf80 VDEG_2

    MULF VL_2 0.8 F.0
    JR_LTEQF VDEG_2 F.0 else81_1
    MATH ABS VSP_2 F.0
    JR_LTEQF F.0 20.0 else81_1
    JR_LTEQF VV_2 0.0 else84_1
    SUBF VSP_2 0.3 VSP_2
    JR endif84
  else84_1:
    ADDF VSP_2 0.3 VSP_2
  else84_2:
  endif84:
    JR endif81
  else81_1:
    MATH ABS VSP_2 F.0
    MATH ABS VV_2 F.1
    JR_GTEQF F.0 F.1 else81_2
    JR_LTEQF VV_2 0.0 else89_1
    ADDF VSP_2 0.3 VSP_2
    JR endif89
  else89_1:
    SUBF VSP_2 0.3 VSP_2
  else89_2:
  endif89:
  else81_2:
  endif81:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 2.0 F.1
    ADDF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 2.0 F.1
    SUBF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_2 VL_2 whilebody75
  endwhile75:
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_RIGHT1_2:
    MULF 1092.72 VDEG_3 F.0
    DATAF tmpf102
    DATA8 flag102
    DIVF F.0 360.0 tmpf102
    CP_EQF 0.0 360.0 flag102
    SELECTF flag102 0.0 tmpf102 VL_3

    DATAF tmpf103
    DATA8 flag103
    DIVF VL_3 210.38 tmpf103
    CP_EQF 0.0 210.38 flag103
    SELECTF flag103 0.0 tmpf103 F.0

    MULF F.0 360.0 VL_3
    MOVEF_F 30.0 VV_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_3
  while106:
    JR_GTF VDEG_3 VL_3 endwhile106
  whilebody106:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VDEG_3
    CALL MOTOR.STARTPOWER 'B' VV_3
    MULF VL_3 0.2 F.0
    JR_LTF VDEG_3 F.0 or111
    MULF VL_3 0.8 F.0
    JR_LTEQF VDEG_3 F.0 else110_1
  or111:
    JR_GTEQF VSP_3 0.0 else114_1
    MOVEF_F -30.0 VV_3
    JR endif114
  else114_1:
    MOVEF_F 30.0 VV_3
  else114_2:
  endif114:
    JR endif110
  else110_1:
    MOVEF_F VSP_3 VV_3
  else110_2:
  endif110:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VDEG_3 VL_3 whilebody106
  endwhile106:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT1_2:
    MULF 1092.72 VDEG_4 F.0
    DATAF tmpf118
    DATA8 flag118
    DIVF F.0 360.0 tmpf118
    CP_EQF 0.0 360.0 flag118
    SELECTF flag118 0.0 tmpf118 VL_4

    DATAF tmpf119
    DATA8 flag119
    DIVF VL_4 210.38 tmpf119
    CP_EQF 0.0 210.38 flag119
    SELECTF flag119 0.0 tmpf119 F.0

    MULF F.0 360.0 VL_4
    MOVEF_F 30.0 VV_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_4
  while122:
    JR_GTF VDEG_4 VL_4 endwhile122
  whilebody122:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VDEG_4
    CALL MOTOR.STARTPOWER 'C' VV_4
    MULF VL_4 0.2 F.0
    JR_LTF VDEG_4 F.0 or127
    MULF VL_4 0.8 F.0
    JR_LTEQF VDEG_4 F.0 else126_1
  or127:
    JR_GTEQF VSP_4 0.0 else130_1
    MOVEF_F -30.0 VV_4
    JR endif130
  else130_1:
    MOVEF_F 30.0 VV_4
  else130_2:
  endif130:
    JR endif126
  else126_1:
    MOVEF_F VSP_4 VV_4
  else126_2:
  endif126:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VDEG_4 VL_4 whilebody122
  endwhile122:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_5 F.0
    DATAF tmpf137
    DATA8 flag137
    DIVF F.0 360.0 tmpf137
    CP_EQF 0.0 360.0 flag137
    SELECTF flag137 0.0 tmpf137 VL_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf140
    DATA8 flag140
    DIVF VL_5 F.2 tmpf140
    CP_EQF 0.0 F.2 flag140
    SELECTF flag140 0.0 tmpf140 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf142
    DATA8 flag142
    DIVF F.0 2.0 tmpf142
    CP_EQF 0.0 2.0 flag142
    SELECTF flag142 0.0 tmpf142 VL_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VV_5
    MOVEF_F 0.0 VDEG_5
  while144:
    JR_GTF VDEG_5 VL_5 endwhile144
  whilebody144:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf150
    DATA8 flag150
    DIVF F.0 2.0 tmpf150
    CP_EQF 0.0 2.0 flag150
    SELECTF flag150 0.0 tmpf150 VDEG_5

    MULF VL_5 0.2 F.0
    JR_LTF VDEG_5 F.0 or152
    MULF VL_5 0.8 F.0
    JR_LTEQF VDEG_5 F.0 else151_1
  or152:
    MOVEF_F 30.0 VV_5
    JR endif151
  else151_1:
    MOVEF_F VSP_5 VV_5
  else151_2:
  endif151:
    CALL MOTOR.STARTPOWER 'B' VV_5
    SUBF 0.0 VV_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VDEG_5 VL_5 whilebody144
  endwhile144:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_6 F.0
    DATAF tmpf163
    DATA8 flag163
    DIVF F.0 360.0 tmpf163
    CP_EQF 0.0 360.0 flag163
    SELECTF flag163 0.0 tmpf163 VL_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf166
    DATA8 flag166
    DIVF VL_6 F.2 tmpf166
    CP_EQF 0.0 F.2 flag166
    SELECTF flag166 0.0 tmpf166 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf168
    DATA8 flag168
    DIVF F.0 2.0 tmpf168
    CP_EQF 0.0 2.0 flag168
    SELECTF flag168 0.0 tmpf168 VL_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VV_6
    MOVEF_F 0.0 VDEG_6
  while170:
    JR_GTF VDEG_6 VL_6 endwhile170
  whilebody170:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf176
    DATA8 flag176
    DIVF F.0 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 VDEG_6

    MULF VL_6 0.2 F.0
    JR_LTF VDEG_6 F.0 or178
    MULF VL_6 0.8 F.0
    JR_LTEQF VDEG_6 F.0 else177_1
  or178:
    MOVEF_F 30.0 VV_6
    JR endif177
  else177_1:
    MOVEF_F VSP_6 VV_6
  else177_2:
  endif177:
    SUBF 0.0 VV_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VV_6
    JR_LTEQF VDEG_6 VL_6 whilebody170
  endwhile170:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_7 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB185:
    MOVEF_F 50.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB186:
    CALL MOTOR.START 'B' VSP_7
    SUBF 0.0 VSP_7 F.0
    CALL MOTOR.START 'C' F.0
  while190:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile190
  whilebody190:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody190
  endwhile190:
  while193:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile193
  whilebody193:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody193
  endwhile193:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB197:
RETSUB_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT_1:
SUB_LEFT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_8 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB198:
    MOVEF_F 50.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB199:
    SUBF 0.0 VSP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_8
  while203:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile203
  whilebody203:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody203
  endwhile203:
  while206:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile206
  whilebody206:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody206
  endwhile206:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB210:
RETSUB_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT_1:
SUB_AROUND_1:
    MOVEF_F 140.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB211:
    SUBF 0.0 VSP_9 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_9
  while215:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile215
  whilebody215:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody215
  endwhile215:
  while218:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile218
  whilebody218:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody218
  endwhile218:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB222:
RETSUB_AROUND_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND_1:
SUB_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while225:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or226
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_GTEQF F.0 F.1 endwhile225
  or226:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 600.0 endwhile225
  whilebody225:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 2.0 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 2.0 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or246
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_GTEQF F.0 F.1 and245
  or246:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 600.0 whilebody225
  and245:
  endwhile225:
    CALL MOTOR.RESETCOUNT 'BC'
  while257:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or258
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile257
  or258:
  whilebody257:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 2.0 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 2.0 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody257
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody257
  endwhile257:
    JR_GTEQF VSP_10 0.0 else284_1
    MOVEF_F -50.0 VSP_10
    JR endif284
  else284_1:
    MOVEF_F 50.0 VSP_10
  else284_2:
  endif284:
    CALL MOTOR.STARTPOWER 'BC' VSP_10
    DATA32 milliseconds286
	MOVEF_32 300.0 milliseconds286
	DATA32 timer286
	TIMER_WAIT milliseconds286 timer286
	TIMER_READY timer286
    DATA32 tmp287
    CALL GETANDINC32 RUNCOUNTER_BEEP 1  RUNCOUNTER_BEEP tmp287
    JR_NEQ32 0 tmp287 alreadylaunched287
    OBJECT_START TBEEP
  alreadylaunched287:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ALIGNMENT_1:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_11
    DATA8 layer290
	DATA8 no290
	DATA8 mode8290
	
	MOVEF_8 2.0 no290
	SUB8 no290 1 no290
	DIV8 no290 4 layer290
	MATH MOD8 no290 4 no290

	MOVEF_8 2.0 mode8290
	
	INPUT_DEVICE READY_RAW layer290 no290 0 mode8290 0
    DATA8 layer291
	DATA8 no291
	DATA8 mode8291
	
	MOVEF_8 3.0 no291
	SUB8 no291 1 no291
	DIV8 no291 4 layer291
	MATH MOD8 no291 4 no291

	MOVEF_8 2.0 mode8291
	
	INPUT_DEVICE READY_RAW layer291 no291 0 mode8291 0
  while292:
    JR_EQF VWHITE_11 1.0 endwhile292
  whilebody292:
  while293:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or294
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile293
  or294:
  whilebody293:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 2.0 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 2.0 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody293
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody293
  endwhile293:
    MOVEF_F 12.9443188822683 VL_11
  while308:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_11 endwhile308
  whilebody308:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 2.0 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 2.0 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_11 whilebody308
  endwhile308:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else322_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else322_1
    MOVEF_F 1.0 VWHITE_11
  else322_1:
  endif322:
    JR_NEQF VWHITE_11 1.0 whilebody292
  endwhile292:
    DATA8 layer325
	DATA8 no325
	DATA8 mode8325
	
	MOVEF_8 2.0 no325
	SUB8 no325 1 no325
	DIV8 no325 4 layer325
	MATH MOD8 no325 4 no325

	MOVEF_8 0.0 mode8325
	
	INPUT_DEVICE READY_RAW layer325 no325 0 mode8325 0
    DATA8 layer326
	DATA8 no326
	DATA8 mode8326
	
	MOVEF_8 3.0 no326
	SUB8 no326 1 no326
	DIV8 no326 4 layer326
	MATH MOD8 no326 4 no326

	MOVEF_8 0.0 mode8326
	
	INPUT_DEVICE READY_RAW layer326 no326 0 mode8326 0
  while327:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile327
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile327
  whilebody327:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 0.8 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 0.8 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and339
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody327
  and339:
  endwhile327:
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_UP_2:
    SUBF 0.0 VSP_12 F.0
    CALL MOTOR.START VMOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds345
	MOVEF_32 500.0 milliseconds345
	DATA32 timer345
	TIMER_WAIT milliseconds345 timer345
	TIMER_READY timer345
  while346:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf350
    DATA8 flag350
    DIVF F.1 2.0 tmpf350
    CP_EQF 0.0 2.0 flag350
    SELECTF flag350 0.0 tmpf350 F.0

    MULF VSP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile346
  whilebody346:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf356
    DATA8 flag356
    DIVF F.1 2.0 tmpf356
    CP_EQF 0.0 2.0 flag356
    SELECTF flag356 0.0 tmpf356 F.0

    MULF VSP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody346
  endwhile346:
    CALL MOTOR.STOP VMOTOR_12 'true'
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.START VMOTOR_13 VSP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds361
	MOVEF_32 500.0 milliseconds361
	DATA32 timer361
	TIMER_WAIT milliseconds361 timer361
	TIMER_READY timer361
  while362:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf366
    DATA8 flag366
    DIVF F.1 2.0 tmpf366
    CP_EQF 0.0 2.0 flag366
    SELECTF flag366 0.0 tmpf366 F.0

    MULF VSP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile362
  whilebody362:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf371
    DATA8 flag371
    DIVF F.1 2.0 tmpf371
    CP_EQF 0.0 2.0 flag371
    SELECTF flag371 0.0 tmpf371 F.0

    MULF VSP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody362
  endwhile362:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VMOTOR_13 -20.0 0.0 17.0 0.0 'true' 

	DATA8 layer374
	DATA8 nos374
	DATA8 busy374
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_13 layer374 nos374
	JR_EQ8 0 nos374 motornotbusy374
  motorwaiting374:
	OUTPUT_TEST layer374 nos374 busy374
	JR_EQ8 busy374 0 motornotbusy374
	SLEEP
	JR motorwaiting374
  motornotbusy374:
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_TH_DOWN:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds376
	MOVEF_32 500.0 milliseconds376
	DATA32 timer376
	TIMER_WAIT milliseconds376 timer376
	TIMER_READY timer376
  while377:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf381
    DATA8 flag381
    DIVF F.1 2.0 tmpf381
    CP_EQF 0.0 2.0 flag381
    SELECTF flag381 0.0 tmpf381 F.0

    JR_LTEQF F.0 35.0 endwhile377
  whilebody377:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf385
    DATA8 flag385
    DIVF F.1 2.0 tmpf385
    CP_EQF 0.0 2.0 flag385
    SELECTF flag385 0.0 tmpf385 F.0

    JR_GTF F.0 35.0 whilebody377
  endwhile377:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 17.0 0.0 'true' 

	DATA8 layer387
	DATA8 nos387
	DATA8 busy387
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer387 nos387
	JR_EQ8 0 nos387 motornotbusy387
  motorwaiting387:
	OUTPUT_TEST layer387 nos387 busy387
	JR_EQ8 busy387 0 motornotbusy387
	SLEEP
	JR motorwaiting387
  motornotbusy387:
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
SUB_TH_UP:
    CALL MOTOR.START 'AD' -50.0
    DATA32 milliseconds389
	MOVEF_32 300.0 milliseconds389
	DATA32 timer389
	TIMER_WAIT milliseconds389 timer389
	TIMER_READY timer389
  while390:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf394
    DATA8 flag394
    DIVF F.1 2.0 tmpf394
    CP_EQF 0.0 2.0 flag394
    SELECTF flag394 0.0 tmpf394 F.0

    JR_LTEQF F.0 25.0 endwhile390
  whilebody390:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf398
    DATA8 flag398
    DIVF F.1 2.0 tmpf398
    CP_EQF 0.0 2.0 flag398
    SELECTF flag398 0.0 tmpf398 F.0

    JR_GTF F.0 25.0 whilebody390
  endwhile390:
    CALL MOTOR.STOP 'AD' 'true'
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_BEEP:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_BEEP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BEEP:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else412_1
    JR_LTEQF VR_M VB_M else412_1
    MOVEF_F VR_M VMAX_M
    JR endif412
  else412_1:
    JR_LTEQF VG_M VR_M else412_2
    JR_LTEQF VG_M VB_M else412_2
    MOVEF_F VG_M VMAX_M
    JR endif412
  else412_2:
    JR_LTEQF VB_M VR_M else412_3
    JR_LTEQF VB_M VG_M else412_3
    MOVEF_F VB_M VMAX_M
  else412_3:
  endif412:
    JR_GTEQF VR_M VG_M else413_1
    JR_GTEQF VR_M VB_M else413_1
    MOVEF_F VR_M VMIN_M
    JR endif413
  else413_1:
    JR_GTEQF VG_M VR_M else413_2
    JR_GTEQF VG_M VB_M else413_2
    MOVEF_F VG_M VMIN_M
    JR endif413
  else413_2:
    JR_GTEQF VB_M VR_M else413_3
    JR_GTEQF VB_M VG_M else413_3
    MOVEF_F VB_M VMIN_M
  else413_3:
  endif413:
    JR_NEQF VMAX_M VMIN_M else414_1
    MOVEF_F 0.0 VH_M
    JR endif414
  else414_1:
    JR_NEQF VR_M VMAX_M else415_1
    JR_LTF VG_M VB_M else416_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf420
    DATA8 flag420
    DIVF F.0 F.1 tmpf420
    CP_EQF 0.0 F.1 flag420
    SELECTF flag420 0.0 tmpf420 VH_M

    JR endif416
  else416_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf424
    DATA8 flag424
    DIVF F.1 F.2 tmpf424
    CP_EQF 0.0 F.2 flag424
    SELECTF flag424 0.0 tmpf424 F.0

    ADDF F.0 360.0 VH_M
  else416_2:
  endif416:
    JR endif415
  else415_1:
    JR_NEQF VMAX_M VG_M else426_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf430
    DATA8 flag430
    DIVF F.1 F.2 tmpf430
    CP_EQF 0.0 F.2 flag430
    SELECTF flag430 0.0 tmpf430 F.0

    ADDF F.0 120.0 VH_M
    JR endif426
  else426_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf435
    DATA8 flag435
    DIVF F.1 F.2 tmpf435
    CP_EQF 0.0 F.2 flag435
    SELECTF flag435 0.0 tmpf435 F.0

    ADDF F.0 240.0 VH_M
  else426_2:
  endif426:
  else415_2:
  endif415:
  else414_2:
  endif414:
    JR_NEQF VMAX_M 0.0 else437_1
    MOVEF_F 0.0 VS_M
    JR endif437
  else437_1:
    DATAF tmpf438
    DATA8 flag438
    DIVF VMIN_M VMAX_M tmpf438
    CP_EQF 0.0 VMAX_M flag438
    SELECTF flag438 0.0 tmpf438 F.0

    SUBF 1.0 F.0 VS_M
  else437_2:
  endif437:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL1:
    WRITE32 ENDSUB_HSV:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB441:
    JR_LTEQF VV_M 20.0 else442_1
    JR_LTEQF VRGB_M 100.0 else443_1
    MOVEF_F 6.0 VCOL_M
    JR endif443
  else443_1:
    MOVEF_F 1.0 VCOL_M
  else443_2:
  endif443:
    JR endif442
  else442_1:
    MOVEF_F 0.0 VCOL_M
  else442_2:
  endif442:
RETSUB_COL1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL1:
SUB_COL2:
    WRITE32 ENDSUB_HSV:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB444:
    JR_LTEQF VRGB_M 100.0 else445_1
    JR_LTEQF VR_M 80.0 else446_1
    JR_LTEQF VG_M 80.0 else446_1
    JR_LTEQF VB_M 60.0 else446_1
    MOVEF_F 6.0 VCOL_M
    JR endif446
  else446_1:
    JR_LTEQF VR_M 80.0 else446_2
    JR_LTEQF VG_M 70.0 else446_2
    MOVEF_F 4.0 VCOL_M
    JR endif446
  else446_2:
    JR_LTEQF VR_M VG_M else446_3
    JR_LTEQF VR_M VB_M else446_3
    MOVEF_F 5.0 VCOL_M
    JR endif446
  else446_3:
    JR_LTEQF VG_M VR_M else446_4
    JR_LTEQF VG_M VB_M else446_4
    MOVEF_F 3.0 VCOL_M
    JR endif446
  else446_4:
    JR_LTEQF VB_M VR_M else446_5
    JR_LTEQF VB_M VG_M else446_5
    MOVEF_F 2.0 VCOL_M
  else446_5:
  endif446:
    JR endif445
  else445_1:
    MOVEF_F 1.0 VCOL_M
  else445_2:
  endif445:
RETSUB_COL2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL2:
SUB_COL3:
    WRITE32 ENDSUB_HSV:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB447:
    JR_LTF VNUM_M 2.0 else448_1
    JR_GTF VNUM_M 3.0 else448_1
    MOVEF_F 2.0 VCOL_M
    JR endif448
  else448_1:
    JR_NEQF VNUM_M 4.0 else448_2
    MOVEF_F 3.0 VCOL_M
    JR endif448
  else448_2:
    JR_LTF VNUM_M 5.0 else448_3
    JR_GTF VNUM_M 6.0 else448_3
    MOVEF_F 4.0 VCOL_M
    JR endif448
  else448_3:
    JR_LTF VNUM_M 7.0 else448_4
    JR_GTF VNUM_M 9.0 else448_4
    MOVEF_F 5.0 VCOL_M
  else448_4:
  endif448:
RETSUB_COL3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL3:
SUB_W1B2:
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB449:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB450:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else451_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB453:
    JR endif451
  else451_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB454:
  else451_2:
  endif451:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB455:
    MOVEF_F 180.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB456:
    JR_NEQF VB_M 3.0 else457_1
    MOVEF_F 55.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB458:
    JR endif457
  else457_1:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB459:
  else457_2:
  endif457:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB460:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB461:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB462:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 10.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB464:
    MOVEF_F 7.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB465:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else466_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB468:
  else466_1:
  endif466:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB469:
    MOVEF_F 102.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB470:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB471:
RETSUB_W1B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1B2:
SUB_W1:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB472:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else473_1
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB475:
    JR endif473
  else473_1:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB476:
  else473_2:
  endif473:
    MOVEF_F 255.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB477:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB478:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB479:
    MOVEF_F 10.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB480:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB482:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB483:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else484_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB486:
  else484_1:
  endif484:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB487:
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 25.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB488:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB489:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB490:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB491:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else492_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB494:
  else492_1:
  endif492:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB495:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB496:
RETSUB_W1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1:
SUB_W2:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB498:
    MOVEF_F 11.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB499:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else500_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB502:
  else500_1:
  endif500:
RETSUB_W2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2:
SUB_B1:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB504:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB505:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else506_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB508:
  else506_1:
  endif506:
RETSUB_B1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1:
SUB_B2:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB509:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB510:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB511:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB512:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB513:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB515:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB516:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else517_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB519:
  else517_1:
  endif517:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB520:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB521:
    MOVEF_F 95.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB522:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else523_1
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB525:
  else523_1:
  endif523:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB526:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB527:
RETSUB_B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
