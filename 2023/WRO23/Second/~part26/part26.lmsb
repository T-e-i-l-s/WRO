DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_MM_2
DATAF VLV_V_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VLV_SP_10
DATAF VLV_DEG_6
DATAF VLV_SP_6
DATAF VLV_SP_11
DATAS VLV_MOTOR_13 252
DATAF VLV_SP_13
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_U
DATAF VGV_L
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_ZONE1
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_2
DATAF VLV_SP_2
DATAF VLV_DEG_2
DATAF VLV_U_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_L_6
DATAF VLV_V_6
DATAF VLV_U_10
DATAF VLV_WHITE_11
DATAF VLV_U_11
DATAF VLV_L_11
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_U_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_L_6
    MOVEF_F 0.0 VLV_V_6
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_WHITE_11
    MOVEF_F 0.0 VLV_U_11
    MOVEF_F 0.0 VLV_L_11
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch843
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch843:
    JR_NEQ32 SUBPROGRAM 1 dispatch844
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch844:
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    DATA32 tmp8
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp8
    JR_NEQ32 0 tmp8 alreadylaunched8
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched8:
    MOVEF_F 15.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB9:
    MOVEF_F 85.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB10:
    CALL MOTOR.RESETCOUNT 'BC'
  while12:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile12
  whilebody12:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody12
  endwhile12:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while25:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf29
    DATA8 flag29
    DIVF F.1 2.0 tmpf29
    CP_EQF 0.0 2.0 flag29
    SELECTF flag29 0.0 tmpf29 F.0

    JR_GTEQF F.0 VGV_L endwhile25
  whilebody25:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB30:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf34
    DATA8 flag34
    DIVF F.1 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.0

    JR_LTF F.0 VGV_L whilebody25
  endwhile25:
    CALL MOTOR.RESETCOUNT 'BC'
  while36:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile36
  or37:
  whilebody36:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody36
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody36
  endwhile36:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB51 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB51:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 295.870145880419 VGV_L
  while53:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf57
    DATA8 flag57
    DIVF F.1 2.0 tmpf57
    CP_EQF 0.0 2.0 flag57
    SELECTF flag57 0.0 tmpf57 F.0

    JR_GTEQF F.0 VGV_L endwhile53
  whilebody53:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB58 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB58:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf62
    DATA8 flag62
    DIVF F.1 2.0 tmpf62
    CP_EQF 0.0 2.0 flag62
    SELECTF flag62 0.0 tmpf62 F.0

    JR_LTF F.0 VGV_L whilebody53
  endwhile53:
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for64:
    JR_GTF VGV_I 3.0 endfor64
  forbody64:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB65 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB65:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while68:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF F.1 2.0 tmpf72
    CP_EQF 0.0 2.0 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    JR_GTEQF F.0 VGV_L endwhile68
  whilebody68:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB73:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf77
    DATA8 flag77
    DIVF F.1 2.0 tmpf77
    CP_EQF 0.0 2.0 flag77
    SELECTF flag77 0.0 tmpf77 F.0

    JR_LTF F.0 VGV_L whilebody68
  endwhile68:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody64
  endfor64:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for80:
    JR_GTF VGV_I 3.0 endfor80
  forbody80:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_LTEQF VGV_NUM VGV_MAX1 else82_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif82
  else82_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else82_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else82_2:
  endif82:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody80
  endfor80:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 147.93507294021 VGV_L
  while85:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf89
    DATA8 flag89
    DIVF F.1 2.0 tmpf89
    CP_EQF 0.0 2.0 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    JR_GTEQF F.0 VGV_L endwhile85
  whilebody85:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB90:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf94
    DATA8 flag94
    DIVF F.1 2.0 tmpf94
    CP_EQF 0.0 2.0 flag94
    SELECTF flag94 0.0 tmpf94 F.0

    JR_LTF F.0 VGV_L whilebody85
  endwhile85:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for95:
    JR_GTF VGV_I 3.0 endfor95
  forbody95:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB96 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB96:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    JR_GTEQF VGV_I 2.0 else98_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while100:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf104
    DATA8 flag104
    DIVF F.1 2.0 tmpf104
    CP_EQF 0.0 2.0 flag104
    SELECTF flag104 0.0 tmpf104 F.0

    JR_GTEQF F.0 VGV_L endwhile100
  whilebody100:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB105:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf109
    DATA8 flag109
    DIVF F.1 2.0 tmpf109
    CP_EQF 0.0 2.0 flag109
    SELECTF flag109 0.0 tmpf109 F.0

    JR_LTF F.0 VGV_L whilebody100
  endwhile100:
    JR endif98
  else98_1:
    JR_NEQF VGV_I 2.0 else98_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while111:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf115
    DATA8 flag115
    DIVF F.1 2.0 tmpf115
    CP_EQF 0.0 2.0 flag115
    SELECTF flag115 0.0 tmpf115 F.0

    JR_GTEQF F.0 VGV_L endwhile111
  whilebody111:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB116:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf120
    DATA8 flag120
    DIVF F.1 2.0 tmpf120
    CP_EQF 0.0 2.0 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    JR_LTF F.0 VGV_L whilebody111
  endwhile111:
  else98_2:
  endif98:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody95
  endfor95:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB122:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for124:
    JR_GTF VGV_I 3.0 endfor124
  forbody124:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_LTEQF VGV_NUM VGV_MAX1 else126_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif126
  else126_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else126_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else126_2:
  endif126:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody124
  endfor124:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 27.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB141:
    MOVEF_F 30.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB142:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 240.394493527841 VGV_L
  while144:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf148
    DATA8 flag148
    DIVF F.1 2.0 tmpf148
    CP_EQF 0.0 2.0 flag148
    SELECTF flag148 0.0 tmpf148 F.0

    JR_GTEQF F.0 VGV_L endwhile144
  whilebody144:
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf161
    DATA8 flag161
    DIVF F.1 2.0 tmpf161
    CP_EQF 0.0 2.0 flag161
    SELECTF flag161 0.0 tmpf161 F.0

    JR_LTF F.0 VGV_L whilebody144
  endwhile144:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB162:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB164:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB165:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB166:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB167:
    MOVEF_F 700.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB168:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB169:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB170:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB171:
    MOVEF_F 77.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB172:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB173:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB174:
    MOVEF_F 860.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB175:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB176:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB177:
    MOVEF_F 250.0 VLV_MM_2
    MOVEF_F 80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB178:
    MOVEF_F 44.0 VLV_DEG_3
    MOVEF_F 60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB179:
    MOVEF_F 410.0 VLV_MM_2
    MOVEF_F 70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB180:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB181:
    MOVEF_F 20.0 VLV_DEG_3
    MOVEF_F 30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB182:
    MOVEF_F 20.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB183:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F -80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB184:
    MOVEF_F 45.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB185:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB186:
    MOVEF_F 60.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB187:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB188:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB189:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB190:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB191:
    TIMER_READ timeMC2
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F VGV_W1 VGV_W
    JR_NEQF VGV_B 2.0 and195
    JR_EQF VGV_W 1.0 or194
  and195:
    JR_NEQF VGV_B 3.0 else193_1
    JR_NEQF VGV_W 4.0 else193_1
  or194:
    MOVEF_F 95.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB196:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB197:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB198:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB199:
    JR_NEQF VGV_B 2.0 else200_1
    MOVEF_F 310.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB201:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB202:
    MOVEF_F 600.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB203:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB204:
    JR endif200
  else200_1:
    MOVEF_F 190.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB205:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB206:
    MOVEF_F 250.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB207:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB208:
  else200_2:
  endif200:
    JR endif193
  else193_1:
    MOVEF_F 103.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB209:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB210:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB211:
    JR_EQF VGV_B 1.0 or213
    JR_NEQF VGV_W 2.0 else212_1
  or213:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB214:
    JR_NEQF VGV_W 2.0 else215_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB216:
  else215_1:
  endif215:
    JR_NEQF VGV_B 1.0 else217_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB218:
  else217_1:
  endif217:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB219:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB220:
    JR endif212
  else212_1:
    JR_EQF VGV_B 2.0 or221
    JR_NEQF VGV_W 1.0 else212_2
  or221:
    JR_NEQF VGV_B 2.0 else222_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB223:
  else222_1:
  endif222:
    JR_NEQF VGV_W 1.0 else224_1
    WRITE32 ENDSUB_F_W1_0:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB225:
  else224_1:
  endif224:
    MOVEF_F 103.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB226:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB227:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds229
	MOVEF_32 300.0 milliseconds229
	DATA32 timer229
	TIMER_WAIT milliseconds229 timer229
	TIMER_READY timer229
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB230:
  else212_2:
  endif212:
    JR_EQF VGV_W 3.0 or232
    JR_NEQF VGV_B 4.0 else231_1
  or232:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds234
	MOVEF_32 300.0 milliseconds234
	DATA32 timer234
	TIMER_WAIT milliseconds234 timer234
	TIMER_READY timer234
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB235:
    JR_NEQF VGV_W 3.0 else236_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB237:
  else236_1:
  endif236:
    JR_NEQF VGV_B 4.0 else238_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB239:
  else238_1:
  endif238:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB240:
    JR endif231
  else231_1:
    JR_EQF VGV_W 4.0 or241
    JR_NEQF VGV_B 3.0 else231_2
  or241:
    MOVEF_F 510.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB242:
    JR_NEQF VGV_W 4.0 else243_1
    WRITE32 ENDSUB_F_W1_0:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB244:
  else243_1:
  endif243:
    JR_NEQF VGV_B 3.0 else245_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB246:
  else245_1:
  endif245:
    MOVEF_F 103.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB247:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB248:
    JR endif231
  else231_2:
    MOVEF_F 400.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB249:
  else231_3:
  endif231:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB250:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB251:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB252:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB253:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB255:
  else193_2:
  endif193:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB257:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB258:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB259:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB260:
    CALL MOTOR.START 'D' 30.0
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB262:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB264:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 40.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB266:
    MOVEF_F 45.0 VLV_DEG_4
    MOVEF_F 70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB267 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB267:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB268:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 105.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB270:
    MOVEF_F 650.0 VLV_MM_2
    MOVEF_F -90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB271:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB272:
    MOVEF_F 13.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB273:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB274:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB275:
    MOVEF_F 105.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB276:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB277:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB278:
    TIMER_READ timeMC2
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F VGV_W2 VGV_W
    JR_NEQF VGV_B 2.0 and282
    JR_EQF VGV_W 1.0 or281
  and282:
    JR_NEQF VGV_B 3.0 else280_1
    JR_NEQF VGV_W 4.0 else280_1
  or281:
    MOVEF_F 65.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB283:
    MOVEF_F 91.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB284:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB285:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB286:
    JR_NEQF VGV_B 2.0 else287_1
    MOVEF_F 180.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB288:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB289:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB290:
    MOVEF_F 20.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB291:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F -90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB292:
    MOVEF_F 120.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB293:
    JR endif287
  else287_1:
    JR_NEQF VGV_B 3.0 else287_2
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB294:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB295:
    MOVEF_F 110.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB296:
  else287_2:
  endif287:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB297:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB298:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB299:
    JR endif280
  else280_1:
    MOVEF_F 62.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB301:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB302:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB303:
    JR_EQF VGV_W 2.0 or305
    JR_NEQF VGV_B 1.0 else304_1
  or305:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB306:
    JR_NEQF VGV_W 2.0 else307_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB308:
  else307_1:
  endif307:
    JR_NEQF VGV_B 1.0 else309_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB310:
  else309_1:
  endif309:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB311:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB312:
  else304_1:
  endif304:
    JR_EQF VGV_W 1.0 or314
    JR_NEQF VGV_B 2.0 else313_1
  or314:
    JR_NEQF VGV_W 1.0 else315_1
    MOVEF_F 10.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB316:
    WRITE32 ENDSUB_F_W1_0:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB317:
  else315_1:
  endif315:
    JR_NEQF VGV_B 2.0 else318_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB319:
  else318_1:
  endif318:
    MOVEF_F 62.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB320:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB321:
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB322:
  else313_1:
  endif313:
    JR_EQF VGV_W 3.0 or324
    JR_NEQF VGV_B 4.0 else323_1
  or324:
    MOVEF_F 280.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB325:
    JR_NEQF VGV_W 3.0 else326_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB327:
  else326_1:
  endif326:
    JR_NEQF VGV_B 4.0 else328_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB329:
  else328_1:
  endif328:
    MOVEF_F 170.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB330:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB331:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB332:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB333:
    JR endif323
  else323_1:
    JR_EQF VGV_W 4.0 or334
    JR_NEQF VGV_B 3.0 else323_2
  or334:
    MOVEF_F 490.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB335:
    JR_NEQF VGV_W 4.0 else336_1
    MOVEF_F 10.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB337:
    WRITE32 ENDSUB_F_W1_0:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB338:
  else336_1:
  endif336:
    JR_NEQF VGV_B 3.0 else339_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB340:
  else339_1:
  endif339:
    JR endif323
  else323_2:
    MOVEF_F 400.0 VLV_MM_2
    MOVEF_F -80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB341:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB342:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 70.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB343:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB344:
  else323_3:
  endif323:
  else280_2:
  endif280:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB346:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB347:
    CALL MOTOR.RESETCOUNT 'BC'
  while349:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 55.0 endwhile349
  whilebody349:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 55.0 whilebody349
  endwhile349:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB361:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB362:
    MOVEF_F -50.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB363:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB364:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB365:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB366:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB367:
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB368:
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB370:
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB371:
    CALL MOTOR.START 'AD' -50.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB373:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB375:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB376:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB377:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB378:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB379:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 37.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB381:
    MOVEF_F 89.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB382:
    MOVEF_F -50.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB383:
    MOVEF_F 90.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB384:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf388
    DATA8 flag388
    DIVF VGV_TIME 1000.0 tmpf388
    CP_EQF 0.0 1000.0 flag388
    SELECTF flag388 0.0 tmpf388 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf391
    DATA8 flag391
    DIVF VGV_ZONE1 1000.0 tmpf391
    CP_EQF 0.0 1000.0 flag391
    SELECTF flag391 0.0 tmpf391 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf394
    DATA8 flag394
    DIVF VGV_ZONE2 1000.0 tmpf394
    CP_EQF 0.0 1000.0 flag394
    SELECTF flag394 0.0 tmpf394 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB397:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf402
    DATA8 flag402
    DIVF F.0 F.1 tmpf402
    CP_EQF 0.0 F.1 flag402
    SELECTF flag402 0.0 tmpf402 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf407
    DATA8 flag407
    DIVF F.0 F.1 tmpf407
    CP_EQF 0.0 F.1 flag407
    SELECTF flag407 0.0 tmpf407 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE_FOL_0:
    WRITE32 ENDSUB_F_SEN1_0:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN1_0
CALLSUB408:
    WRITE32 ENDSUB_F_SEN2_0:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN2_0
CALLSUB409:
    SUBF VGV_S1 VGV_S2 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE_FOL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_FOL_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds434
	MOVEF_32 500.0 milliseconds434
	DATA32 timer434
	TIMER_WAIT milliseconds434 timer434
	TIMER_READY timer434
  while435:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf439
    DATA8 flag439
    DIVF F.1 2.0 tmpf439
    CP_EQF 0.0 2.0 flag439
    SELECTF flag439 0.0 tmpf439 F.0

    JR_LTEQF F.0 35.0 endwhile435
  whilebody435:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf443
    DATA8 flag443
    DIVF F.1 2.0 tmpf443
    CP_EQF 0.0 2.0 flag443
    SELECTF flag443 0.0 tmpf443 F.0

    JR_GTF F.0 35.0 whilebody435
  endwhile435:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 22.0 0.0 'true' 

	DATA8 layer445
	DATA8 nos445
	DATA8 busy445
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer445 nos445
	JR_EQ8 0 nos445 motornotbusy445
  motorwaiting445:
	OUTPUT_TEST layer445 nos445 busy445
	JR_EQ8 busy445 0 motornotbusy445
	SLEEP
	JR motorwaiting445
  motornotbusy445:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else458_1
    JR_LTEQF VGV_R VGV_B else458_1
    MOVEF_F VGV_R VGV_MAX
    JR endif458
  else458_1:
    JR_LTEQF VGV_G VGV_R else458_2
    JR_LTEQF VGV_G VGV_B else458_2
    MOVEF_F VGV_G VGV_MAX
    JR endif458
  else458_2:
    JR_LTEQF VGV_B VGV_R else458_3
    JR_LTEQF VGV_B VGV_G else458_3
    MOVEF_F VGV_B VGV_MAX
  else458_3:
  endif458:
    JR_GTEQF VGV_R VGV_G else459_1
    JR_GTEQF VGV_R VGV_B else459_1
    MOVEF_F VGV_R VGV_MIN
    JR endif459
  else459_1:
    JR_GTEQF VGV_G VGV_R else459_2
    JR_GTEQF VGV_G VGV_B else459_2
    MOVEF_F VGV_G VGV_MIN
    JR endif459
  else459_2:
    JR_GTEQF VGV_B VGV_R else459_3
    JR_GTEQF VGV_B VGV_G else459_3
    MOVEF_F VGV_B VGV_MIN
  else459_3:
  endif459:
    JR_NEQF VGV_MAX VGV_MIN else460_1
    MOVEF_F 0.0 VGV_H
    JR endif460
  else460_1:
    JR_NEQF VGV_R VGV_MAX else461_1
    JR_LTF VGV_G VGV_B else462_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf466
    DATA8 flag466
    DIVF F.0 F.1 tmpf466
    CP_EQF 0.0 F.1 flag466
    SELECTF flag466 0.0 tmpf466 VGV_H

    JR endif462
  else462_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf470
    DATA8 flag470
    DIVF F.1 F.2 tmpf470
    CP_EQF 0.0 F.2 flag470
    SELECTF flag470 0.0 tmpf470 F.0

    ADDF F.0 360.0 VGV_H
  else462_2:
  endif462:
    JR endif461
  else461_1:
    JR_NEQF VGV_MAX VGV_G else472_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf476
    DATA8 flag476
    DIVF F.1 F.2 tmpf476
    CP_EQF 0.0 F.2 flag476
    SELECTF flag476 0.0 tmpf476 F.0

    ADDF F.0 120.0 VGV_H
    JR endif472
  else472_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf481
    DATA8 flag481
    DIVF F.1 F.2 tmpf481
    CP_EQF 0.0 F.2 flag481
    SELECTF flag481 0.0 tmpf481 F.0

    ADDF F.0 240.0 VGV_H
  else472_2:
  endif472:
  else461_2:
  endif461:
  else460_2:
  endif460:
    JR_NEQF VGV_MAX 0.0 else483_1
    MOVEF_F 0.0 VGV_S
    JR endif483
  else483_1:
    DATAF tmpf484
    DATA8 flag484
    DIVF VGV_MIN VGV_MAX tmpf484
    CP_EQF 0.0 VGV_MAX flag484
    SELECTF flag484 0.0 tmpf484 VGV_S

  else483_2:
  endif483:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1B2_0:
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB486:
    MOVEF_F 15.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB487:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else489_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB491:
  else489_1:
  endif489:
    MOVEF_F 65.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB492:
    MOVEF_F 180.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB493:
    JR_NEQF VGV_B 2.0 else494_1
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else494_1
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB496:
    JR endif494
  else494_1:
    MOVEF_F 55.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB497:
  else494_2:
  endif494:
    MOVEF_F 86.0 VLV_DEG_4
    MOVEF_F -50.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB498:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB499:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else501_1
    DATA32 milliseconds503
	MOVEF_32 500.0 milliseconds503
	DATA32 timer503
	TIMER_WAIT milliseconds503 timer503
	TIMER_READY timer503
  else501_1:
  endif501:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 10.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB504:
    MOVEF_F 16.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB505:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else506_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB508:
  else506_1:
  endif506:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB509:
    MOVEF_F 97.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB510:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB511:
RETSUB_F_W1B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1B2_0:
SUB_F_W1_0:
    MOVEF_F 50.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB512:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else513_1
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB515:
    JR endif513
  else513_1:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB516:
  else513_2:
  endif513:
    MOVEF_F 255.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB517:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB518:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -50.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB519:
    JR_NEQF VGV_W 1.0 else520_1
    MOVEF_F 35.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB521:
    JR endif520
  else520_1:
    MOVEF_F 5.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB522:
  else520_2:
  endif520:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB524:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB525:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else527_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB529:
  else527_1:
  endif527:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB530:
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 25.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB531:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB532:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB533:
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB534:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else535_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB537:
  else535_1:
  endif535:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB538:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB539:
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB541:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB542:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else544_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB546:
  else544_1:
  endif544:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB548:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB549:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else551_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB553:
  else551_1:
  endif551:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    MOVEF_F 50.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB554:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB555:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB556:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB557:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB558:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB560:
    MOVEF_F 15.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB561:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else563_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB565:
  else563_1:
  endif563:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB566:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB567:
    MOVEF_F 105.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB568:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else569_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB571:
  else569_1:
  endif569:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB572:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB573:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf576
    DATA8 flag576
    DIVF VLV_MM_2 F.1 tmpf576
    CP_EQF 0.0 F.1 flag576
    SELECTF flag576 0.0 tmpf576 F.0

    MULF F.0 360.0 VLV_L_2
    JR_GTEQF VLV_V_2 0.0 else578_1
    MOVEF_F -10.0 VLV_SP_2
    JR endif578
  else578_1:
    MOVEF_F 10.0 VLV_SP_2
  else578_2:
  endif578:
    MOVEF_F 0.0 VLV_DEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while580:
    JR_GTEQF VLV_DEG_2 VLV_L_2 endwhile580
  whilebody580:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf585
    DATA8 flag585
    DIVF F.0 2.0 tmpf585
    CP_EQF 0.0 2.0 flag585
    SELECTF flag585 0.0 tmpf585 VLV_DEG_2

    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else586_1
    MATH ABS VLV_SP_2 F.0
    JR_LTEQF F.0 20.0 else586_1
    JR_LTEQF VLV_V_2 0.0 else589_1
    SUBF VLV_SP_2 0.3 VLV_SP_2
    JR endif589
  else589_1:
    ADDF VLV_SP_2 0.3 VLV_SP_2
  else589_2:
  endif589:
    JR endif586
  else586_1:
    MATH ABS VLV_SP_2 F.0
    MATH ABS VLV_V_2 F.1
    JR_GTEQF F.0 F.1 else586_2
    JR_LTEQF VLV_V_2 0.0 else594_1
    ADDF VLV_SP_2 0.3 VLV_SP_2
    JR endif594
  else594_1:
    SUBF VLV_SP_2 0.3 VLV_SP_2
  else594_2:
  endif594:
  else586_2:
  endif586:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_2
    MULF VLV_U_2 2.0 F.1
    ADDF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_2 2.0 F.1
    SUBF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_2 VLV_L_2 whilebody580
  endwhile580:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf607
    DATA8 flag607
    DIVF F.0 360.0 tmpf607
    CP_EQF 0.0 360.0 flag607
    SELECTF flag607 0.0 tmpf607 VLV_L_3

    DATAF tmpf608
    DATA8 flag608
    DIVF VLV_L_3 210.38 tmpf608
    CP_EQF 0.0 210.38 flag608
    SELECTF flag608 0.0 tmpf608 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while611:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile611
  whilebody611:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'B' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or616
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else615_1
  or616:
    JR_GTEQF VLV_SP_3 0.0 else619_1
    MOVEF_F -30.0 VLV_V_3
    JR endif619
  else619_1:
    MOVEF_F 30.0 VLV_V_3
  else619_2:
  endif619:
    JR endif615
  else615_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else615_2:
  endif615:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody611
  endwhile611:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_4 F.0
    DATAF tmpf623
    DATA8 flag623
    DIVF F.0 360.0 tmpf623
    CP_EQF 0.0 360.0 flag623
    SELECTF flag623 0.0 tmpf623 VLV_L_4

    DATAF tmpf624
    DATA8 flag624
    DIVF VLV_L_4 210.38 tmpf624
    CP_EQF 0.0 210.38 flag624
    SELECTF flag624 0.0 tmpf624 F.0

    MULF F.0 360.0 VLV_L_4
    MOVEF_F 30.0 VLV_V_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_4
  while627:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile627
  whilebody627:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_4
    CALL MOTOR.STARTPOWER 'C' VLV_V_4
    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or632
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else631_1
  or632:
    JR_GTEQF VLV_SP_4 0.0 else635_1
    MOVEF_F -30.0 VLV_V_4
    JR endif635
  else635_1:
    MOVEF_F 30.0 VLV_V_4
  else635_2:
  endif635:
    JR endif631
  else631_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else631_2:
  endif631:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody627
  endwhile627:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf642
    DATA8 flag642
    DIVF F.0 360.0 tmpf642
    CP_EQF 0.0 360.0 flag642
    SELECTF flag642 0.0 tmpf642 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf645
    DATA8 flag645
    DIVF VLV_L_5 F.2 tmpf645
    CP_EQF 0.0 F.2 flag645
    SELECTF flag645 0.0 tmpf645 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf647
    DATA8 flag647
    DIVF F.0 2.0 tmpf647
    CP_EQF 0.0 2.0 flag647
    SELECTF flag647 0.0 tmpf647 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while649:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile649
  whilebody649:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf655
    DATA8 flag655
    DIVF F.0 2.0 tmpf655
    CP_EQF 0.0 2.0 flag655
    SELECTF flag655 0.0 tmpf655 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or657
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else656_1
  or657:
    MOVEF_F 30.0 VLV_V_5
    JR endif656
  else656_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else656_2:
  endif656:
    CALL MOTOR.STARTPOWER 'B' VLV_V_5
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody649
  endwhile649:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_6 F.0
    DATAF tmpf668
    DATA8 flag668
    DIVF F.0 360.0 tmpf668
    CP_EQF 0.0 360.0 flag668
    SELECTF flag668 0.0 tmpf668 VLV_L_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf671
    DATA8 flag671
    DIVF VLV_L_6 F.2 tmpf671
    CP_EQF 0.0 F.2 flag671
    SELECTF flag671 0.0 tmpf671 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf673
    DATA8 flag673
    DIVF F.0 2.0 tmpf673
    CP_EQF 0.0 2.0 flag673
    SELECTF flag673 0.0 tmpf673 VLV_L_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_6
    MOVEF_F 0.0 VLV_DEG_6
  while675:
    JR_GTF VLV_DEG_6 VLV_L_6 endwhile675
  whilebody675:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf681
    DATA8 flag681
    DIVF F.0 2.0 tmpf681
    CP_EQF 0.0 2.0 flag681
    SELECTF flag681 0.0 tmpf681 VLV_DEG_6

    MULF VLV_L_6 0.2 F.0
    JR_LTF VLV_DEG_6 F.0 or683
    MULF VLV_L_6 0.8 F.0
    JR_LTEQF VLV_DEG_6 F.0 else682_1
  or683:
    MOVEF_F 30.0 VLV_V_6
    JR endif682
  else682_1:
    MOVEF_F VLV_SP_6 VLV_V_6
  else682_2:
  endif682:
    SUBF 0.0 VLV_V_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_6
    JR_LTEQF VLV_DEG_6 VLV_L_6 whilebody675
  endwhile675:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while692:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or693
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile692
  or693:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile692
  whilebody692:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or713
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and712
  or713:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody692
  and712:
  endwhile692:
    CALL MOTOR.RESETCOUNT 'BC'
  while724:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or725
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile724
  or725:
  whilebody724:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody724
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody724
  endwhile724:
    JR_GTEQF VLV_SP_10 0.0 else751_1
    MOVEF_F -70.0 VLV_SP_10
    JR endif751
  else751_1:
    MOVEF_F 70.0 VLV_SP_10
  else751_2:
  endif751:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_10
    DATA32 milliseconds753
	MOVEF_32 300.0 milliseconds753
	DATA32 timer753
	TIMER_WAIT milliseconds753 timer753
	TIMER_READY timer753
    DATA32 tmp754
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp754
    JR_NEQ32 0 tmp754 alreadylaunched754
    OBJECT_START TF_BEEP_0
  alreadylaunched754:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_WHITE_11
    DATA8 layer757
	DATA8 no757
	DATA8 mode8757
	
	MOVEF_8 2.0 no757
	SUB8 no757 1 no757
	DIV8 no757 4 layer757
	MATH MOD8 no757 4 no757

	MOVEF_8 2.0 mode8757
	
	INPUT_DEVICE READY_RAW layer757 no757 0 mode8757 0
    DATA8 layer758
	DATA8 no758
	DATA8 mode8758
	
	MOVEF_8 3.0 no758
	SUB8 no758 1 no758
	DIV8 no758 4 layer758
	MATH MOD8 no758 4 no758

	MOVEF_8 2.0 mode8758
	
	INPUT_DEVICE READY_RAW layer758 no758 0 mode8758 0
  while759:
    JR_EQF VLV_WHITE_11 1.0 endwhile759
  whilebody759:
  while760:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or761
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile760
  or761:
  whilebody760:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody760
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody760
  endwhile760:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_11
  while776:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_11 endwhile776
  whilebody776:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_11 whilebody776
  endwhile776:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else790_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else790_1
    MOVEF_F 1.0 VLV_WHITE_11
  else790_1:
  endif790:
    JR_NEQF VLV_WHITE_11 1.0 whilebody759
  endwhile759:
    DATA8 layer793
	DATA8 no793
	DATA8 mode8793
	
	MOVEF_8 2.0 no793
	SUB8 no793 1 no793
	DIV8 no793 4 layer793
	MATH MOD8 no793 4 no793

	MOVEF_8 0.0 mode8793
	
	INPUT_DEVICE READY_RAW layer793 no793 0 mode8793 0
    DATA8 layer794
	DATA8 no794
	DATA8 mode8794
	
	MOVEF_8 3.0 no794
	SUB8 no794 1 no794
	DIV8 no794 4 layer794
	MATH MOD8 no794 4 no794

	MOVEF_8 0.0 mode8794
	
	INPUT_DEVICE READY_RAW layer794 no794 0 mode8794 0
  while795:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile795
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile795
  whilebody795:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and807
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody795
  and807:
  endwhile795:
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds813
	MOVEF_32 500.0 milliseconds813
	DATA32 timer813
	TIMER_WAIT milliseconds813 timer813
	TIMER_READY timer813
  while814:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf818
    DATA8 flag818
    DIVF F.1 2.0 tmpf818
    CP_EQF 0.0 2.0 flag818
    SELECTF flag818 0.0 tmpf818 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile814
  whilebody814:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf824
    DATA8 flag824
    DIVF F.1 2.0 tmpf824
    CP_EQF 0.0 2.0 flag824
    SELECTF flag824 0.0 tmpf824 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody814
  endwhile814:
    CALL MOTOR.STOP VLV_MOTOR_12 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_13 VLV_SP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds829
	MOVEF_32 500.0 milliseconds829
	DATA32 timer829
	TIMER_WAIT milliseconds829 timer829
	TIMER_READY timer829
  while830:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf834
    DATA8 flag834
    DIVF F.1 2.0 tmpf834
    CP_EQF 0.0 2.0 flag834
    SELECTF flag834 0.0 tmpf834 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile830
  whilebody830:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf839
    DATA8 flag839
    DIVF F.1 2.0 tmpf839
    CP_EQF 0.0 2.0 flag839
    SELECTF flag839 0.0 tmpf839 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody830
  endwhile830:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VLV_MOTOR_13 -20.0 0.0 22.0 0.0 'true' 

	DATA8 layer842
	DATA8 nos842
	DATA8 busy842
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_13 layer842 nos842
	JR_EQ8 0 nos842 motornotbusy842
  motorwaiting842:
	OUTPUT_TEST layer842 nos842 busy842
	JR_EQ8 busy842 0 motornotbusy842
	SLEEP
	JR motorwaiting842
  motornotbusy842:
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
