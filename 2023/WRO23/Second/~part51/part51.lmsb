DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAF VLV_MM_1
DATAF VLV_V_1
DATAF VLV_DEG_2
DATAF VLV_SP_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAS VLV_MOTOR_11 252
DATAF VLV_SP_11
DATAF VLV_SP_9
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_SP_10
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
DATAF VGV_Z1
DATAF VGV_Z2
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_SUM
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_1
DATAF VLV_SP_1
DATAF VLV_DEG_1
DATAF VLV_U_1
DATAF VLV_L_2
DATAF VLV_V_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_U_9
DATAF VLV_WHITE_10
DATAF VLV_U_10
DATAF VLV_L_10
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_1
    MOVEF_F 0.0 VLV_SP_1
    MOVEF_F 0.0 VLV_DEG_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_U_9
    MOVEF_F 0.0 VLV_WHITE_10
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_L_10
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch880
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch880:
    JR_NEQ32 SUBPROGRAM 1 dispatch881
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch881:
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp9
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp9
    JR_NEQ32 0 tmp9 alreadylaunched9
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched9:
    MOVEF_F 15.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB10:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB11:
    CALL MOTOR.RESETCOUNT 'BC'
  while13:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile13
  whilebody13:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody13
  endwhile13:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while26:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf30
    DATA8 flag30
    DIVF F.1 2.0 tmpf30
    CP_EQF 0.0 2.0 flag30
    SELECTF flag30 0.0 tmpf30 F.0

    JR_GTEQF F.0 VGV_L endwhile26
  whilebody26:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB31:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf35
    DATA8 flag35
    DIVF F.1 2.0 tmpf35
    CP_EQF 0.0 2.0 flag35
    SELECTF flag35 0.0 tmpf35 F.0

    JR_LTF F.0 VGV_L whilebody26
  endwhile26:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  or38:
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB52:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while54:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_GTEQF F.0 VGV_L endwhile54
  whilebody54:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB59:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    JR_LTF F.0 VGV_L whilebody54
  endwhile54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while65:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTEQF F.0 VGV_L endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB70:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 2.0 tmpf74
    CP_EQF 0.0 2.0 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    JR_LTF F.0 VGV_L whilebody65
  endwhile65:
    MOVEF_F 3.0 VGV_Z1
    MOVEF_F 1.0 VGV_Z2
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for76:
    JR_GTF VGV_I 3.0 endfor76
  forbody76:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB77:
    JR_LTF VGV_NUM 2.0 else78_1
    JR_GTF VGV_NUM 3.0 else78_1
    ADDF VGV_I 1.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif78
  else78_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else78_2:
  endif78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while84:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    JR_GTEQF F.0 VGV_L endwhile84
  whilebody84:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB89:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf93
    DATA8 flag93
    DIVF F.1 2.0 tmpf93
    CP_EQF 0.0 2.0 flag93
    SELECTF flag93 0.0 tmpf93 F.0

    JR_LTF F.0 VGV_L whilebody84
  endwhile84:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody76
  endfor76:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for97:
    JR_GTF VGV_I 3.0 endfor97
  forbody97:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else101_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif101
  else101_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else101_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else101_2:
  endif101:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody97
  endfor97:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while104:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_GTEQF F.0 VGV_L endwhile104
  whilebody104:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB109 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB109:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 2.0 tmpf113
    CP_EQF 0.0 2.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    JR_LTF F.0 VGV_L whilebody104
  endwhile104:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for114:
    JR_GTF VGV_I 3.0 endfor114
  forbody114:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB115:
    JR_LTEQF VGV_B 30.0 else116_1
    JR_GTEQF VGV_B 50.0 else116_1
    ADDF VGV_I 1.0 VGV_Z1
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif116
  else116_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else116_2:
  endif116:
    JR_GTEQF VGV_I 2.0 else121_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while123:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    JR_GTEQF F.0 VGV_L endwhile123
  whilebody123:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB128:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 2.0 tmpf132
    CP_EQF 0.0 2.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    JR_LTF F.0 VGV_L whilebody123
  endwhile123:
    JR endif121
  else121_1:
    JR_NEQF VGV_I 2.0 else121_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while134:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf138
    DATA8 flag138
    DIVF F.1 2.0 tmpf138
    CP_EQF 0.0 2.0 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    JR_GTEQF F.0 VGV_L endwhile134
  whilebody134:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB139:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    JR_LTF F.0 VGV_L whilebody134
  endwhile134:
  else121_2:
  endif121:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody114
  endfor114:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB145:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for148:
    JR_GTF VGV_I 3.0 endfor148
  forbody148:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else152_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif152
  else152_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else152_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else152_2:
  endif152:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody148
  endfor148:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B1 VGV_W1 VGV_Z1
    ADDF VGV_B2 VGV_W2 VGV_Z2
    SUBF 20.0 VGV_B1 F.2
    SUBF F.2 VGV_B2 F.1
    SUBF F.1 VGV_W1 F.0
    SUBF F.0 VGV_W2 VGV_SUM
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_2
    MOVEF_F 40.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB173 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB173:
    MOVEF_F 35.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB174:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while176:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf180
    DATA8 flag180
    DIVF F.1 2.0 tmpf180
    CP_EQF 0.0 2.0 flag180
    SELECTF flag180 0.0 tmpf180 F.0

    JR_GTEQF F.0 VGV_L endwhile176
  whilebody176:
    MOVEF_F 1.8 VGV_K
    MOVEF_F 23.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf193
    DATA8 flag193
    DIVF F.1 2.0 tmpf193
    CP_EQF 0.0 2.0 flag193
    SELECTF flag193 0.0 tmpf193 F.0

    JR_LTF F.0 VGV_L whilebody176
  endwhile176:
    MOVEF_F 130.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB194:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB196:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB197:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB198:
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB199:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB200:
    MOVEF_F 780.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB201:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB202:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB203:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB204:
    MOVEF_F 90.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB205:
    MOVEF_F 90.5 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB206:
    MOVEF_F 970.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB207:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 910.0 'true'

	DATA8 layer208
	DATA8 nos208
	DATA8 busy208
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer208 nos208
	JR_EQ8 0 nos208 motornotbusy208
  motorwaiting208:
	OUTPUT_TEST layer208 nos208 busy208
	JR_EQ8 busy208 0 motornotbusy208
	SLEEP
	JR motorwaiting208
  motornotbusy208:
    MOVEF_F 630.0 VLV_MM_1
    MOVEF_F 70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB209:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB210:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB211:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 910.0 'true'

	DATA8 layer212
	DATA8 nos212
	DATA8 busy212
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer212 nos212
	JR_EQ8 0 nos212 motornotbusy212
  motorwaiting212:
	OUTPUT_TEST layer212 nos212 busy212
	JR_EQ8 busy212 0 motornotbusy212
	SLEEP
	JR motorwaiting212
  motornotbusy212:
    MOVEF_F 320.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB213:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB214:
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB215:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB216:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 105.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB218:
    MOVEF_F 85.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB219:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB220:
    JR_EQF VGV_B 1.0 or222
    JR_NEQF VGV_W 2.0 else221_1
  or222:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB223:
    JR_NEQF VGV_W 2.0 else224_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB225:
  else224_1:
  endif224:
    JR_NEQF VGV_B 1.0 else226_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB227:
  else226_1:
  endif226:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB228:
    JR endif221
  else221_1:
    JR_EQF VGV_B 2.0 or229
    JR_NEQF VGV_W 1.0 else221_2
  or229:
    JR_NEQF VGV_B 2.0 else230_1
    JR_NEQF VGV_W 1.0 else230_1
    MOVEF_F 1.0 VGV_W1B2
  else230_1:
  endif230:
    JR_NEQF VGV_W 1.0 else231_1
    MOVEF_F 365.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB232:
    WRITE32 ENDSUB_F_W1_0:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB233:
  else231_1:
  endif231:
    JR_NEQF VGV_B 2.0 else234_1
    JR_EQF VGV_W 1.0 else234_1
    MOVEF_F 185.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB235:
    WRITE32 ENDSUB_F_B2_0:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB236:
  else234_1:
  endif234:
    JR_NEQF VGV_B 2.0 or238
    JR_EQF VGV_W 1.0 else237_1
  or238:
    MOVEF_F 105.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB239:
    MOVEF_F 85.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB240:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB241:
    JR endif237
  else237_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB242:
  else237_2:
  endif237:
  else221_2:
  endif221:
    JR_EQF VGV_B 4.0 or244
    JR_NEQF VGV_W 3.0 else243_1
  or244:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB245:
    JR_NEQF VGV_W 3.0 else246_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB247:
  else246_1:
  endif246:
    JR_NEQF VGV_B 4.0 else248_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB249:
  else248_1:
  endif248:
    JR endif243
  else243_1:
    JR_EQF VGV_B 3.0 or250
    JR_NEQF VGV_W 4.0 else243_2
  or250:
    JR_NEQF VGV_B 3.0 else251_1
    JR_NEQF VGV_W 4.0 else251_1
    MOVEF_F 1.0 VGV_W1B2
  else251_1:
  endif251:
    JR_NEQF VGV_W 4.0 else252_1
    MOVEF_F 118.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB253:
    WRITE32 ENDSUB_F_W1_0:CALLSUB254 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB254:
  else252_1:
  endif252:
    JR_NEQF VGV_B 3.0 else255_1
    JR_EQF VGV_W 4.0 else255_1
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB256:
    WRITE32 ENDSUB_F_B2_0:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB257:
  else255_1:
  endif255:
    JR endif243
  else243_2:
    JR_NEQF VGV_B 2.0 or258
    JR_EQF VGV_W 1.0 else243_3
  or258:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB259:
  else243_3:
  endif243:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else261_1
    JR_EQF VGV_W 4.0 else261_1
    JR_NEQF VGV_B 2.0 or262
    JR_EQF VGV_W 1.0 else261_1
  or262:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB263:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB264:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB265:
    MOVEF_F 93.0 VLV_DEG_2
    MOVEF_F -70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB266:
  else261_1:
  endif261:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB268:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB269:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB270:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB271:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while274:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile274
  whilebody274:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody274
  endwhile274:
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB286:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds288
	MOVEF_32 800.0 milliseconds288
	DATA32 timer288
	TIMER_WAIT milliseconds288 timer288
	TIMER_READY timer288
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds290
	MOVEF_32 800.0 milliseconds290
	DATA32 timer290
	TIMER_WAIT milliseconds290 timer290
	TIMER_READY timer290
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 1.0 0.0 'true' 

	DATA8 layer291
	DATA8 nos291
	DATA8 busy291
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer291 nos291
	JR_EQ8 0 nos291 motornotbusy291
  motorwaiting291:
	OUTPUT_TEST layer291 nos291 busy291
	JR_EQ8 busy291 0 motornotbusy291
	SLEEP
	JR motorwaiting291
  motornotbusy291:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB292:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    DATA32 milliseconds295
	MOVEF_32 300.0 milliseconds295
	DATA32 timer295
	TIMER_WAIT milliseconds295 timer295
	TIMER_READY timer295
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB296:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_2
    MOVEF_F 70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB298:
    MOVEF_F 72.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB299:
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB302:
    MOVEF_F 570.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB303:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB304:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds306
	MOVEF_32 700.0 milliseconds306
	DATA32 timer306
	TIMER_WAIT milliseconds306 timer306
	TIMER_READY timer306
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB307:
    MOVEF_F 11.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB308:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB310:
    MOVEF_F 130.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB311:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB312:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB313:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB314:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB316:
    MOVEF_F 86.7 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB317:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB318:
    JR_EQF VGV_B 1.0 or320
    JR_NEQF VGV_W 2.0 else319_1
  or320:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB321:
    JR_NEQF VGV_W 2.0 else322_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB323:
  else322_1:
  endif322:
    JR_NEQF VGV_B 1.0 else324_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB325:
  else324_1:
  endif324:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB326:
    JR endif319
  else319_1:
    JR_EQF VGV_B 2.0 or327
    JR_NEQF VGV_W 1.0 else319_2
  or327:
    JR_NEQF VGV_B 2.0 else328_1
    JR_NEQF VGV_W 1.0 else328_1
    MOVEF_F 1.0 VGV_W1B2
  else328_1:
  endif328:
    JR_NEQF VGV_W 1.0 else329_1
    MOVEF_F 455.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB330:
    WRITE32 ENDSUB_F_W1_0:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB331:
  else329_1:
  endif329:
    JR_NEQF VGV_B 2.0 else332_1
    JR_EQF VGV_W 1.0 else332_1
    MOVEF_F 280.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB333:
    WRITE32 ENDSUB_F_B2_0:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB334:
  else332_1:
  endif332:
    JR_NEQF VGV_B 2.0 or336
    JR_EQF VGV_W 1.0 else335_1
  or336:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB337:
    MOVEF_F 86.7 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB338:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB339:
    JR endif335
  else335_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB340:
  else335_2:
  endif335:
  else319_2:
  endif319:
    JR_EQF VGV_B 4.0 or342
    JR_NEQF VGV_W 3.0 else341_1
  or342:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB343:
    JR_NEQF VGV_W 3.0 else344_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB345:
  else344_1:
  endif344:
    JR_NEQF VGV_B 4.0 else346_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB347:
  else346_1:
  endif346:
    JR endif341
  else341_1:
    JR_EQF VGV_B 3.0 or348
    JR_NEQF VGV_W 4.0 else341_2
  or348:
    JR_NEQF VGV_B 3.0 else349_1
    JR_NEQF VGV_W 4.0 else349_1
    MOVEF_F 1.0 VGV_W1B2
  else349_1:
  endif349:
    JR_NEQF VGV_W 4.0 else350_1
    MOVEF_F 47.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB351:
    WRITE32 ENDSUB_F_W1_0:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB352:
  else350_1:
  endif350:
    JR_NEQF VGV_B 3.0 else353_1
    JR_EQF VGV_W 4.0 else353_1
    MOVEF_F 227.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB354:
    WRITE32 ENDSUB_F_B2_0:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB355:
  else353_1:
  endif353:
    JR endif341
  else341_2:
    JR_NEQF VGV_B 2.0 or356
    JR_EQF VGV_W 1.0 else341_3
  or356:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB357:
  else341_3:
  endif341:
    JR_EQF VGV_B 3.0 else358_1
    JR_EQF VGV_W 4.0 else358_1
    JR_NEQF VGV_B 2.0 or359
    JR_EQF VGV_W 1.0 else358_1
  or359:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB360:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB361:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB362:
    JR endif358
  else358_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB363:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB364:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB365:
  else358_2:
  endif358:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB366:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB368:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB369:
    CALL MOTOR.RESETCOUNT 'BC'
  while371:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 58.0 endwhile371
  whilebody371:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 58.0 whilebody371
  endwhile371:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB383:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB384:
    MOVEF_F -50.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB385:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB386:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB387:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB388:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB390:
    MOVEF_F -35.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB391:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB392:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds395
	MOVEF_32 800.0 milliseconds395
	DATA32 timer395
	TIMER_WAIT milliseconds395 timer395
	TIMER_READY timer395
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB396:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB398:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB400:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB401:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB402:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB403:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB404:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 42.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB406:
    MOVEF_F 92.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB407:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB408:
    MOVEF_F -20.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB409:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB410:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf414
    DATA8 flag414
    DIVF VGV_TIME 1000.0 tmpf414
    CP_EQF 0.0 1000.0 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf417
    DATA8 flag417
    DIVF VGV_ZONE1 1000.0 tmpf417
    CP_EQF 0.0 1000.0 flag417
    SELECTF flag417 0.0 tmpf417 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf420
    DATA8 flag420
    DIVF VGV_ZONE2 1000.0 tmpf420
    CP_EQF 0.0 1000.0 flag420
    SELECTF flag420 0.0 tmpf420 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf424
    DATA8 flag424
    DIVF VGV_TIME 1000.0 tmpf424
    CP_EQF 0.0 1000.0 flag424
    SELECTF flag424 0.0 tmpf424 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB428:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf433
    DATA8 flag433
    DIVF F.0 F.1 tmpf433
    CP_EQF 0.0 F.1 flag433
    SELECTF flag433 0.0 tmpf433 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf438
    DATA8 flag438
    DIVF F.0 F.1 tmpf438
    CP_EQF 0.0 F.1 flag438
    SELECTF flag438 0.0 tmpf438 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds456
	MOVEF_32 500.0 milliseconds456
	DATA32 timer456
	TIMER_WAIT milliseconds456 timer456
	TIMER_READY timer456
  while457:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf461
    DATA8 flag461
    DIVF F.1 2.0 tmpf461
    CP_EQF 0.0 2.0 flag461
    SELECTF flag461 0.0 tmpf461 F.0

    JR_LTEQF F.0 35.0 endwhile457
  whilebody457:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf465
    DATA8 flag465
    DIVF F.1 2.0 tmpf465
    CP_EQF 0.0 2.0 flag465
    SELECTF flag465 0.0 tmpf465 F.0

    JR_GTF F.0 35.0 whilebody457
  endwhile457:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 26.0 0.0 'true' 

	DATA8 layer467
	DATA8 nos467
	DATA8 busy467
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer467 nos467
	JR_EQ8 0 nos467 motornotbusy467
  motorwaiting467:
	OUTPUT_TEST layer467 nos467 busy467
	JR_EQ8 busy467 0 motornotbusy467
	SLEEP
	JR motorwaiting467
  motornotbusy467:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else480_1
    JR_LTEQF VGV_R VGV_B else480_1
    MOVEF_F VGV_R VGV_MAX
    JR endif480
  else480_1:
    JR_LTEQF VGV_G VGV_R else480_2
    JR_LTEQF VGV_G VGV_B else480_2
    MOVEF_F VGV_G VGV_MAX
    JR endif480
  else480_2:
    JR_LTEQF VGV_B VGV_R else480_3
    JR_LTEQF VGV_B VGV_G else480_3
    MOVEF_F VGV_B VGV_MAX
  else480_3:
  endif480:
    JR_GTEQF VGV_R VGV_G else481_1
    JR_GTEQF VGV_R VGV_B else481_1
    MOVEF_F VGV_R VGV_MIN
    JR endif481
  else481_1:
    JR_GTEQF VGV_G VGV_R else481_2
    JR_GTEQF VGV_G VGV_B else481_2
    MOVEF_F VGV_G VGV_MIN
    JR endif481
  else481_2:
    JR_GTEQF VGV_B VGV_R else481_3
    JR_GTEQF VGV_B VGV_G else481_3
    MOVEF_F VGV_B VGV_MIN
  else481_3:
  endif481:
    JR_NEQF VGV_MAX VGV_MIN else482_1
    MOVEF_F 0.0 VGV_H
    JR endif482
  else482_1:
    JR_NEQF VGV_R VGV_MAX else483_1
    JR_LTF VGV_G VGV_B else484_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf488
    DATA8 flag488
    DIVF F.0 F.1 tmpf488
    CP_EQF 0.0 F.1 flag488
    SELECTF flag488 0.0 tmpf488 VGV_H

    JR endif484
  else484_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf492
    DATA8 flag492
    DIVF F.1 F.2 tmpf492
    CP_EQF 0.0 F.2 flag492
    SELECTF flag492 0.0 tmpf492 F.0

    ADDF F.0 360.0 VGV_H
  else484_2:
  endif484:
    JR endif483
  else483_1:
    JR_NEQF VGV_MAX VGV_G else494_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf498
    DATA8 flag498
    DIVF F.1 F.2 tmpf498
    CP_EQF 0.0 F.2 flag498
    SELECTF flag498 0.0 tmpf498 F.0

    ADDF F.0 120.0 VGV_H
    JR endif494
  else494_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf503
    DATA8 flag503
    DIVF F.1 F.2 tmpf503
    CP_EQF 0.0 F.2 flag503
    SELECTF flag503 0.0 tmpf503 F.0

    ADDF F.0 240.0 VGV_H
  else494_2:
  endif494:
  else483_2:
  endif483:
  else482_2:
  endif482:
    JR_NEQF VGV_MAX 0.0 else505_1
    MOVEF_F 0.0 VGV_S
    JR endif505
  else505_1:
    DATAF tmpf506
    DATA8 flag506
    DIVF VGV_MIN VGV_MAX tmpf506
    CP_EQF 0.0 VGV_MAX flag506
    SELECTF flag506 0.0 tmpf506 VGV_S

  else505_2:
  endif505:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else508_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB510:
    MOVEF_F 160.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB511:
    JR_NEQF VGV_W 1.0 else512_1
  else512_1:
  endif512:
    JR endif508
  else508_1:
    MOVEF_F 95.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB513:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB514:
  else508_2:
  endif508:
    JR_NEQF VGV_W1B2 1.0 else515_1
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB516:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else517_1
    MOVEF_F 65.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB519:
    JR endif517
  else517_1:
    MOVEF_F 55.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB520:
  else517_2:
  endif517:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else522_1
    DATA32 milliseconds524
	MOVEF_32 700.0 milliseconds524
	DATA32 timer524
	TIMER_WAIT milliseconds524 timer524
	TIMER_READY timer524
  else522_1:
  endif522:
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB525:
    MOVEF_F 7.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB526:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else527_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB529:
  else527_1:
  endif527:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else530_1
    MOVEF_F 58.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB532:
    JR endif530
  else530_1:
    MOVEF_F 48.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB533:
  else530_2:
  endif530:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB534:
  else515_1:
  endif515:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else536_1
    DATA32 milliseconds538
	MOVEF_32 700.0 milliseconds538
	DATA32 timer538
	TIMER_WAIT milliseconds538 timer538
	TIMER_READY timer538
  else536_1:
  endif536:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 10.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB539:
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB540:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else541_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB543:
  else541_1:
  endif541:
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB544:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else545_1
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB547:
    JR endif545
  else545_1:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB548:
  else545_2:
  endif545:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB549:
    JR_EQF VGV_W1B2 1.0 else550_1
    JR_EQF VGV_W 4.0 else550_1
    MOVEF_F 65.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB551:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB552:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB553:
    MOVEF_F 30.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB554:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB555:
  else550_1:
  endif550:
    MOVEF_F 0.0 VGV_W1B2
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else557_1
    DATA32 milliseconds559
	MOVEF_32 1000.0 milliseconds559
	DATA32 timer559
	TIMER_WAIT milliseconds559 timer559
	TIMER_READY timer559
  else557_1:
  endif557:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB560:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else561_1
    JR_NEQF VGV_W 3.0 else563_1
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB564:
    JR endif563
  else563_1:
    MOVEF_F 17.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB565:
  else563_2:
  endif563:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB567:
  else561_1:
  endif561:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB569:
    MOVEF_F 22.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB570:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else572_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB574:
  else572_1:
  endif572:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else575_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB577:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB578:
    JR endif575
  else575_1:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB579 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB579:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB580:
  else575_2:
  endif575:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB582:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB583:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else585_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB587:
  else585_1:
  endif585:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else588_1
    JR_NEQF VGV_B 3.0 else588_1
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB590:
    JR endif588
  else588_1:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB591:
  else588_2:
  endif588:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB592:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB593:
    JR_NEQF VGV_B 2.0 else594_1
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB595:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB596:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB597:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB598:
  else594_1:
  endif594:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf601
    DATA8 flag601
    DIVF VLV_MM_1 F.1 tmpf601
    CP_EQF 0.0 F.1 flag601
    SELECTF flag601 0.0 tmpf601 F.0

    MULF F.0 360.0 VLV_L_1
    JR_GTEQF VLV_V_1 0.0 else603_1
    MOVEF_F -10.0 VLV_SP_1
    JR endif603
  else603_1:
    MOVEF_F 10.0 VLV_SP_1
  else603_2:
  endif603:
    MOVEF_F 0.0 VLV_DEG_1
    CALL MOTOR.RESETCOUNT 'BC'
  while605:
    JR_GTEQF VLV_DEG_1 VLV_L_1 endwhile605
  whilebody605:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf610
    DATA8 flag610
    DIVF F.0 2.0 tmpf610
    CP_EQF 0.0 2.0 flag610
    SELECTF flag610 0.0 tmpf610 VLV_DEG_1

    MULF VLV_L_1 0.7 F.0
    JR_LTEQF VLV_DEG_1 F.0 else611_1
    MATH ABS VLV_SP_1 F.0
    JR_LTEQF F.0 10.0 else611_1
    JR_LTEQF VLV_V_1 0.0 else614_1
    SUBF VLV_SP_1 0.2 VLV_SP_1
    JR endif614
  else614_1:
    ADDF VLV_SP_1 0.2 VLV_SP_1
  else614_2:
  endif614:
    JR endif611
  else611_1:
    MATH ABS VLV_SP_1 F.0
    MATH ABS VLV_V_1 F.1
    JR_GTEQF F.0 F.1 else611_2
    JR_LTEQF VLV_V_1 0.0 else619_1
    ADDF VLV_SP_1 0.2 VLV_SP_1
    JR endif619
  else619_1:
    SUBF VLV_SP_1 0.2 VLV_SP_1
  else619_2:
  endif619:
  else611_2:
  endif611:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_1
    MULF VLV_U_1 2.0 F.1
    ADDF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_1 2.0 F.1
    SUBF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_1 VLV_L_1 whilebody605
  endwhile605:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_2 F.0
    DATAF tmpf632
    DATA8 flag632
    DIVF F.0 360.0 tmpf632
    CP_EQF 0.0 360.0 flag632
    SELECTF flag632 0.0 tmpf632 VLV_L_2

    DATAF tmpf633
    DATA8 flag633
    DIVF VLV_L_2 210.38 tmpf633
    CP_EQF 0.0 210.38 flag633
    SELECTF flag633 0.0 tmpf633 F.0

    MULF F.0 360.0 VLV_L_2
    MOVEF_F 30.0 VLV_V_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_2
  while636:
    JR_GTF VLV_DEG_2 VLV_L_2 endwhile636
  whilebody636:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_2
    CALL MOTOR.STARTPOWER 'B' VLV_V_2
    MULF VLV_L_2 0.2 F.0
    JR_LTF VLV_DEG_2 F.0 or641
    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else640_1
  or641:
    JR_GTEQF VLV_SP_2 0.0 else644_1
    MOVEF_F -30.0 VLV_V_2
    JR endif644
  else644_1:
    MOVEF_F 30.0 VLV_V_2
  else644_2:
  endif644:
    JR endif640
  else640_1:
    MOVEF_F VLV_SP_2 VLV_V_2
  else640_2:
  endif640:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_2 VLV_L_2 whilebody636
  endwhile636:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf648
    DATA8 flag648
    DIVF F.0 360.0 tmpf648
    CP_EQF 0.0 360.0 flag648
    SELECTF flag648 0.0 tmpf648 VLV_L_3

    DATAF tmpf649
    DATA8 flag649
    DIVF VLV_L_3 210.38 tmpf649
    CP_EQF 0.0 210.38 flag649
    SELECTF flag649 0.0 tmpf649 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while652:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile652
  whilebody652:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'C' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or657
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else656_1
  or657:
    JR_GTEQF VLV_SP_3 0.0 else660_1
    MOVEF_F -30.0 VLV_V_3
    JR endif660
  else660_1:
    MOVEF_F 30.0 VLV_V_3
  else660_2:
  endif660:
    JR endif656
  else656_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else656_2:
  endif656:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody652
  endwhile652:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_4 F.0
    DATAF tmpf667
    DATA8 flag667
    DIVF F.0 360.0 tmpf667
    CP_EQF 0.0 360.0 flag667
    SELECTF flag667 0.0 tmpf667 VLV_L_4

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf670
    DATA8 flag670
    DIVF VLV_L_4 F.2 tmpf670
    CP_EQF 0.0 F.2 flag670
    SELECTF flag670 0.0 tmpf670 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf672
    DATA8 flag672
    DIVF F.0 2.0 tmpf672
    CP_EQF 0.0 2.0 flag672
    SELECTF flag672 0.0 tmpf672 VLV_L_4

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_4
    MOVEF_F 0.0 VLV_DEG_4
  while674:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile674
  whilebody674:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf680
    DATA8 flag680
    DIVF F.0 2.0 tmpf680
    CP_EQF 0.0 2.0 flag680
    SELECTF flag680 0.0 tmpf680 VLV_DEG_4

    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or682
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else681_1
  or682:
    MOVEF_F 30.0 VLV_V_4
    JR endif681
  else681_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else681_2:
  endif681:
    CALL MOTOR.STARTPOWER 'B' VLV_V_4
    SUBF 0.0 VLV_V_4 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody674
  endwhile674:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf693
    DATA8 flag693
    DIVF F.0 360.0 tmpf693
    CP_EQF 0.0 360.0 flag693
    SELECTF flag693 0.0 tmpf693 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf696
    DATA8 flag696
    DIVF VLV_L_5 F.2 tmpf696
    CP_EQF 0.0 F.2 flag696
    SELECTF flag696 0.0 tmpf696 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf698
    DATA8 flag698
    DIVF F.0 2.0 tmpf698
    CP_EQF 0.0 2.0 flag698
    SELECTF flag698 0.0 tmpf698 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while700:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile700
  whilebody700:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf706
    DATA8 flag706
    DIVF F.0 2.0 tmpf706
    CP_EQF 0.0 2.0 flag706
    SELECTF flag706 0.0 tmpf706 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or708
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else707_1
  or708:
    MOVEF_F 30.0 VLV_V_5
    JR endif707
  else707_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else707_2:
  endif707:
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_5
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody700
  endwhile700:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while717:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or718
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile717
  or718:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile717
  whilebody717:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or738
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and737
  or738:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody717
  and737:
  endwhile717:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while750:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or751
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile750
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile750
  or751:
  whilebody750:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody750
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and774
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody750
  and774:
  endwhile750:
    JR_GTEQF VLV_SP_9 0.0 else780_1
    MOVEF_F -70.0 VLV_SP_9
    JR endif780
  else780_1:
    MOVEF_F 70.0 VLV_SP_9
  else780_2:
  endif780:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_9
    DATA32 milliseconds782
	MOVEF_32 300.0 milliseconds782
	DATA32 timer782
	TIMER_WAIT milliseconds782 timer782
	TIMER_READY timer782
    DATA32 tmp783
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp783
    JR_NEQ32 0 tmp783 alreadylaunched783
    OBJECT_START TF_BEEP_0
  alreadylaunched783:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_10
    DATA8 layer785
	DATA8 no785
	DATA8 mode8785
	
	MOVEF_8 2.0 no785
	SUB8 no785 1 no785
	DIV8 no785 4 layer785
	MATH MOD8 no785 4 no785

	MOVEF_8 2.0 mode8785
	
	INPUT_DEVICE READY_RAW layer785 no785 0 mode8785 0
    DATA8 layer786
	DATA8 no786
	DATA8 mode8786
	
	MOVEF_8 3.0 no786
	SUB8 no786 1 no786
	DIV8 no786 4 layer786
	MATH MOD8 no786 4 no786

	MOVEF_8 2.0 mode8786
	
	INPUT_DEVICE READY_RAW layer786 no786 0 mode8786 0
  while787:
    JR_EQF VLV_WHITE_10 1.0 endwhile787
  whilebody787:
    CALL MOTOR.RESETCOUNT 'BC'
  while789:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or790
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile789
  or790:
  whilebody789:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody789
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody789
  endwhile789:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_10
  while805:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_10 endwhile805
  whilebody805:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_10 whilebody805
  endwhile805:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else819_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else819_1
    MOVEF_F 1.0 VLV_WHITE_10
  else819_1:
  endif819:
    JR_NEQF VLV_WHITE_10 1.0 whilebody787
  endwhile787:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer823
	DATA8 no823
	DATA8 mode8823
	
	MOVEF_8 2.0 no823
	SUB8 no823 1 no823
	DIV8 no823 4 layer823
	MATH MOD8 no823 4 no823

	MOVEF_8 0.0 mode8823
	
	INPUT_DEVICE READY_RAW layer823 no823 0 mode8823 0
    DATA8 layer824
	DATA8 no824
	DATA8 mode8824
	
	MOVEF_8 3.0 no824
	SUB8 no824 1 no824
	DIV8 no824 4 layer824
	MATH MOD8 no824 4 no824

	MOVEF_8 0.0 mode8824
	
	INPUT_DEVICE READY_RAW layer824 no824 0 mode8824 0
  while825:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile825
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile825
  whilebody825:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 0.8 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 0.8 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and837
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody825
  and837:
  endwhile825:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds844
	MOVEF_32 500.0 milliseconds844
	DATA32 timer844
	TIMER_WAIT milliseconds844 timer844
	TIMER_READY timer844
  while845:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf849
    DATA8 flag849
    DIVF F.1 2.0 tmpf849
    CP_EQF 0.0 2.0 flag849
    SELECTF flag849 0.0 tmpf849 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile845
  whilebody845:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf855
    DATA8 flag855
    DIVF F.1 2.0 tmpf855
    CP_EQF 0.0 2.0 flag855
    SELECTF flag855 0.0 tmpf855 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody845
  endwhile845:
    CALL MOTOR.STOP VLV_MOTOR_11 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_12 VLV_SP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds860
	MOVEF_32 500.0 milliseconds860
	DATA32 timer860
	TIMER_WAIT milliseconds860 timer860
	TIMER_READY timer860
  while861:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf865
    DATA8 flag865
    DIVF F.1 2.0 tmpf865
    CP_EQF 0.0 2.0 flag865
    SELECTF flag865 0.0 tmpf865 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile861
  whilebody861:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf870
    DATA8 flag870
    DIVF F.1 2.0 tmpf870
    CP_EQF 0.0 2.0 flag870
    SELECTF flag870 0.0 tmpf870 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody861
  endwhile861:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
  while876:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_LTEQF F.0 -23.0 endwhile876
  whilebody876:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_GTF F.0 -23.0 whilebody876
  endwhile876:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
