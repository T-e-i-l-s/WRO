DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VK_M
DATAF VV_M
DATAF VMM_M
DATAF VK_ACCEL_M
DATAF VMAX1_M
DATAF VMIN1_M
DATAF VMAX2_M
DATAF VMIN2_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VDEG_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VNUM_M
DATAF VR_M
DATAF VG_M
DATAF VB_M
DATAF VRGB_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VS_M
DATAF VCOL_M
DATAS VFLAG_M 252
DATAF VW_M
ARRAY16 VRES_M 2
DATAF VI_M
DATAF VW2_M
DATAF VB2_M
DATAF VW1_M
DATAF VB1_M
DATAF VZONE1_M
DATAF VZONE2_M
DATAF VTIME_M
DATAF VMODE_1
DATAF VMM_2
DATAF VV_2
DATAF VL_2
DATAF VSP_2
DATAF VDEG_2
DATAF VU_2
DATAF VDEG_3
DATAF VSP_3
DATAF VL_3
DATAF VV_3
DATAF VDEG_4
DATAF VSP_4
DATAF VL_4
DATAF VV_4
DATAF VDEG_5
DATAF VSP_5
DATAF VL_5
DATAF VV_5
DATAF VDEG_6
DATAF VSP_6
DATAF VL_6
DATAF VV_6
DATAF VSP_7
DATAF VSP_8
DATAF VSP_9
DATAF VSP_10
DATAF VU_10
DATAF VSP_11
DATAF VWHITE_11
DATAF VU_11
DATAF VL_11
DATAS VMOTOR_12 252
DATAF VSP_12
DATAS VMOTOR_13 252
DATAF VSP_13
DATA32 RUNCOUNTER_BEEP
DATA32 RUNCOUNTER_TH_DOWN

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW_M
    CALL ARRAYCREATE_FLOAT VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VSP_11
    MOVEF_F 0.0 VWHITE_11
    MOVEF_F 0.0 VU_11
    MOVEF_F 0.0 VL_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    STRINGS DUPLICATE '' VMOTOR_13
    MOVEF_F 0.0 VSP_13
    MOVE32_32 0 RUNCOUNTER_BEEP
    MOVE32_32 0 RUNCOUNTER_TH_DOWN
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TBEEP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_BEEP 0
    CALL GETANDINC32 RUNCOUNTER_BEEP -1 RUNCOUNTER_BEEP tmp
    JR_GT32 tmp 1 launch
}
vmthread TTH_DOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_TH_DOWN 1
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN -1 RUNCOUNTER_TH_DOWN tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_BEEP
subcall PROGRAM_TH_DOWN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch848
    WRITE32 ENDSUB_BEEP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BEEP
  dispatch848:
    JR_NEQ32 SUBPROGRAM 1 dispatch849
    WRITE32 ENDSUB_TH_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TH_DOWN
  dispatch849:
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VRGB_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VCOL_M
    STRINGS DUPLICATE '' VFLAG_M
    MOVEF_F 0.0 VW_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VZONE1_M
    MOVEF_F 0.0 VZONE2_M
    MOVEF_F 0.0 VTIME_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VV_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VV_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VV_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VV_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VV_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VSP_11
    MOVEF_F 0.0 VWHITE_11
    MOVEF_F 0.0 VU_11
    MOVEF_F 0.0 VL_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    STRINGS DUPLICATE '' VMOTOR_13
    MOVEF_F 0.0 VSP_13
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.5 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN2_M
    STRINGS DUPLICATE 'false' VFLAG_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VB_M
    DATA32 tmp524
    CALL GETANDINC32 RUNCOUNTER_TH_DOWN 1  RUNCOUNTER_TH_DOWN tmp524
    JR_NEQ32 0 tmp524 alreadylaunched524
    OBJECT_START TTH_DOWN
  alreadylaunched524:
    MOVEF_F 25.0 VDEG_5
    MOVEF_F 60.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB525:
    MOVEF_F 85.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB526:
  while527:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile527
  whilebody527:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody527
  endwhile527:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 240.394493527841 VL_M
  while540:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf544
    DATA8 flag544
    DIVF F.1 2.0 tmpf544
    CP_EQF 0.0 2.0 flag544
    SELECTF flag544 0.0 tmpf544 F.0

    JR_GTEQF F.0 VL_M endwhile540
  whilebody540:
    WRITE32 ENDSUB_LINE3_1SENS:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE3_1SENS
CALLSUB545:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf549
    DATA8 flag549
    DIVF F.1 2.0 tmpf549
    CP_EQF 0.0 2.0 flag549
    SELECTF flag549 0.0 tmpf549 F.0

    JR_LTF F.0 VL_M whilebody540
  endwhile540:
    CALL VECTOR.INIT 4.0 0.0 VRES_M
    MOVEF_F 0.0 VI_M
  for551:
    JR_GTF VI_M 3.0 endfor551
  forbody551:
    WRITE32 ENDSUB_HSV:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB552:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while555:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf559
    DATA8 flag559
    DIVF F.1 2.0 tmpf559
    CP_EQF 0.0 2.0 flag559
    SELECTF flag559 0.0 tmpf559 F.0

    JR_GTEQF F.0 VL_M endwhile555
  whilebody555:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB560:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf564
    DATA8 flag564
    DIVF F.1 2.0 tmpf564
    CP_EQF 0.0 2.0 flag564
    SELECTF flag564 0.0 tmpf564 F.0

    JR_LTF F.0 VL_M whilebody555
  endwhile555:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody551
  endfor551:
    MOVEF_F 0.0 VW2_M
    MOVEF_F 0.0 VB2_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VI_M
  for566:
    JR_GTF VI_M 3.0 endfor566
  forbody566:
    CALL ARRAYGET_FLOAT VI_M VNUM_M VRES_M
    JR_LTEQF VNUM_M VMAX1_M else568_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VW2_M VB2_M
    MOVEF_F VNUM_M VMAX1_M
    MOVEF_F VI_M VW2_M
    JR endif568
  else568_1:
    JR_LTEQF VNUM_M VMAX2_M else568_2
    MOVEF_F VNUM_M VMAX2_M
    MOVEF_F VI_M VB2_M
  else568_2:
  endif568:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody566
  endfor566:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VL_M
  while571:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf575
    DATA8 flag575
    DIVF F.1 2.0 tmpf575
    CP_EQF 0.0 2.0 flag575
    SELECTF flag575 0.0 tmpf575 F.0

    JR_GTEQF F.0 VL_M endwhile571
  whilebody571:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB576:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf580
    DATA8 flag580
    DIVF F.1 2.0 tmpf580
    CP_EQF 0.0 2.0 flag580
    SELECTF flag580 0.0 tmpf580 F.0

    JR_LTF F.0 VL_M whilebody571
  endwhile571:
    MOVEF_F 0.0 VI_M
  for581:
    JR_GTF VI_M 3.0 endfor581
  forbody581:
    WRITE32 ENDSUB_HSV:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB582:
    CALL ARRAYSTORE_FLOAT VI_M VRGB_M VRES_M
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VL_M
  while585:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf589
    DATA8 flag589
    DIVF F.1 2.0 tmpf589
    CP_EQF 0.0 2.0 flag589
    SELECTF flag589 0.0 tmpf589 F.0

    JR_GTEQF F.0 VL_M endwhile585
  whilebody585:
    WRITE32 ENDSUB_LINE2_1SENS:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2_1SENS
CALLSUB590:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf594
    DATA8 flag594
    DIVF F.1 2.0 tmpf594
    CP_EQF 0.0 2.0 flag594
    SELECTF flag594 0.0 tmpf594 F.0

    JR_LTF F.0 VL_M whilebody585
  endwhile585:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody581
  endfor581:
    MOVEF_F 0.0 VW1_M
    MOVEF_F 0.0 VB1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VI_M
  for596:
    JR_GTF VI_M 3.0 endfor596
  forbody596:
    CALL ARRAYGET_FLOAT VI_M VNUM_M VRES_M
    JR_LTEQF VNUM_M VMAX1_M else598_1
    MOVEF_F VMAX1_M VMAX2_M
    MOVEF_F VW1_M VB1_M
    MOVEF_F VNUM_M VMAX1_M
    MOVEF_F VI_M VW1_M
    JR endif598
  else598_1:
    JR_LTEQF VNUM_M VMAX2_M else598_2
    MOVEF_F VNUM_M VMAX2_M
    MOVEF_F VI_M VB1_M
  else598_2:
  endif598:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody596
  endfor596:
    ADDF VB1_M 1.0 VB1_M
    ADDF VB2_M 1.0 VB2_M
    ADDF VW1_M 1.0 VW1_M
    ADDF VW2_M 1.0 VW2_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VB2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VB1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VW1_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB613:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB615:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB616:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB617:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB618:
    MOVEF_F 700.0 VMM_2
    MOVEF_F 95.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB619:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB620:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB621 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB621:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB622:
    MOVEF_F 80.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB623:
    MOVEF_F 93.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB624:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB625:
    MOVEF_F 850.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB626:
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB627:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB628:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB629:
    MOVEF_F 42.0 VDEG_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB630:
    MOVEF_F 550.0 VMM_2
    MOVEF_F 70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB631:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB632:
    MOVEF_F 35.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB633:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB634:
    MOVEF_F 60.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB635:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB636 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB636:
    MOVEF_F 95.0 VDEG_5
    MOVEF_F 50.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB637:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB638:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB639 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB639:
    TIMER_READ timeMC2
    MOVEF_F VB1_M VB_M
    MOVEF_F VW1_M VW_M
    JR_NEQF VB_M 2.0 and643
    JR_EQF VW_M 1.0 or642
  and643:
    JR_NEQF VB_M 3.0 else641_1
    JR_NEQF VW_M 4.0 else641_1
  or642:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB644 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB644:
    MOVEF_F 92.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB645:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB646:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB647:
    JR_NEQF VB_M 2.0 else648_1
    MOVEF_F 310.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB649:
    WRITE32 ENDSUB_W1B2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB650:
    MOVEF_F 600.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB651:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB652:
    JR endif648
  else648_1:
    MOVEF_F 175.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB653 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB653:
    WRITE32 ENDSUB_W1B2:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB654:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB655:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB656 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB656:
  else648_2:
  endif648:
    JR endif641
  else641_1:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB657:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB658:
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB659:
    JR_EQF VB_M 1.0 or661
    JR_NEQF VW_M 2.0 else660_1
  or661:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB662:
    JR_NEQF VW_M 2.0 else663_1
    WRITE32 ENDSUB_W2:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB664:
  else663_1:
  endif663:
    JR_NEQF VB_M 1.0 else665_1
    WRITE32 ENDSUB_B1:CALLSUB666 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB666:
  else665_1:
  endif665:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB667:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB668:
    JR endif660
  else660_1:
    JR_EQF VB_M 2.0 or669
    JR_NEQF VW_M 1.0 else660_2
  or669:
    JR_NEQF VB_M 2.0 else670_1
    WRITE32 ENDSUB_B2:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB671:
  else670_1:
  endif670:
    JR_NEQF VW_M 1.0 else672_1
    WRITE32 ENDSUB_W1:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB673:
  else672_1:
  endif672:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB674:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB675 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB675:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB676:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB677:
  else660_2:
  endif660:
    JR_EQF VW_M 3.0 or679
    JR_NEQF VB_M 4.0 else678_1
  or679:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds681
	MOVEF_32 300.0 milliseconds681
	DATA32 timer681
	TIMER_WAIT milliseconds681 timer681
	TIMER_READY timer681
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB682:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB683:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB684:
    JR_NEQF VW_M 3.0 else685_1
    WRITE32 ENDSUB_W2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB686:
  else685_1:
  endif685:
    JR_NEQF VB_M 4.0 else687_1
    WRITE32 ENDSUB_B1:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB688:
  else687_1:
  endif687:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB689:
    JR endif678
  else678_1:
    JR_EQF VW_M 4.0 or690
    JR_NEQF VB_M 3.0 else678_2
  or690:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB691 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB691:
    MOVEF_F 410.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB692 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB692:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB693:
    JR_NEQF VW_M 4.0 else694_1
    WRITE32 ENDSUB_W1:CALLSUB695 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB695:
  else694_1:
  endif694:
    JR_NEQF VB_M 3.0 else696_1
    WRITE32 ENDSUB_B2:CALLSUB697 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB697:
  else696_1:
  endif696:
    MOVEF_F 95.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB698 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB698:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB699 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB699:
    JR endif678
  else678_2:
    MOVEF_F 400.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB700 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB700:
  else678_3:
  endif678:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB701 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB701:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB702 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB702:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB703 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB703:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB704 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB704:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB706:
  else641_2:
  endif641:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE1_M
    STRINGS DUPLICATE 'true' VFLAG_M
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB708:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB709:
    MOVEF_F -35.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB710 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB710:
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB712:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB713:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 60.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB715 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB715:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 40.0 VDEG_3
    MOVEF_F 70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB717 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB717:
    MOVEF_F 45.0 VDEG_4
    MOVEF_F 70.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB718:
    MOVEF_F 400.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB719:
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB720 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB720:
    MOVEF_F 650.0 VMM_2
    MOVEF_F -90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB721 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB721:
    STRINGS DUPLICATE 'AD' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB722 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB722:
    MOVEF_F 13.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB723:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB724:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB725:
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB726:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB727 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB727:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB728 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB728:
    TIMER_READ timeMC2
    MOVEF_F VB2_M VB_M
    MOVEF_F VW2_M VW_M
    JR_NEQF VB_M 2.0 and732
    JR_EQF VW_M 1.0 or731
  and732:
    JR_NEQF VB_M 3.0 else730_1
    JR_NEQF VW_M 4.0 else730_1
  or731:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB733:
    MOVEF_F 92.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB734 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB734:
    MOVEF_F 70.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB735:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB736:
    JR_NEQF VB_M 2.0 else737_1
    MOVEF_F 180.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB738:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB739:
    WRITE32 ENDSUB_W1B2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB740:
    MOVEF_F 450.0 VMM_2
    MOVEF_F -90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB741:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 60.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB742:
    JR endif737
  else737_1:
    JR_NEQF VB_M 3.0 else737_2
    MOVEF_F 190.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB743:
    WRITE32 ENDSUB_W1B2:CALLSUB744 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1B2
CALLSUB744:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB745 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB745:
  else737_2:
  endif737:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB746 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB746:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB747 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB747:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB748 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB748:
    JR endif730
  else730_1:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB749 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB749:
    MOVEF_F 88.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB750 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB750:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB751 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB751:
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB752:
    JR_EQF VW_M 2.0 or754
    JR_NEQF VB_M 1.0 else753_1
  or754:
    MOVEF_F 200.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB755 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB755:
    JR_NEQF VW_M 2.0 else756_1
    WRITE32 ENDSUB_W2:CALLSUB757 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB757:
  else756_1:
  endif756:
    JR_NEQF VB_M 1.0 else758_1
    WRITE32 ENDSUB_B1:CALLSUB759 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB759:
  else758_1:
  endif758:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB760 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB760:
    MOVEF_F -30.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB761:
  else753_1:
  endif753:
    JR_EQF VW_M 1.0 or763
    JR_NEQF VB_M 2.0 else762_1
  or763:
    MOVEF_F 7.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB764 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB764:
    JR_NEQF VW_M 1.0 else765_1
    WRITE32 ENDSUB_W1:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB766:
  else765_1:
  endif765:
    JR_NEQF VB_M 2.0 else767_1
    WRITE32 ENDSUB_B2:CALLSUB768 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB768:
  else767_1:
  endif767:
    MOVEF_F 65.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB769 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB769:
    MOVEF_F 88.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB770 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB770:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB771 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB771:
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_TOLINE_1:CALLSUB772 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB772:
  else762_1:
  endif762:
    JR_EQF VW_M 3.0 or774
    JR_NEQF VB_M 4.0 else773_1
  or774:
    MOVEF_F 280.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB775 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB775:
    JR_NEQF VW_M 3.0 else776_1
    WRITE32 ENDSUB_W2:CALLSUB777 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W2
CALLSUB777:
  else776_1:
  endif776:
    JR_NEQF VB_M 4.0 else778_1
    WRITE32 ENDSUB_B1:CALLSUB779 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B1
CALLSUB779:
  else778_1:
  endif778:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB780 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB780:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB781 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB781:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 50.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB782 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB782:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB783 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB783:
    JR endif773
  else773_1:
    JR_EQF VW_M 4.0 or784
    JR_NEQF VB_M 3.0 else773_2
  or784:
    MOVEF_F 475.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB785 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB785:
    JR_NEQF VW_M 4.0 else786_1
    MOVEF_F 35.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB787 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB787:
    WRITE32 ENDSUB_W1:CALLSUB788 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_W1
CALLSUB788:
  else786_1:
  endif786:
    JR_NEQF VB_M 3.0 else789_1
    WRITE32 ENDSUB_B2:CALLSUB790 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_B2
CALLSUB790:
  else789_1:
  endif789:
    JR endif773
  else773_2:
    MOVEF_F 350.0 VMM_2
    MOVEF_F -80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB791 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB791:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB792 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB792:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 70.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB793 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB793:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB794 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB794:
  else773_3:
  endif773:
  else730_2:
  endif730:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VZONE2_M
    MOVEF_F 40.0 VMM_2
    MOVEF_F 50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB796 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB796:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB797 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB797:
    CALL MOTOR.RESETCOUNT 'BC'
  while799:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 55.0 endwhile799
  whilebody799:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_M
    MULF VU_M 0.8 F.1
    ADDF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.8 F.1
    SUBF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 55.0 whilebody799
  endwhile799:
    MOVEF_F 40.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB811 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB811:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB812 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB812:
    MOVEF_F -50.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB813 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB813:
    MOVEF_F 190.0 VMM_2
    MOVEF_F 80.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB814 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB814:
    MOVEF_F 100.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB815 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB815:
    MOVEF_F 150.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB816 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB816:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB817 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB817:
    MOVEF_F -55.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB818 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB818:
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB820 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB820:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB821 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB821:
    CALL MOTOR.START 'AD' -50.0
    MOVEF_F 100.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB823 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB823:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB825:
    MOVEF_F 450.0 VMM_2
    MOVEF_F 90.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB826 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB826:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB827 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB827:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -95.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB828 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB828:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB829 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB829:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 45.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB831 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB831:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB832 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB832:
    MOVEF_F -50.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB833 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB833:
    MOVEF_F 90.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB834 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB834:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VTIME_M
    CALL LCD.CLEAR
    DATAF tmpf838
    DATA8 flag838
    DIVF VTIME_M 1000.0 tmpf838
    CP_EQF 0.0 1000.0 flag838
    SELECTF flag838 0.0 tmpf838 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf841
    DATA8 flag841
    DIVF VZONE1_M 1000.0 tmpf841
    CP_EQF 0.0 1000.0 flag841
    SELECTF flag841 0.0 tmpf841 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf844
    DATA8 flag844
    DIVF VZONE2_M 1000.0 tmpf844
    CP_EQF 0.0 1000.0 flag844
    SELECTF flag844 0.0 tmpf844 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    WRITE32 ENDSUB_FRZ:CALLSUB847 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB847:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.0 F.1 tmpf12
    CP_EQF 0.0 F.1 flag12
    SELECTF flag12 0.0 tmpf12 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf17
    DATA8 flag17
    DIVF F.0 F.1 tmpf17
    CP_EQF 0.0 F.1 flag17
    SELECTF flag17 0.0 tmpf17 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE_1:
    JR_NEQF VMODE_1 1.0 else18_1
    MOVEF_F 0.7 VK_M
    MOVEF_F 85.0 VV_M
    JR endif18
  else18_1:
    JR_NEQF VMODE_1 2.0 else18_2
    MOVEF_F 0.7 VK_M
    MOVEF_F 55.0 VV_M
    JR endif18
  else18_2:
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
  else18_3:
  endif18:
    WRITE32 ENDSUB_LINE_FOL:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_FOL
CALLSUB19:
RETSUB_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_1:
SUB_LINE_FOL:
    WRITE32 ENDSUB_SEN1:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB20:
    WRITE32 ENDSUB_SEN2:CALLSUB21 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB21:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE_FOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_FOL:
SUB_LINE_ACCELERATION:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf31
    DATA8 flag31
    DIVF VMM_M F.1 tmpf31
    CP_EQF 0.0 F.1 flag31
    SELECTF flag31 0.0 tmpf31 F.0

    MULF F.0 360.0 VL_M
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
    MOVEF_F 0.0 VDEG_M
    CALL MOTOR.RESETCOUNT 'BC'
  while34:
    JR_GTEQF VDEG_M VL_M endwhile34
  whilebody34:
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf38
    DATA8 flag38
    DIVF F.0 2.0 tmpf38
    CP_EQF 0.0 2.0 flag38
    SELECTF flag38 0.0 tmpf38 VDEG_M

    MULF VL_M 0.5 F.0
    JR_GTEQF VDEG_M F.0 else39_1
    JR_GTEQF VV_M 95.0 else39_1
    ADDF VV_M VK_ACCEL_M VV_M
    JR endif39
  else39_1:
    MULF 0.6 VL_M F.0
    JR_LTEQF VDEG_M F.0 else39_2
    JR_LTEQF VV_M 30.0 else39_2
    SUBF VV_M VK_ACCEL_M VV_M
  else39_2:
  endif39:
    JR_GTEQF VV_M 40.0 else44_1
    MOVEF_F 1.2 VK_M
    JR endif44
  else44_1:
    JR_GTEQF VV_M 65.0 else44_2
    MOVEF_F 0.8 VK_M
    JR endif44
  else44_2:
    JR_GTEQF VV_M 100.0 else44_3
    MOVEF_F 0.8 VK_M
  else44_3:
  endif44:
    WRITE32 ENDSUB_SEN1:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB45:
    WRITE32 ENDSUB_SEN2:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB46:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_M VL_M whilebody34
  endwhile34:
RETSUB_LINE_ACCELERATION:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_ACCELERATION:
SUB_LINE2_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE2_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2_1SENS:
SUB_LINE3_1SENS:
    CALL SENSOR.READPERCENT 2.0 F.0
    SUBF F.0 45.0 VU_M
    MULF VU_M 1.4 F.1
    ADDF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VU_M 1.4 F.1
    SUBF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_LINE3_1SENS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3_1SENS:
SUB_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf72
    DATA8 flag72
    DIVF VMM_2 F.1 tmpf72
    CP_EQF 0.0 F.1 flag72
    SELECTF flag72 0.0 tmpf72 F.0

    MULF F.0 360.0 VL_2
    JR_GTEQF VV_2 0.0 else74_1
    MOVEF_F -10.0 VSP_2
    JR endif74
  else74_1:
    MOVEF_F 10.0 VSP_2
  else74_2:
  endif74:
    MOVEF_F 0.0 VDEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while76:
    JR_GTEQF VDEG_2 VL_2 endwhile76
  whilebody76:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf81
    DATA8 flag81
    DIVF F.0 2.0 tmpf81
    CP_EQF 0.0 2.0 flag81
    SELECTF flag81 0.0 tmpf81 VDEG_2

    MULF VL_2 0.8 F.0
    JR_LTEQF VDEG_2 F.0 else82_1
    MATH ABS VSP_2 F.0
    JR_LTEQF F.0 20.0 else82_1
    JR_LTEQF VV_2 0.0 else85_1
    SUBF VSP_2 0.3 VSP_2
    JR endif85
  else85_1:
    ADDF VSP_2 0.3 VSP_2
  else85_2:
  endif85:
    JR endif82
  else82_1:
    MATH ABS VSP_2 F.0
    MATH ABS VV_2 F.1
    JR_GTEQF F.0 F.1 else82_2
    JR_LTEQF VV_2 0.0 else90_1
    ADDF VSP_2 0.3 VSP_2
    JR endif90
  else90_1:
    SUBF VSP_2 0.3 VSP_2
  else90_2:
  endif90:
  else82_2:
  endif82:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 2.0 F.1
    ADDF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 2.0 F.1
    SUBF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_2 VL_2 whilebody76
  endwhile76:
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_RIGHT1_2:
    MULF 1092.72 VDEG_3 F.0
    DATAF tmpf103
    DATA8 flag103
    DIVF F.0 360.0 tmpf103
    CP_EQF 0.0 360.0 flag103
    SELECTF flag103 0.0 tmpf103 VL_3

    DATAF tmpf104
    DATA8 flag104
    DIVF VL_3 210.38 tmpf104
    CP_EQF 0.0 210.38 flag104
    SELECTF flag104 0.0 tmpf104 F.0

    MULF F.0 360.0 VL_3
    MOVEF_F 30.0 VV_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_3
  while107:
    JR_GTF VDEG_3 VL_3 endwhile107
  whilebody107:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VDEG_3
    CALL MOTOR.STARTPOWER 'B' VV_3
    MULF VL_3 0.2 F.0
    JR_LTF VDEG_3 F.0 or112
    MULF VL_3 0.8 F.0
    JR_LTEQF VDEG_3 F.0 else111_1
  or112:
    JR_GTEQF VSP_3 0.0 else115_1
    MOVEF_F -30.0 VV_3
    JR endif115
  else115_1:
    MOVEF_F 30.0 VV_3
  else115_2:
  endif115:
    JR endif111
  else111_1:
    MOVEF_F VSP_3 VV_3
  else111_2:
  endif111:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VDEG_3 VL_3 whilebody107
  endwhile107:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT1_2:
    MULF 1092.72 VDEG_4 F.0
    DATAF tmpf119
    DATA8 flag119
    DIVF F.0 360.0 tmpf119
    CP_EQF 0.0 360.0 flag119
    SELECTF flag119 0.0 tmpf119 VL_4

    DATAF tmpf120
    DATA8 flag120
    DIVF VL_4 210.38 tmpf120
    CP_EQF 0.0 210.38 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    MULF F.0 360.0 VL_4
    MOVEF_F 30.0 VV_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VDEG_4
  while123:
    JR_GTF VDEG_4 VL_4 endwhile123
  whilebody123:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VDEG_4
    CALL MOTOR.STARTPOWER 'C' VV_4
    MULF VL_4 0.2 F.0
    JR_LTF VDEG_4 F.0 or128
    MULF VL_4 0.8 F.0
    JR_LTEQF VDEG_4 F.0 else127_1
  or128:
    JR_GTEQF VSP_4 0.0 else131_1
    MOVEF_F -30.0 VV_4
    JR endif131
  else131_1:
    MOVEF_F 30.0 VV_4
  else131_2:
  endif131:
    JR endif127
  else127_1:
    MOVEF_F VSP_4 VV_4
  else127_2:
  endif127:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VDEG_4 VL_4 whilebody123
  endwhile123:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_5 F.0
    DATAF tmpf138
    DATA8 flag138
    DIVF F.0 360.0 tmpf138
    CP_EQF 0.0 360.0 flag138
    SELECTF flag138 0.0 tmpf138 VL_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf141
    DATA8 flag141
    DIVF VL_5 F.2 tmpf141
    CP_EQF 0.0 F.2 flag141
    SELECTF flag141 0.0 tmpf141 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf143
    DATA8 flag143
    DIVF F.0 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 VL_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VV_5
    MOVEF_F 0.0 VDEG_5
  while145:
    JR_GTF VDEG_5 VL_5 endwhile145
  whilebody145:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf151
    DATA8 flag151
    DIVF F.0 2.0 tmpf151
    CP_EQF 0.0 2.0 flag151
    SELECTF flag151 0.0 tmpf151 VDEG_5

    MULF VL_5 0.2 F.0
    JR_LTF VDEG_5 F.0 or153
    MULF VL_5 0.8 F.0
    JR_LTEQF VDEG_5 F.0 else152_1
  or153:
    MOVEF_F 30.0 VV_5
    JR endif152
  else152_1:
    MOVEF_F VSP_5 VV_5
  else152_2:
  endif152:
    CALL MOTOR.STARTPOWER 'B' VV_5
    SUBF 0.0 VV_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VDEG_5 VL_5 whilebody145
  endwhile145:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VDEG_6 F.0
    DATAF tmpf164
    DATA8 flag164
    DIVF F.0 360.0 tmpf164
    CP_EQF 0.0 360.0 flag164
    SELECTF flag164 0.0 tmpf164 VL_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf167
    DATA8 flag167
    DIVF VL_6 F.2 tmpf167
    CP_EQF 0.0 F.2 flag167
    SELECTF flag167 0.0 tmpf167 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf169
    DATA8 flag169
    DIVF F.0 2.0 tmpf169
    CP_EQF 0.0 2.0 flag169
    SELECTF flag169 0.0 tmpf169 VL_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VV_6
    MOVEF_F 0.0 VDEG_6
  while171:
    JR_GTF VDEG_6 VL_6 endwhile171
  whilebody171:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf177
    DATA8 flag177
    DIVF F.0 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 VDEG_6

    MULF VL_6 0.2 F.0
    JR_LTF VDEG_6 F.0 or179
    MULF VL_6 0.8 F.0
    JR_LTEQF VDEG_6 F.0 else178_1
  or179:
    MOVEF_F 30.0 VV_6
    JR endif178
  else178_1:
    MOVEF_F VSP_6 VV_6
  else178_2:
  endif178:
    SUBF 0.0 VV_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VV_6
    JR_LTEQF VDEG_6 VL_6 whilebody171
  endwhile171:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_7 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB186:
    MOVEF_F 50.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB187:
    CALL MOTOR.START 'B' VSP_7
    SUBF 0.0 VSP_7 F.0
    CALL MOTOR.START 'C' F.0
  while191:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile191
  whilebody191:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody191
  endwhile191:
  while194:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile194
  whilebody194:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody194
  endwhile194:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB198:
RETSUB_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT_1:
SUB_LEFT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_8 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB199:
    MOVEF_F 50.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB200:
    SUBF 0.0 VSP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_8
  while204:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile204
  whilebody204:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody204
  endwhile204:
  while207:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile207
  whilebody207:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody207
  endwhile207:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB211:
RETSUB_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT_1:
SUB_AROUND_1:
    MOVEF_F 140.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB212:
    SUBF 0.0 VSP_9 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_9
  while216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile216
  whilebody216:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody216
  endwhile216:
  while219:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile219
  whilebody219:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody219
  endwhile219:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB223:
RETSUB_AROUND_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND_1:
SUB_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while226:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or227
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_GTEQF F.0 F.1 endwhile226
  or227:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 600.0 endwhile226
  whilebody226:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 2.0 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 2.0 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or247
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.8 F.1
    JR_GTEQF F.0 F.1 and246
  or247:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 600.0 whilebody226
  and246:
  endwhile226:
    CALL MOTOR.RESETCOUNT 'BC'
  while258:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 or259
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile258
  or259:
  whilebody258:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 2.0 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 2.0 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody258
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VSP_10 F.2
    MULF F.2 0.5 F.1
    JR_GTF F.0 F.1 whilebody258
  endwhile258:
    JR_GTEQF VSP_10 0.0 else285_1
    MOVEF_F -50.0 VSP_10
    JR endif285
  else285_1:
    MOVEF_F 50.0 VSP_10
  else285_2:
  endif285:
    CALL MOTOR.STARTPOWER 'BC' VSP_10
    DATA32 milliseconds287
	MOVEF_32 300.0 milliseconds287
	DATA32 timer287
	TIMER_WAIT milliseconds287 timer287
	TIMER_READY timer287
    DATA32 tmp288
    CALL GETANDINC32 RUNCOUNTER_BEEP 1  RUNCOUNTER_BEEP tmp288
    JR_NEQ32 0 tmp288 alreadylaunched288
    OBJECT_START TBEEP
  alreadylaunched288:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ALIGNMENT_1:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_11
    DATA8 layer291
	DATA8 no291
	DATA8 mode8291
	
	MOVEF_8 2.0 no291
	SUB8 no291 1 no291
	DIV8 no291 4 layer291
	MATH MOD8 no291 4 no291

	MOVEF_8 2.0 mode8291
	
	INPUT_DEVICE READY_RAW layer291 no291 0 mode8291 0
    DATA8 layer292
	DATA8 no292
	DATA8 mode8292
	
	MOVEF_8 3.0 no292
	SUB8 no292 1 no292
	DIV8 no292 4 layer292
	MATH MOD8 no292 4 no292

	MOVEF_8 2.0 mode8292
	
	INPUT_DEVICE READY_RAW layer292 no292 0 mode8292 0
  while293:
    JR_EQF VWHITE_11 1.0 endwhile293
  whilebody293:
  while294:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or295
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile294
  or295:
  whilebody294:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 0.8 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 0.8 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody294
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody294
  endwhile294:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VL_11
  while310:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_11 endwhile310
  whilebody310:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 0.8 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 0.8 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_11 whilebody310
  endwhile310:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else324_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else324_1
    MOVEF_F 1.0 VWHITE_11
  else324_1:
  endif324:
    JR_NEQF VWHITE_11 1.0 whilebody293
  endwhile293:
    DATA8 layer327
	DATA8 no327
	DATA8 mode8327
	
	MOVEF_8 2.0 no327
	SUB8 no327 1 no327
	DIV8 no327 4 layer327
	MATH MOD8 no327 4 no327

	MOVEF_8 0.0 mode8327
	
	INPUT_DEVICE READY_RAW layer327 no327 0 mode8327 0
    DATA8 layer328
	DATA8 no328
	DATA8 mode8328
	
	MOVEF_8 3.0 no328
	SUB8 no328 1 no328
	DIV8 no328 4 layer328
	MATH MOD8 no328 4 no328

	MOVEF_8 0.0 mode8328
	
	INPUT_DEVICE READY_RAW layer328 no328 0 mode8328 0
  while329:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile329
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile329
  whilebody329:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_11
    MULF VU_11 0.8 F.1
    ADDF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_11 0.8 F.1
    SUBF VSP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and341
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody329
  and341:
  endwhile329:
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_UP_2:
    SUBF 0.0 VSP_12 F.0
    CALL MOTOR.START VMOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds347
	MOVEF_32 500.0 milliseconds347
	DATA32 timer347
	TIMER_WAIT milliseconds347 timer347
	TIMER_READY timer347
  while348:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf352
    DATA8 flag352
    DIVF F.1 2.0 tmpf352
    CP_EQF 0.0 2.0 flag352
    SELECTF flag352 0.0 tmpf352 F.0

    MULF VSP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile348
  whilebody348:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf358
    DATA8 flag358
    DIVF F.1 2.0 tmpf358
    CP_EQF 0.0 2.0 flag358
    SELECTF flag358 0.0 tmpf358 F.0

    MULF VSP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody348
  endwhile348:
    CALL MOTOR.STOP VMOTOR_12 'true'
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    CALL MOTOR.START VMOTOR_13 VSP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds363
	MOVEF_32 500.0 milliseconds363
	DATA32 timer363
	TIMER_WAIT milliseconds363 timer363
	TIMER_READY timer363
  while364:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf368
    DATA8 flag368
    DIVF F.1 2.0 tmpf368
    CP_EQF 0.0 2.0 flag368
    SELECTF flag368 0.0 tmpf368 F.0

    MULF VSP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile364
  whilebody364:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf373
    DATA8 flag373
    DIVF F.1 2.0 tmpf373
    CP_EQF 0.0 2.0 flag373
    SELECTF flag373 0.0 tmpf373 F.0

    MULF VSP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody364
  endwhile364:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VMOTOR_13 -20.0 0.0 20.0 0.0 'true' 

	DATA8 layer376
	DATA8 nos376
	DATA8 busy376
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_13 layer376 nos376
	JR_EQ8 0 nos376 motornotbusy376
  motorwaiting376:
	OUTPUT_TEST layer376 nos376 busy376
	JR_EQ8 busy376 0 motornotbusy376
	SLEEP
	JR motorwaiting376
  motornotbusy376:
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_TH_DOWN:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds378
	MOVEF_32 500.0 milliseconds378
	DATA32 timer378
	TIMER_WAIT milliseconds378 timer378
	TIMER_READY timer378
  while379:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf383
    DATA8 flag383
    DIVF F.1 2.0 tmpf383
    CP_EQF 0.0 2.0 flag383
    SELECTF flag383 0.0 tmpf383 F.0

    JR_LTEQF F.0 35.0 endwhile379
  whilebody379:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf387
    DATA8 flag387
    DIVF F.1 2.0 tmpf387
    CP_EQF 0.0 2.0 flag387
    SELECTF flag387 0.0 tmpf387 F.0

    JR_GTF F.0 35.0 whilebody379
  endwhile379:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 20.0 0.0 'true' 

	DATA8 layer389
	DATA8 nos389
	DATA8 busy389
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer389 nos389
	JR_EQ8 0 nos389 motornotbusy389
  motorwaiting389:
	OUTPUT_TEST layer389 nos389 busy389
	JR_EQ8 busy389 0 motornotbusy389
	SLEEP
	JR motorwaiting389
  motornotbusy389:
RETSUB_TH_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_DOWN:
SUB_TH_UP:
    CALL MOTOR.START 'AD' -50.0
    DATA32 milliseconds391
	MOVEF_32 300.0 milliseconds391
	DATA32 timer391
	TIMER_WAIT milliseconds391 timer391
	TIMER_READY timer391
  while392:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf396
    DATA8 flag396
    DIVF F.1 2.0 tmpf396
    CP_EQF 0.0 2.0 flag396
    SELECTF flag396 0.0 tmpf396 F.0

    JR_LTEQF F.0 25.0 endwhile392
  whilebody392:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf400
    DATA8 flag400
    DIVF F.1 2.0 tmpf400
    CP_EQF 0.0 2.0 flag400
    SELECTF flag400 0.0 tmpf400 F.0

    JR_GTF F.0 25.0 whilebody392
  endwhile392:
    CALL MOTOR.STOP 'AD' 'true'
RETSUB_TH_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TH_UP:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_BEEP:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_BEEP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BEEP:
SUB_HSV:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VR_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VG_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VB_M VRECVARRAY_M
    ADDF VR_M VG_M F.0
    ADDF F.0 VB_M VRGB_M
    JR_LTEQF VR_M VG_M else414_1
    JR_LTEQF VR_M VB_M else414_1
    MOVEF_F VR_M VMAX_M
    JR endif414
  else414_1:
    JR_LTEQF VG_M VR_M else414_2
    JR_LTEQF VG_M VB_M else414_2
    MOVEF_F VG_M VMAX_M
    JR endif414
  else414_2:
    JR_LTEQF VB_M VR_M else414_3
    JR_LTEQF VB_M VG_M else414_3
    MOVEF_F VB_M VMAX_M
  else414_3:
  endif414:
    JR_GTEQF VR_M VG_M else415_1
    JR_GTEQF VR_M VB_M else415_1
    MOVEF_F VR_M VMIN_M
    JR endif415
  else415_1:
    JR_GTEQF VG_M VR_M else415_2
    JR_GTEQF VG_M VB_M else415_2
    MOVEF_F VG_M VMIN_M
    JR endif415
  else415_2:
    JR_GTEQF VB_M VR_M else415_3
    JR_GTEQF VB_M VG_M else415_3
    MOVEF_F VB_M VMIN_M
  else415_3:
  endif415:
    JR_NEQF VMAX_M VMIN_M else416_1
    MOVEF_F 0.0 VH_M
    JR endif416
  else416_1:
    JR_NEQF VR_M VMAX_M else417_1
    JR_LTF VG_M VB_M else418_1
    SUBF VG_M VB_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf422
    DATA8 flag422
    DIVF F.0 F.1 tmpf422
    CP_EQF 0.0 F.1 flag422
    SELECTF flag422 0.0 tmpf422 VH_M

    JR endif418
  else418_1:
    SUBF VG_M VB_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf426
    DATA8 flag426
    DIVF F.1 F.2 tmpf426
    CP_EQF 0.0 F.2 flag426
    SELECTF flag426 0.0 tmpf426 F.0

    ADDF F.0 360.0 VH_M
  else418_2:
  endif418:
    JR endif417
  else417_1:
    JR_NEQF VMAX_M VG_M else428_1
    SUBF VB_M VR_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf432
    DATA8 flag432
    DIVF F.1 F.2 tmpf432
    CP_EQF 0.0 F.2 flag432
    SELECTF flag432 0.0 tmpf432 F.0

    ADDF F.0 120.0 VH_M
    JR endif428
  else428_1:
    SUBF VR_M VG_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf437
    DATA8 flag437
    DIVF F.1 F.2 tmpf437
    CP_EQF 0.0 F.2 flag437
    SELECTF flag437 0.0 tmpf437 F.0

    ADDF F.0 240.0 VH_M
  else428_2:
  endif428:
  else417_2:
  endif417:
  else416_2:
  endif416:
    JR_NEQF VMAX_M 0.0 else439_1
    MOVEF_F 0.0 VS_M
    JR endif439
  else439_1:
    DATAF tmpf440
    DATA8 flag440
    DIVF VMIN_M VMAX_M tmpf440
    CP_EQF 0.0 VMAX_M flag440
    SELECTF flag440 0.0 tmpf440 F.0

    SUBF 1.0 F.0 VS_M
  else439_2:
  endif439:
    MOVEF_F VMAX_M VV_M
    MULF VS_M 100.0 VS_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 100.0 VMIN_M
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_COL:
    WRITE32 ENDSUB_HSV:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB443:
    JR_LTEQF VRGB_M 110.0 else444_1
    MOVEF_F 6.0 VCOL_M
    JR endif444
  else444_1:
    JR_LTEQF VRGB_M 60.0 else444_2
    MOVEF_F 1.0 VCOL_M
  else444_2:
  endif444:
RETSUB_COL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_COL:
SUB_W1B2:
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB445:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB446:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else447_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB449:
    JR endif447
  else447_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB450:
  else447_2:
  endif447:
    MOVEF_F 65.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB451:
    MOVEF_F 180.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB452:
    JR_NEQF VB_M 3.0 else453_1
    MOVEF_F 55.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB454:
    JR endif453
  else453_1:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -50.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB455:
  else453_2:
  endif453:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB456 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB456:
    MOVEF_F 50.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB457:
    MOVEF_F 35.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB458:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 10.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB460:
    MOVEF_F 7.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB461:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else462_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB464:
  else462_1:
  endif462:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB465:
    MOVEF_F 102.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB466:
    MOVEF_F 300.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB467:
RETSUB_W1B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1B2:
SUB_W1:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB468:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else469_1
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB471:
    JR endif469
  else469_1:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 40.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB472:
  else469_2:
  endif469:
    MOVEF_F 250.0 VMM_2
    MOVEF_F 60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB473:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB474:
    MOVEF_F 90.0 VDEG_4
    MOVEF_F -50.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB475:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB476:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB478:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB479:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else480_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB482:
  else480_1:
  endif480:
    MOVEF_F 45.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB483:
    MOVEF_F 105.0 VDEG_6
    MOVEF_F 25.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB484:
    MOVEF_F 100.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB485 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB485:
    MOVEF_F 250.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB486:
    MOVEF_F 90.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB487:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else488_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB490:
  else488_1:
  endif488:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -60.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB491 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB491:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB492:
RETSUB_W1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W1:
SUB_W2:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB494:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB495:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else496_1
    STRINGS DUPLICATE 'D' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB498:
  else496_1:
  endif496:
RETSUB_W2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_W2:
SUB_B1:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB500:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB501:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else502_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB504:
  else502_1:
  endif502:
RETSUB_B1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B1:
SUB_B2:
    MOVEF_F 50.0 VDEG_4
    MOVEF_F 60.0 VSP_4
    WRITE32 ENDSUB_LEFT1_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT1_2
CALLSUB505:
    MOVEF_F 50.0 VDEG_3
    MOVEF_F 60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB506:
    MOVEF_F 55.0 VMM_2
    MOVEF_F 30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB507:
    MOVEF_F 90.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB508:
    MOVEF_F 25.0 VMM_2
    MOVEF_F 20.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB509:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VMOTOR_13
    MOVEF_F 20.0 VSP_13
    WRITE32 ENDSUB_DOWN_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB511:
    MOVEF_F 15.0 VMM_2
    MOVEF_F -30.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB512:
    CALL NE_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else513_1
    STRINGS DUPLICATE 'A' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB515:
  else513_1:
  endif513:
    MOVEF_F 90.0 VDEG_3
    MOVEF_F -60.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB516:
    MOVEF_F 30.0 VMM_2
    MOVEF_F -40.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB517:
    MOVEF_F 95.0 VDEG_3
    MOVEF_F -70.0 VSP_3
    WRITE32 ENDSUB_RIGHT1_2:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT1_2
CALLSUB518:
    CALL EQ_STRING VFLAG_M 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else519_1
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_UP_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB521:
  else519_1:
  endif519:
    MOVEF_F 150.0 VMM_2
    MOVEF_F -70.0 VV_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB522:
    MOVEF_F -40.0 VSP_10
    WRITE32 ENDSUB_ALIGNMENT_1:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ALIGNMENT_1
CALLSUB523:
RETSUB_B2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_B2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
