DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_MM_2
DATAF VLV_V_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VLV_SP_10
DATAF VLV_DEG_6
DATAF VLV_SP_6
DATAF VLV_SP_11
DATAS VLV_MOTOR_13 252
DATAF VLV_SP_13
DATAF VLV_SP_8
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_U
DATAF VGV_L
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_COL
DATAF VGV_RED
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_2
DATAF VLV_SP_2
DATAF VLV_DEG_2
DATAF VLV_U_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_L_6
DATAF VLV_V_6
DATAF VLV_U_10
DATAF VLV_WHITE_11
DATAF VLV_U_11
DATAF VLV_L_11
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VLV_SP_8
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_COL
    MOVEF_F 0.0 VGV_RED
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_U_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_L_6
    MOVEF_F 0.0 VLV_V_6
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_WHITE_11
    MOVEF_F 0.0 VLV_U_11
    MOVEF_F 0.0 VLV_L_11
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch913
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch913:
    JR_NEQ32 SUBPROGRAM 1 dispatch914
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch914:
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VLV_SP_8
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_COL
    MOVEF_F 0.0 VGV_RED
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    DATA32 tmp8
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp8
    JR_NEQ32 0 tmp8 alreadylaunched8
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched8:
    MOVEF_F 15.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB9:
    MOVEF_F 85.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB10:
    CALL MOTOR.RESETCOUNT 'BC'
  while12:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile12
  whilebody12:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody12
  endwhile12:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while25:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf29
    DATA8 flag29
    DIVF F.1 2.0 tmpf29
    CP_EQF 0.0 2.0 flag29
    SELECTF flag29 0.0 tmpf29 F.0

    JR_GTEQF F.0 VGV_L endwhile25
  whilebody25:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB30:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf34
    DATA8 flag34
    DIVF F.1 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 F.0

    JR_LTF F.0 VGV_L whilebody25
  endwhile25:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB35:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  or38:
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB52:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while54:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_GTEQF F.0 VGV_L endwhile54
  whilebody54:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB59:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    JR_LTF F.0 VGV_L whilebody54
  endwhile54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while65:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTEQF F.0 VGV_L endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB70:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 2.0 tmpf74
    CP_EQF 0.0 2.0 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    JR_LTF F.0 VGV_L whilebody65
  endwhile65:
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for76:
    JR_GTF VGV_I 3.0 endfor76
  forbody76:
    WRITE32 ENDSUB_F_COL3_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_COL3_0
CALLSUB77:
    JR_EQF VGV_COL VGV_RED else78_1
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    MOVEF_F 1.0 VGV_RED
    JR endif78
  else78_1:
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
  else78_2:
  endif78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while82:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf86
    DATA8 flag86
    DIVF F.1 2.0 tmpf86
    CP_EQF 0.0 2.0 flag86
    SELECTF flag86 0.0 tmpf86 F.0

    JR_GTEQF F.0 VGV_L endwhile82
  whilebody82:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB87:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf91
    DATA8 flag91
    DIVF F.1 2.0 tmpf91
    CP_EQF 0.0 2.0 flag91
    SELECTF flag91 0.0 tmpf91 F.0

    JR_LTF F.0 VGV_L whilebody82
  endwhile82:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody76
  endfor76:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for94:
    JR_GTF VGV_I 3.0 endfor94
  forbody94:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_LTEQF VGV_NUM VGV_MAX1 else96_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif96
  else96_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else96_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else96_2:
  endif96:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody94
  endfor94:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 147.93507294021 VGV_L
  while99:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf103
    DATA8 flag103
    DIVF F.1 2.0 tmpf103
    CP_EQF 0.0 2.0 flag103
    SELECTF flag103 0.0 tmpf103 F.0

    JR_GTEQF F.0 VGV_L endwhile99
  whilebody99:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB104:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_LTF F.0 VGV_L whilebody99
  endwhile99:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for109:
    JR_GTF VGV_I 3.0 endfor109
  forbody109:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB110 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB110:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_RGB VGV_RES
    JR_GTEQF VGV_I 2.0 else112_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while114:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf118
    DATA8 flag118
    DIVF F.1 2.0 tmpf118
    CP_EQF 0.0 2.0 flag118
    SELECTF flag118 0.0 tmpf118 F.0

    JR_GTEQF F.0 VGV_L endwhile114
  whilebody114:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB119:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf123
    DATA8 flag123
    DIVF F.1 2.0 tmpf123
    CP_EQF 0.0 2.0 flag123
    SELECTF flag123 0.0 tmpf123 F.0

    JR_LTF F.0 VGV_L whilebody114
  endwhile114:
    JR endif112
  else112_1:
    JR_NEQF VGV_I 2.0 else112_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while125:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf129
    DATA8 flag129
    DIVF F.1 2.0 tmpf129
    CP_EQF 0.0 2.0 flag129
    SELECTF flag129 0.0 tmpf129 F.0

    JR_GTEQF F.0 VGV_L endwhile125
  whilebody125:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB130 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB130:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf134
    DATA8 flag134
    DIVF F.1 2.0 tmpf134
    CP_EQF 0.0 2.0 flag134
    SELECTF flag134 0.0 tmpf134 F.0

    JR_LTF F.0 VGV_L whilebody125
  endwhile125:
  else112_2:
  endif112:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody109
  endfor109:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB136:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for138:
    JR_GTF VGV_I 3.0 endfor138
  forbody138:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    JR_LTEQF VGV_NUM VGV_MAX1 else140_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif140
  else140_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else140_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else140_2:
  endif140:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody138
  endfor138:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 32.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB156 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB156:
    MOVEF_F 35.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB157:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 203.410725292788 VGV_L
  while159:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf163
    DATA8 flag163
    DIVF F.1 2.0 tmpf163
    CP_EQF 0.0 2.0 flag163
    SELECTF flag163 0.0 tmpf163 F.0

    JR_GTEQF F.0 VGV_L endwhile159
  whilebody159:
    MOVEF_F 1.5 VGV_K
    MOVEF_F 30.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF F.1 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    JR_LTF F.0 VGV_L whilebody159
  endwhile159:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB177:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB179:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB180:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB181:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB182:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB183:
    MOVEF_F 780.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB184:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB185:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB186:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB187:
    MOVEF_F 73.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB188:
    MOVEF_F 92.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB189:
    MOVEF_F 700.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB190:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB191:
    TIMER_READ timeMC2
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F VGV_W1 VGV_W
    JR_NEQF VGV_B 2.0 and195
    JR_EQF VGV_W 1.0 or194
  and195:
    JR_NEQF VGV_B 3.0 else193_1
    JR_NEQF VGV_W 4.0 else193_1
  or194:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB196:
    MOVEF_F 93.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB197:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB198:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB199:
    JR_NEQF VGV_B 2.0 else200_1
    MOVEF_F 310.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB201:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB202:
    MOVEF_F 7.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB203:
    MOVEF_F 600.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB204:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB205:
    JR endif200
  else200_1:
    MOVEF_F 190.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB206:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB207:
    MOVEF_F 7.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB208:
    MOVEF_F 250.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB209:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB210:
  else200_2:
  endif200:
    JR endif193
  else193_1:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB211:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB212:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB213:
    JR_EQF VGV_B 1.0 or215
    JR_NEQF VGV_W 2.0 else214_1
  or215:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB216:
    JR_NEQF VGV_W 2.0 else217_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB218:
  else217_1:
  endif217:
    JR_NEQF VGV_B 1.0 else219_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB220:
  else219_1:
  endif219:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB221:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB222:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds224
	MOVEF_32 300.0 milliseconds224
	DATA32 timer224
	TIMER_WAIT milliseconds224 timer224
	TIMER_READY timer224
    JR endif214
  else214_1:
    JR_EQF VGV_B 2.0 or225
    JR_NEQF VGV_W 1.0 else214_2
  or225:
    JR_NEQF VGV_B 2.0 else226_1
    MOVEF_F 5.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB227:
    WRITE32 ENDSUB_F_B2_0:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB228:
  else226_1:
  endif226:
    JR_NEQF VGV_W 1.0 else229_1
    WRITE32 ENDSUB_F_W1_0:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB230:
  else229_1:
  endif229:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB231:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB232:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds234
	MOVEF_32 300.0 milliseconds234
	DATA32 timer234
	TIMER_WAIT milliseconds234 timer234
	TIMER_READY timer234
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB235:
  else214_2:
  endif214:
    JR_EQF VGV_W 3.0 or237
    JR_NEQF VGV_B 4.0 else236_1
  or237:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds239
	MOVEF_32 300.0 milliseconds239
	DATA32 timer239
	TIMER_WAIT milliseconds239 timer239
	TIMER_READY timer239
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB240:
    JR_NEQF VGV_W 3.0 else241_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB242:
  else241_1:
  endif241:
    JR_NEQF VGV_B 4.0 else243_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB244:
  else243_1:
  endif243:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB245:
    JR endif236
  else236_1:
    JR_EQF VGV_W 4.0 or246
    JR_NEQF VGV_B 3.0 else236_2
  or246:
    MOVEF_F 505.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB247:
    JR_NEQF VGV_W 4.0 else248_1
    WRITE32 ENDSUB_F_W1_0:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB249:
  else248_1:
  endif248:
    JR_NEQF VGV_B 3.0 else250_1
    MOVEF_F 7.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB251:
    WRITE32 ENDSUB_F_B2_0:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB252:
  else250_1:
  endif250:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB253:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB254 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB254:
    JR endif236
  else236_2:
    MOVEF_F 400.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB255:
  else236_3:
  endif236:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB256:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB257:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB258:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB259:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB261:
  else193_2:
  endif193:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 39.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB263:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB264:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while267:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile267
  whilebody267:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody267
  endwhile267:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB279:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds281
	MOVEF_32 400.0 milliseconds281
	DATA32 timer281
	TIMER_WAIT milliseconds281 timer281
	TIMER_READY timer281
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds283
	MOVEF_32 700.0 milliseconds283
	DATA32 timer283
	TIMER_WAIT milliseconds283 timer283
	TIMER_READY timer283
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while286:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile286
  whilebody286:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody286
  endwhile286:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB302:
    MOVEF_F 67.0 VLV_DEG_4
    MOVEF_F 70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB303:
    MOVEF_F 310.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB304:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 105.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB306:
    MOVEF_F 570.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB307:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB308:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds310
	MOVEF_32 700.0 milliseconds310
	DATA32 timer310
	TIMER_WAIT milliseconds310 timer310
	TIMER_READY timer310
    STRINGS DUPLICATE 'AD' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB311:
    MOVEF_F 13.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB312:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB314:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB315:
    MOVEF_F 105.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB316:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB317:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB318:
    TIMER_READ timeMC2
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F VGV_W2 VGV_W
    JR_NEQF VGV_B 2.0 and322
    JR_EQF VGV_W 1.0 or321
  and322:
    JR_NEQF VGV_B 3.0 else320_1
    JR_NEQF VGV_W 4.0 else320_1
  or321:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB323:
    MOVEF_F 93.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB324:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB325:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB326:
    JR_NEQF VGV_B 2.0 else327_1
    MOVEF_F 180.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB328:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB329:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB330:
    MOVEF_F 20.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB331:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F -90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB332:
    MOVEF_F 120.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB333:
    JR endif327
  else327_1:
    JR_NEQF VGV_B 3.0 else327_2
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB334:
    WRITE32 ENDSUB_F_W1B2_0:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1B2_0
CALLSUB335:
    MOVEF_F 110.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB336:
  else327_2:
  endif327:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB337:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB338:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB339:
    JR endif320
  else320_1:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB340:
    MOVEF_F 87.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB341:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB342:
    JR_EQF VGV_W 2.0 or344
    JR_NEQF VGV_B 1.0 else343_1
  or344:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB345:
    JR_NEQF VGV_W 2.0 else346_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB347:
  else346_1:
  endif346:
    JR_NEQF VGV_B 1.0 else348_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB349:
  else348_1:
  endif348:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB350:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB351:
  else343_1:
  endif343:
    JR_EQF VGV_W 1.0 or353
    JR_NEQF VGV_B 2.0 else352_1
  or353:
    JR_NEQF VGV_W 1.0 else354_1
    WRITE32 ENDSUB_F_W1_0:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB355:
  else354_1:
  endif354:
    JR_NEQF VGV_B 2.0 else356_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB357:
  else356_1:
  endif356:
    MOVEF_F 57.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB358:
    MOVEF_F 87.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB359:
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB360:
  else352_1:
  endif352:
    JR_EQF VGV_W 3.0 or362
    JR_NEQF VGV_B 4.0 else361_1
  or362:
    MOVEF_F 290.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB363:
    JR_NEQF VGV_W 3.0 else364_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB365:
  else364_1:
  endif364:
    JR_NEQF VGV_B 4.0 else366_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB367:
  else366_1:
  endif366:
    MOVEF_F 170.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB368:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB369:
    MOVEF_F 89.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB370:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB371:
    JR endif361
  else361_1:
    JR_EQF VGV_W 4.0 or372
    JR_NEQF VGV_B 3.0 else361_2
  or372:
    MOVEF_F 490.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB373:
    JR_NEQF VGV_W 4.0 else374_1
    MOVEF_F 10.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB375:
    WRITE32 ENDSUB_F_W1_0:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB376:
  else374_1:
  endif374:
    JR_NEQF VGV_B 3.0 else377_1
    WRITE32 ENDSUB_F_B2_0:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB378:
  else377_1:
  endif377:
    JR endif361
  else361_2:
    MOVEF_F 400.0 VLV_MM_2
    MOVEF_F -80.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB379:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB380:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 70.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB381:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB382:
  else361_3:
  endif361:
  else320_2:
  endif320:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB384:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB385:
    CALL MOTOR.RESETCOUNT 'BC'
  while387:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 55.0 endwhile387
  whilebody387:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 55.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 55.0 whilebody387
  endwhile387:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB399:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB400:
    MOVEF_F -50.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB401:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB402:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB403:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB404:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB405:
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB406:
    CALL MOTOR.START 'AD' 20.0
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB408:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB409:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -50.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB412:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB414:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB415:
    MOVEF_F -40.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB416:
    MOVEF_F 30.0 VLV_SP_8
    WRITE32 ENDSUB_F_LEFT_1:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT_1
CALLSUB417:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf421
    DATA8 flag421
    DIVF VGV_TIME 1000.0 tmpf421
    CP_EQF 0.0 1000.0 flag421
    SELECTF flag421 0.0 tmpf421 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf424
    DATA8 flag424
    DIVF VGV_ZONE1 1000.0 tmpf424
    CP_EQF 0.0 1000.0 flag424
    SELECTF flag424 0.0 tmpf424 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf427
    DATA8 flag427
    DIVF VGV_ZONE2 1000.0 tmpf427
    CP_EQF 0.0 1000.0 flag427
    SELECTF flag427 0.0 tmpf427 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB430 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB430:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf435
    DATA8 flag435
    DIVF F.0 F.1 tmpf435
    CP_EQF 0.0 F.1 flag435
    SELECTF flag435 0.0 tmpf435 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf440
    DATA8 flag440
    DIVF F.0 F.1 tmpf440
    CP_EQF 0.0 F.1 flag440
    SELECTF flag440 0.0 tmpf440 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE_FOL_0:
    WRITE32 ENDSUB_F_SEN1_0:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN1_0
CALLSUB441:
    WRITE32 ENDSUB_F_SEN2_0:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN2_0
CALLSUB442:
    SUBF VGV_S1 VGV_S2 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE_FOL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_FOL_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.3 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.3 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds467
	MOVEF_32 500.0 milliseconds467
	DATA32 timer467
	TIMER_WAIT milliseconds467 timer467
	TIMER_READY timer467
  while468:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf472
    DATA8 flag472
    DIVF F.1 2.0 tmpf472
    CP_EQF 0.0 2.0 flag472
    SELECTF flag472 0.0 tmpf472 F.0

    JR_LTEQF F.0 35.0 endwhile468
  whilebody468:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf476
    DATA8 flag476
    DIVF F.1 2.0 tmpf476
    CP_EQF 0.0 2.0 flag476
    SELECTF flag476 0.0 tmpf476 F.0

    JR_GTF F.0 35.0 whilebody468
  endwhile468:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -20.0 0.0 22.0 0.0 'true' 

	DATA8 layer478
	DATA8 nos478
	DATA8 busy478
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer478 nos478
	JR_EQ8 0 nos478 motornotbusy478
  motorwaiting478:
	OUTPUT_TEST layer478 nos478 busy478
	JR_EQ8 busy478 0 motornotbusy478
	SLEEP
	JR motorwaiting478
  motornotbusy478:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else491_1
    JR_LTEQF VGV_R VGV_B else491_1
    MOVEF_F VGV_R VGV_MAX
    JR endif491
  else491_1:
    JR_LTEQF VGV_G VGV_R else491_2
    JR_LTEQF VGV_G VGV_B else491_2
    MOVEF_F VGV_G VGV_MAX
    JR endif491
  else491_2:
    JR_LTEQF VGV_B VGV_R else491_3
    JR_LTEQF VGV_B VGV_G else491_3
    MOVEF_F VGV_B VGV_MAX
  else491_3:
  endif491:
    JR_GTEQF VGV_R VGV_G else492_1
    JR_GTEQF VGV_R VGV_B else492_1
    MOVEF_F VGV_R VGV_MIN
    JR endif492
  else492_1:
    JR_GTEQF VGV_G VGV_R else492_2
    JR_GTEQF VGV_G VGV_B else492_2
    MOVEF_F VGV_G VGV_MIN
    JR endif492
  else492_2:
    JR_GTEQF VGV_B VGV_R else492_3
    JR_GTEQF VGV_B VGV_G else492_3
    MOVEF_F VGV_B VGV_MIN
  else492_3:
  endif492:
    JR_NEQF VGV_MAX VGV_MIN else493_1
    MOVEF_F 0.0 VGV_H
    JR endif493
  else493_1:
    JR_NEQF VGV_R VGV_MAX else494_1
    JR_LTF VGV_G VGV_B else495_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf499
    DATA8 flag499
    DIVF F.0 F.1 tmpf499
    CP_EQF 0.0 F.1 flag499
    SELECTF flag499 0.0 tmpf499 VGV_H

    JR endif495
  else495_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf503
    DATA8 flag503
    DIVF F.1 F.2 tmpf503
    CP_EQF 0.0 F.2 flag503
    SELECTF flag503 0.0 tmpf503 F.0

    ADDF F.0 360.0 VGV_H
  else495_2:
  endif495:
    JR endif494
  else494_1:
    JR_NEQF VGV_MAX VGV_G else505_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf509
    DATA8 flag509
    DIVF F.1 F.2 tmpf509
    CP_EQF 0.0 F.2 flag509
    SELECTF flag509 0.0 tmpf509 F.0

    ADDF F.0 120.0 VGV_H
    JR endif505
  else505_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf514
    DATA8 flag514
    DIVF F.1 F.2 tmpf514
    CP_EQF 0.0 F.2 flag514
    SELECTF flag514 0.0 tmpf514 F.0

    ADDF F.0 240.0 VGV_H
  else505_2:
  endif505:
  else494_2:
  endif494:
  else493_2:
  endif493:
    JR_NEQF VGV_MAX 0.0 else516_1
    MOVEF_F 0.0 VGV_S
    JR endif516
  else516_1:
    DATAF tmpf517
    DATA8 flag517
    DIVF VGV_MIN VGV_MAX tmpf517
    CP_EQF 0.0 VGV_MAX flag517
    SELECTF flag517 0.0 tmpf517 VGV_S

  else516_2:
  endif516:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_COL3_0:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB519:
    JR_LTF VGV_NUM 2.0 else520_1
    JR_GTF VGV_NUM 3.0 else520_1
    MOVEF_F 2.0 VGV_COL
    JR endif520
  else520_1:
    JR_NEQF VGV_NUM 4.0 else520_2
    MOVEF_F 3.0 VGV_COL
    JR endif520
  else520_2:
    JR_LTF VGV_NUM 5.0 else520_3
    JR_GTF VGV_NUM 6.0 else520_3
    MOVEF_F 4.0 VGV_COL
    JR endif520
  else520_3:
    JR_LTF VGV_NUM 7.0 else520_4
    JR_GTF VGV_NUM 9.0 else520_4
    MOVEF_F 5.0 VGV_COL
  else520_4:
  endif520:
RETSUB_F_COL3_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_COL3_0:
SUB_F_W1B2_0:
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB521:
    MOVEF_F 15.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB522:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else524_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB526:
  else524_1:
  endif524:
    MOVEF_F 65.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB527:
    MOVEF_F 180.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB528:
    JR_NEQF VGV_B 2.0 else529_1
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else529_1
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB531:
    JR endif529
  else529_1:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB532:
  else529_2:
  endif529:
    MOVEF_F 86.0 VLV_DEG_4
    MOVEF_F -50.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB533:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else534_1
    MOVEF_F 75.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB536:
    JR endif534
  else534_1:
    MOVEF_F 90.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB537:
  else534_2:
  endif534:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else539_1
    DATA32 milliseconds541
	MOVEF_32 500.0 milliseconds541
	DATA32 timer541
	TIMER_WAIT milliseconds541 timer541
	TIMER_READY timer541
  else539_1:
  endif539:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 10.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB542:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB543:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else544_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB546:
  else544_1:
  endif544:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB547:
    MOVEF_F 102.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB548:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB549:
RETSUB_F_W1B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1B2_0:
SUB_F_W1_0:
    MOVEF_F 50.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB550:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else551_1
    MOVEF_F 57.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB553:
    JR endif551
  else551_1:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB554:
  else551_2:
  endif551:
    MOVEF_F 255.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB555:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB556:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -50.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB557:
    JR_NEQF VGV_W 1.0 else558_1
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else559_1
    MOVEF_F 45.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB561:
    JR endif559
  else559_1:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB562:
  else559_2:
  endif559:
    JR endif558
  else558_1:
    MOVEF_F 5.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB563:
  else558_2:
  endif558:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB565:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB566 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB566:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else568_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB570 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB570:
  else568_1:
  endif568:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB571:
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 25.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB572:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB573:
    JR_NEQF VGV_W 1.0 else574_1
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB575:
    JR endif574
  else574_1:
    MOVEF_F 250.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB576:
  else574_2:
  endif574:
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB577:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else578_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB580:
  else578_1:
  endif578:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB581:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB582:
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else584_1
    DATA32 milliseconds586
	MOVEF_32 1000.0 milliseconds586
	DATA32 timer586
	TIMER_WAIT milliseconds586 timer586
	TIMER_READY timer586
  else584_1:
  endif584:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB587:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else588_1
    JR_NEQF VGV_W 3.0 else590_1
    MOVEF_F 28.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB591:
    JR endif590
  else590_1:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB592:
  else590_2:
  endif590:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB594:
  else588_1:
  endif588:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB596:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB597:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else599_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB601:
  else599_1:
  endif599:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    MOVEF_F 50.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB602:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB603:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB604:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB605:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB606:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB608:
    MOVEF_F 15.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB609:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else611_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB613:
  else611_1:
  endif611:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB614:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB615:
    JR_NEQF VGV_B 3.0 else616_1
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB617:
    JR endif616
  else616_1:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB618:
  else616_2:
  endif616:
    MOVEF_F 105.0 VLV_DEG_3
    MOVEF_F -60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB619:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else620_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB622:
  else620_1:
  endif620:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB623:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB624:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf627
    DATA8 flag627
    DIVF VLV_MM_2 F.1 tmpf627
    CP_EQF 0.0 F.1 flag627
    SELECTF flag627 0.0 tmpf627 F.0

    MULF F.0 360.0 VLV_L_2
    JR_GTEQF VLV_V_2 0.0 else629_1
    MOVEF_F -3.0 VLV_SP_2
    JR endif629
  else629_1:
    MOVEF_F 3.0 VLV_SP_2
  else629_2:
  endif629:
    MOVEF_F 0.0 VLV_DEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while631:
    JR_GTEQF VLV_DEG_2 VLV_L_2 endwhile631
  whilebody631:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf636
    DATA8 flag636
    DIVF F.0 2.0 tmpf636
    CP_EQF 0.0 2.0 flag636
    SELECTF flag636 0.0 tmpf636 VLV_DEG_2

    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else637_1
    MATH ABS VLV_SP_2 F.0
    JR_LTEQF F.0 20.0 else637_1
    JR_LTEQF VLV_V_2 0.0 else640_1
    SUBF VLV_SP_2 0.3 VLV_SP_2
    JR endif640
  else640_1:
    ADDF VLV_SP_2 0.3 VLV_SP_2
  else640_2:
  endif640:
    JR endif637
  else637_1:
    MATH ABS VLV_SP_2 F.0
    MATH ABS VLV_V_2 F.1
    JR_GTEQF F.0 F.1 else637_2
    JR_LTEQF VLV_V_2 0.0 else645_1
    ADDF VLV_SP_2 0.3 VLV_SP_2
    JR endif645
  else645_1:
    SUBF VLV_SP_2 0.3 VLV_SP_2
  else645_2:
  endif645:
  else637_2:
  endif637:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_2
    MULF VLV_U_2 2.0 F.1
    ADDF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_2 2.0 F.1
    SUBF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_2 VLV_L_2 whilebody631
  endwhile631:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf658
    DATA8 flag658
    DIVF F.0 360.0 tmpf658
    CP_EQF 0.0 360.0 flag658
    SELECTF flag658 0.0 tmpf658 VLV_L_3

    DATAF tmpf659
    DATA8 flag659
    DIVF VLV_L_3 210.38 tmpf659
    CP_EQF 0.0 210.38 flag659
    SELECTF flag659 0.0 tmpf659 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while662:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile662
  whilebody662:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'B' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or667
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else666_1
  or667:
    JR_GTEQF VLV_SP_3 0.0 else670_1
    MOVEF_F -30.0 VLV_V_3
    JR endif670
  else670_1:
    MOVEF_F 30.0 VLV_V_3
  else670_2:
  endif670:
    JR endif666
  else666_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else666_2:
  endif666:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody662
  endwhile662:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_4 F.0
    DATAF tmpf674
    DATA8 flag674
    DIVF F.0 360.0 tmpf674
    CP_EQF 0.0 360.0 flag674
    SELECTF flag674 0.0 tmpf674 VLV_L_4

    DATAF tmpf675
    DATA8 flag675
    DIVF VLV_L_4 210.38 tmpf675
    CP_EQF 0.0 210.38 flag675
    SELECTF flag675 0.0 tmpf675 F.0

    MULF F.0 360.0 VLV_L_4
    MOVEF_F 30.0 VLV_V_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_4
  while678:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile678
  whilebody678:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_4
    CALL MOTOR.STARTPOWER 'C' VLV_V_4
    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or683
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else682_1
  or683:
    JR_GTEQF VLV_SP_4 0.0 else686_1
    MOVEF_F -30.0 VLV_V_4
    JR endif686
  else686_1:
    MOVEF_F 30.0 VLV_V_4
  else686_2:
  endif686:
    JR endif682
  else682_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else682_2:
  endif682:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody678
  endwhile678:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf693
    DATA8 flag693
    DIVF F.0 360.0 tmpf693
    CP_EQF 0.0 360.0 flag693
    SELECTF flag693 0.0 tmpf693 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf696
    DATA8 flag696
    DIVF VLV_L_5 F.2 tmpf696
    CP_EQF 0.0 F.2 flag696
    SELECTF flag696 0.0 tmpf696 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf698
    DATA8 flag698
    DIVF F.0 2.0 tmpf698
    CP_EQF 0.0 2.0 flag698
    SELECTF flag698 0.0 tmpf698 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while700:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile700
  whilebody700:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf706
    DATA8 flag706
    DIVF F.0 2.0 tmpf706
    CP_EQF 0.0 2.0 flag706
    SELECTF flag706 0.0 tmpf706 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or708
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else707_1
  or708:
    MOVEF_F 30.0 VLV_V_5
    JR endif707
  else707_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else707_2:
  endif707:
    CALL MOTOR.STARTPOWER 'B' VLV_V_5
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody700
  endwhile700:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_6 F.0
    DATAF tmpf719
    DATA8 flag719
    DIVF F.0 360.0 tmpf719
    CP_EQF 0.0 360.0 flag719
    SELECTF flag719 0.0 tmpf719 VLV_L_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf722
    DATA8 flag722
    DIVF VLV_L_6 F.2 tmpf722
    CP_EQF 0.0 F.2 flag722
    SELECTF flag722 0.0 tmpf722 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf724
    DATA8 flag724
    DIVF F.0 2.0 tmpf724
    CP_EQF 0.0 2.0 flag724
    SELECTF flag724 0.0 tmpf724 VLV_L_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_6
    MOVEF_F 0.0 VLV_DEG_6
  while726:
    JR_GTF VLV_DEG_6 VLV_L_6 endwhile726
  whilebody726:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf732
    DATA8 flag732
    DIVF F.0 2.0 tmpf732
    CP_EQF 0.0 2.0 flag732
    SELECTF flag732 0.0 tmpf732 VLV_DEG_6

    MULF VLV_L_6 0.2 F.0
    JR_LTF VLV_DEG_6 F.0 or734
    MULF VLV_L_6 0.8 F.0
    JR_LTEQF VLV_DEG_6 F.0 else733_1
  or734:
    MOVEF_F 30.0 VLV_V_6
    JR endif733
  else733_1:
    MOVEF_F VLV_SP_6 VLV_V_6
  else733_2:
  endif733:
    SUBF 0.0 VLV_V_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_6
    JR_LTEQF VLV_DEG_6 VLV_L_6 whilebody726
  endwhile726:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_LEFT_1:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F VLV_SP_8 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB741 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB741:
    MOVEF_F 50.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB742:
    SUBF 0.0 VLV_SP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VLV_SP_8
  while746:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile746
  whilebody746:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody746
  endwhile746:
  while749:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile749
  whilebody749:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody749
  endwhile749:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB753:
RETSUB_F_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT_1:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while756:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or757
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile756
  or757:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile756
  whilebody756:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or777
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and776
  or777:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody756
  and776:
  endwhile756:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while789:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or790
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile789
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile789
  or790:
  whilebody789:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody789
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and813
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody789
  and813:
  endwhile789:
    JR_GTEQF VLV_SP_10 0.0 else819_1
    MOVEF_F -70.0 VLV_SP_10
    JR endif819
  else819_1:
    MOVEF_F 70.0 VLV_SP_10
  else819_2:
  endif819:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_10
    DATA32 milliseconds821
	MOVEF_32 300.0 milliseconds821
	DATA32 timer821
	TIMER_WAIT milliseconds821 timer821
	TIMER_READY timer821
    DATA32 tmp822
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp822
    JR_NEQ32 0 tmp822 alreadylaunched822
    OBJECT_START TF_BEEP_0
  alreadylaunched822:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_11
    DATA8 layer824
	DATA8 no824
	DATA8 mode8824
	
	MOVEF_8 2.0 no824
	SUB8 no824 1 no824
	DIV8 no824 4 layer824
	MATH MOD8 no824 4 no824

	MOVEF_8 2.0 mode8824
	
	INPUT_DEVICE READY_RAW layer824 no824 0 mode8824 0
    DATA8 layer825
	DATA8 no825
	DATA8 mode8825
	
	MOVEF_8 3.0 no825
	SUB8 no825 1 no825
	DIV8 no825 4 layer825
	MATH MOD8 no825 4 no825

	MOVEF_8 2.0 mode8825
	
	INPUT_DEVICE READY_RAW layer825 no825 0 mode8825 0
  while826:
    JR_EQF VLV_WHITE_11 1.0 endwhile826
  whilebody826:
    CALL MOTOR.RESETCOUNT 'BC'
  while828:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or829
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile828
  or829:
  whilebody828:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody828
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody828
  endwhile828:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_11
  while844:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_11 endwhile844
  whilebody844:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_11 whilebody844
  endwhile844:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else858_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else858_1
    MOVEF_F 1.0 VLV_WHITE_11
  else858_1:
  endif858:
    JR_NEQF VLV_WHITE_11 1.0 whilebody826
  endwhile826:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer862
	DATA8 no862
	DATA8 mode8862
	
	MOVEF_8 2.0 no862
	SUB8 no862 1 no862
	DIV8 no862 4 layer862
	MATH MOD8 no862 4 no862

	MOVEF_8 0.0 mode8862
	
	INPUT_DEVICE READY_RAW layer862 no862 0 mode8862 0
    DATA8 layer863
	DATA8 no863
	DATA8 mode8863
	
	MOVEF_8 3.0 no863
	SUB8 no863 1 no863
	DIV8 no863 4 layer863
	MATH MOD8 no863 4 no863

	MOVEF_8 0.0 mode8863
	
	INPUT_DEVICE READY_RAW layer863 no863 0 mode8863 0
  while864:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile864
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile864
  whilebody864:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and876
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody864
  and876:
  endwhile864:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds883
	MOVEF_32 500.0 milliseconds883
	DATA32 timer883
	TIMER_WAIT milliseconds883 timer883
	TIMER_READY timer883
  while884:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf888
    DATA8 flag888
    DIVF F.1 2.0 tmpf888
    CP_EQF 0.0 2.0 flag888
    SELECTF flag888 0.0 tmpf888 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile884
  whilebody884:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf894
    DATA8 flag894
    DIVF F.1 2.0 tmpf894
    CP_EQF 0.0 2.0 flag894
    SELECTF flag894 0.0 tmpf894 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody884
  endwhile884:
    CALL MOTOR.STOP VLV_MOTOR_12 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_13 VLV_SP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds899
	MOVEF_32 500.0 milliseconds899
	DATA32 timer899
	TIMER_WAIT milliseconds899 timer899
	TIMER_READY timer899
  while900:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf904
    DATA8 flag904
    DIVF F.1 2.0 tmpf904
    CP_EQF 0.0 2.0 flag904
    SELECTF flag904 0.0 tmpf904 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile900
  whilebody900:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf909
    DATA8 flag909
    DIVF F.1 2.0 tmpf909
    CP_EQF 0.0 2.0 flag909
    SELECTF flag909 0.0 tmpf909 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody900
  endwhile900:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE VLV_MOTOR_13 -20.0 0.0 22.0 0.0 'true' 

	DATA8 layer912
	DATA8 nos912
	DATA8 busy912
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_13 layer912 nos912
	JR_EQ8 0 nos912 motornotbusy912
  motorwaiting912:
	OUTPUT_TEST layer912 nos912 busy912
	JR_EQ8 busy912 0 motornotbusy912
	SLEEP
	JR motorwaiting912
  motornotbusy912:
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
