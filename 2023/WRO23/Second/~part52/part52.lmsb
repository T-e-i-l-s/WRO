DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAF VLV_MM_1
DATAF VLV_V_1
DATAF VLV_DEG_2
DATAF VLV_SP_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAS VLV_MOTOR_11 252
DATAF VLV_SP_11
DATAF VLV_SP_9
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_SP_10
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_Z1
DATAF VGV_Z2
DATAF VGV_SUM
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_1
DATAF VLV_SP_1
DATAF VLV_DEG_1
DATAF VLV_U_1
DATAF VLV_L_2
DATAF VLV_V_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_U_9
DATAF VLV_WHITE_10
DATAF VLV_U_10
DATAF VLV_L_10
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_1
    MOVEF_F 0.0 VLV_SP_1
    MOVEF_F 0.0 VLV_DEG_1
    MOVEF_F 0.0 VLV_U_1
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_U_9
    MOVEF_F 0.0 VLV_WHITE_10
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_L_10
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch875
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch875:
    JR_NEQ32 SUBPROGRAM 1 dispatch876
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch876:
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    MOVEF_F 0.0 VLV_MM_1
    MOVEF_F 0.0 VLV_V_1
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_SP_11
    MOVEF_F 0.0 VLV_SP_9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_SP_10
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    MOVEF_F 0.0 VGV_SUM
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 180.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB8:
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB9:
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp11
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp11
    JR_NEQ32 0 tmp11 alreadylaunched11
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched11:
    MOVEF_F 15.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB12:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB13:
    CALL MOTOR.RESETCOUNT 'BC'
  while15:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile15
  whilebody15:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody15
  endwhile15:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while28:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf32
    DATA8 flag32
    DIVF F.1 2.0 tmpf32
    CP_EQF 0.0 2.0 flag32
    SELECTF flag32 0.0 tmpf32 F.0

    JR_GTEQF F.0 VGV_L endwhile28
  whilebody28:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB33:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf37
    DATA8 flag37
    DIVF F.1 2.0 tmpf37
    CP_EQF 0.0 2.0 flag37
    SELECTF flag37 0.0 tmpf37 F.0

    JR_LTF F.0 VGV_L whilebody28
  endwhile28:
    CALL MOTOR.RESETCOUNT 'BC'
  while39:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or40
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile39
  or40:
  whilebody39:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody39
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody39
  endwhile39:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while56:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf60
    DATA8 flag60
    DIVF F.1 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 F.0

    JR_GTEQF F.0 VGV_L endwhile56
  whilebody56:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB61 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB61:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf65
    DATA8 flag65
    DIVF F.1 2.0 tmpf65
    CP_EQF 0.0 2.0 flag65
    SELECTF flag65 0.0 tmpf65 F.0

    JR_LTF F.0 VGV_L whilebody56
  endwhile56:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while67:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf71
    DATA8 flag71
    DIVF F.1 2.0 tmpf71
    CP_EQF 0.0 2.0 flag71
    SELECTF flag71 0.0 tmpf71 F.0

    JR_GTEQF F.0 VGV_L endwhile67
  whilebody67:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB72:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf76
    DATA8 flag76
    DIVF F.1 2.0 tmpf76
    CP_EQF 0.0 2.0 flag76
    SELECTF flag76 0.0 tmpf76 F.0

    JR_LTF F.0 VGV_L whilebody67
  endwhile67:
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for78:
    JR_GTF VGV_I 3.0 endfor78
  forbody78:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB79:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while82:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf86
    DATA8 flag86
    DIVF F.1 2.0 tmpf86
    CP_EQF 0.0 2.0 flag86
    SELECTF flag86 0.0 tmpf86 F.0

    JR_GTEQF F.0 VGV_L endwhile82
  whilebody82:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB87:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf91
    DATA8 flag91
    DIVF F.1 2.0 tmpf91
    CP_EQF 0.0 2.0 flag91
    SELECTF flag91 0.0 tmpf91 F.0

    JR_LTF F.0 VGV_L whilebody82
  endwhile82:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody78
  endfor78:
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for94:
    JR_GTF VGV_I 3.0 endfor94
  forbody94:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else98_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif98
  else98_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else98_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else98_2:
  endif98:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody94
  endfor94:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while101:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf105
    DATA8 flag105
    DIVF F.1 2.0 tmpf105
    CP_EQF 0.0 2.0 flag105
    SELECTF flag105 0.0 tmpf105 F.0

    JR_GTEQF F.0 VGV_L endwhile101
  whilebody101:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB106 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB106:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf110
    DATA8 flag110
    DIVF F.1 2.0 tmpf110
    CP_EQF 0.0 2.0 flag110
    SELECTF flag110 0.0 tmpf110 F.0

    JR_LTF F.0 VGV_L whilebody101
  endwhile101:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for111:
    JR_GTF VGV_I 3.0 endfor111
  forbody111:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB112 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB112:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
    JR_GTEQF VGV_I 2.0 else114_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while116:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf120
    DATA8 flag120
    DIVF F.1 2.0 tmpf120
    CP_EQF 0.0 2.0 flag120
    SELECTF flag120 0.0 tmpf120 F.0

    JR_GTEQF F.0 VGV_L endwhile116
  whilebody116:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB121:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf125
    DATA8 flag125
    DIVF F.1 2.0 tmpf125
    CP_EQF 0.0 2.0 flag125
    SELECTF flag125 0.0 tmpf125 F.0

    JR_LTF F.0 VGV_L whilebody116
  endwhile116:
    JR endif114
  else114_1:
    JR_NEQF VGV_I 2.0 else114_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while127:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf131
    DATA8 flag131
    DIVF F.1 2.0 tmpf131
    CP_EQF 0.0 2.0 flag131
    SELECTF flag131 0.0 tmpf131 F.0

    JR_GTEQF F.0 VGV_L endwhile127
  whilebody127:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB132 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB132:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf136
    DATA8 flag136
    DIVF F.1 2.0 tmpf136
    CP_EQF 0.0 2.0 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    JR_LTF F.0 VGV_L whilebody127
  endwhile127:
  else114_2:
  endif114:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody111
  endfor111:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB138:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for141:
    JR_GTF VGV_I 3.0 endfor141
  forbody141:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else145_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif145
  else145_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else145_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else145_2:
  endif145:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody141
  endfor141:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B1 VGV_W1 VGV_Z1
    ADDF VGV_B2 VGV_W2 VGV_Z2
    SUBF 20.0 VGV_B1 F.2
    SUBF F.2 VGV_B2 F.1
    SUBF F.1 VGV_W1 F.0
    SUBF F.0 VGV_W2 VGV_SUM
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_2
    MOVEF_F 40.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB166:
    MOVEF_F 35.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB167:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 203.410725292788 VGV_L
  while169:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf173
    DATA8 flag173
    DIVF F.1 2.0 tmpf173
    CP_EQF 0.0 2.0 flag173
    SELECTF flag173 0.0 tmpf173 F.0

    JR_GTEQF F.0 VGV_L endwhile169
  whilebody169:
    MOVEF_F 2.0 VGV_K
    MOVEF_F 20.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf186
    DATA8 flag186
    DIVF F.1 2.0 tmpf186
    CP_EQF 0.0 2.0 flag186
    SELECTF flag186 0.0 tmpf186 F.0

    JR_LTF F.0 VGV_L whilebody169
  endwhile169:
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB187:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB189:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB190:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB191:
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB192:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB193:
    MOVEF_F 780.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB194:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB195:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB196:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB197:
    MOVEF_F 90.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB198:
    MOVEF_F 91.0 VLV_DEG_5
    MOVEF_F 20.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB199:
    MOVEF_F 970.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB200:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 900.0 'true'

	DATA8 layer201
	DATA8 nos201
	DATA8 busy201
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer201 nos201
	JR_EQ8 0 nos201 motornotbusy201
  motorwaiting201:
	OUTPUT_TEST layer201 nos201 busy201
	JR_EQ8 busy201 0 motornotbusy201
	SLEEP
	JR motorwaiting201
  motornotbusy201:
    MOVEF_F 630.0 VLV_MM_1
    MOVEF_F 70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB202:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB203:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB204:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 900.0 'true'

	DATA8 layer205
	DATA8 nos205
	DATA8 busy205
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer205 nos205
	JR_EQ8 0 nos205 motornotbusy205
  motorwaiting205:
	OUTPUT_TEST layer205 nos205 busy205
	JR_EQ8 busy205 0 motornotbusy205
	SLEEP
	JR motorwaiting205
  motornotbusy205:
    MOVEF_F 320.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB206:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB207:
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB208:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB209:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 106.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB211:
    MOVEF_F 84.5 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB212:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB213:
    JR_EQF VGV_B 1.0 or215
    JR_NEQF VGV_W 2.0 else214_1
  or215:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB216:
    JR_NEQF VGV_W 2.0 else217_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB218:
  else217_1:
  endif217:
    JR_NEQF VGV_B 1.0 else219_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB220:
  else219_1:
  endif219:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB221:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB222:
    JR endif214
  else214_1:
    JR_EQF VGV_B 2.0 or223
    JR_NEQF VGV_W 1.0 else214_2
  or223:
    JR_NEQF VGV_B 2.0 else224_1
    JR_NEQF VGV_W 1.0 else224_1
    MOVEF_F 1.0 VGV_W1B2
  else224_1:
  endif224:
    JR_NEQF VGV_W 1.0 else225_1
    MOVEF_F 365.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB226:
    WRITE32 ENDSUB_F_W1_0:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB227:
  else225_1:
  endif225:
    JR_NEQF VGV_B 2.0 else228_1
    JR_EQF VGV_W 1.0 else228_1
    MOVEF_F 185.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB229:
    WRITE32 ENDSUB_F_B2_0:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB230:
  else228_1:
  endif228:
    JR_NEQF VGV_B 2.0 or232
    JR_EQF VGV_W 1.0 else231_1
  or232:
    MOVEF_F 106.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB233:
    MOVEF_F 84.5 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB234:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB235:
    JR endif231
  else231_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB236:
  else231_2:
  endif231:
  else214_2:
  endif214:
    JR_EQF VGV_B 4.0 or238
    JR_NEQF VGV_W 3.0 else237_1
  or238:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB239:
    JR_NEQF VGV_W 3.0 else240_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB241:
  else240_1:
  endif240:
    JR_NEQF VGV_B 4.0 else242_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB243:
  else242_1:
  endif242:
    JR endif237
  else237_1:
    JR_EQF VGV_B 3.0 or244
    JR_NEQF VGV_W 4.0 else237_2
  or244:
    JR_NEQF VGV_B 3.0 else245_1
    JR_NEQF VGV_W 4.0 else245_1
    MOVEF_F 1.0 VGV_W1B2
  else245_1:
  endif245:
    JR_NEQF VGV_W 4.0 else246_1
    MOVEF_F 118.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB247:
    WRITE32 ENDSUB_F_W1_0:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB248:
  else246_1:
  endif246:
    JR_NEQF VGV_B 3.0 else249_1
    JR_EQF VGV_W 4.0 else249_1
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB250:
    WRITE32 ENDSUB_F_B2_0:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB251:
  else249_1:
  endif249:
    JR endif237
  else237_2:
    JR_NEQF VGV_B 2.0 or252
    JR_EQF VGV_W 1.0 else237_3
  or252:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB253:
  else237_3:
  endif237:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else255_1
    JR_EQF VGV_W 4.0 else255_1
    JR_NEQF VGV_B 2.0 or256
    JR_EQF VGV_W 1.0 else255_1
  or256:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB257:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB258:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB259:
    MOVEF_F 93.0 VLV_DEG_2
    MOVEF_F -70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB260:
  else255_1:
  endif255:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB262:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB263:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB264:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB265:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while268:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile268
  whilebody268:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody268
  endwhile268:
    MOVEF_F 10.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB280:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds282
	MOVEF_32 800.0 milliseconds282
	DATA32 timer282
	TIMER_WAIT milliseconds282 timer282
	TIMER_READY timer282
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds284
	MOVEF_32 800.0 milliseconds284
	DATA32 timer284
	TIMER_WAIT milliseconds284 timer284
	TIMER_READY timer284
    CALL MOTOR.SCHEDULE 'D' -20.0 0.0 1.0 0.0 'true' 

	DATA8 layer285
	DATA8 nos285
	DATA8 busy285
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer285 nos285
	JR_EQ8 0 nos285 motornotbusy285
  motorwaiting285:
	OUTPUT_TEST layer285 nos285 busy285
	JR_EQ8 busy285 0 motornotbusy285
	SLEEP
	JR motorwaiting285
  motornotbusy285:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB286 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB286:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    DATA32 milliseconds289
	MOVEF_32 300.0 milliseconds289
	DATA32 timer289
	TIMER_WAIT milliseconds289 timer289
	TIMER_READY timer289
    MOVEF_F 60.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB290:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_2
    MOVEF_F 70.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB292:
    MOVEF_F 72.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB293:
    MOVEF_F 310.0 VLV_MM_1
    MOVEF_F 95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB294:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB295:
    MOVEF_F 570.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB296:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB297:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds299
	MOVEF_32 700.0 milliseconds299
	DATA32 timer299
	TIMER_WAIT milliseconds299 timer299
	TIMER_READY timer299
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB300:
    MOVEF_F 11.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB301:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB303:
    MOVEF_F 130.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB304:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB305:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB306:
    MOVEF_F -40.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB307:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB309:
    MOVEF_F 85.6 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB310:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB311:
    JR_EQF VGV_B 1.0 or313
    JR_NEQF VGV_W 2.0 else312_1
  or313:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB314:
    JR_NEQF VGV_W 2.0 else315_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB316:
  else315_1:
  endif315:
    JR_NEQF VGV_B 1.0 else317_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB318:
  else317_1:
  endif317:
    MOVEF_F 50.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB319:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB320:
    JR endif312
  else312_1:
    JR_EQF VGV_B 2.0 or321
    JR_NEQF VGV_W 1.0 else312_2
  or321:
    JR_NEQF VGV_B 2.0 else322_1
    JR_NEQF VGV_W 1.0 else322_1
    MOVEF_F 1.0 VGV_W1B2
  else322_1:
  endif322:
    JR_NEQF VGV_W 1.0 else323_1
    MOVEF_F 455.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB324:
    WRITE32 ENDSUB_F_W1_0:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB325:
  else323_1:
  endif323:
    JR_NEQF VGV_B 2.0 else326_1
    JR_EQF VGV_W 1.0 else326_1
    MOVEF_F 280.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB327:
    WRITE32 ENDSUB_F_B2_0:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB328:
  else326_1:
  endif326:
    JR_NEQF VGV_B 2.0 or330
    JR_EQF VGV_W 1.0 else329_1
  or330:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB331:
    MOVEF_F 85.6 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB332:
    MOVEF_F 30.0 VLV_SP_10
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB333:
    JR endif329
  else329_1:
    MOVEF_F 500.0 VLV_MM_1
    MOVEF_F -80.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB334:
  else329_2:
  endif329:
  else312_2:
  endif312:
    JR_EQF VGV_B 4.0 or336
    JR_NEQF VGV_W 3.0 else335_1
  or336:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB337:
    JR_NEQF VGV_W 3.0 else338_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB339:
  else338_1:
  endif338:
    JR_NEQF VGV_B 4.0 else340_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB341:
  else340_1:
  endif340:
    JR endif335
  else335_1:
    JR_EQF VGV_B 3.0 or342
    JR_NEQF VGV_W 4.0 else335_2
  or342:
    JR_NEQF VGV_B 3.0 else343_1
    JR_NEQF VGV_W 4.0 else343_1
    MOVEF_F 1.0 VGV_W1B2
  else343_1:
  endif343:
    JR_NEQF VGV_W 4.0 else344_1
    MOVEF_F 45.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB345:
    WRITE32 ENDSUB_F_W1_0:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB346:
  else344_1:
  endif344:
    JR_NEQF VGV_B 3.0 else347_1
    JR_EQF VGV_W 4.0 else347_1
    MOVEF_F 227.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB348:
    WRITE32 ENDSUB_F_B2_0:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB349:
  else347_1:
  endif347:
    JR endif335
  else335_2:
    JR_NEQF VGV_B 2.0 or350
    JR_EQF VGV_W 1.0 else335_3
  or350:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB351:
  else335_3:
  endif335:
    JR_EQF VGV_B 3.0 else352_1
    JR_EQF VGV_W 4.0 else352_1
    JR_NEQF VGV_B 2.0 or353
    JR_EQF VGV_W 1.0 else352_1
  or353:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB354:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB355:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB356:
    JR endif352
  else352_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB357:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB358:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB359:
  else352_2:
  endif352:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB360:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB362:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB363 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB363:
    CALL MOTOR.RESETCOUNT 'BC'
  while365:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 58.0 endwhile365
  whilebody365:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 58.0 whilebody365
  endwhile365:
    MOVEF_F 40.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB377:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB378:
    MOVEF_F -50.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB379:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB380:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB381:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB382:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 85.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB384:
    MOVEF_F -35.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB385:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB386 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB386:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds389
	MOVEF_32 800.0 milliseconds389
	DATA32 timer389
	TIMER_WAIT milliseconds389 timer389
	TIMER_READY timer389
    MOVEF_F 25.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB390:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 100.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB392:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB394:
    MOVEF_F 450.0 VLV_MM_1
    MOVEF_F 90.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB395:
    MOVEF_F 100.0 VLV_DEG_4
    MOVEF_F 50.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB396:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -95.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB397:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB398:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 44.0 VLV_MM_1
    MOVEF_F 40.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB400 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB400:
    MOVEF_F 91.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB401:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB402:
    MOVEF_F -20.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB403:
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB404:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf408
    DATA8 flag408
    DIVF VGV_TIME 1000.0 tmpf408
    CP_EQF 0.0 1000.0 flag408
    SELECTF flag408 0.0 tmpf408 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf411
    DATA8 flag411
    DIVF VGV_ZONE1 1000.0 tmpf411
    CP_EQF 0.0 1000.0 flag411
    SELECTF flag411 0.0 tmpf411 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf414
    DATA8 flag414
    DIVF VGV_ZONE2 1000.0 tmpf414
    CP_EQF 0.0 1000.0 flag414
    SELECTF flag414 0.0 tmpf414 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf418
    DATA8 flag418
    DIVF VGV_TIME 1000.0 tmpf418
    CP_EQF 0.0 1000.0 flag418
    SELECTF flag418 0.0 tmpf418 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB422:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf427
    DATA8 flag427
    DIVF F.0 F.1 tmpf427
    CP_EQF 0.0 F.1 flag427
    SELECTF flag427 0.0 tmpf427 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf432
    DATA8 flag432
    DIVF F.0 F.1 tmpf432
    CP_EQF 0.0 F.1 flag432
    SELECTF flag432 0.0 tmpf432 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds450
	MOVEF_32 500.0 milliseconds450
	DATA32 timer450
	TIMER_WAIT milliseconds450 timer450
	TIMER_READY timer450
  while451:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf455
    DATA8 flag455
    DIVF F.1 2.0 tmpf455
    CP_EQF 0.0 2.0 flag455
    SELECTF flag455 0.0 tmpf455 F.0

    JR_LTEQF F.0 35.0 endwhile451
  whilebody451:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf459
    DATA8 flag459
    DIVF F.1 2.0 tmpf459
    CP_EQF 0.0 2.0 flag459
    SELECTF flag459 0.0 tmpf459 F.0

    JR_GTF F.0 35.0 whilebody451
  endwhile451:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 23.0 0.0 'true' 

	DATA8 layer461
	DATA8 nos461
	DATA8 busy461
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer461 nos461
	JR_EQ8 0 nos461 motornotbusy461
  motorwaiting461:
	OUTPUT_TEST layer461 nos461 busy461
	JR_EQ8 busy461 0 motornotbusy461
	SLEEP
	JR motorwaiting461
  motornotbusy461:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else474_1
    JR_LTEQF VGV_R VGV_B else474_1
    MOVEF_F VGV_R VGV_MAX
    JR endif474
  else474_1:
    JR_LTEQF VGV_G VGV_R else474_2
    JR_LTEQF VGV_G VGV_B else474_2
    MOVEF_F VGV_G VGV_MAX
    JR endif474
  else474_2:
    JR_LTEQF VGV_B VGV_R else474_3
    JR_LTEQF VGV_B VGV_G else474_3
    MOVEF_F VGV_B VGV_MAX
  else474_3:
  endif474:
    JR_GTEQF VGV_R VGV_G else475_1
    JR_GTEQF VGV_R VGV_B else475_1
    MOVEF_F VGV_R VGV_MIN
    JR endif475
  else475_1:
    JR_GTEQF VGV_G VGV_R else475_2
    JR_GTEQF VGV_G VGV_B else475_2
    MOVEF_F VGV_G VGV_MIN
    JR endif475
  else475_2:
    JR_GTEQF VGV_B VGV_R else475_3
    JR_GTEQF VGV_B VGV_G else475_3
    MOVEF_F VGV_B VGV_MIN
  else475_3:
  endif475:
    JR_NEQF VGV_MAX VGV_MIN else476_1
    MOVEF_F 0.0 VGV_H
    JR endif476
  else476_1:
    JR_NEQF VGV_R VGV_MAX else477_1
    JR_LTF VGV_G VGV_B else478_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf482
    DATA8 flag482
    DIVF F.0 F.1 tmpf482
    CP_EQF 0.0 F.1 flag482
    SELECTF flag482 0.0 tmpf482 VGV_H

    JR endif478
  else478_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf486
    DATA8 flag486
    DIVF F.1 F.2 tmpf486
    CP_EQF 0.0 F.2 flag486
    SELECTF flag486 0.0 tmpf486 F.0

    ADDF F.0 360.0 VGV_H
  else478_2:
  endif478:
    JR endif477
  else477_1:
    JR_NEQF VGV_MAX VGV_G else488_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf492
    DATA8 flag492
    DIVF F.1 F.2 tmpf492
    CP_EQF 0.0 F.2 flag492
    SELECTF flag492 0.0 tmpf492 F.0

    ADDF F.0 120.0 VGV_H
    JR endif488
  else488_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf497
    DATA8 flag497
    DIVF F.1 F.2 tmpf497
    CP_EQF 0.0 F.2 flag497
    SELECTF flag497 0.0 tmpf497 F.0

    ADDF F.0 240.0 VGV_H
  else488_2:
  endif488:
  else477_2:
  endif477:
  else476_2:
  endif476:
    JR_NEQF VGV_MAX 0.0 else499_1
    MOVEF_F 0.0 VGV_S
    JR endif499
  else499_1:
    DATAF tmpf500
    DATA8 flag500
    DIVF VGV_MIN VGV_MAX tmpf500
    CP_EQF 0.0 VGV_MAX flag500
    SELECTF flag500 0.0 tmpf500 VGV_S

  else499_2:
  endif499:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else502_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB504:
    MOVEF_F 160.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB505:
    JR_NEQF VGV_W 1.0 else506_1
    MOVEF_F 5.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB507:
  else506_1:
  endif506:
    JR endif502
  else502_1:
    MOVEF_F 95.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB508:
    MOVEF_F 85.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB509:
  else502_2:
  endif502:
    JR_NEQF VGV_W1B2 1.0 else510_1
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F 20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB511:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else512_1
    MOVEF_F 65.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB514:
    JR endif512
  else512_1:
    MOVEF_F 55.0 VLV_DEG_2
    MOVEF_F 30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB515:
  else512_2:
  endif512:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else517_1
    DATA32 milliseconds519
	MOVEF_32 700.0 milliseconds519
	DATA32 timer519
	TIMER_WAIT milliseconds519 timer519
	TIMER_READY timer519
  else517_1:
  endif517:
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB520 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB520:
    MOVEF_F 5.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB521:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else522_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB524:
  else522_1:
  endif522:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else525_1
    MOVEF_F 58.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB527:
    JR endif525
  else525_1:
    MOVEF_F 48.0 VLV_DEG_2
    MOVEF_F -30.0 VLV_SP_2
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB528:
  else525_2:
  endif525:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB529:
  else510_1:
  endif510:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else531_1
    DATA32 milliseconds533
	MOVEF_32 700.0 milliseconds533
	DATA32 timer533
	TIMER_WAIT milliseconds533 timer533
	TIMER_READY timer533
  else531_1:
  endif531:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 10.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB534:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB535:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else536_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB538:
  else536_1:
  endif536:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB539:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else540_1
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB542:
    JR endif540
  else540_1:
    MOVEF_F 95.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB543:
  else540_2:
  endif540:
    MOVEF_F 300.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB544:
    JR_EQF VGV_W1B2 1.0 else545_1
    JR_EQF VGV_W 4.0 else545_1
    MOVEF_F 65.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB546:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_11
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB547:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -50.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB548:
    MOVEF_F 30.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB549:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB550:
  else545_1:
  endif545:
    MOVEF_F 0.0 VGV_W1B2
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else552_1
    DATA32 milliseconds554
	MOVEF_32 1000.0 milliseconds554
	DATA32 timer554
	TIMER_WAIT milliseconds554 timer554
	TIMER_READY timer554
  else552_1:
  endif552:
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB555:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else556_1
    JR_NEQF VGV_W 3.0 else558_1
    MOVEF_F 35.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB559:
    JR endif558
  else558_1:
    MOVEF_F 17.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB560:
  else558_2:
  endif558:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB562:
  else556_1:
  endif556:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB564:
    MOVEF_F 22.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB565:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else567_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB569:
  else567_1:
  endif567:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else570_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F 30.0 VLV_SP_4
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB572:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -20.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB573:
    JR endif570
  else570_1:
    MOVEF_F 90.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB574:
    MOVEF_F 30.0 VLV_MM_1
    MOVEF_F 30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB575:
  else570_2:
  endif570:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB577:
    MOVEF_F 20.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB578:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else580_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_11
    MOVEF_F 20.0 VLV_SP_11
    WRITE32 ENDSUB_F_UP_2:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB582:
  else580_1:
  endif580:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else583_1
    JR_NEQF VGV_B 3.0 else583_1
    MOVEF_F 120.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB585:
    JR endif583
  else583_1:
    MOVEF_F 80.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB586:
  else583_2:
  endif583:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB587:
    MOVEF_F 200.0 VLV_MM_1
    MOVEF_F -70.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB588:
    JR_NEQF VGV_B 2.0 else589_1
    MOVEF_F 70.0 VLV_MM_1
    MOVEF_F -30.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB590:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB591:
    MOVEF_F 150.0 VLV_MM_1
    MOVEF_F -60.0 VLV_V_1
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB592:
    MOVEF_F -30.0 VLV_SP_9
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB593:
  else589_1:
  endif589:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf596
    DATA8 flag596
    DIVF VLV_MM_1 F.1 tmpf596
    CP_EQF 0.0 F.1 flag596
    SELECTF flag596 0.0 tmpf596 F.0

    MULF F.0 360.0 VLV_L_1
    JR_GTEQF VLV_V_1 0.0 else598_1
    MOVEF_F -10.0 VLV_SP_1
    JR endif598
  else598_1:
    MOVEF_F 10.0 VLV_SP_1
  else598_2:
  endif598:
    MOVEF_F 0.0 VLV_DEG_1
    CALL MOTOR.RESETCOUNT 'BC'
  while600:
    JR_GTEQF VLV_DEG_1 VLV_L_1 endwhile600
  whilebody600:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf605
    DATA8 flag605
    DIVF F.0 2.0 tmpf605
    CP_EQF 0.0 2.0 flag605
    SELECTF flag605 0.0 tmpf605 VLV_DEG_1

    MULF VLV_L_1 0.7 F.0
    JR_LTEQF VLV_DEG_1 F.0 else606_1
    MATH ABS VLV_SP_1 F.0
    JR_LTEQF F.0 10.0 else606_1
    JR_LTEQF VLV_V_1 0.0 else609_1
    SUBF VLV_SP_1 0.2 VLV_SP_1
    JR endif609
  else609_1:
    ADDF VLV_SP_1 0.2 VLV_SP_1
  else609_2:
  endif609:
    JR endif606
  else606_1:
    MATH ABS VLV_SP_1 F.0
    MATH ABS VLV_V_1 F.1
    JR_GTEQF F.0 F.1 else606_2
    JR_LTEQF VLV_V_1 0.0 else614_1
    ADDF VLV_SP_1 0.2 VLV_SP_1
    JR endif614
  else614_1:
    SUBF VLV_SP_1 0.2 VLV_SP_1
  else614_2:
  endif614:
  else606_2:
  endif606:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_1
    MULF VLV_U_1 2.0 F.1
    ADDF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_1 2.0 F.1
    SUBF VLV_SP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_1 VLV_L_1 whilebody600
  endwhile600:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_2 F.0
    DATAF tmpf627
    DATA8 flag627
    DIVF F.0 360.0 tmpf627
    CP_EQF 0.0 360.0 flag627
    SELECTF flag627 0.0 tmpf627 VLV_L_2

    DATAF tmpf628
    DATA8 flag628
    DIVF VLV_L_2 210.38 tmpf628
    CP_EQF 0.0 210.38 flag628
    SELECTF flag628 0.0 tmpf628 F.0

    MULF F.0 360.0 VLV_L_2
    MOVEF_F 30.0 VLV_V_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_2
  while631:
    JR_GTF VLV_DEG_2 VLV_L_2 endwhile631
  whilebody631:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_2
    CALL MOTOR.STARTPOWER 'B' VLV_V_2
    MULF VLV_L_2 0.2 F.0
    JR_LTF VLV_DEG_2 F.0 or636
    MULF VLV_L_2 0.8 F.0
    JR_LTEQF VLV_DEG_2 F.0 else635_1
  or636:
    JR_GTEQF VLV_SP_2 0.0 else639_1
    MOVEF_F -30.0 VLV_V_2
    JR endif639
  else639_1:
    MOVEF_F 30.0 VLV_V_2
  else639_2:
  endif639:
    JR endif635
  else635_1:
    MOVEF_F VLV_SP_2 VLV_V_2
  else635_2:
  endif635:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_2 VLV_L_2 whilebody631
  endwhile631:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf643
    DATA8 flag643
    DIVF F.0 360.0 tmpf643
    CP_EQF 0.0 360.0 flag643
    SELECTF flag643 0.0 tmpf643 VLV_L_3

    DATAF tmpf644
    DATA8 flag644
    DIVF VLV_L_3 210.38 tmpf644
    CP_EQF 0.0 210.38 flag644
    SELECTF flag644 0.0 tmpf644 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while647:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile647
  whilebody647:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'C' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or652
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else651_1
  or652:
    JR_GTEQF VLV_SP_3 0.0 else655_1
    MOVEF_F -30.0 VLV_V_3
    JR endif655
  else655_1:
    MOVEF_F 30.0 VLV_V_3
  else655_2:
  endif655:
    JR endif651
  else651_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else651_2:
  endif651:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody647
  endwhile647:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_4 F.0
    DATAF tmpf662
    DATA8 flag662
    DIVF F.0 360.0 tmpf662
    CP_EQF 0.0 360.0 flag662
    SELECTF flag662 0.0 tmpf662 VLV_L_4

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf665
    DATA8 flag665
    DIVF VLV_L_4 F.2 tmpf665
    CP_EQF 0.0 F.2 flag665
    SELECTF flag665 0.0 tmpf665 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf667
    DATA8 flag667
    DIVF F.0 2.0 tmpf667
    CP_EQF 0.0 2.0 flag667
    SELECTF flag667 0.0 tmpf667 VLV_L_4

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_4
    MOVEF_F 0.0 VLV_DEG_4
  while669:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile669
  whilebody669:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf675
    DATA8 flag675
    DIVF F.0 2.0 tmpf675
    CP_EQF 0.0 2.0 flag675
    SELECTF flag675 0.0 tmpf675 VLV_DEG_4

    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or677
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else676_1
  or677:
    MOVEF_F 30.0 VLV_V_4
    JR endif676
  else676_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else676_2:
  endif676:
    CALL MOTOR.STARTPOWER 'B' VLV_V_4
    SUBF 0.0 VLV_V_4 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody669
  endwhile669:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf688
    DATA8 flag688
    DIVF F.0 360.0 tmpf688
    CP_EQF 0.0 360.0 flag688
    SELECTF flag688 0.0 tmpf688 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf691
    DATA8 flag691
    DIVF VLV_L_5 F.2 tmpf691
    CP_EQF 0.0 F.2 flag691
    SELECTF flag691 0.0 tmpf691 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf693
    DATA8 flag693
    DIVF F.0 2.0 tmpf693
    CP_EQF 0.0 2.0 flag693
    SELECTF flag693 0.0 tmpf693 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while695:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile695
  whilebody695:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf701
    DATA8 flag701
    DIVF F.0 2.0 tmpf701
    CP_EQF 0.0 2.0 flag701
    SELECTF flag701 0.0 tmpf701 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or703
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else702_1
  or703:
    MOVEF_F 30.0 VLV_V_5
    JR endif702
  else702_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else702_2:
  endif702:
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_5
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody695
  endwhile695:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while712:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or713
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile712
  or713:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile712
  whilebody712:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or733
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and732
  or733:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody712
  and732:
  endwhile712:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while745:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or746
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile745
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile745
  or746:
  whilebody745:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_9
    MULF VLV_U_9 2.0 F.1
    ADDF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_9 2.0 F.1
    SUBF VLV_SP_9 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody745
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_9 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and769
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody745
  and769:
  endwhile745:
    JR_GTEQF VLV_SP_9 0.0 else775_1
    MOVEF_F -70.0 VLV_SP_9
    JR endif775
  else775_1:
    MOVEF_F 70.0 VLV_SP_9
  else775_2:
  endif775:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_9
    DATA32 milliseconds777
	MOVEF_32 300.0 milliseconds777
	DATA32 timer777
	TIMER_WAIT milliseconds777 timer777
	TIMER_READY timer777
    DATA32 tmp778
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp778
    JR_NEQ32 0 tmp778 alreadylaunched778
    OBJECT_START TF_BEEP_0
  alreadylaunched778:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_10
    DATA8 layer780
	DATA8 no780
	DATA8 mode8780
	
	MOVEF_8 2.0 no780
	SUB8 no780 1 no780
	DIV8 no780 4 layer780
	MATH MOD8 no780 4 no780

	MOVEF_8 2.0 mode8780
	
	INPUT_DEVICE READY_RAW layer780 no780 0 mode8780 0
    DATA8 layer781
	DATA8 no781
	DATA8 mode8781
	
	MOVEF_8 3.0 no781
	SUB8 no781 1 no781
	DIV8 no781 4 layer781
	MATH MOD8 no781 4 no781

	MOVEF_8 2.0 mode8781
	
	INPUT_DEVICE READY_RAW layer781 no781 0 mode8781 0
  while782:
    JR_EQF VLV_WHITE_10 1.0 endwhile782
  whilebody782:
    CALL MOTOR.RESETCOUNT 'BC'
  while784:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or785
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile784
  or785:
  whilebody784:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody784
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody784
  endwhile784:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_10
  while800:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_10 endwhile800
  whilebody800:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_10 whilebody800
  endwhile800:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else814_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else814_1
    MOVEF_F 1.0 VLV_WHITE_10
  else814_1:
  endif814:
    JR_NEQF VLV_WHITE_10 1.0 whilebody782
  endwhile782:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer818
	DATA8 no818
	DATA8 mode8818
	
	MOVEF_8 2.0 no818
	SUB8 no818 1 no818
	DIV8 no818 4 layer818
	MATH MOD8 no818 4 no818

	MOVEF_8 0.0 mode8818
	
	INPUT_DEVICE READY_RAW layer818 no818 0 mode8818 0
    DATA8 layer819
	DATA8 no819
	DATA8 mode8819
	
	MOVEF_8 3.0 no819
	SUB8 no819 1 no819
	DIV8 no819 4 layer819
	MATH MOD8 no819 4 no819

	MOVEF_8 0.0 mode8819
	
	INPUT_DEVICE READY_RAW layer819 no819 0 mode8819 0
  while820:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile820
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile820
  whilebody820:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 0.8 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 0.8 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and832
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody820
  and832:
  endwhile820:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds839
	MOVEF_32 500.0 milliseconds839
	DATA32 timer839
	TIMER_WAIT milliseconds839 timer839
	TIMER_READY timer839
  while840:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf844
    DATA8 flag844
    DIVF F.1 2.0 tmpf844
    CP_EQF 0.0 2.0 flag844
    SELECTF flag844 0.0 tmpf844 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile840
  whilebody840:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf850
    DATA8 flag850
    DIVF F.1 2.0 tmpf850
    CP_EQF 0.0 2.0 flag850
    SELECTF flag850 0.0 tmpf850 F.0

    MULF VLV_SP_11 0.7 F.1
    JR_GTF F.0 F.1 whilebody840
  endwhile840:
    CALL MOTOR.STOP VLV_MOTOR_11 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_12 VLV_SP_12
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds855
	MOVEF_32 500.0 milliseconds855
	DATA32 timer855
	TIMER_WAIT milliseconds855 timer855
	TIMER_READY timer855
  while856:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf860
    DATA8 flag860
    DIVF F.1 2.0 tmpf860
    CP_EQF 0.0 2.0 flag860
    SELECTF flag860 0.0 tmpf860 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile856
  whilebody856:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf865
    DATA8 flag865
    DIVF F.1 2.0 tmpf865
    CP_EQF 0.0 2.0 flag865
    SELECTF flag865 0.0 tmpf865 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody856
  endwhile856:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
  while871:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_LTEQF F.0 -23.0 endwhile871
  whilebody871:
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    JR_GTF F.0 -23.0 whilebody871
  endwhile871:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
