DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_MM_2
DATAF VLV_V_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VLV_SP_10
DATAF VLV_DEG_6
DATAF VLV_SP_6
DATAF VLV_SP_11
DATAS VLV_MOTOR_13 252
DATAF VLV_SP_13
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
DATAF VGV_Z1
DATAF VGV_Z2
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_2
DATAF VLV_SP_2
DATAF VLV_DEG_2
DATAF VLV_U_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_L_6
DATAF VLV_V_6
DATAF VLV_U_10
DATAF VLV_WHITE_11
DATAF VLV_U_11
DATAF VLV_L_11
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_U_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_L_6
    MOVEF_F 0.0 VLV_V_6
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_WHITE_11
    MOVEF_F 0.0 VLV_U_11
    MOVEF_F 0.0 VLV_L_11
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch888
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch888:
    JR_NEQ32 SUBPROGRAM 1 dispatch889
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch889:
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp9
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp9
    JR_NEQ32 0 tmp9 alreadylaunched9
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched9:
    MOVEF_F 15.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB10:
    MOVEF_F 85.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB11:
    CALL MOTOR.RESETCOUNT 'BC'
  while13:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile13
  whilebody13:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody13
  endwhile13:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while26:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf30
    DATA8 flag30
    DIVF F.1 2.0 tmpf30
    CP_EQF 0.0 2.0 flag30
    SELECTF flag30 0.0 tmpf30 F.0

    JR_GTEQF F.0 VGV_L endwhile26
  whilebody26:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB31:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf35
    DATA8 flag35
    DIVF F.1 2.0 tmpf35
    CP_EQF 0.0 2.0 flag35
    SELECTF flag35 0.0 tmpf35 F.0

    JR_LTF F.0 VGV_L whilebody26
  endwhile26:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  or38:
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB52:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while54:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_GTEQF F.0 VGV_L endwhile54
  whilebody54:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB59:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    JR_LTF F.0 VGV_L whilebody54
  endwhile54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while65:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTEQF F.0 VGV_L endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB70:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 2.0 tmpf74
    CP_EQF 0.0 2.0 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    JR_LTF F.0 VGV_L whilebody65
  endwhile65:
    MOVEF_F 3.0 VGV_Z1
    MOVEF_F 1.0 VGV_Z2
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for76:
    JR_GTF VGV_I 3.0 endfor76
  forbody76:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB77:
    JR_LTF VGV_NUM 2.0 else78_1
    JR_GTF VGV_NUM 3.0 else78_1
    ADDF VGV_I 1.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif78
  else78_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else78_2:
  endif78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while84:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    JR_GTEQF F.0 VGV_L endwhile84
  whilebody84:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB89:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf93
    DATA8 flag93
    DIVF F.1 2.0 tmpf93
    CP_EQF 0.0 2.0 flag93
    SELECTF flag93 0.0 tmpf93 F.0

    JR_LTF F.0 VGV_L whilebody84
  endwhile84:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody76
  endfor76:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for97:
    JR_GTF VGV_I 3.0 endfor97
  forbody97:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else101_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif101
  else101_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else101_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else101_2:
  endif101:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody97
  endfor97:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while104:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_GTEQF F.0 VGV_L endwhile104
  whilebody104:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB109 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB109:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 2.0 tmpf113
    CP_EQF 0.0 2.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    JR_LTF F.0 VGV_L whilebody104
  endwhile104:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for114:
    JR_GTF VGV_I 3.0 endfor114
  forbody114:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB115:
    JR_LTEQF VGV_B 30.0 else116_1
    JR_GTEQF VGV_B 50.0 else116_1
    ADDF VGV_I 1.0 VGV_Z1
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif116
  else116_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else116_2:
  endif116:
    JR_GTEQF VGV_I 2.0 else121_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while123:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    JR_GTEQF F.0 VGV_L endwhile123
  whilebody123:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB128:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 2.0 tmpf132
    CP_EQF 0.0 2.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    JR_LTF F.0 VGV_L whilebody123
  endwhile123:
    JR endif121
  else121_1:
    JR_NEQF VGV_I 2.0 else121_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 73.9675364701048 VGV_L
  while134:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf138
    DATA8 flag138
    DIVF F.1 2.0 tmpf138
    CP_EQF 0.0 2.0 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    JR_GTEQF F.0 VGV_L endwhile134
  whilebody134:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB139:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    JR_LTF F.0 VGV_L whilebody134
  endwhile134:
  else121_2:
  endif121:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody114
  endfor114:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB145:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for148:
    JR_GTF VGV_I 3.0 endfor148
  forbody148:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else152_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif152
  else152_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else152_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else152_2:
  endif152:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody148
  endfor148:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B1 VGV_W1 VGV_Z1
    ADDF VGV_B2 VGV_W2 VGV_Z2
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB169 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB169:
    MOVEF_F 35.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB170:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while172:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF F.1 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    JR_GTEQF F.0 VGV_L endwhile172
  whilebody172:
    MOVEF_F 1.6 VGV_K
    MOVEF_F 23.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf189
    DATA8 flag189
    DIVF F.1 2.0 tmpf189
    CP_EQF 0.0 2.0 flag189
    SELECTF flag189 0.0 tmpf189 F.0

    JR_LTF F.0 VGV_L whilebody172
  endwhile172:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB190:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB192:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB193:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB194:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB195:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB196:
    MOVEF_F 780.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB197:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB198:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB199:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB200:
    MOVEF_F 85.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB201:
    MOVEF_F 91.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB202:
    JR_NEQF VGV_Z1 4.0 else203_1
    MOVEF_F 880.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB204:
    MOVEF_F 50.0 VLV_DEG_3
    MOVEF_F 60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB205:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB206:
    MOVEF_F 80.0 VLV_DEG_3
    MOVEF_F 60.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB207:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F 50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB208:
    MOVEF_F 120.0 VLV_DEG_4
    MOVEF_F 60.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB209:
    MOVEF_F 350.0 VLV_MM_2
    MOVEF_F 50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB210:
    MOVEF_F 85.0 VLV_DEG_3
    MOVEF_F 50.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB211:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB212:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB213:
    MOVEF_F 85.0 VLV_DEG_3
    MOVEF_F -50.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB214:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB215:
    MOVEF_F 75.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB216:
    MOVEF_F 550.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB217:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB218:
    JR endif203
  else203_1:
    MOVEF_F 940.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB219:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 920.0 'true'

	DATA8 layer220
	DATA8 nos220
	DATA8 busy220
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer220 nos220
	JR_EQ8 0 nos220 motornotbusy220
  motorwaiting220:
	OUTPUT_TEST layer220 nos220 busy220
	JR_EQ8 busy220 0 motornotbusy220
	SLEEP
	JR motorwaiting220
  motornotbusy220:
    MOVEF_F 630.0 VLV_MM_2
    MOVEF_F 70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB221:
    MOVEF_F 500.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB222:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 920.0 'true'

	DATA8 layer223
	DATA8 nos223
	DATA8 busy223
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer223 nos223
	JR_EQ8 0 nos223 motornotbusy223
  motorwaiting223:
	OUTPUT_TEST layer223 nos223 busy223
	JR_EQ8 busy223 0 motornotbusy223
	SLEEP
	JR motorwaiting223
  motornotbusy223:
    MOVEF_F 320.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB224:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB225:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB226:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB227:
  else203_2:
  endif203:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 105.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB229:
    MOVEF_F 88.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB230:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB231:
    JR_EQF VGV_B 1.0 or233
    JR_NEQF VGV_W 2.0 else232_1
  or233:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB234:
    JR_NEQF VGV_W 2.0 else235_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB236:
  else235_1:
  endif235:
    JR_NEQF VGV_B 1.0 else237_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB238 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB238:
  else237_1:
  endif237:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB239:
    JR endif232
  else232_1:
    JR_EQF VGV_B 2.0 or240
    JR_NEQF VGV_W 1.0 else232_2
  or240:
    JR_NEQF VGV_B 2.0 else241_1
    JR_NEQF VGV_W 1.0 else241_1
    MOVEF_F 1.0 VGV_W1B2
  else241_1:
  endif241:
    JR_NEQF VGV_W 1.0 else242_1
    MOVEF_F 365.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB243:
    WRITE32 ENDSUB_F_W1_0:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB244:
  else242_1:
  endif242:
    JR_NEQF VGV_B 2.0 else245_1
    JR_EQF VGV_W 1.0 else245_1
    MOVEF_F 193.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB246:
    WRITE32 ENDSUB_F_B2_0:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB247:
  else245_1:
  endif245:
    MOVEF_F 105.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB248:
    MOVEF_F 88.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB249:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB250:
  else232_2:
  endif232:
    JR_EQF VGV_B 4.0 or252
    JR_NEQF VGV_W 3.0 else251_1
  or252:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB253:
    JR_NEQF VGV_W 3.0 else254_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB255 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB255:
  else254_1:
  endif254:
    JR_NEQF VGV_B 4.0 else256_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB257:
  else256_1:
  endif256:
    JR endif251
  else251_1:
    JR_EQF VGV_B 3.0 or258
    JR_NEQF VGV_W 4.0 else251_2
  or258:
    JR_NEQF VGV_B 3.0 else259_1
    JR_NEQF VGV_W 4.0 else259_1
    MOVEF_F 1.0 VGV_W1B2
  else259_1:
  endif259:
    JR_NEQF VGV_W 4.0 else260_1
    MOVEF_F 118.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB261:
    WRITE32 ENDSUB_F_W1_0:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB262:
  else260_1:
  endif260:
    JR_NEQF VGV_B 3.0 else263_1
    JR_EQF VGV_W 4.0 else263_1
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB264:
    WRITE32 ENDSUB_F_B2_0:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB265:
  else263_1:
  endif263:
    JR endif251
  else251_2:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB266:
  else251_3:
  endif251:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else268_1
    JR_EQF VGV_W 4.0 else268_1
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB269:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB270:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB271:
    MOVEF_F 93.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB272:
  else268_1:
  endif268:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB274:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB275:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB276:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB277:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while280:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile280
  whilebody280:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody280
  endwhile280:
    CALL MOTOR.START 'D' 20.0
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB293:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds295
	MOVEF_32 500.0 milliseconds295
	DATA32 timer295
	TIMER_WAIT milliseconds295 timer295
	TIMER_READY timer295
    MOVEF_F 35.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB296:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB299:
    CALL MOTOR.START 'AD' -20.0
    JR_NEQF VGV_Z1 4.0 else301_1
    MOVEF_F 75.0 VLV_DEG_5
    MOVEF_F 70.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB302:
    MOVEF_F 800.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB303:
    MOVEF_F 120.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB304:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB305:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB306:
    JR endif301
  else301_1:
    MOVEF_F 70.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB307:
    MOVEF_F 72.0 VLV_DEG_4
    MOVEF_F 70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB308:
    MOVEF_F 310.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB309:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB311:
    MOVEF_F 570.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB312:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB313:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds315
	MOVEF_32 700.0 milliseconds315
	DATA32 timer315
	TIMER_WAIT milliseconds315 timer315
	TIMER_READY timer315
    STRINGS DUPLICATE 'AD' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB316:
    MOVEF_F 13.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB317:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB319:
    MOVEF_F 130.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB320:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB321:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB322:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB323:
  else301_2:
  endif301:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB325:
    MOVEF_F 89.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB326:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB327:
    JR_EQF VGV_B 1.0 or329
    JR_NEQF VGV_W 2.0 else328_1
  or329:
    MOVEF_F 210.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB330:
    JR_NEQF VGV_W 2.0 else331_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB332:
  else331_1:
  endif331:
    JR_NEQF VGV_B 1.0 else333_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB334:
  else333_1:
  endif333:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB335:
    JR endif328
  else328_1:
    JR_EQF VGV_B 2.0 or336
    JR_NEQF VGV_W 1.0 else328_2
  or336:
    JR_NEQF VGV_B 2.0 else337_1
    JR_NEQF VGV_W 1.0 else337_1
    MOVEF_F 1.0 VGV_W1B2
  else337_1:
  endif337:
    JR_NEQF VGV_W 1.0 else338_1
    MOVEF_F 460.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB339:
    WRITE32 ENDSUB_F_W1_0:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB340:
  else338_1:
  endif338:
    JR_NEQF VGV_B 2.0 else341_1
    JR_EQF VGV_W 1.0 else341_1
    MOVEF_F 280.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB342:
    WRITE32 ENDSUB_F_B2_0:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB343:
  else341_1:
  endif341:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB344:
    MOVEF_F 89.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB345:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB346:
  else328_2:
  endif328:
    JR_EQF VGV_B 4.0 or348
    JR_NEQF VGV_W 3.0 else347_1
  or348:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB349:
    JR_NEQF VGV_W 3.0 else350_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB351:
  else350_1:
  endif350:
    JR_NEQF VGV_B 4.0 else352_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB353:
  else352_1:
  endif352:
    JR endif347
  else347_1:
    JR_EQF VGV_B 3.0 or354
    JR_NEQF VGV_W 4.0 else347_2
  or354:
    JR_NEQF VGV_B 3.0 else355_1
    JR_NEQF VGV_W 4.0 else355_1
    MOVEF_F 1.0 VGV_W1B2
  else355_1:
  endif355:
    JR_NEQF VGV_W 4.0 else356_1
    MOVEF_F 47.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB357:
    WRITE32 ENDSUB_F_W1_0:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB358:
  else356_1:
  endif356:
    JR_NEQF VGV_B 3.0 else359_1
    JR_EQF VGV_W 4.0 else359_1
    MOVEF_F 235.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB360:
    WRITE32 ENDSUB_F_B2_0:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB361:
  else359_1:
  endif359:
    JR endif347
  else347_2:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB362:
  else347_3:
  endif347:
    JR_EQF VGV_B 3.0 else363_1
    JR_EQF VGV_W 4.0 else363_1
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB364:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB365:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB366:
    JR endif363
  else363_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB367:
    MOVEF_F 92.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB368:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB369:
  else363_2:
  endif363:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB370:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB372:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB373:
    CALL MOTOR.RESETCOUNT 'BC'
  while375:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 58.0 endwhile375
  whilebody375:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 58.0 whilebody375
  endwhile375:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB387:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB388 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB388:
    MOVEF_F -50.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB389:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB390:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB391:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB392:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB393:
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB394:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB395:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    DATA32 milliseconds398
	MOVEF_32 800.0 milliseconds398
	DATA32 timer398
	TIMER_WAIT milliseconds398 timer398
	TIMER_READY timer398
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB399:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB401 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB401:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB403:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB404:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB405:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB406:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB407 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB407:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 41.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB409:
    MOVEF_F 92.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB410:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB411:
    MOVEF_F -20.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB412:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB413 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB413:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf417
    DATA8 flag417
    DIVF VGV_TIME 1000.0 tmpf417
    CP_EQF 0.0 1000.0 flag417
    SELECTF flag417 0.0 tmpf417 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf420
    DATA8 flag420
    DIVF VGV_ZONE1 1000.0 tmpf420
    CP_EQF 0.0 1000.0 flag420
    SELECTF flag420 0.0 tmpf420 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf423
    DATA8 flag423
    DIVF VGV_ZONE2 1000.0 tmpf423
    CP_EQF 0.0 1000.0 flag423
    SELECTF flag423 0.0 tmpf423 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf427
    DATA8 flag427
    DIVF VGV_TIME 1000.0 tmpf427
    CP_EQF 0.0 1000.0 flag427
    SELECTF flag427 0.0 tmpf427 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB431:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf436
    DATA8 flag436
    DIVF F.0 F.1 tmpf436
    CP_EQF 0.0 F.1 flag436
    SELECTF flag436 0.0 tmpf436 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf441
    DATA8 flag441
    DIVF F.0 F.1 tmpf441
    CP_EQF 0.0 F.1 flag441
    SELECTF flag441 0.0 tmpf441 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE_FOL_0:
    WRITE32 ENDSUB_F_SEN1_0:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN1_0
CALLSUB442:
    WRITE32 ENDSUB_F_SEN2_0:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN2_0
CALLSUB443:
    SUBF VGV_S1 VGV_S2 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE_FOL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_FOL_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds468
	MOVEF_32 500.0 milliseconds468
	DATA32 timer468
	TIMER_WAIT milliseconds468 timer468
	TIMER_READY timer468
  while469:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf473
    DATA8 flag473
    DIVF F.1 2.0 tmpf473
    CP_EQF 0.0 2.0 flag473
    SELECTF flag473 0.0 tmpf473 F.0

    JR_LTEQF F.0 35.0 endwhile469
  whilebody469:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf477
    DATA8 flag477
    DIVF F.1 2.0 tmpf477
    CP_EQF 0.0 2.0 flag477
    SELECTF flag477 0.0 tmpf477 F.0

    JR_GTF F.0 35.0 whilebody469
  endwhile469:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 23.0 0.0 'true' 

	DATA8 layer479
	DATA8 nos479
	DATA8 busy479
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer479 nos479
	JR_EQ8 0 nos479 motornotbusy479
  motorwaiting479:
	OUTPUT_TEST layer479 nos479 busy479
	JR_EQ8 busy479 0 motornotbusy479
	SLEEP
	JR motorwaiting479
  motornotbusy479:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else492_1
    JR_LTEQF VGV_R VGV_B else492_1
    MOVEF_F VGV_R VGV_MAX
    JR endif492
  else492_1:
    JR_LTEQF VGV_G VGV_R else492_2
    JR_LTEQF VGV_G VGV_B else492_2
    MOVEF_F VGV_G VGV_MAX
    JR endif492
  else492_2:
    JR_LTEQF VGV_B VGV_R else492_3
    JR_LTEQF VGV_B VGV_G else492_3
    MOVEF_F VGV_B VGV_MAX
  else492_3:
  endif492:
    JR_GTEQF VGV_R VGV_G else493_1
    JR_GTEQF VGV_R VGV_B else493_1
    MOVEF_F VGV_R VGV_MIN
    JR endif493
  else493_1:
    JR_GTEQF VGV_G VGV_R else493_2
    JR_GTEQF VGV_G VGV_B else493_2
    MOVEF_F VGV_G VGV_MIN
    JR endif493
  else493_2:
    JR_GTEQF VGV_B VGV_R else493_3
    JR_GTEQF VGV_B VGV_G else493_3
    MOVEF_F VGV_B VGV_MIN
  else493_3:
  endif493:
    JR_NEQF VGV_MAX VGV_MIN else494_1
    MOVEF_F 0.0 VGV_H
    JR endif494
  else494_1:
    JR_NEQF VGV_R VGV_MAX else495_1
    JR_LTF VGV_G VGV_B else496_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf500
    DATA8 flag500
    DIVF F.0 F.1 tmpf500
    CP_EQF 0.0 F.1 flag500
    SELECTF flag500 0.0 tmpf500 VGV_H

    JR endif496
  else496_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf504
    DATA8 flag504
    DIVF F.1 F.2 tmpf504
    CP_EQF 0.0 F.2 flag504
    SELECTF flag504 0.0 tmpf504 F.0

    ADDF F.0 360.0 VGV_H
  else496_2:
  endif496:
    JR endif495
  else495_1:
    JR_NEQF VGV_MAX VGV_G else506_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf510
    DATA8 flag510
    DIVF F.1 F.2 tmpf510
    CP_EQF 0.0 F.2 flag510
    SELECTF flag510 0.0 tmpf510 F.0

    ADDF F.0 120.0 VGV_H
    JR endif506
  else506_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf515
    DATA8 flag515
    DIVF F.1 F.2 tmpf515
    CP_EQF 0.0 F.2 flag515
    SELECTF flag515 0.0 tmpf515 F.0

    ADDF F.0 240.0 VGV_H
  else506_2:
  endif506:
  else495_2:
  endif495:
  else494_2:
  endif494:
    JR_NEQF VGV_MAX 0.0 else517_1
    MOVEF_F 0.0 VGV_S
    JR endif517
  else517_1:
    DATAF tmpf518
    DATA8 flag518
    DIVF VGV_MIN VGV_MAX tmpf518
    CP_EQF 0.0 VGV_MAX flag518
    SELECTF flag518 0.0 tmpf518 VGV_S

  else517_2:
  endif517:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else520_1
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB522:
    MOVEF_F 160.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB523:
    JR endif520
  else520_1:
    MOVEF_F 95.0 VLV_DEG_4
    MOVEF_F -30.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB524:
    MOVEF_F 90.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB525:
  else520_2:
  endif520:
    JR_NEQF VGV_W1B2 1.0 else526_1
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB527:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else528_1
    MOVEF_F 65.0 VLV_DEG_3
    MOVEF_F 30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB530:
    JR endif528
  else528_1:
    MOVEF_F 55.0 VLV_DEG_3
    MOVEF_F 30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB531:
  else528_2:
  endif528:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else533_1
    DATA32 milliseconds535
	MOVEF_32 700.0 milliseconds535
	DATA32 timer535
	TIMER_WAIT milliseconds535 timer535
	TIMER_READY timer535
  else533_1:
  endif533:
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB536:
    MOVEF_F 7.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB537:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else538_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB540:
  else538_1:
  endif538:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else541_1
    MOVEF_F 58.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB543:
    JR endif541
  else541_1:
    MOVEF_F 48.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB544:
  else541_2:
  endif541:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB545:
  else526_1:
  endif526:
    MOVEF_F 0.0 VGV_W1B2
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else547_1
    DATA32 milliseconds549
	MOVEF_32 700.0 milliseconds549
	DATA32 timer549
	TIMER_WAIT milliseconds549 timer549
	TIMER_READY timer549
  else547_1:
  endif547:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 10.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB550:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB551 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB551:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else552_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB554:
  else552_1:
  endif552:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB555:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB556:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB557:
    JR_NEQF VGV_W 1.0 else558_1
    MOVEF_F 70.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB559:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB560 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB560:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB561:
    MOVEF_F 30.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB562:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB563:
  else558_1:
  endif558:
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else565_1
    DATA32 milliseconds567
	MOVEF_32 1000.0 milliseconds567
	DATA32 timer567
	TIMER_WAIT milliseconds567 timer567
	TIMER_READY timer567
  else565_1:
  endif565:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB568:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else569_1
    JR_NEQF VGV_W 3.0 else571_1
    MOVEF_F 37.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB572:
    JR endif571
  else571_1:
    MOVEF_F 17.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB573:
  else571_2:
  endif571:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB575:
  else569_1:
  endif569:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB577:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB578 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB578:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else580_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB582:
  else580_1:
  endif580:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else583_1
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB585:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB586:
    JR endif583
  else583_1:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -30.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB587:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB588:
  else583_2:
  endif583:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB590:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB591:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else593_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB595:
  else593_1:
  endif593:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else596_1
    JR_NEQF VGV_B 3.0 else596_1
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB598 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB598:
    JR endif596
  else596_1:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB599:
  else596_2:
  endif596:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB600:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB601:
    JR_NEQF VGV_B 2.0 else602_1
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB603:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB604:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB605 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB605:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB606:
  else602_1:
  endif602:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf609
    DATA8 flag609
    DIVF VLV_MM_2 F.1 tmpf609
    CP_EQF 0.0 F.1 flag609
    SELECTF flag609 0.0 tmpf609 F.0

    MULF F.0 360.0 VLV_L_2
    JR_GTEQF VLV_V_2 0.0 else611_1
    MOVEF_F -10.0 VLV_SP_2
    JR endif611
  else611_1:
    MOVEF_F 10.0 VLV_SP_2
  else611_2:
  endif611:
    MOVEF_F 0.0 VLV_DEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while613:
    JR_GTEQF VLV_DEG_2 VLV_L_2 endwhile613
  whilebody613:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf618
    DATA8 flag618
    DIVF F.0 2.0 tmpf618
    CP_EQF 0.0 2.0 flag618
    SELECTF flag618 0.0 tmpf618 VLV_DEG_2

    MULF VLV_L_2 0.7 F.0
    JR_LTEQF VLV_DEG_2 F.0 else619_1
    MATH ABS VLV_SP_2 F.0
    JR_LTEQF F.0 10.0 else619_1
    JR_LTEQF VLV_V_2 0.0 else622_1
    SUBF VLV_SP_2 0.2 VLV_SP_2
    JR endif622
  else622_1:
    ADDF VLV_SP_2 0.2 VLV_SP_2
  else622_2:
  endif622:
    JR endif619
  else619_1:
    MATH ABS VLV_SP_2 F.0
    MATH ABS VLV_V_2 F.1
    JR_GTEQF F.0 F.1 else619_2
    JR_LTEQF VLV_V_2 0.0 else627_1
    ADDF VLV_SP_2 0.2 VLV_SP_2
    JR endif627
  else627_1:
    SUBF VLV_SP_2 0.2 VLV_SP_2
  else627_2:
  endif627:
  else619_2:
  endif619:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_2
    MULF VLV_U_2 2.0 F.1
    ADDF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_2 2.0 F.1
    SUBF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_2 VLV_L_2 whilebody613
  endwhile613:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf640
    DATA8 flag640
    DIVF F.0 360.0 tmpf640
    CP_EQF 0.0 360.0 flag640
    SELECTF flag640 0.0 tmpf640 VLV_L_3

    DATAF tmpf641
    DATA8 flag641
    DIVF VLV_L_3 210.38 tmpf641
    CP_EQF 0.0 210.38 flag641
    SELECTF flag641 0.0 tmpf641 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while644:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile644
  whilebody644:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'B' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or649
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else648_1
  or649:
    JR_GTEQF VLV_SP_3 0.0 else652_1
    MOVEF_F -30.0 VLV_V_3
    JR endif652
  else652_1:
    MOVEF_F 30.0 VLV_V_3
  else652_2:
  endif652:
    JR endif648
  else648_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else648_2:
  endif648:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody644
  endwhile644:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_4 F.0
    DATAF tmpf656
    DATA8 flag656
    DIVF F.0 360.0 tmpf656
    CP_EQF 0.0 360.0 flag656
    SELECTF flag656 0.0 tmpf656 VLV_L_4

    DATAF tmpf657
    DATA8 flag657
    DIVF VLV_L_4 210.38 tmpf657
    CP_EQF 0.0 210.38 flag657
    SELECTF flag657 0.0 tmpf657 F.0

    MULF F.0 360.0 VLV_L_4
    MOVEF_F 30.0 VLV_V_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_4
  while660:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile660
  whilebody660:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_4
    CALL MOTOR.STARTPOWER 'C' VLV_V_4
    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or665
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else664_1
  or665:
    JR_GTEQF VLV_SP_4 0.0 else668_1
    MOVEF_F -30.0 VLV_V_4
    JR endif668
  else668_1:
    MOVEF_F 30.0 VLV_V_4
  else668_2:
  endif668:
    JR endif664
  else664_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else664_2:
  endif664:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody660
  endwhile660:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf675
    DATA8 flag675
    DIVF F.0 360.0 tmpf675
    CP_EQF 0.0 360.0 flag675
    SELECTF flag675 0.0 tmpf675 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf678
    DATA8 flag678
    DIVF VLV_L_5 F.2 tmpf678
    CP_EQF 0.0 F.2 flag678
    SELECTF flag678 0.0 tmpf678 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf680
    DATA8 flag680
    DIVF F.0 2.0 tmpf680
    CP_EQF 0.0 2.0 flag680
    SELECTF flag680 0.0 tmpf680 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while682:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile682
  whilebody682:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf688
    DATA8 flag688
    DIVF F.0 2.0 tmpf688
    CP_EQF 0.0 2.0 flag688
    SELECTF flag688 0.0 tmpf688 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or690
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else689_1
  or690:
    MOVEF_F 30.0 VLV_V_5
    JR endif689
  else689_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else689_2:
  endif689:
    CALL MOTOR.STARTPOWER 'B' VLV_V_5
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody682
  endwhile682:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_6 F.0
    DATAF tmpf701
    DATA8 flag701
    DIVF F.0 360.0 tmpf701
    CP_EQF 0.0 360.0 flag701
    SELECTF flag701 0.0 tmpf701 VLV_L_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf704
    DATA8 flag704
    DIVF VLV_L_6 F.2 tmpf704
    CP_EQF 0.0 F.2 flag704
    SELECTF flag704 0.0 tmpf704 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf706
    DATA8 flag706
    DIVF F.0 2.0 tmpf706
    CP_EQF 0.0 2.0 flag706
    SELECTF flag706 0.0 tmpf706 VLV_L_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_6
    MOVEF_F 0.0 VLV_DEG_6
  while708:
    JR_GTF VLV_DEG_6 VLV_L_6 endwhile708
  whilebody708:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf714
    DATA8 flag714
    DIVF F.0 2.0 tmpf714
    CP_EQF 0.0 2.0 flag714
    SELECTF flag714 0.0 tmpf714 VLV_DEG_6

    MULF VLV_L_6 0.2 F.0
    JR_LTF VLV_DEG_6 F.0 or716
    MULF VLV_L_6 0.8 F.0
    JR_LTEQF VLV_DEG_6 F.0 else715_1
  or716:
    MOVEF_F 30.0 VLV_V_6
    JR endif715
  else715_1:
    MOVEF_F VLV_SP_6 VLV_V_6
  else715_2:
  endif715:
    SUBF 0.0 VLV_V_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_6
    JR_LTEQF VLV_DEG_6 VLV_L_6 whilebody708
  endwhile708:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while725:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or726
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile725
  or726:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile725
  whilebody725:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or746
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and745
  or746:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody725
  and745:
  endwhile725:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while758:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or759
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile758
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile758
  or759:
  whilebody758:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody758
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and782
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody758
  and782:
  endwhile758:
    JR_GTEQF VLV_SP_10 0.0 else788_1
    MOVEF_F -70.0 VLV_SP_10
    JR endif788
  else788_1:
    MOVEF_F 70.0 VLV_SP_10
  else788_2:
  endif788:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_10
    DATA32 milliseconds790
	MOVEF_32 300.0 milliseconds790
	DATA32 timer790
	TIMER_WAIT milliseconds790 timer790
	TIMER_READY timer790
    DATA32 tmp791
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp791
    JR_NEQ32 0 tmp791 alreadylaunched791
    OBJECT_START TF_BEEP_0
  alreadylaunched791:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_11
    DATA8 layer793
	DATA8 no793
	DATA8 mode8793
	
	MOVEF_8 2.0 no793
	SUB8 no793 1 no793
	DIV8 no793 4 layer793
	MATH MOD8 no793 4 no793

	MOVEF_8 2.0 mode8793
	
	INPUT_DEVICE READY_RAW layer793 no793 0 mode8793 0
    DATA8 layer794
	DATA8 no794
	DATA8 mode8794
	
	MOVEF_8 3.0 no794
	SUB8 no794 1 no794
	DIV8 no794 4 layer794
	MATH MOD8 no794 4 no794

	MOVEF_8 2.0 mode8794
	
	INPUT_DEVICE READY_RAW layer794 no794 0 mode8794 0
  while795:
    JR_EQF VLV_WHITE_11 1.0 endwhile795
  whilebody795:
    CALL MOTOR.RESETCOUNT 'BC'
  while797:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or798
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile797
  or798:
  whilebody797:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody797
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody797
  endwhile797:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_11
  while813:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_11 endwhile813
  whilebody813:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_11 whilebody813
  endwhile813:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else827_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else827_1
    MOVEF_F 1.0 VLV_WHITE_11
  else827_1:
  endif827:
    JR_NEQF VLV_WHITE_11 1.0 whilebody795
  endwhile795:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer831
	DATA8 no831
	DATA8 mode8831
	
	MOVEF_8 2.0 no831
	SUB8 no831 1 no831
	DIV8 no831 4 layer831
	MATH MOD8 no831 4 no831

	MOVEF_8 0.0 mode8831
	
	INPUT_DEVICE READY_RAW layer831 no831 0 mode8831 0
    DATA8 layer832
	DATA8 no832
	DATA8 mode8832
	
	MOVEF_8 3.0 no832
	SUB8 no832 1 no832
	DIV8 no832 4 layer832
	MATH MOD8 no832 4 no832

	MOVEF_8 0.0 mode8832
	
	INPUT_DEVICE READY_RAW layer832 no832 0 mode8832 0
  while833:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile833
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile833
  whilebody833:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and845
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody833
  and845:
  endwhile833:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds852
	MOVEF_32 500.0 milliseconds852
	DATA32 timer852
	TIMER_WAIT milliseconds852 timer852
	TIMER_READY timer852
  while853:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf857
    DATA8 flag857
    DIVF F.1 2.0 tmpf857
    CP_EQF 0.0 2.0 flag857
    SELECTF flag857 0.0 tmpf857 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile853
  whilebody853:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf863
    DATA8 flag863
    DIVF F.1 2.0 tmpf863
    CP_EQF 0.0 2.0 flag863
    SELECTF flag863 0.0 tmpf863 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody853
  endwhile853:
    CALL MOTOR.STOP VLV_MOTOR_12 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_13 VLV_SP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds868
	MOVEF_32 500.0 milliseconds868
	DATA32 timer868
	TIMER_WAIT milliseconds868 timer868
	TIMER_READY timer868
  while869:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf873
    DATA8 flag873
    DIVF F.1 2.0 tmpf873
    CP_EQF 0.0 2.0 flag873
    SELECTF flag873 0.0 tmpf873 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile869
  whilebody869:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf878
    DATA8 flag878
    DIVF F.1 2.0 tmpf878
    CP_EQF 0.0 2.0 flag878
    SELECTF flag878 0.0 tmpf878 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody869
  endwhile869:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_13 F.0
    CALL MOTOR.START VLV_MOTOR_13 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_13
  while884:
    CALL MOTOR.GETCOUNT VLV_MOTOR_13 F.0
    JR_LTEQF F.0 -23.0 endwhile884
  whilebody884:
    CALL MOTOR.GETCOUNT VLV_MOTOR_13 F.0
    JR_GTF F.0 -23.0 whilebody884
  endwhile884:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
