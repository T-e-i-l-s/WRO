DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_DEG_5
DATAF VLV_SP_5
DATAF VLV_MM_2
DATAF VLV_V_2
DATAF VLV_DEG_3
DATAF VLV_SP_3
DATAF VLV_DEG_4
DATAF VLV_SP_4
DATAS VLV_MOTOR_12 252
DATAF VLV_SP_12
DATAF VLV_SP_10
DATAF VLV_DEG_6
DATAF VLV_SP_6
DATAF VLV_SP_11
DATAS VLV_MOTOR_13 252
DATAF VLV_SP_13
DATAF VGV_K
DATAF VGV_V
DATAF VGV_MM
DATAF VGV_K_ACCEL
DATAF VGV_MAX1
DATAF VGV_MIN1
DATAF VGV_MAX2
DATAF VGV_MIN2
DATAS VGV_FLAG 252
DATAF VGV_W
DATAF VGV_B
DATAF VGV_W1B2
DATAF VGV_F
DATAF VGV_U
DATAF VGV_L
DATAF VGV_Z1
DATAF VGV_Z2
ARRAY16 VGV_RES 2
DATAF VGV_I
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_NUM
DATAF VGV_R
DATAF VGV_G
DATAF VGV_RGB
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_W2
DATAF VGV_B2
DATAF VGV_W1
DATAF VGV_B1
DATAF VGV_ZONE1
DATAF VGV_SP
DATAF VGV_ZONE2
DATAF VGV_TIME
DATAF VGV_S1
DATAF VGV_S2
DATAF VLV_L_2
DATAF VLV_SP_2
DATAF VLV_DEG_2
DATAF VLV_U_2
DATAF VLV_L_3
DATAF VLV_V_3
DATAF VLV_L_4
DATAF VLV_V_4
DATAF VLV_L_5
DATAF VLV_V_5
DATAF VLV_L_6
DATAF VLV_V_6
DATAF VLV_U_10
DATAF VLV_WHITE_11
DATAF VLV_U_11
DATAF VLV_L_11
DATA32 RUNCOUNTER_F_TH_DOWN_0
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYCREATE_FLOAT VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_SP_2
    MOVEF_F 0.0 VLV_DEG_2
    MOVEF_F 0.0 VLV_U_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_V_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_V_4
    MOVEF_F 0.0 VLV_L_5
    MOVEF_F 0.0 VLV_V_5
    MOVEF_F 0.0 VLV_L_6
    MOVEF_F 0.0 VLV_V_6
    MOVEF_F 0.0 VLV_U_10
    MOVEF_F 0.0 VLV_WHITE_11
    MOVEF_F 0.0 VLV_U_11
    MOVEF_F 0.0 VLV_L_11
    MOVE32_32 0 RUNCOUNTER_F_TH_DOWN_0
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_TH_DOWN_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_TH_DOWN_0 0
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 -1 RUNCOUNTER_F_TH_DOWN_0 tmp
    JR_GT32 tmp 1 launch
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 1
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_TH_DOWN_0
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch874
    WRITE32 ENDSUB_F_TH_DOWN_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TH_DOWN_0
  dispatch874:
    JR_NEQ32 SUBPROGRAM 1 dispatch875
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch875:
    MOVEF_F 0.0 VLV_DEG_5
    MOVEF_F 0.0 VLV_SP_5
    MOVEF_F 0.0 VLV_MM_2
    MOVEF_F 0.0 VLV_V_2
    MOVEF_F 0.0 VLV_DEG_3
    MOVEF_F 0.0 VLV_SP_3
    MOVEF_F 0.0 VLV_DEG_4
    MOVEF_F 0.0 VLV_SP_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_SP_12
    MOVEF_F 0.0 VLV_SP_10
    MOVEF_F 0.0 VLV_DEG_6
    MOVEF_F 0.0 VLV_SP_6
    MOVEF_F 0.0 VLV_SP_11
    STRINGS DUPLICATE '' VLV_MOTOR_13
    MOVEF_F 0.0 VLV_SP_13
    MOVEF_F 0.0 VGV_K
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MIN2
    STRINGS DUPLICATE '' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_U
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_Z1
    MOVEF_F 0.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_NUM
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_RGB
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_ZONE1
    MOVEF_F 0.0 VGV_SP
    MOVEF_F 0.0 VGV_ZONE2
    MOVEF_F 0.0 VGV_TIME
    TIMER_READ timeMC1
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.17 VGV_K
    MOVEF_F 30.0 VGV_V
    MOVEF_F 0.0 VGV_MM
    MOVEF_F 0.0 VGV_K_ACCEL
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 100.0 VGV_MIN1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 100.0 VGV_MIN2
    STRINGS DUPLICATE 'false' VGV_FLAG
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W1B2
    CALL EV3FILE.OPENWRITE 'report.txt' VGV_F
    DATA32 tmp9
    CALL GETANDINC32 RUNCOUNTER_F_TH_DOWN_0 1  RUNCOUNTER_F_TH_DOWN_0 tmp9
    JR_NEQ32 0 tmp9 alreadylaunched9
    OBJECT_START TF_TH_DOWN_0
  alreadylaunched9:
    MOVEF_F 15.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB10:
    MOVEF_F 85.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB11:
    CALL MOTOR.RESETCOUNT 'BC'
  while13:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile13
  whilebody13:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody13
  endwhile13:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 258.886377645367 VGV_L
  while26:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf30
    DATA8 flag30
    DIVF F.1 2.0 tmpf30
    CP_EQF 0.0 2.0 flag30
    SELECTF flag30 0.0 tmpf30 F.0

    JR_GTEQF F.0 VGV_L endwhile26
  whilebody26:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB31:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf35
    DATA8 flag35
    DIVF F.1 2.0 tmpf35
    CP_EQF 0.0 2.0 flag35
    SELECTF flag35 0.0 tmpf35 F.0

    JR_LTF F.0 VGV_L whilebody26
  endwhile26:
    CALL MOTOR.RESETCOUNT 'BC'
  while37:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 or38
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile37
  or38:
  whilebody37:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF -30.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 25.0 whilebody37
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody37
  endwhile37:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB52:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 110.951304705157 VGV_L
  while54:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 2.0 tmpf58
    CP_EQF 0.0 2.0 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    JR_GTEQF F.0 VGV_L endwhile54
  whilebody54:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB59:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 2.0 tmpf63
    CP_EQF 0.0 2.0 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    JR_LTF F.0 VGV_L whilebody54
  endwhile54:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 175.672899116499 VGV_L
  while65:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf69
    DATA8 flag69
    DIVF F.1 2.0 tmpf69
    CP_EQF 0.0 2.0 flag69
    SELECTF flag69 0.0 tmpf69 F.0

    JR_GTEQF F.0 VGV_L endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB70:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf74
    DATA8 flag74
    DIVF F.1 2.0 tmpf74
    CP_EQF 0.0 2.0 flag74
    SELECTF flag74 0.0 tmpf74 F.0

    JR_LTF F.0 VGV_L whilebody65
  endwhile65:
    MOVEF_F 1.0 VGV_Z1
    MOVEF_F 1.0 VGV_Z2
    CALL VECTOR.INIT 4.0 0.0 VGV_RES
    MOVEF_F 0.0 VGV_I
  for76:
    JR_GTF VGV_I 3.0 endfor76
  forbody76:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB77:
    JR_LTF VGV_NUM 2.0 else78_1
    JR_GTF VGV_NUM 3.0 else78_1
    ADDF VGV_I 1.0 VGV_Z2
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif78
  else78_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else78_2:
  endif78:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 83.2134785288679 VGV_L
  while84:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 2.0 tmpf88
    CP_EQF 0.0 2.0 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    JR_GTEQF F.0 VGV_L endwhile84
  whilebody84:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB89:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf93
    DATA8 flag93
    DIVF F.1 2.0 tmpf93
    CP_EQF 0.0 2.0 flag93
    SELECTF flag93 0.0 tmpf93 F.0

    JR_LTF F.0 VGV_L whilebody84
  endwhile84:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody76
  endfor76:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_W2
    MOVEF_F 0.0 VGV_B2
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for97:
    JR_GTF VGV_I 3.0 endfor97
  forbody97:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else101_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W2 VGV_B2
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W2
    JR endif101
  else101_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else101_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B2
  else101_2:
  endif101:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody97
  endfor97:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 120.19724676392 VGV_L
  while104:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf108
    DATA8 flag108
    DIVF F.1 2.0 tmpf108
    CP_EQF 0.0 2.0 flag108
    SELECTF flag108 0.0 tmpf108 F.0

    JR_GTEQF F.0 VGV_L endwhile104
  whilebody104:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB109 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB109:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf113
    DATA8 flag113
    DIVF F.1 2.0 tmpf113
    CP_EQF 0.0 2.0 flag113
    SELECTF flag113 0.0 tmpf113 F.0

    JR_LTF F.0 VGV_L whilebody104
  endwhile104:
    MOVEF_F 0.0 VGV_W1
    MOVEF_F 0.0 VGV_B1
    MOVEF_F 0.0 VGV_I
  for114:
    JR_GTF VGV_I 3.0 endfor114
  forbody114:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB115:
    JR_LTF VGV_NUM 2.0 else116_1
    JR_GTF VGV_NUM 3.0 else116_1
    ADDF VGV_I 1.0 VGV_Z1
    CALL ARRAYSTORE_FLOAT VGV_I 0.0 VGV_RES
    CALL SPEAKER.TONE 20.0 1200.0 200.0
    JR endif116
  else116_1:
    CALL ARRAYSTORE_FLOAT VGV_I VGV_G VGV_RES
  else116_2:
  endif116:
    JR_GTEQF VGV_I 2.0 else121_1
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while123:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    JR_GTEQF F.0 VGV_L endwhile123
  whilebody123:
    WRITE32 ENDSUB_F_LINE2_1SENS_0:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE2_1SENS_0
CALLSUB128:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf132
    DATA8 flag132
    DIVF F.1 2.0 tmpf132
    CP_EQF 0.0 2.0 flag132
    SELECTF flag132 0.0 tmpf132 F.0

    JR_LTF F.0 VGV_L whilebody123
  endwhile123:
    JR endif121
  else121_1:
    JR_NEQF VGV_I 2.0 else121_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 92.459420587631 VGV_L
  while134:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf138
    DATA8 flag138
    DIVF F.1 2.0 tmpf138
    CP_EQF 0.0 2.0 flag138
    SELECTF flag138 0.0 tmpf138 F.0

    JR_GTEQF F.0 VGV_L endwhile134
  whilebody134:
    WRITE32 ENDSUB_F_LINE3_1SENS_0:CALLSUB139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE3_1SENS_0
CALLSUB139:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf143
    DATA8 flag143
    DIVF F.1 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.0

    JR_LTF F.0 VGV_L whilebody134
  endwhile134:
  else121_2:
  endif121:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody114
  endfor114:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB145:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EV3FILE.WRITELINE VGV_F ''
    MOVEF_F 0.0 VGV_MAX1
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_I
  for148:
    JR_GTF VGV_I 3.0 endfor148
  forbody148:
    CALL ARRAYGET_FLOAT VGV_I VGV_NUM VGV_RES
    STRINGS VALUE_FORMATTED VGV_NUM '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    JR_LTEQF VGV_NUM VGV_MAX1 else152_1
    MOVEF_F VGV_MAX1 VGV_MAX2
    MOVEF_F VGV_W1 VGV_B1
    MOVEF_F VGV_NUM VGV_MAX1
    MOVEF_F VGV_I VGV_W1
    JR endif152
  else152_1:
    JR_LTEQF VGV_NUM VGV_MAX2 else152_2
    MOVEF_F VGV_NUM VGV_MAX2
    MOVEF_F VGV_I VGV_B1
  else152_2:
  endif152:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 3.0 forbody148
  endfor148:
    ADDF VGV_B1 1.0 VGV_B1
    ADDF VGV_B2 1.0 VGV_B2
    ADDF VGV_W1 1.0 VGV_W1
    ADDF VGV_W2 1.0 VGV_W2
    ADDF VGV_B2 VGV_Z2 F.0
    MATH MOD F.0 4.0 VGV_B2
    ADDF VGV_W2 VGV_Z2 F.0
    MATH MOD F.0 4.0 VGV_W2
    ADDF VGV_B1 VGV_Z1 F.0
    MATH MOD F.0 4.0 VGV_B1
    ADDF VGV_W1 VGV_Z1 F.0
    MATH MOD F.0 4.0 VGV_W1
    JR_NEQF VGV_B2 0.0 else166_1
    MOVEF_F 4.0 VGV_B2
  else166_1:
  endif166:
    JR_NEQF VGV_W2 0.0 else167_1
    MOVEF_F 4.0 VGV_W2
  else167_1:
  endif167:
    JR_NEQF VGV_B1 0.0 else168_1
    MOVEF_F 4.0 VGV_B1
  else168_1:
  endif168:
    JR_NEQF VGV_W1 0.0 else169_1
    MOVEF_F 4.0 VGV_W1
  else169_1:
  endif169:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_B2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_B1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    STRINGS VALUE_FORMATTED VGV_W1 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 110.0 2.0 S.0
    MOVEF_F 32.0 VLV_DEG_3
    MOVEF_F 40.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB179:
    MOVEF_F 35.0 VLV_DEG_4
    MOVEF_F 40.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB180:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 184.918841175262 VGV_L
  while182:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf186
    DATA8 flag186
    DIVF F.1 2.0 tmpf186
    CP_EQF 0.0 2.0 flag186
    SELECTF flag186 0.0 tmpf186 F.0

    JR_GTEQF F.0 VGV_L endwhile182
  whilebody182:
    MOVEF_F 1.6 VGV_K
    MOVEF_F 23.0 VGV_V
    CALL SENSOR.READPERCENT 3.0 F.0
    CALL SENSOR.READPERCENT 2.0 F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf199
    DATA8 flag199
    DIVF F.1 2.0 tmpf199
    CP_EQF 0.0 2.0 flag199
    SELECTF flag199 0.0 tmpf199 F.0

    JR_LTF F.0 VGV_L whilebody182
  endwhile182:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB200:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB202:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB203:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB204:
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB205:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB206:
    MOVEF_F 780.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB207:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 40.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB208:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB209:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB210:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB211:
    MOVEF_F 92.0 VLV_DEG_6
    MOVEF_F 20.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB212:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB213:
    MOVEF_F 800.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB214:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB215:
    CALL MOTOR.SCHEDULESYNC 'BC' 50.0 26.0 910.0 'true'

	DATA8 layer216
	DATA8 nos216
	DATA8 busy216
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer216 nos216
	JR_EQ8 0 nos216 motornotbusy216
  motorwaiting216:
	OUTPUT_TEST layer216 nos216 busy216
	JR_EQ8 busy216 0 motornotbusy216
	SLEEP
	JR motorwaiting216
  motornotbusy216:
    MOVEF_F 630.0 VLV_MM_2
    MOVEF_F 70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB217:
    MOVEF_F 500.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB218:
    CALL MOTOR.SCHEDULESYNC 'BC' -50.0 -26.0 910.0 'true'

	DATA8 layer219
	DATA8 nos219
	DATA8 busy219
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer219 nos219
	JR_EQ8 0 nos219 motornotbusy219
  motorwaiting219:
	OUTPUT_TEST layer219 nos219 busy219
	JR_EQ8 busy219 0 motornotbusy219
	SLEEP
	JR motorwaiting219
  motornotbusy219:
    MOVEF_F 320.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB220:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB221:
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB222:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB223:
    TIMER_READ timeMC2
    MOVEF_F VGV_W1 VGV_W
    MOVEF_F VGV_B1 VGV_B
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB225:
    MOVEF_F 88.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB226:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB227:
    JR_EQF VGV_B 1.0 or229
    JR_NEQF VGV_W 2.0 else228_1
  or229:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB230:
    JR_NEQF VGV_W 2.0 else231_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB232:
  else231_1:
  endif231:
    JR_NEQF VGV_B 1.0 else233_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB234:
  else233_1:
  endif233:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB235:
    JR endif228
  else228_1:
    JR_EQF VGV_B 2.0 or236
    JR_NEQF VGV_W 1.0 else228_2
  or236:
    JR_NEQF VGV_B 2.0 else237_1
    JR_NEQF VGV_W 1.0 else237_1
    MOVEF_F 1.0 VGV_W1B2
  else237_1:
  endif237:
    JR_NEQF VGV_W 1.0 else238_1
    MOVEF_F 370.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB239:
    WRITE32 ENDSUB_F_W1_0:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB240:
  else238_1:
  endif238:
    JR_NEQF VGV_B 2.0 else241_1
    JR_EQF VGV_W 1.0 else241_1
    MOVEF_F 190.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB242:
    WRITE32 ENDSUB_F_B2_0:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB243:
  else241_1:
  endif241:
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB244:
    MOVEF_F 88.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB245:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB246:
  else228_2:
  endif228:
    JR_EQF VGV_B 4.0 or248
    JR_NEQF VGV_W 3.0 else247_1
  or248:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB249:
    JR_NEQF VGV_W 3.0 else250_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB251 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB251:
  else250_1:
  endif250:
    JR_NEQF VGV_B 4.0 else252_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB253:
  else252_1:
  endif252:
    JR endif247
  else247_1:
    JR_EQF VGV_B 3.0 or254
    JR_NEQF VGV_W 4.0 else247_2
  or254:
    JR_NEQF VGV_B 3.0 else255_1
    JR_NEQF VGV_W 4.0 else255_1
    MOVEF_F 1.0 VGV_W1B2
  else255_1:
  endif255:
    JR_NEQF VGV_W 4.0 else256_1
    MOVEF_F 118.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB257:
    WRITE32 ENDSUB_F_W1_0:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB258:
  else256_1:
  endif256:
    JR_NEQF VGV_B 3.0 else259_1
    JR_EQF VGV_W 4.0 else259_1
    MOVEF_F 307.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB260:
    WRITE32 ENDSUB_F_B2_0:CALLSUB261 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB261:
  else259_1:
  endif259:
    JR endif247
  else247_2:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB262 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB262:
  else247_3:
  endif247:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE1
    JR_EQF VGV_B 3.0 else264_1
    JR_EQF VGV_W 4.0 else264_1
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB265:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB266:
    MOVEF_F 93.0 VLV_DEG_3
    MOVEF_F -70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB267 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB267:
  else264_1:
  endif264:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB269:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB270:
    STRINGS DUPLICATE 'true' VGV_FLAG
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB271:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB272:
    MOVEF_F -35.0 VGV_SP
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while275:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile275
  whilebody275:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 2.0 F.1
    ADDF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 2.0 F.1
    SUBF VGV_SP F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody275
  endwhile275:
    CALL MOTOR.START 'D' 20.0
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB288:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB289:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 60.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB292:
    CALL MOTOR.START 'AD' -20.0
    MOVEF_F 70.0 VLV_DEG_3
    MOVEF_F 70.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB294:
    MOVEF_F 72.0 VLV_DEG_4
    MOVEF_F 70.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB295:
    MOVEF_F 310.0 VLV_MM_2
    MOVEF_F 95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB296:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB298:
    MOVEF_F 570.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB299:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB300:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds302
	MOVEF_32 700.0 milliseconds302
	DATA32 timer302
	TIMER_WAIT milliseconds302 timer302
	TIMER_READY timer302
    STRINGS DUPLICATE 'AD' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB303:
    MOVEF_F 13.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB304:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB306:
    MOVEF_F 130.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB307:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB308:
    MOVEF_F 50.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB309:
    MOVEF_F -40.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB310:
    TIMER_READ timeMC2
    MOVEF_F VGV_W2 VGV_W
    MOVEF_F VGV_B2 VGV_B
    MOVEF_F 72.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB312:
    MOVEF_F 89.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB313:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB314:
    JR_EQF VGV_B 1.0 or316
    JR_NEQF VGV_W 2.0 else315_1
  or316:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB317:
    JR_NEQF VGV_W 2.0 else318_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB319:
  else318_1:
  endif318:
    JR_NEQF VGV_B 1.0 else320_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB321:
  else320_1:
  endif320:
    MOVEF_F -30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB322:
    JR endif315
  else315_1:
    JR_EQF VGV_B 2.0 or323
    JR_NEQF VGV_W 1.0 else315_2
  or323:
    JR_NEQF VGV_B 2.0 else324_1
    JR_NEQF VGV_W 1.0 else324_1
    MOVEF_F 1.0 VGV_W1B2
  else324_1:
  endif324:
    JR_NEQF VGV_W 1.0 else325_1
    MOVEF_F 460.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB326:
    WRITE32 ENDSUB_F_W1_0:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB327:
  else325_1:
  endif325:
    JR_NEQF VGV_B 2.0 else328_1
    JR_EQF VGV_W 1.0 else328_1
    MOVEF_F 280.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB329:
    WRITE32 ENDSUB_F_B2_0:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB330:
  else328_1:
  endif328:
    MOVEF_F 72.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB331:
    MOVEF_F 89.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB332:
    MOVEF_F 30.0 VLV_SP_11
    WRITE32 ENDSUB_F_TOLINE_1:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TOLINE_1
CALLSUB333:
  else315_2:
  endif315:
    JR_EQF VGV_B 4.0 or335
    JR_NEQF VGV_W 3.0 else334_1
  or335:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB336:
    JR_NEQF VGV_W 3.0 else337_1
    WRITE32 ENDSUB_F_W2_0:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W2_0
CALLSUB338:
  else337_1:
  endif337:
    JR_NEQF VGV_B 4.0 else339_1
    WRITE32 ENDSUB_F_B1_0:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B1_0
CALLSUB340:
  else339_1:
  endif339:
    JR endif334
  else334_1:
    JR_EQF VGV_B 3.0 or341
    JR_NEQF VGV_W 4.0 else334_2
  or341:
    JR_NEQF VGV_B 3.0 else342_1
    JR_NEQF VGV_W 4.0 else342_1
    MOVEF_F 1.0 VGV_W1B2
  else342_1:
  endif342:
    JR_NEQF VGV_W 4.0 else343_1
    MOVEF_F 47.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB344:
    WRITE32 ENDSUB_F_W1_0:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_W1_0
CALLSUB345:
  else343_1:
  endif343:
    JR_NEQF VGV_B 3.0 else346_1
    JR_EQF VGV_W 4.0 else346_1
    MOVEF_F 225.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB347:
    WRITE32 ENDSUB_F_B2_0:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_B2_0
CALLSUB348:
  else346_1:
  endif346:
    JR endif334
  else334_2:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB349:
  else334_3:
  endif334:
    JR_EQF VGV_B 3.0 else350_1
    JR_EQF VGV_W 4.0 else350_1
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB351:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB352:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB353:
    JR endif350
  else350_1:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB354:
    MOVEF_F 92.0 VLV_DEG_6
    MOVEF_F 40.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB355:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB356:
  else350_2:
  endif350:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB357:
    TIMER_READ timeMC2tmp
	SUB32 timeMC2tmp timeMC2 timeMC2tmp
	MOVE32_F timeMC2tmp VGV_ZONE2
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB359:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 60.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB360:
    CALL MOTOR.RESETCOUNT 'BC'
  while362:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 63.0 endwhile362
  whilebody362:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VGV_U 0.8 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 63.0 whilebody362
  endwhile362:
    MOVEF_F 40.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB374 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB374:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 60.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB375:
    MOVEF_F -50.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB376:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F 60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB377:
    MOVEF_F 100.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB378:
    MOVEF_F 210.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB379:
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB380:
    MOVEF_F -35.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB381:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB382:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.START 'D' 20.0
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB385 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB385:
    CALL MOTOR.START 'AD' -30.0
    MOVEF_F 100.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB387 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB387:
    CALL MOTOR.START 'AD' 30.0
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB389:
    MOVEF_F 450.0 VLV_MM_2
    MOVEF_F 90.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB390:
    MOVEF_F 100.0 VLV_DEG_5
    MOVEF_F 50.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB391:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F -95.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB392:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB393:
    CALL MOTOR.STOP 'AD' 'true'
    MOVEF_F 45.0 VLV_MM_2
    MOVEF_F 40.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB395:
    MOVEF_F 93.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB396:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB397:
    MOVEF_F -20.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB398:
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB399:
    CALL MOTOR.STOP 'ABCD' 'true'
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp VGV_TIME
    CALL LCD.CLEAR
    DATAF tmpf403
    DATA8 flag403
    DIVF VGV_TIME 1000.0 tmpf403
    CP_EQF 0.0 1000.0 flag403
    SELECTF flag403 0.0 tmpf403 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 10.0 2.0 S.0
    DATAF tmpf406
    DATA8 flag406
    DIVF VGV_ZONE1 1000.0 tmpf406
    CP_EQF 0.0 1000.0 flag406
    SELECTF flag406 0.0 tmpf406 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 50.0 2.0 S.0
    DATAF tmpf409
    DATA8 flag409
    DIVF VGV_ZONE2 1000.0 tmpf409
    CP_EQF 0.0 1000.0 flag409
    SELECTF flag409 0.0 tmpf409 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 80.0 2.0 S.0
    CALL EV3FILE.WRITELINE VGV_F ''
    DATAF tmpf413
    DATA8 flag413
    DIVF VGV_TIME 1000.0 tmpf413
    CP_EQF 0.0 1000.0 flag413
    SELECTF flag413 0.0 tmpf413 F.0

    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL EV3FILE.WRITELINE VGV_F S.0
    CALL EV3FILE.CLOSE VGV_F
    WRITE32 ENDSUB_F_FRZ_0:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FRZ_0
CALLSUB417:
ENDTHREAD:
    RETURN
SUB_F_SEN1_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN1 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX1 VGV_MIN1 F.1
    DATAF tmpf422
    DATA8 flag422
    DIVF F.0 F.1 tmpf422
    CP_EQF 0.0 F.1 flag422
    SELECTF flag422 0.0 tmpf422 VGV_S1

RETSUB_F_SEN1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN1_0:
SUB_F_SEN2_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf427
    DATA8 flag427
    DIVF F.0 F.1 tmpf427
    CP_EQF 0.0 F.1 flag427
    SELECTF flag427 0.0 tmpf427 VGV_S2

RETSUB_F_SEN2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SEN2_0:
SUB_F_LINE_FOL_0:
    WRITE32 ENDSUB_F_SEN1_0:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN1_0
CALLSUB428:
    WRITE32 ENDSUB_F_SEN2_0:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SEN2_0
CALLSUB429:
    SUBF VGV_S1 VGV_S2 VGV_U
    MULF VGV_U VGV_K F.1
    SUBF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U VGV_K F.1
    ADDF VGV_V F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE_FOL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_FOL_0:
SUB_F_LINE2_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 1.1 F.1
    ADDF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 1.1 F.1
    SUBF 45.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE2_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE2_1SENS_0:
SUB_F_LINE3_1SENS_0:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF F.0 45.0 VGV_U
    MULF VGV_U 0.8 F.1
    ADDF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    MULF VGV_U 0.8 F.1
    SUBF 15.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
RETSUB_F_LINE3_1SENS_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE3_1SENS_0:
SUB_F_TH_DOWN_0:
    CALL MOTOR.START 'AD' 50.0
    DATA32 milliseconds454
	MOVEF_32 500.0 milliseconds454
	DATA32 timer454
	TIMER_WAIT milliseconds454 timer454
	TIMER_READY timer454
  while455:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf459
    DATA8 flag459
    DIVF F.1 2.0 tmpf459
    CP_EQF 0.0 2.0 flag459
    SELECTF flag459 0.0 tmpf459 F.0

    JR_LTEQF F.0 35.0 endwhile455
  whilebody455:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf463
    DATA8 flag463
    DIVF F.1 2.0 tmpf463
    CP_EQF 0.0 2.0 flag463
    SELECTF flag463 0.0 tmpf463 F.0

    JR_GTF F.0 35.0 whilebody455
  endwhile455:
    CALL MOTOR.STOP 'ABCD' 'true'
    CALL MOTOR.SCHEDULE 'AD' -10.0 0.0 24.0 0.0 'true' 

	DATA8 layer465
	DATA8 nos465
	DATA8 busy465
	CALL MOTORDECODEPORTSDESCRIPTOR 'AD' layer465 nos465
	JR_EQ8 0 nos465 motornotbusy465
  motorwaiting465:
	OUTPUT_TEST layer465 nos465 busy465
	JR_EQ8 busy465 0 motornotbusy465
	SLEEP
	JR motorwaiting465
  motornotbusy465:
RETSUB_F_TH_DOWN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TH_DOWN_0:
SUB_F_FRZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_FRZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FRZ_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 20.0 700.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_HSV_0:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C 1.0 1.0 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_NUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_R VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_G VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_B VGV_RECVARRAY
    ADDF VGV_R VGV_G F.0
    ADDF F.0 VGV_B VGV_RGB
    JR_LTEQF VGV_R VGV_G else478_1
    JR_LTEQF VGV_R VGV_B else478_1
    MOVEF_F VGV_R VGV_MAX
    JR endif478
  else478_1:
    JR_LTEQF VGV_G VGV_R else478_2
    JR_LTEQF VGV_G VGV_B else478_2
    MOVEF_F VGV_G VGV_MAX
    JR endif478
  else478_2:
    JR_LTEQF VGV_B VGV_R else478_3
    JR_LTEQF VGV_B VGV_G else478_3
    MOVEF_F VGV_B VGV_MAX
  else478_3:
  endif478:
    JR_GTEQF VGV_R VGV_G else479_1
    JR_GTEQF VGV_R VGV_B else479_1
    MOVEF_F VGV_R VGV_MIN
    JR endif479
  else479_1:
    JR_GTEQF VGV_G VGV_R else479_2
    JR_GTEQF VGV_G VGV_B else479_2
    MOVEF_F VGV_G VGV_MIN
    JR endif479
  else479_2:
    JR_GTEQF VGV_B VGV_R else479_3
    JR_GTEQF VGV_B VGV_G else479_3
    MOVEF_F VGV_B VGV_MIN
  else479_3:
  endif479:
    JR_NEQF VGV_MAX VGV_MIN else480_1
    MOVEF_F 0.0 VGV_H
    JR endif480
  else480_1:
    JR_NEQF VGV_R VGV_MAX else481_1
    JR_LTF VGV_G VGV_B else482_1
    SUBF VGV_G VGV_B F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf486
    DATA8 flag486
    DIVF F.0 F.1 tmpf486
    CP_EQF 0.0 F.1 flag486
    SELECTF flag486 0.0 tmpf486 VGV_H

    JR endif482
  else482_1:
    SUBF VGV_G VGV_B F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf490
    DATA8 flag490
    DIVF F.1 F.2 tmpf490
    CP_EQF 0.0 F.2 flag490
    SELECTF flag490 0.0 tmpf490 F.0

    ADDF F.0 360.0 VGV_H
  else482_2:
  endif482:
    JR endif481
  else481_1:
    JR_NEQF VGV_MAX VGV_G else492_1
    SUBF VGV_B VGV_R F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf496
    DATA8 flag496
    DIVF F.1 F.2 tmpf496
    CP_EQF 0.0 F.2 flag496
    SELECTF flag496 0.0 tmpf496 F.0

    ADDF F.0 120.0 VGV_H
    JR endif492
  else492_1:
    SUBF VGV_R VGV_G F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf501
    DATA8 flag501
    DIVF F.1 F.2 tmpf501
    CP_EQF 0.0 F.2 flag501
    SELECTF flag501 0.0 tmpf501 F.0

    ADDF F.0 240.0 VGV_H
  else492_2:
  endif492:
  else481_2:
  endif481:
  else480_2:
  endif480:
    JR_NEQF VGV_MAX 0.0 else503_1
    MOVEF_F 0.0 VGV_S
    JR endif503
  else503_1:
    DATAF tmpf504
    DATA8 flag504
    DIVF VGV_MIN VGV_MAX tmpf504
    CP_EQF 0.0 VGV_MAX flag504
    SELECTF flag504 0.0 tmpf504 VGV_S

  else503_2:
  endif503:
    MOVEF_F VGV_MAX VGV_V
    MULF VGV_S 100.0 VGV_S
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 100.0 VGV_MIN
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_W1_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else506_1
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB508:
    MOVEF_F 155.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB509:
    JR endif506
  else506_1:
    MOVEF_F 95.0 VLV_DEG_4
    MOVEF_F -30.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB510:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB511:
  else506_2:
  endif506:
    JR_NEQF VGV_W1B2 1.0 else512_1
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F 20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB513:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else514_1
    MOVEF_F 65.0 VLV_DEG_3
    MOVEF_F 30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB516:
    JR endif514
  else514_1:
    MOVEF_F 55.0 VLV_DEG_3
    MOVEF_F 30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB517:
  else514_2:
  endif514:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else519_1
    DATA32 milliseconds521
	MOVEF_32 700.0 milliseconds521
	DATA32 timer521
	TIMER_WAIT milliseconds521 timer521
	TIMER_READY timer521
  else519_1:
  endif519:
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB522:
    MOVEF_F 7.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB523:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else524_1
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB526:
  else524_1:
  endif524:
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else527_1
    MOVEF_F 58.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB529:
    JR endif527
  else527_1:
    MOVEF_F 48.0 VLV_DEG_3
    MOVEF_F -30.0 VLV_SP_3
    WRITE32 ENDSUB_F_RIGHT1_2:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT1_2
CALLSUB530:
  else527_2:
  endif527:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB531:
  else512_1:
  endif512:
    MOVEF_F 0.0 VGV_W1B2
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else533_1
    DATA32 milliseconds535
	MOVEF_32 700.0 milliseconds535
	DATA32 timer535
	TIMER_WAIT milliseconds535 timer535
	TIMER_READY timer535
  else533_1:
  endif533:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 10.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB536:
    MOVEF_F 35.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB537:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else538_1
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB540:
  else538_1:
  endif538:
    MOVEF_F 25.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB541:
    MOVEF_F 95.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB542:
    MOVEF_F 300.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB543:
    JR_NEQF VGV_W 1.0 else544_1
    MOVEF_F 70.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB545:
    STRINGS DUPLICATE 'AD' VLV_MOTOR_12
    MOVEF_F 30.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB546:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -50.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB547:
    MOVEF_F 30.0 VLV_DEG_6
    MOVEF_F 30.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB548:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB549:
  else544_1:
  endif544:
RETSUB_F_W1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W1_0:
SUB_F_W2_0:
    CALL MOTOR.STOP 'BC' 'true'
    CALL EQ_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else551_1
    DATA32 milliseconds553
	MOVEF_32 1000.0 milliseconds553
	DATA32 timer553
	TIMER_WAIT milliseconds553 timer553
	TIMER_READY timer553
  else551_1:
  endif551:
    STRINGS DUPLICATE 'D' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB554:
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else555_1
    JR_NEQF VGV_W 3.0 else557_1
    MOVEF_F 37.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB558:
    JR endif557
  else557_1:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB559:
  else557_2:
  endif557:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'D' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB561 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB561:
  else555_1:
  endif555:
RETSUB_F_W2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_W2_0:
SUB_F_B1_0:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB563:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB564:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else566_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB568:
  else566_1:
  endif566:
RETSUB_F_B1_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B1_0:
SUB_F_B2_0:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else569_1
    MOVEF_F 90.0 VLV_DEG_5
    MOVEF_F 30.0 VLV_SP_5
    WRITE32 ENDSUB_F_RIGHT2_2:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RIGHT2_2
CALLSUB571:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -20.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB572:
    JR endif569
  else569_1:
    MOVEF_F 90.0 VLV_DEG_4
    MOVEF_F -30.0 VLV_SP_4
    WRITE32 ENDSUB_F_LEFT1_2:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT1_2
CALLSUB573:
    MOVEF_F 30.0 VLV_MM_2
    MOVEF_F 30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB574:
  else569_2:
  endif569:
    CALL MOTOR.STOP 'BC' 'true'
    STRINGS DUPLICATE 'A' VLV_MOTOR_13
    MOVEF_F 20.0 VLV_SP_13
    WRITE32 ENDSUB_F_DOWN_2:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DOWN_2
CALLSUB576:
    MOVEF_F 20.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB577:
    CALL MOTOR.STOP 'BC' 'true'
    CALL NE_STRING VGV_FLAG 'true' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else579_1
    STRINGS DUPLICATE 'A' VLV_MOTOR_12
    MOVEF_F 20.0 VLV_SP_12
    WRITE32 ENDSUB_F_UP_2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_UP_2
CALLSUB581:
  else579_1:
  endif579:
    CALL EQ_STRING VGV_FLAG 'false' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else582_1
    JR_NEQF VGV_B 3.0 else582_1
    MOVEF_F 120.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB584:
    JR endif582
  else582_1:
    MOVEF_F 80.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB585:
  else582_2:
  endif582:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB586:
    MOVEF_F 200.0 VLV_MM_2
    MOVEF_F -70.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB587:
    JR_NEQF VGV_B 2.0 else588_1
    MOVEF_F 70.0 VLV_MM_2
    MOVEF_F -30.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB589 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB589:
    MOVEF_F 90.0 VLV_DEG_6
    MOVEF_F 50.0 VLV_SP_6
    WRITE32 ENDSUB_F_LEFT2_2:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LEFT2_2
CALLSUB590:
    MOVEF_F 150.0 VLV_MM_2
    MOVEF_F -60.0 VLV_V_2
    WRITE32 ENDSUB_F_MOVE_2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_2
CALLSUB591:
    MOVEF_F -30.0 VLV_SP_10
    WRITE32 ENDSUB_F_ALIGNMENT_1:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ALIGNMENT_1
CALLSUB592:
  else588_1:
  endif588:
RETSUB_F_B2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_B2_0:
SUB_F_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf595
    DATA8 flag595
    DIVF VLV_MM_2 F.1 tmpf595
    CP_EQF 0.0 F.1 flag595
    SELECTF flag595 0.0 tmpf595 F.0

    MULF F.0 360.0 VLV_L_2
    JR_GTEQF VLV_V_2 0.0 else597_1
    MOVEF_F -10.0 VLV_SP_2
    JR endif597
  else597_1:
    MOVEF_F 10.0 VLV_SP_2
  else597_2:
  endif597:
    MOVEF_F 0.0 VLV_DEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while599:
    JR_GTEQF VLV_DEG_2 VLV_L_2 endwhile599
  whilebody599:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf604
    DATA8 flag604
    DIVF F.0 2.0 tmpf604
    CP_EQF 0.0 2.0 flag604
    SELECTF flag604 0.0 tmpf604 VLV_DEG_2

    MULF VLV_L_2 0.7 F.0
    JR_LTEQF VLV_DEG_2 F.0 else605_1
    MATH ABS VLV_SP_2 F.0
    JR_LTEQF F.0 10.0 else605_1
    JR_LTEQF VLV_V_2 0.0 else608_1
    SUBF VLV_SP_2 0.2 VLV_SP_2
    JR endif608
  else608_1:
    ADDF VLV_SP_2 0.2 VLV_SP_2
  else608_2:
  endif608:
    JR endif605
  else605_1:
    MATH ABS VLV_SP_2 F.0
    MATH ABS VLV_V_2 F.1
    JR_GTEQF F.0 F.1 else605_2
    JR_LTEQF VLV_V_2 0.0 else613_1
    ADDF VLV_SP_2 0.2 VLV_SP_2
    JR endif613
  else613_1:
    SUBF VLV_SP_2 0.2 VLV_SP_2
  else613_2:
  endif613:
  else605_2:
  endif605:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_2
    MULF VLV_U_2 2.0 F.1
    ADDF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_2 2.0 F.1
    SUBF VLV_SP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VLV_DEG_2 VLV_L_2 whilebody599
  endwhile599:
RETSUB_F_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_2:
SUB_F_RIGHT1_2:
    MULF 1092.72 VLV_DEG_3 F.0
    DATAF tmpf626
    DATA8 flag626
    DIVF F.0 360.0 tmpf626
    CP_EQF 0.0 360.0 flag626
    SELECTF flag626 0.0 tmpf626 VLV_L_3

    DATAF tmpf627
    DATA8 flag627
    DIVF VLV_L_3 210.38 tmpf627
    CP_EQF 0.0 210.38 flag627
    SELECTF flag627 0.0 tmpf627 F.0

    MULF F.0 360.0 VLV_L_3
    MOVEF_F 30.0 VLV_V_3
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_3
  while630:
    JR_GTF VLV_DEG_3 VLV_L_3 endwhile630
  whilebody630:
    CALL MOTOR.GETCOUNT 'B' F.0
    MATH ABS F.0 VLV_DEG_3
    CALL MOTOR.STARTPOWER 'B' VLV_V_3
    MULF VLV_L_3 0.2 F.0
    JR_LTF VLV_DEG_3 F.0 or635
    MULF VLV_L_3 0.8 F.0
    JR_LTEQF VLV_DEG_3 F.0 else634_1
  or635:
    JR_GTEQF VLV_SP_3 0.0 else638_1
    MOVEF_F -30.0 VLV_V_3
    JR endif638
  else638_1:
    MOVEF_F 30.0 VLV_V_3
  else638_2:
  endif638:
    JR endif634
  else634_1:
    MOVEF_F VLV_SP_3 VLV_V_3
  else634_2:
  endif634:
    CALL MOTOR.STOP 'C' 'true'
    JR_LTEQF VLV_DEG_3 VLV_L_3 whilebody630
  endwhile630:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT1_2:
SUB_F_LEFT1_2:
    MULF 1092.72 VLV_DEG_4 F.0
    DATAF tmpf642
    DATA8 flag642
    DIVF F.0 360.0 tmpf642
    CP_EQF 0.0 360.0 flag642
    SELECTF flag642 0.0 tmpf642 VLV_L_4

    DATAF tmpf643
    DATA8 flag643
    DIVF VLV_L_4 210.38 tmpf643
    CP_EQF 0.0 210.38 flag643
    SELECTF flag643 0.0 tmpf643 F.0

    MULF F.0 360.0 VLV_L_4
    MOVEF_F 30.0 VLV_V_4
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VLV_DEG_4
  while646:
    JR_GTF VLV_DEG_4 VLV_L_4 endwhile646
  whilebody646:
    CALL MOTOR.GETCOUNT 'C' F.0
    MATH ABS F.0 VLV_DEG_4
    CALL MOTOR.STARTPOWER 'C' VLV_V_4
    MULF VLV_L_4 0.2 F.0
    JR_LTF VLV_DEG_4 F.0 or651
    MULF VLV_L_4 0.8 F.0
    JR_LTEQF VLV_DEG_4 F.0 else650_1
  or651:
    JR_GTEQF VLV_SP_4 0.0 else654_1
    MOVEF_F -30.0 VLV_V_4
    JR endif654
  else654_1:
    MOVEF_F 30.0 VLV_V_4
  else654_2:
  endif654:
    JR endif650
  else650_1:
    MOVEF_F VLV_SP_4 VLV_V_4
  else650_2:
  endif650:
    CALL MOTOR.STOP 'B' 'true'
    JR_LTEQF VLV_DEG_4 VLV_L_4 whilebody646
  endwhile646:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT1_2:
SUB_F_RIGHT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_5 F.0
    DATAF tmpf661
    DATA8 flag661
    DIVF F.0 360.0 tmpf661
    CP_EQF 0.0 360.0 flag661
    SELECTF flag661 0.0 tmpf661 VLV_L_5

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf664
    DATA8 flag664
    DIVF VLV_L_5 F.2 tmpf664
    CP_EQF 0.0 F.2 flag664
    SELECTF flag664 0.0 tmpf664 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf666
    DATA8 flag666
    DIVF F.0 2.0 tmpf666
    CP_EQF 0.0 2.0 flag666
    SELECTF flag666 0.0 tmpf666 VLV_L_5

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_5
    MOVEF_F 0.0 VLV_DEG_5
  while668:
    JR_GTF VLV_DEG_5 VLV_L_5 endwhile668
  whilebody668:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf674
    DATA8 flag674
    DIVF F.0 2.0 tmpf674
    CP_EQF 0.0 2.0 flag674
    SELECTF flag674 0.0 tmpf674 VLV_DEG_5

    MULF VLV_L_5 0.2 F.0
    JR_LTF VLV_DEG_5 F.0 or676
    MULF VLV_L_5 0.8 F.0
    JR_LTEQF VLV_DEG_5 F.0 else675_1
  or676:
    MOVEF_F 30.0 VLV_V_5
    JR endif675
  else675_1:
    MOVEF_F VLV_SP_5 VLV_V_5
  else675_2:
  endif675:
    CALL MOTOR.STARTPOWER 'B' VLV_V_5
    SUBF 0.0 VLV_V_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    JR_LTEQF VLV_DEG_5 VLV_L_5 whilebody668
  endwhile668:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RIGHT2_2:
SUB_F_LEFT2_2:
    MOVEF_F 3.1415926535897932384 F.3
    MULF 2.0 F.3 F.2
    MULF F.2 180.0 F.1
    MULF F.1 VLV_DEG_6 F.0
    DATAF tmpf687
    DATA8 flag687
    DIVF F.0 360.0 tmpf687
    CP_EQF 0.0 360.0 flag687
    SELECTF flag687 0.0 tmpf687 VLV_L_6

    MOVEF_F 3.1415926535897932384 F.3
    MULF F.3 68.0 F.2
    DATAF tmpf690
    DATA8 flag690
    DIVF VLV_L_6 F.2 tmpf690
    CP_EQF 0.0 F.2 flag690
    SELECTF flag690 0.0 tmpf690 F.1

    MULF F.1 360.0 F.0
    DATAF tmpf692
    DATA8 flag692
    DIVF F.0 2.0 tmpf692
    CP_EQF 0.0 2.0 flag692
    SELECTF flag692 0.0 tmpf692 VLV_L_6

    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 30.0 VLV_V_6
    MOVEF_F 0.0 VLV_DEG_6
  while694:
    JR_GTF VLV_DEG_6 VLV_L_6 endwhile694
  whilebody694:
    CALL MOTOR.GETCOUNT 'B' F.2
    MATH ABS F.2 F.1
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf700
    DATA8 flag700
    DIVF F.0 2.0 tmpf700
    CP_EQF 0.0 2.0 flag700
    SELECTF flag700 0.0 tmpf700 VLV_DEG_6

    MULF VLV_L_6 0.2 F.0
    JR_LTF VLV_DEG_6 F.0 or702
    MULF VLV_L_6 0.8 F.0
    JR_LTEQF VLV_DEG_6 F.0 else701_1
  or702:
    MOVEF_F 30.0 VLV_V_6
    JR endif701
  else701_1:
    MOVEF_F VLV_SP_6 VLV_V_6
  else701_2:
  endif701:
    SUBF 0.0 VLV_V_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VLV_V_6
    JR_LTEQF VLV_DEG_6 VLV_L_6 whilebody694
  endwhile694:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LEFT2_2:
SUB_F_ALIGNMENT_1:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while711:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or712
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 endwhile711
  or712:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 1000.0 endwhile711
  whilebody711:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.8 F.1
    JR_LTF F.0 F.1 or732
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.9 F.1
    JR_GTEQF F.0 F.1 and731
  or732:
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 1000.0 whilebody711
  and731:
  endwhile711:
    TIMER_READ timeMC3
    CALL MOTOR.RESETCOUNT 'BC'
  while744:
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 or745
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile744
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_GTEQF F.0 5000.0 endwhile744
  or745:
  whilebody744:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_10
    MULF VLV_U_10 2.0 F.1
    ADDF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_10 2.0 F.1
    SUBF VLV_SP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETSPEED 'B' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_GTF F.0 F.1 whilebody744
    CALL MOTOR.GETSPEED 'C' F.1
    MATH ABS F.1 F.0
    MATH ABS VLV_SP_10 F.2
    MULF F.2 0.7 F.1
    JR_LTEQF F.0 F.1 and768
    TIMER_READ timeMC3tmp
	SUB32 timeMC3tmp timeMC3 timeMC3tmp
	MOVE32_F timeMC3tmp F.0
    JR_LTF F.0 5000.0 whilebody744
  and768:
  endwhile744:
    JR_GTEQF VLV_SP_10 0.0 else774_1
    MOVEF_F -70.0 VLV_SP_10
    JR endif774
  else774_1:
    MOVEF_F 70.0 VLV_SP_10
  else774_2:
  endif774:
    CALL MOTOR.STARTPOWER 'BC' VLV_SP_10
    DATA32 milliseconds776
	MOVEF_32 300.0 milliseconds776
	DATA32 timer776
	TIMER_WAIT milliseconds776 timer776
	TIMER_READY timer776
    DATA32 tmp777
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp777
    JR_NEQ32 0 tmp777 alreadylaunched777
    OBJECT_START TF_BEEP_0
  alreadylaunched777:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_ALIGNMENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ALIGNMENT_1:
SUB_F_TOLINE_1:
    MOVEF_F 0.0 VLV_WHITE_11
    DATA8 layer779
	DATA8 no779
	DATA8 mode8779
	
	MOVEF_8 2.0 no779
	SUB8 no779 1 no779
	DIV8 no779 4 layer779
	MATH MOD8 no779 4 no779

	MOVEF_8 2.0 mode8779
	
	INPUT_DEVICE READY_RAW layer779 no779 0 mode8779 0
    DATA8 layer780
	DATA8 no780
	DATA8 mode8780
	
	MOVEF_8 3.0 no780
	SUB8 no780 1 no780
	DIV8 no780 4 layer780
	MATH MOD8 no780 4 no780

	MOVEF_8 2.0 mode8780
	
	INPUT_DEVICE READY_RAW layer780 no780 0 mode8780 0
  while781:
    JR_EQF VLV_WHITE_11 1.0 endwhile781
  whilebody781:
    CALL MOTOR.RESETCOUNT 'BC'
  while783:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 or784
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile783
  or784:
  whilebody783:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody783
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody783
  endwhile783:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VLV_L_11
  while799:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VLV_L_11 endwhile799
  whilebody799:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 2.0 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 2.0 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VLV_L_11 whilebody799
  endwhile799:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else813_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else813_1
    MOVEF_F 1.0 VLV_WHITE_11
  else813_1:
  endif813:
    JR_NEQF VLV_WHITE_11 1.0 whilebody781
  endwhile781:
    CALL MOTOR.RESETCOUNT 'BC'
    DATA8 layer817
	DATA8 no817
	DATA8 mode8817
	
	MOVEF_8 2.0 no817
	SUB8 no817 1 no817
	DIV8 no817 4 layer817
	MATH MOD8 no817 4 no817

	MOVEF_8 0.0 mode8817
	
	INPUT_DEVICE READY_RAW layer817 no817 0 mode8817 0
    DATA8 layer818
	DATA8 no818
	DATA8 mode8818
	
	MOVEF_8 3.0 no818
	SUB8 no818 1 no818
	DIV8 no818 4 layer818
	MATH MOD8 no818 4 no818

	MOVEF_8 0.0 mode8818
	
	INPUT_DEVICE READY_RAW layer818 no818 0 mode8818 0
  while819:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile819
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile819
  whilebody819:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VLV_U_11
    MULF VLV_U_11 0.8 F.1
    ADDF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VLV_U_11 0.8 F.1
    SUBF VLV_SP_11 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and831
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody819
  and831:
  endwhile819:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_F_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TOLINE_1:
SUB_F_UP_2:
    SUBF 0.0 VLV_SP_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds838
	MOVEF_32 500.0 milliseconds838
	DATA32 timer838
	TIMER_WAIT milliseconds838 timer838
	TIMER_READY timer838
  while839:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf843
    DATA8 flag843
    DIVF F.1 2.0 tmpf843
    CP_EQF 0.0 2.0 flag843
    SELECTF flag843 0.0 tmpf843 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile839
  whilebody839:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf849
    DATA8 flag849
    DIVF F.1 2.0 tmpf849
    CP_EQF 0.0 2.0 flag849
    SELECTF flag849 0.0 tmpf849 F.0

    MULF VLV_SP_12 0.7 F.1
    JR_GTF F.0 F.1 whilebody839
  endwhile839:
    CALL MOTOR.STOP VLV_MOTOR_12 'true'
RETSUB_F_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_UP_2:
SUB_F_DOWN_2:
    CALL MOTOR.START VLV_MOTOR_13 VLV_SP_13
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds854
	MOVEF_32 500.0 milliseconds854
	DATA32 timer854
	TIMER_WAIT milliseconds854 timer854
	TIMER_READY timer854
  while855:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf859
    DATA8 flag859
    DIVF F.1 2.0 tmpf859
    CP_EQF 0.0 2.0 flag859
    SELECTF flag859 0.0 tmpf859 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_LTEQF F.0 F.1 endwhile855
  whilebody855:
    CALL MOTOR.GETSPEED 'A' F.2
    CALL MOTOR.GETSPEED 'D' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf864
    DATA8 flag864
    DIVF F.1 2.0 tmpf864
    CP_EQF 0.0 2.0 flag864
    SELECTF flag864 0.0 tmpf864 F.0

    MULF VLV_SP_13 0.7 F.1
    JR_GTF F.0 F.1 whilebody855
  endwhile855:
    CALL MOTOR.STOP 'ABCD' 'true'
    SUBF 0.0 VLV_SP_13 F.0
    CALL MOTOR.START VLV_MOTOR_13 F.0
    CALL MOTOR.RESETCOUNT VLV_MOTOR_13
  while870:
    CALL MOTOR.GETCOUNT VLV_MOTOR_13 F.0
    JR_LTEQF F.0 -24.0 endwhile870
  whilebody870:
    CALL MOTOR.GETCOUNT VLV_MOTOR_13 F.0
    JR_GTF F.0 -24.0 whilebody870
  endwhile870:
    CALL MOTOR.STOP 'ABCD' 'true'
RETSUB_F_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DOWN_2:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall EV3FILE.OPENWRITE       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_WRITE fullname handle16

	MOVE16_F handle16 handle
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall VECTOR.INIT       // FFA
{
	IN_F size
	IN_F value
	IN_16 a

	DATA32 size32
	MOVEF_32 size size32
	JR_LTEQ32 size32 0 empty

	ARRAY RESIZE a size32
	ARRAY FILL a value
	RETURN

empty:
    ARRAY RESIZE a 0
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall EV3FILE.WRITELINE     // FSV
{
	IN_F handle
	IN_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE WRITE_TEXT handle16 6 text
invalidhandle:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
