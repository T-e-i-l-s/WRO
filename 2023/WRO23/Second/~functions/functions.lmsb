DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VK_M
DATAF VV_M
DATAF VMM_M
DATAF VK_ACCEL_M
DATAF VMAX1_M
DATAF VMIN1_M
DATAF VMAX2_M
DATAF VMIN2_M
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VL_M
DATAF VDEG_M
DATAF VMODE_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VDEG_2
DATAF VU_2
DATAF VDEG_3
DATAF VSP_3
DATAF VL_3
DATAF VDEG_4
DATAF VSP_4
DATAF VL_4
DATAF VDEG_5
DATAF VSP_5
DATAF VL_5
DATAF VDEG_6
DATAF VSP_6
DATAF VL_6
DATAF VSP_7
DATAF VSP_8
DATAF VSP_9
DATAF VSP_10
DATAF VWHITE_10
DATAF VU_10
DATAF VL_10
DATAS VMOTOR_11 252
DATAF VSP_11
DATAS VMOTOR_12 252
DATAF VSP_12

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VDEG_M
    MOVEF_F 0.0 VMODE_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VDEG_2
    MOVEF_F 0.0 VU_2
    MOVEF_F 0.0 VDEG_3
    MOVEF_F 0.0 VSP_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VDEG_4
    MOVEF_F 0.0 VSP_4
    MOVEF_F 0.0 VL_4
    MOVEF_F 0.0 VDEG_5
    MOVEF_F 0.0 VSP_5
    MOVEF_F 0.0 VL_5
    MOVEF_F 0.0 VDEG_6
    MOVEF_F 0.0 VSP_6
    MOVEF_F 0.0 VL_6
    MOVEF_F 0.0 VSP_7
    MOVEF_F 0.0 VSP_8
    MOVEF_F 0.0 VSP_9
    MOVEF_F 0.0 VSP_10
    MOVEF_F 0.0 VWHITE_10
    MOVEF_F 0.0 VU_10
    MOVEF_F 0.0 VL_10
    STRINGS DUPLICATE '' VMOTOR_11
    MOVEF_F 0.0 VSP_11
    STRINGS DUPLICATE '' VMOTOR_12
    MOVEF_F 0.0 VSP_12
    TIMER_READ timeMC1
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 2.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 3.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    CALL MOTOR.INVERT 'AB'
    MOVEF_F 1.5 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VK_ACCEL_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 100.0 VMIN2_M
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB269:
  while270:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 40.0 or271
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 40.0 endwhile270
  or271:
  whilebody270:
    MOVEF_F 3.0 VMODE_1
    WRITE32 ENDSUB_LINE_1:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_1
CALLSUB274:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 40.0 whilebody270
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 40.0 whilebody270
  endwhile270:
    MOVEF_F 140.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB277:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB278:
    MOVEF_F 25.0 VDEG_6
    MOVEF_F 40.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB279:
    MOVEF_F 200.0 VMM_2
    MOVEF_F -50.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB280:
    MOVEF_F -30.0 VSP_10
    WRITE32 ENDSUB_TOLINE_1:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE_1
CALLSUB281:
    CALL SPEAKER.TONE 40.0 700.0 200.0
    MOVEF_F 30.0 VSP_7
    WRITE32 ENDSUB_RIGHT_1:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT_1
CALLSUB283:
    CALL SPEAKER.TONE 40.0 700.0 200.0
    CALL MOTOR.RESETCOUNT 'B'
  while286:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 150.0 endwhile286
  whilebody286:
    MOVEF_F 3.0 VMODE_1
    WRITE32 ENDSUB_LINE_1:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_1
CALLSUB288:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 150.0 whilebody286
  endwhile286:
    MOVEF_F 700.0 VMM_M
    MOVEF_F 0.1 VK_ACCEL_M
    WRITE32 ENDSUB_LINE_ACCELERATION:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_ACCELERATION
CALLSUB290:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 20.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB291:
    MOVEF_F 20.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB292:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 20.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB293:
    MOVEF_F 50.0 VMM_2
    MOVEF_F -20.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB294:
    MOVEF_F 20.0 VSP_9
    WRITE32 ENDSUB_AROUND_1:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND_1
CALLSUB295:
    CALL MOTOR.RESETCOUNT 'B'
  while297:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 150.0 endwhile297
  whilebody297:
    MOVEF_F 3.0 VMODE_1
    WRITE32 ENDSUB_LINE_1:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_1
CALLSUB299:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 150.0 whilebody297
  endwhile297:
    STRINGS DUPLICATE 'AD' VMOTOR_12
    MOVEF_F 30.0 VSP_12
    WRITE32 ENDSUB_DOWN_2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN_2
CALLSUB301:
    MOVEF_F 40.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB302:
    STRINGS DUPLICATE 'AD' VMOTOR_11
    MOVEF_F 30.0 VSP_11
    WRITE32 ENDSUB_UP_2:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP_2
CALLSUB303:
    MOVEF_F 700.0 VMM_M
    MOVEF_F 0.1 VK_ACCEL_M
    WRITE32 ENDSUB_LINE_ACCELERATION:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_ACCELERATION
CALLSUB304:
    MOVEF_F 40.0 VSP_9
    WRITE32 ENDSUB_AROUND_1:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND_1
CALLSUB305:
    CALL MOTOR.RESETCOUNT 'B'
  while307:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 150.0 endwhile307
  whilebody307:
    MOVEF_F 3.0 VMODE_1
    WRITE32 ENDSUB_LINE_1:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_1
CALLSUB309:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 150.0 whilebody307
  endwhile307:
    MOVEF_F 40.0 VSP_9
    WRITE32 ENDSUB_AROUND_1:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND_1
CALLSUB311:
    CALL MOTOR.RESETCOUNT 'B'
  while313:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 150.0 endwhile313
  whilebody313:
    MOVEF_F 3.0 VMODE_1
    WRITE32 ENDSUB_LINE_1:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_1
CALLSUB315:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 150.0 whilebody313
  endwhile313:
    WRITE32 ENDSUB_FRZ:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB317:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf8
    DATA8 flag8
    DIVF F.0 F.1 tmpf8
    CP_EQF 0.0 F.1 flag8
    SELECTF flag8 0.0 tmpf8 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf13
    DATA8 flag13
    DIVF F.0 F.1 tmpf13
    CP_EQF 0.0 F.1 flag13
    SELECTF flag13 0.0 tmpf13 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE_1:
    JR_NEQF VMODE_1 1.0 else14_1
    MOVEF_F 0.7 VK_M
    MOVEF_F 85.0 VV_M
    JR endif14
  else14_1:
    JR_NEQF VMODE_1 2.0 else14_2
    MOVEF_F 0.7 VK_M
    MOVEF_F 55.0 VV_M
    JR endif14
  else14_2:
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
  else14_3:
  endif14:
    WRITE32 ENDSUB_LINE_FOL:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE_FOL
CALLSUB15:
RETSUB_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_1:
SUB_LINE_FOL:
    WRITE32 ENDSUB_SEN1:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB16:
    WRITE32 ENDSUB_SEN2:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB17:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE_FOL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_FOL:
SUB_LINE_ACCELERATION:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf27
    DATA8 flag27
    DIVF VMM_M F.1 tmpf27
    CP_EQF 0.0 F.1 flag27
    SELECTF flag27 0.0 tmpf27 F.0

    MULF F.0 360.0 VL_M
    MOVEF_F 1.17 VK_M
    MOVEF_F 30.0 VV_M
    MOVEF_F 0.0 VDEG_M
    CALL MOTOR.RESETCOUNT 'BC'
  while30:
    JR_GTEQF VDEG_M VL_M endwhile30
  whilebody30:
    CALL MOTOR.GETCOUNT 'B' F.1
    CALL MOTOR.GETCOUNT 'C' F.2
    ADDF F.1 F.2 F.0
    DATAF tmpf34
    DATA8 flag34
    DIVF F.0 2.0 tmpf34
    CP_EQF 0.0 2.0 flag34
    SELECTF flag34 0.0 tmpf34 VDEG_M

    MULF VL_M 0.5 F.0
    JR_GTEQF VDEG_M F.0 else35_1
    JR_GTEQF VV_M 95.0 else35_1
    ADDF VV_M VK_ACCEL_M VV_M
    JR endif35
  else35_1:
    MULF 0.6 VL_M F.0
    JR_LTEQF VDEG_M F.0 else35_2
    JR_LTEQF VV_M 30.0 else35_2
    SUBF VV_M VK_ACCEL_M VV_M
  else35_2:
  endif35:
    JR_GTEQF VV_M 40.0 else40_1
    MOVEF_F 1.2 VK_M
    JR endif40
  else40_1:
    JR_GTEQF VV_M 65.0 else40_2
    MOVEF_F 0.8 VK_M
    JR endif40
  else40_2:
    JR_GTEQF VV_M 100.0 else40_3
    MOVEF_F 0.8 VK_M
  else40_3:
  endif40:
    WRITE32 ENDSUB_SEN1:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB41:
    WRITE32 ENDSUB_SEN2:CALLSUB42 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB42:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_M VL_M whilebody30
  endwhile30:
RETSUB_LINE_ACCELERATION:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE_ACCELERATION:
SUB_MOVE_2:
    MOVEF_F 3.1415926535897932384 F.2
    MULF 62.0 F.2 F.1
    DATAF tmpf52
    DATA8 flag52
    DIVF VMM_2 F.1 tmpf52
    CP_EQF 0.0 F.1 flag52
    SELECTF flag52 0.0 tmpf52 F.0

    MULF F.0 360.0 VL_2
    MOVEF_F 0.0 VDEG_2
    CALL MOTOR.RESETCOUNT 'BC'
  while55:
    JR_GTEQF VDEG_2 VL_2 endwhile55
  whilebody55:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    MATH ABS F.1 F.0
    DATAF tmpf60
    DATA8 flag60
    DIVF F.0 2.0 tmpf60
    CP_EQF 0.0 2.0 flag60
    SELECTF flag60 0.0 tmpf60 VDEG_2

    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_2
    MULF VU_2 0.8 F.1
    ADDF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_2 0.8 F.1
    SUBF VSP_2 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    JR_LTF VDEG_2 VL_2 whilebody55
  endwhile55:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_RIGHT1_2:
    MULF 1092.72 VDEG_3 F.0
    DATAF tmpf72
    DATA8 flag72
    DIVF F.0 360.0 tmpf72
    CP_EQF 0.0 360.0 flag72
    SELECTF flag72 0.0 tmpf72 VL_3

    DATAF tmpf73
    DATA8 flag73
    DIVF VL_3 204.1 tmpf73
    CP_EQF 0.0 204.1 flag73
    SELECTF flag73 0.0 tmpf73 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_3
  while77:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_3 endwhile77
  whilebody77:
    CALL MOTOR.STOP 'C' 'true'
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_3 whilebody77
  endwhile77:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT1_2:
SUB_LEFT1_2:
    MULF 1092.72 VDEG_4 F.0
    DATAF tmpf85
    DATA8 flag85
    DIVF F.0 360.0 tmpf85
    CP_EQF 0.0 360.0 flag85
    SELECTF flag85 0.0 tmpf85 VL_4

    DATAF tmpf86
    DATA8 flag86
    DIVF VL_4 204.1 tmpf86
    CP_EQF 0.0 204.1 flag86
    SELECTF flag86 0.0 tmpf86 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' VSP_4
  while90:
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 VL_4 endwhile90
  whilebody90:
    CALL MOTOR.STOP 'B' 'true'
    CALL MOTOR.GETCOUNT 'C' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 VL_4 whilebody90
  endwhile90:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT1_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT1_2:
SUB_RIGHT2_2:
    MULF 1092.72 VDEG_5 F.0
    DATAF tmpf98
    DATA8 flag98
    DIVF F.0 360.0 tmpf98
    CP_EQF 0.0 360.0 flag98
    SELECTF flag98 0.0 tmpf98 VL_5

    DATAF tmpf99
    DATA8 flag99
    DIVF VL_5 204.1 tmpf99
    CP_EQF 0.0 204.1 flag99
    SELECTF flag99 0.0 tmpf99 F.0

    MULF F.0 360.0 VL_5
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'B' VSP_5
    SUBF 0.0 VSP_5 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
  while105:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf111
    DATA8 flag111
    DIVF F.1 2.0 tmpf111
    CP_EQF 0.0 2.0 flag111
    SELECTF flag111 0.0 tmpf111 F.0

    DATAF tmpf112
    DATA8 flag112
    DIVF VL_5 2.0 tmpf112
    CP_EQF 0.0 2.0 flag112
    SELECTF flag112 0.0 tmpf112 F.1

    JR_GTF F.0 F.1 endwhile105
  whilebody105:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf118
    DATA8 flag118
    DIVF F.1 2.0 tmpf118
    CP_EQF 0.0 2.0 flag118
    SELECTF flag118 0.0 tmpf118 F.0

    DATAF tmpf119
    DATA8 flag119
    DIVF VL_5 2.0 tmpf119
    CP_EQF 0.0 2.0 flag119
    SELECTF flag119 0.0 tmpf119 F.1

    JR_LTEQF F.0 F.1 whilebody105
  endwhile105:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_2:
SUB_LEFT2_2:
    MULF 1092.72 VDEG_6 F.0
    DATAF tmpf122
    DATA8 flag122
    DIVF F.0 360.0 tmpf122
    CP_EQF 0.0 360.0 flag122
    SELECTF flag122 0.0 tmpf122 VL_6

    DATAF tmpf123
    DATA8 flag123
    DIVF VL_6 204.1 tmpf123
    CP_EQF 0.0 204.1 flag123
    SELECTF flag123 0.0 tmpf123 F.0

    MULF F.0 360.0 VL_6
    CALL MOTOR.RESETCOUNT 'BC'
    SUBF 0.0 VSP_6 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.STARTPOWER 'C' VSP_6
  while129:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf135
    DATA8 flag135
    DIVF F.1 2.0 tmpf135
    CP_EQF 0.0 2.0 flag135
    SELECTF flag135 0.0 tmpf135 F.0

    DATAF tmpf136
    DATA8 flag136
    DIVF VL_6 2.0 tmpf136
    CP_EQF 0.0 2.0 flag136
    SELECTF flag136 0.0 tmpf136 F.1

    JR_GTF F.0 F.1 endwhile129
  whilebody129:
    CALL MOTOR.GETCOUNT 'B' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'C' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf142
    DATA8 flag142
    DIVF F.1 2.0 tmpf142
    CP_EQF 0.0 2.0 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    DATAF tmpf143
    DATA8 flag143
    DIVF VL_6 2.0 tmpf143
    CP_EQF 0.0 2.0 flag143
    SELECTF flag143 0.0 tmpf143 F.1

    JR_LTEQF F.0 F.1 whilebody129
  endwhile129:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_2:
SUB_RIGHT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_7 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB145:
    MOVEF_F 50.0 VDEG_5
    MOVEF_F 30.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB146 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB146:
    CALL MOTOR.START 'B' VSP_7
    SUBF 0.0 VSP_7 F.0
    CALL MOTOR.START 'C' F.0
  while150:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile150
  whilebody150:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody150
  endwhile150:
  while153:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile153
  whilebody153:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody153
  endwhile153:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_6
    MOVEF_F 20.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB157:
RETSUB_RIGHT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT_1:
SUB_LEFT_1:
    MOVEF_F 25.0 VMM_2
    MOVEF_F VSP_8 VSP_2
    WRITE32 ENDSUB_MOVE_2:CALLSUB158 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB158:
    MOVEF_F 50.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB159 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB159:
    SUBF 0.0 VSP_8 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_8
  while163:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile163
  whilebody163:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody163
  endwhile163:
  while166:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile166
  whilebody166:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody166
  endwhile166:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB170:
RETSUB_LEFT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT_1:
SUB_AROUND_1:
    MOVEF_F 140.0 VDEG_6
    MOVEF_F 30.0 VSP_6
    WRITE32 ENDSUB_LEFT2_2:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_2
CALLSUB171:
    SUBF 0.0 VSP_9 F.0
    CALL MOTOR.START 'B' F.0
    CALL MOTOR.START 'C' VSP_9
  while175:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile175
  whilebody175:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody175
  endwhile175:
  while178:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile178
  whilebody178:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody178
  endwhile178:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 10.0 VDEG_5
    MOVEF_F 20.0 VSP_5
    WRITE32 ENDSUB_RIGHT2_2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_2
CALLSUB182:
RETSUB_AROUND_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND_1:
SUB_TOLINE_1:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 0.0 VWHITE_10
    DATA8 layer184
	DATA8 no184
	DATA8 mode8184
	
	MOVEF_8 2.0 no184
	SUB8 no184 1 no184
	DIV8 no184 4 layer184
	MATH MOD8 no184 4 no184

	MOVEF_8 2.0 mode8184
	
	INPUT_DEVICE READY_RAW layer184 no184 0 mode8184 0
    DATA8 layer185
	DATA8 no185
	DATA8 mode8185
	
	MOVEF_8 3.0 no185
	SUB8 no185 1 no185
	DIV8 no185 4 layer185
	MATH MOD8 no185 4 no185

	MOVEF_8 2.0 mode8185
	
	INPUT_DEVICE READY_RAW layer185 no185 0 mode8185 0
  while186:
    JR_EQF VWHITE_10 1.0 endwhile186
  whilebody186:
  while187:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile187
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_EQF F.0 6.0 endwhile187
  whilebody187:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_EQF F.0 6.0 and199
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 whilebody187
  and199:
  endwhile187:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 12.9443188822683 VL_10
  while203:
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 VL_10 endwhile203
  whilebody203:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 VL_10 whilebody203
  endwhile203:
    CALL SENSOR.READRAWVALUE 2.0 0.0 F.0
    JR_NEQF F.0 6.0 else217_1
    CALL SENSOR.READRAWVALUE 3.0 0.0 F.0
    JR_NEQF F.0 6.0 else217_1
    MOVEF_F 1.0 VWHITE_10
  else217_1:
  endif217:
    JR_NEQF VWHITE_10 1.0 whilebody186
  endwhile186:
    DATA8 layer220
	DATA8 no220
	DATA8 mode8220
	
	MOVEF_8 2.0 no220
	SUB8 no220 1 no220
	DIV8 no220 4 layer220
	MATH MOD8 no220 4 no220

	MOVEF_8 0.0 mode8220
	
	INPUT_DEVICE READY_RAW layer220 no220 0 mode8220 0
    DATA8 layer221
	DATA8 no221
	DATA8 mode8221
	
	MOVEF_8 3.0 no221
	SUB8 no221 1 no221
	DIV8 no221 4 layer221
	MATH MOD8 no221 4 no221

	MOVEF_8 0.0 mode8221
	
	INPUT_DEVICE READY_RAW layer221 no221 0 mode8221 0
  while222:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 endwhile222
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 25.0 endwhile222
  whilebody222:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_10
    MULF VU_10 0.8 F.1
    ADDF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_10 0.8 F.1
    SUBF VSP_10 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 25.0 and234
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 25.0 whilebody222
  and234:
  endwhile222:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE_1:
SUB_UP_2:
    SUBF 0.0 VSP_11 F.0
    CALL MOTOR.START VMOTOR_11 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds241
	MOVEF_32 300.0 milliseconds241
	DATA32 timer241
	TIMER_WAIT milliseconds241 timer241
	TIMER_READY timer241
  while242:
    CALL MOTOR.GETSPEED VMOTOR_11 F.0
    MULF VSP_11 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile242
  whilebody242:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.GETSPEED VMOTOR_11 F.0
    MULF VSP_11 0.5 F.1
    JR_GTF F.0 F.1 whilebody242
  endwhile242:
    CALL MOTOR.STOP VMOTOR_11 'true'
RETSUB_UP_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP_2:
SUB_DOWN_2:
    SUBF 0.0 VSP_12 F.0
    CALL MOTOR.START VMOTOR_12 F.0
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds252
	MOVEF_32 300.0 milliseconds252
	DATA32 timer252
	TIMER_WAIT milliseconds252 timer252
	TIMER_READY timer252
  while253:
    CALL MOTOR.GETSPEED VMOTOR_12 F.0
    MULF VSP_12 0.5 F.1
    JR_LTEQF F.0 F.1 endwhile253
  whilebody253:
    CALL MOTOR.GETSPEED VMOTOR_12 F.0
    MULF VSP_12 0.5 F.1
    JR_GTF F.0 F.1 whilebody253
  endwhile253:
    CALL MOTOR.STOP VMOTOR_12 'true'
    CALL EQ_STRING VMOTOR_12 'A' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else259_1
    CALL MOTOR.SCHEDULE VMOTOR_12 VSP_12 0.0 42.0 0.0 'true' 

	DATA8 layer261
	DATA8 nos261
	DATA8 busy261
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_12 layer261 nos261
	JR_EQ8 0 nos261 motornotbusy261
  motorwaiting261:
	OUTPUT_TEST layer261 nos261 busy261
	JR_EQ8 busy261 0 motornotbusy261
	SLEEP
	JR motorwaiting261
  motornotbusy261:
    JR endif259
  else259_1:
    CALL EQ_STRING VMOTOR_12 'D' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else259_2
    CALL MOTOR.SCHEDULE VMOTOR_12 VSP_12 0.0 45.0 0.0 'true' 

	DATA8 layer263
	DATA8 nos263
	DATA8 busy263
	CALL MOTORDECODEPORTSDESCRIPTOR VMOTOR_12 layer263 nos263
	JR_EQ8 0 nos263 motornotbusy263
  motorwaiting263:
	OUTPUT_TEST layer263 nos263 busy263
	JR_EQ8 busy263 0 motornotbusy263
	SLEEP
	JR motorwaiting263
  motornotbusy263:
    JR endif259
  else259_2:
    CALL MOTOR.SCHEDULE 'A' VSP_12 0.0 42.0 0.0 'true' 

	DATA8 layer264
	DATA8 nos264
	DATA8 busy264
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer264 nos264
	JR_EQ8 0 nos264 motornotbusy264
  motorwaiting264:
	OUTPUT_TEST layer264 nos264 busy264
	JR_EQ8 busy264 0 motornotbusy264
	SLEEP
	JR motorwaiting264
  motornotbusy264:
    CALL MOTOR.SCHEDULE 'D' VSP_12 0.0 47.0 0.0 'true' 

	DATA8 layer265
	DATA8 nos265
	DATA8 busy265
	CALL MOTORDECODEPORTSDESCRIPTOR 'D' layer265 nos265
	JR_EQ8 0 nos265 motornotbusy265
  motorwaiting265:
	OUTPUT_TEST layer265 nos265 busy265
	JR_EQ8 busy265 0 motornotbusy265
	SLEEP
	JR motorwaiting265
  motornotbusy265:
  else259_3:
  endif259:
RETSUB_DOWN_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN_2:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
