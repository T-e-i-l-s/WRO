DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VK_M
DATAF VV_M
DATAF VK2_M
DATAF VV2_M
DATAF VK3_M
DATAF VV3_M
ARRAY16 VX_M 2
ARRAY16 VY_M 2
DATAF VS1_M
DATAF VS2_M
DATAF VU_M
DATAF VI_M
DATAF VPR1_M
DATAF VPL1_M
DATAF VN_M
DATAF VMM_M
DATAF VL_M
DATAF VS_M
DATAF VC_M
DATAF VA_M
DATAF VP_M
DATAF VB_M
DATAF VL_1
DATAF VSP_1
DATAF VU_1
DATAF VMM_2
DATAF VSP_2
DATAF VL_2
DATAF VGRAD_3
DATAF VL_3
DATAF VGRAD_4
DATAF VL_4
DATA32 RUNCOUNTER_DOWN
DATA32 RUNCOUNTER_UP

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    CALL ARRAYCREATE_FLOAT VX_M
    CALL ARRAYCREATE_FLOAT VY_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VPR1_M
    MOVEF_F 0.0 VPL1_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    MOVE32_32 0 RUNCOUNTER_DOWN
    MOVE32_32 0 RUNCOUNTER_UP
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TDOWN
{
    DATA32 tmp
  launch:
    CALL PROGRAM_DOWN 0
    CALL GETANDINC32 RUNCOUNTER_DOWN -1 RUNCOUNTER_DOWN tmp
    JR_GT32 tmp 1 launch
}
vmthread TUP
{
    DATA32 tmp
  launch:
    CALL PROGRAM_UP 1
    CALL GETANDINC32 RUNCOUNTER_UP -1 RUNCOUNTER_UP tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_DOWN
subcall PROGRAM_UP
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    DATAF F.4
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch587
    WRITE32 ENDSUB_DOWN:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN
  dispatch587:
    JR_NEQ32 SUBPROGRAM 1 dispatch588
    WRITE32 ENDSUB_UP:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP
  dispatch588:
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VV2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VV3_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VX_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VY_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VPR1_M
    MOVEF_F 0.0 VPL1_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VMM_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VA_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VB_M
    MOVEF_F 0.0 VL_1
    MOVEF_F 0.0 VSP_1
    MOVEF_F 0.0 VU_1
    MOVEF_F 0.0 VMM_2
    MOVEF_F 0.0 VSP_2
    MOVEF_F 0.0 VL_2
    MOVEF_F 0.0 VGRAD_3
    MOVEF_F 0.0 VL_3
    MOVEF_F 0.0 VGRAD_4
    MOVEF_F 0.0 VL_4
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 2.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 3.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 4.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL MOTOR.INVERT 'B'
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.37 VK_M
    MOVEF_F 60.0 VV_M
    MOVEF_F 0.5 VK2_M
    MOVEF_F 40.0 VV2_M
    MOVEF_F 0.5 VK3_M
    MOVEF_F 90.0 VV3_M
    CALL ARRAYSTORE_FLOAT 0.0 1.0 VX_M
    CALL ARRAYSTORE_FLOAT 0.0 2.0 VY_M
    CALL ARRAYSTORE_FLOAT 1.0 1.0 VX_M
    CALL ARRAYSTORE_FLOAT 1.0 -2.0 VY_M
    CALL ARRAYSTORE_FLOAT 2.0 3.0 VX_M
    CALL ARRAYSTORE_FLOAT 2.0 2.0 VY_M
    CALL ARRAYSTORE_FLOAT 3.0 4.0 VX_M
    CALL ARRAYSTORE_FLOAT 3.0 2.0 VY_M
    CALL ARRAYSTORE_FLOAT 4.0 5.0 VX_M
    CALL ARRAYSTORE_FLOAT 4.0 1.0 VY_M
    CALL ARRAYSTORE_FLOAT 5.0 5.0 VX_M
    CALL ARRAYSTORE_FLOAT 5.0 -1.0 VY_M
    CALL LCD.CLEAR
    DATA8 layer224
	DATA8 no224
	DATA8 mode8224
	
	MOVEF_8 1.0 no224
	SUB8 no224 1 no224
	DIV8 no224 4 layer224
	MATH MOD8 no224 4 no224

	MOVEF_8 0.0 mode8224
	
	INPUT_DEVICE READY_RAW layer224 no224 0 mode8224 0
    DATA8 layer225
	DATA8 no225
	DATA8 mode8225
	
	MOVEF_8 4.0 no225
	SUB8 no225 1 no225
	DIV8 no225 4 layer225
	MATH MOD8 no225 4 no225

	MOVEF_8 0.0 mode8225
	
	INPUT_DEVICE READY_RAW layer225 no225 0 mode8225 0
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf228
    DATA8 flag228
    DIVF F.1 10.0 tmpf228
    CP_EQF 0.0 10.0 flag228
    SELECTF flag228 0.0 tmpf228 F.0

    JR_LTEQF F.0 15.0 else226_1
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf230
    DATA8 flag230
    DIVF F.1 10.0 tmpf230
    CP_EQF 0.0 10.0 flag230
    SELECTF flag230 0.0 tmpf230 F.0

    JR_GTEQF F.0 28.0 else226_1
    MOVEF_F 0.0 VPR1_M
    MOVEF_F 1.0 VPL1_M
    JR endif226
  else226_1:
    MOVEF_F 1.0 VPR1_M
    MOVEF_F 0.0 VPL1_M
  else226_2:
  endif226:
    STRINGS VALUE_FORMATTED VPL1_M '%g' 99 S.0
    CALL LCD.WRITE 90.0 20.0 S.0
    STRINGS VALUE_FORMATTED VPR1_M '%g' 99 S.0
    CALL LCD.WRITE 110.0 20.0 S.0
  while235:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or236
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile235
  or236:
  whilebody235:
    WRITE32 ENDSUB_LINE:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB239:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody235
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody235
  endwhile235:
    MOVEF_F 0.0 VN_M
    MOVEF_F 60.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB242:
    MOVEF_F 1.0 VI_M
  for243:
    JR_GTF VI_M 6.0 endfor243
  forbody243:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 302.0 VMM_M
    DATAF tmpf245
    DATA8 flag245
    DIVF VMM_M 194.68 tmpf245
    CP_EQF 0.0 194.68 flag245
    SELECTF flag245 0.0 tmpf245 F.0

    MULF F.0 360.0 VL_M
  while247:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile247
  whilebody247:
    WRITE32 ENDSUB_LINE2:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB249:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody247
  endwhile247:
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf253
    DATA8 flag253
    DIVF F.1 10.0 tmpf253
    CP_EQF 0.0 10.0 flag253
    SELECTF flag253 0.0 tmpf253 F.0

    JR_GTEQF F.0 44.0 else251_1
    ADDF VN_M 1.0 VN_M
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VI_M VX_M
  else251_1:
  endif251:
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf259
    DATA8 flag259
    DIVF F.1 10.0 tmpf259
    CP_EQF 0.0 10.0 flag259
    SELECTF flag259 0.0 tmpf259 F.0

    JR_GTF F.0 18.0 else257_1
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 1.0 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 2.0 VY_M
    JR endif257
  else257_1:
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf266
    DATA8 flag266
    DIVF F.1 10.0 tmpf266
    CP_EQF 0.0 10.0 flag266
    SELECTF flag266 0.0 tmpf266 F.0

    JR_GTEQF F.0 23.0 else257_2
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 2.5 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 2.5 VY_M
    WRITE32 ENDSUB_FRZ:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FRZ
CALLSUB272:
    JR endif257
  else257_2:
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf274
    DATA8 flag274
    DIVF F.1 10.0 tmpf274
    CP_EQF 0.0 10.0 flag274
    SELECTF flag274 0.0 tmpf274 F.0

    JR_GTEQF F.0 33.0 else257_3
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 2.0 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 3.0 VY_M
    JR endif257
  else257_3:
    CALL SENSOR.READRAWVALUE 1.0 0.0 F.1
    DATAF tmpf281
    DATA8 flag281
    DIVF F.1 10.0 tmpf281
    CP_EQF 0.0 10.0 flag281
    SELECTF flag281 0.0 tmpf281 F.0

    JR_GTEQF F.0 44.0 else257_4
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 3.0 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 4.0 VY_M
    JR endif257
  else257_4:
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 0.0 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
  else257_5:
  endif257:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.1
    DATAF tmpf292
    DATA8 flag292
    DIVF F.1 10.0 tmpf292
    CP_EQF 0.0 10.0 flag292
    SELECTF flag292 0.0 tmpf292 F.0

    JR_GTEQF F.0 48.0 else290_1
    ADDF VN_M 1.0 VN_M
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 VI_M VX_M
  else290_1:
  endif290:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.1
    DATAF tmpf298
    DATA8 flag298
    DIVF F.1 10.0 tmpf298
    CP_EQF 0.0 10.0 flag298
    SELECTF flag298 0.0 tmpf298 F.0

    JR_GTEQF F.0 18.0 else296_1
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 1.0 '%g' 99 S.0
    CALL LCD.WRITE 70.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 -2.0 VY_M
    JR endif296
  else296_1:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.1
    DATAF tmpf305
    DATA8 flag305
    DIVF F.1 10.0 tmpf305
    CP_EQF 0.0 10.0 flag305
    SELECTF flag305 0.0 tmpf305 F.0

    JR_GTEQF F.0 23.0 else296_2
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 2.5 '%g' 99 S.0
    CALL LCD.WRITE 20.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 -2.5 VY_M
    JR endif296
  else296_2:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.1
    DATAF tmpf312
    DATA8 flag312
    DIVF F.1 10.0 tmpf312
    CP_EQF 0.0 10.0 flag312
    SELECTF flag312 0.0 tmpf312 F.0

    JR_GTEQF F.0 33.0 else296_3
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 2.0 '%g' 99 S.0
    CALL LCD.WRITE 70.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 -3.0 VY_M
    JR endif296
  else296_3:
    CALL SENSOR.READRAWVALUE 4.0 0.0 F.1
    DATAF tmpf319
    DATA8 flag319
    DIVF F.1 10.0 tmpf319
    CP_EQF 0.0 10.0 flag319
    SELECTF flag319 0.0 tmpf319 F.0

    JR_GTEQF F.0 48.0 else296_4
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 3.0 '%g' 99 S.0
    CALL LCD.WRITE 70.0 F.0 S.0
    SUBF VN_M 1.0 F.0
    CALL ARRAYSTORE_FLOAT F.0 -4.0 VY_M
    JR endif296
  else296_4:
    MULF 20.0 VI_M F.0
    STRINGS VALUE_FORMATTED 0.0 '%g' 99 S.0
    CALL LCD.WRITE 70.0 F.0 S.0
  else296_5:
  endif296:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 6.0 forbody243
  endfor243:
    WRITE32 ENDSUB_AROUND:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB329:
  while330:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or331
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile330
  or331:
  whilebody330:
    WRITE32 ENDSUB_LINE:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB334:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody330
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody330
  endwhile330:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VMM_2
    MOVEF_F 70.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB338:
  while339:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or340
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile339
  or340:
  whilebody339:
    WRITE32 ENDSUB_LINE:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB343:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody339
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody339
  endwhile339:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VN_M
  for347:
    JR_GTF VN_M 5.0 endfor347
  forbody347:
    CALL LCD.CLEAR
    CALL ARRAYGET_FLOAT VN_M F.0 VX_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 20.0 20.0 S.0
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL LCD.WRITE 70.0 20.0 S.0
    CALL ARRAYGET_FLOAT VN_M F.0 VX_M
    CALL ARRAYGET_FLOAT VN_M F.1 VY_M
    ADDF F.0 F.1 VA_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VPR1_M '%g' 99 S.0
    CALL LCD.WRITE 40.0 20.0 S.0
    STRINGS VALUE_FORMATTED VPL1_M '%g' 99 S.0
    CALL LCD.WRITE 70.0 20.0 S.0
    MATH MOD VA_M 2.0 F.0
    JR_EQF F.0 0.0 else363_1
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    JR_EQF F.0 2.5 else363_1
    ADDF VS_M 1.0 VS_M
    DATA32 tmp367
    CALL GETANDINC32 RUNCOUNTER_DOWN 1  RUNCOUNTER_DOWN tmp367
    JR_NEQ32 0 tmp367 alreadylaunched367
    OBJECT_START TDOWN
  alreadylaunched367:
    JR_EQF VPR1_M 0.0 or369
    JR_EQF VPR1_M 2.0 or369
    JR_EQF VPR1_M 4.0 or369
    JR_NEQF VPR1_M 6.0 else368_1
  or369:
    WRITE32 ENDSUB_LEFT:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB370:
    JR endif368
  else368_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB371:
  else368_2:
  endif368:
  while372:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or373
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile372
  or373:
  whilebody372:
    WRITE32 ENDSUB_LINE2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB376:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody372
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody372
  endwhile372:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    JR_EQF VPR1_M 0.0 or382
    JR_EQF VPR1_M 2.0 or382
    JR_EQF VPR1_M 4.0 or382
    JR_NEQF VPR1_M 6.0 else381_1
  or382:
    MULF 63.0 VPR1_M F.0
    ADDF 32.0 F.0 VMM_M
    JR endif381
  else381_1:
    MULF 63.0 VPL1_M F.0
    ADDF 32.0 F.0 VMM_M
  else381_2:
  endif381:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMM_M '%g' 99 S.0
    CALL LCD.WRITE 20.0 20.0 S.0
    DATAF tmpf390
    DATA8 flag390
    DIVF VMM_M 194.68 tmpf390
    CP_EQF 0.0 194.68 flag390
    SELECTF flag390 0.0 tmpf390 F.0

    MULF F.0 360.0 VL_M
  while392:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile392
  whilebody392:
    WRITE32 ENDSUB_LINE2:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB394:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody392
  endwhile392:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB397:
    DATA32 tmp398
    CALL GETANDINC32 RUNCOUNTER_UP 1  RUNCOUNTER_UP tmp398
    JR_NEQ32 0 tmp398 alreadylaunched398
    OBJECT_START TUP
  alreadylaunched398:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB399 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB399:
    JR_EQF VPR1_M 0.0 or401
    JR_EQF VPR1_M 2.0 or401
    JR_EQF VPR1_M 4.0 or401
    JR_NEQF VPR1_M 6.0 else400_1
  or401:
    MOVEF_F 80.0 VGRAD_3
    WRITE32 ENDSUB_LEFT2_1:CALLSUB402 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB402:
    JR endif400
  else400_1:
    MOVEF_F 80.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB403:
  else400_2:
  endif400:
    CALL MOTOR.STARTPOWER 'BC' -60.0
  while405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or406
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile405
  or406:
  whilebody405:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody405
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody405
  endwhile405:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB412:
    JR_EQF VPR1_M 0.0 or414
    JR_EQF VPR1_M 2.0 or414
    JR_EQF VPR1_M 4.0 or414
    JR_NEQF VPR1_M 6.0 else413_1
  or414:
    WRITE32 ENDSUB_LEFT:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB415:
    MOVEF_F VPR1_M VP_M
    JR endif413
  else413_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB416 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB416:
    MOVEF_F VPL1_M VP_M
  else413_2:
  endif413:
    JR_EQF VP_M 0.0 else417_1
  while418:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or419
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile418
  or419:
  whilebody418:
    WRITE32 ENDSUB_LINE2:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB422:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody418
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody418
  endwhile418:
    CALL MOTOR.STOP 'BC' 'true'
  else417_1:
  endif417:
    MOVEF_F 30.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB426:
  while427:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or428
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile427
  or428:
  whilebody427:
    WRITE32 ENDSUB_LINE2:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB431:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody427
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody427
  endwhile427:
    CALL MOTOR.STOP 'BC' 'true'
    JR_EQF VPR1_M 0.0 or436
    JR_EQF VPR1_M 2.0 or436
    JR_EQF VPR1_M 4.0 or436
    JR_NEQF VPR1_M 6.0 else435_1
  or436:
    WRITE32 ENDSUB_RIGHT:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB437:
    ADDF VPR1_M 2.0 VPR1_M
    JR endif435
  else435_1:
    WRITE32 ENDSUB_LEFT:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB439:
    ADDF VPL1_M 2.0 VPL1_M
  else435_2:
  endif435:
    JR endif363
  else363_1:
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    JR_EQF F.0 2.5 else363_2
    ADDF VC_M 1.0 VC_M
    DATA32 tmp443
    CALL GETANDINC32 RUNCOUNTER_DOWN 1  RUNCOUNTER_DOWN tmp443
    JR_NEQ32 0 tmp443 alreadylaunched443
    OBJECT_START TDOWN
  alreadylaunched443:
    JR_EQF VPR1_M 1.0 or445
    JR_EQF VPR1_M 3.0 or445
    JR_EQF VPR1_M 5.0 or445
    JR_NEQF VPR1_M 7.0 else444_1
  or445:
    WRITE32 ENDSUB_LEFT:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB446:
    JR endif444
  else444_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB447:
  else444_2:
  endif444:
  while448:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or449
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile448
  or449:
  whilebody448:
    WRITE32 ENDSUB_LINE2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB452:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody448
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody448
  endwhile448:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.RESETCOUNT 'BC'
    JR_EQF VPR1_M 1.0 or458
    JR_EQF VPR1_M 3.0 or458
    JR_EQF VPR1_M 5.0 or458
    JR_NEQF VPR1_M 7.0 else457_1
  or458:
    MULF 60.0 VPR1_M F.0
    ADDF 45.0 F.0 VMM_M
    JR endif457
  else457_1:
    MULF 60.0 VPL1_M F.0
    ADDF 45.0 F.0 VMM_M
  else457_2:
  endif457:
    DATAF tmpf463
    DATA8 flag463
    DIVF VMM_M 194.68 tmpf463
    CP_EQF 0.0 194.68 flag463
    SELECTF flag463 0.0 tmpf463 F.0

    MULF F.0 360.0 VL_M
  while465:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile465
  whilebody465:
    WRITE32 ENDSUB_LINE2:CALLSUB467 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE2
CALLSUB467:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody465
  endwhile465:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_CLOSE:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB470:
    DATA32 tmp471
    CALL GETANDINC32 RUNCOUNTER_UP 1  RUNCOUNTER_UP tmp471
    JR_NEQ32 0 tmp471 alreadylaunched471
    OBJECT_START TUP
  alreadylaunched471:
    MOVEF_F 60.0 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB472:
    JR_EQF VPR1_M 1.0 or474
    JR_EQF VPR1_M 3.0 or474
    JR_EQF VPR1_M 5.0 or474
    JR_NEQF VPR1_M 7.0 else473_1
  or474:
    MOVEF_F 80.0 VGRAD_3
    WRITE32 ENDSUB_LEFT2_1:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB475:
    JR endif473
  else473_1:
    MOVEF_F 80.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB476:
  else473_2:
  endif473:
    CALL MOTOR.STARTPOWER 'BC' -60.0
  while478:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or479
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile478
  or479:
  whilebody478:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody478
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody478
  endwhile478:
    CALL MOTOR.STOP 'BC' 'true'
    JR_EQF VPR1_M 1.0 or486
    JR_EQF VPR1_M 3.0 or486
    JR_EQF VPR1_M 5.0 or486
    JR_NEQF VPR1_M 7.0 else485_1
  or486:
    WRITE32 ENDSUB_LEFT:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB487:
    MOVEF_F VPR1_M VP_M
    JR endif485
  else485_1:
    WRITE32 ENDSUB_RIGHT:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB488:
    MOVEF_F VPL1_M VP_M
  else485_2:
  endif485:
  while489:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or490
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile489
  or490:
  whilebody489:
    WRITE32 ENDSUB_LINE:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB493:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody489
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody489
  endwhile489:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 30.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB497 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB497:
  while498:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or499
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile498
  or499:
  whilebody498:
    WRITE32 ENDSUB_LINE:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB502:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody498
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody498
  endwhile498:
    CALL MOTOR.STOP 'BC' 'true'
    JR_EQF VPR1_M 1.0 or507
    JR_EQF VPR1_M 3.0 or507
    JR_EQF VPR1_M 5.0 or507
    JR_NEQF VPR1_M 7.0 else506_1
  or507:
    WRITE32 ENDSUB_RIGHT:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB508:
    ADDF VPR1_M 2.0 VPR1_M
    JR endif506
  else506_1:
    WRITE32 ENDSUB_LEFT:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB510:
    ADDF VPL1_M 2.0 VPL1_M
  else506_2:
  endif506:
  else363_2:
  endif363:
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    JR_EQF F.0 2.5 else512_1
  while514:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or515
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile514
  or515:
  whilebody514:
    WRITE32 ENDSUB_LINE:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB518:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody514
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody514
  endwhile514:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 1.0 VI_M
  for522:
    CALL ARRAYGET_FLOAT VN_M F.0 VX_M
    JR_GTF VI_M F.0 endfor522
  forbody522:
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F 307.0 VMM_M
    DATAF tmpf525
    DATA8 flag525
    DIVF VMM_M 194.68 tmpf525
    CP_EQF 0.0 194.68 flag525
    SELECTF flag525 0.0 tmpf525 F.0

    MULF F.0 360.0 VL_M
  while527:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_GTEQF F.0 VL_M endwhile527
  whilebody527:
    WRITE32 ENDSUB_LINE:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB529:
    CALL MOTOR.GETCOUNT 'B' F.0
    JR_LTF F.0 VL_M whilebody527
  endwhile527:
    CALL MOTOR.STOP 'BC' 'true'
    ADDF VI_M 1.0 VI_M
    CALL ARRAYGET_FLOAT VN_M F.0 VX_M
    JR_LTEQF VI_M F.0 forbody522
  endfor522:
    CALL MOTOR.STOP 'BC' 'true'
    DATA32 milliseconds535
	MOVEF_32 200.0 milliseconds535
	DATA32 timer535
	TIMER_WAIT milliseconds535 timer535
	TIMER_READY timer535
    MOVEF_F 40.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB536:
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    JR_GTEQF F.0 0.0 else537_1
    MOVEF_F 85.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB539:
    JR endif537
  else537_1:
    MOVEF_F 93.0 VGRAD_3
    WRITE32 ENDSUB_LEFT2_1:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB540:
  else537_2:
  endif537:
    CALL ARRAYGET_FLOAT VN_M F.2 VY_M
    MATH ABS F.2 F.1
    MULF 155.0 F.1 F.0
    SUBF F.0 190.0 VB_M
    MULF VB_M 0.6 VMM_2
    MOVEF_F 50.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB546:
    MULF VB_M 0.4 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB548 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB548:
    MOVEF_F 25.0 VMM_2
    MOVEF_F -30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB549:
    WRITE32 ENDSUB_DOWN2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_DOWN2
CALLSUB550:
    DATA32 milliseconds551
	MOVEF_32 100.0 milliseconds551
	DATA32 timer551
	TIMER_WAIT milliseconds551 timer551
	TIMER_READY timer551
    WRITE32 ENDSUB_OPEN:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB552:
    WRITE32 ENDSUB_UP:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_UP
CALLSUB553:
    CALL MOTOR.INVERT 'B'
    CALL MOTOR.STARTSYNC 'BC' -40.0 -40.0
  while556:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 endwhile556
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile556
  whilebody556:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 20.0 and559
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody556
  and559:
  endwhile556:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.INVERT 'B'
    MOVEF_F 15.0 VMM_2
    MOVEF_F 30.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB564:
    CALL ARRAYGET_FLOAT VN_M F.0 VY_M
    JR_GTEQF F.0 0.0 else565_1
    WRITE32 ENDSUB_RIGHT:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB567:
    JR endif565
  else565_1:
    WRITE32 ENDSUB_LEFT:CALLSUB568 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB568:
  else565_2:
  endif565:
  while569:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or570
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile569
  or570:
  whilebody569:
    WRITE32 ENDSUB_LINE:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB573:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody569
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody569
  endwhile569:
    CALL MOTOR.STOP 'BC' 'true'
    MOVEF_F 20.0 VMM_2
    MOVEF_F 60.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB577:
  while578:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 or579
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 20.0 endwhile578
  or579:
  whilebody578:
    WRITE32 ENDSUB_LINE:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB582:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 20.0 whilebody578
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 20.0 whilebody578
  endwhile578:
    CALL MOTOR.STOP 'BC' 'true'
  else512_1:
  endif512:
    ADDF VN_M 1.0 VN_M
    JR_LTEQF VN_M 5.0 forbody347
  endfor347:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf22
    DATA8 flag22
    DIVF F.0 F.1 tmpf22
    CP_EQF 0.0 F.1 flag22
    SELECTF flag22 0.0 tmpf22 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf27
    DATA8 flag27
    DIVF F.0 F.1 tmpf27
    CP_EQF 0.0 F.1 flag27
    SELECTF flag27 0.0 tmpf27 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB28:
    WRITE32 ENDSUB_SEN2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB29:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_LINE2:
    WRITE32 ENDSUB_SEN1:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB37:
    WRITE32 ENDSUB_SEN2:CALLSUB38 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB38:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK2_M F.1
    ADDF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK2_M F.1
    SUBF VV2_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE2:
SUB_LINE3:
    WRITE32 ENDSUB_SEN1:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB46:
    WRITE32 ENDSUB_SEN2:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB47:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK3_M F.1
    ADDF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK3_M F.1
    SUBF VV3_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE3:
SUB_LEFT:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB55:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 140.0 'true'

	DATA8 layer56
	DATA8 nos56
	DATA8 busy56
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer56 nos56
	JR_EQ8 0 nos56 motornotbusy56
  motorwaiting56:
	OUTPUT_TEST layer56 nos56 busy56
	JR_EQ8 busy56 0 motornotbusy56
	SLEEP
	JR motorwaiting56
  motornotbusy56:
  while57:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 15.0 endwhile57
  whilebody57:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 15.0 whilebody57
  endwhile57:
    CALL MOTOR.STOP 'bc' 'true'
  while62:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile62
  whilebody62:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody62
  endwhile62:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB67:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_RIGHT:
    MOVEF_F 70.0 VMM_2
    MOVEF_F 40.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB68 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB68:
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 130.0 'true'

	DATA8 layer69
	DATA8 nos69
	DATA8 busy69
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer69 nos69
	JR_EQ8 0 nos69 motornotbusy69
  motorwaiting69:
	OUTPUT_TEST layer69 nos69 busy69
	JR_EQ8 busy69 0 motornotbusy69
	SLEEP
	JR motorwaiting69
  motornotbusy69:
  while70:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 endwhile70
  whilebody70:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 15.0 whilebody70
  endwhile70:
    CALL MOTOR.STOP 'bc' 'true'
  while75:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 15.0 endwhile75
  whilebody75:
    CALL MOTOR.STARTSYNC 'BC' 20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody75
  endwhile75:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_3
    WRITE32 ENDSUB_LEFT2_1:CALLSUB80 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB80:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_AROUND:
    MOVEF_F 90.0 VGRAD_3
    WRITE32 ENDSUB_LEFT2_1:CALLSUB81 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT2_1
CALLSUB81:
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 140.0 'true'

	DATA8 layer82
	DATA8 nos82
	DATA8 busy82
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer82 nos82
	JR_EQ8 0 nos82 motornotbusy82
  motorwaiting82:
	OUTPUT_TEST layer82 nos82 busy82
	JR_EQ8 busy82 0 motornotbusy82
	SLEEP
	JR motorwaiting82
  motornotbusy82:
  while83:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 20.0 endwhile83
  whilebody83:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 20.0 whilebody83
  endwhile83:
    CALL MOTOR.STOP 'bc' 'true'
  while88:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile88
  whilebody88:
    CALL MOTOR.STARTSYNC 'BC' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody88
  endwhile88:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 10.0 VGRAD_4
    WRITE32 ENDSUB_RIGHT2_1:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT2_1
CALLSUB93:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_MOVE_2:
    CALL MOTOR.RESETCOUNT 'BC'
  while95:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf101
    DATA8 flag101
    DIVF F.1 2.0 tmpf101
    CP_EQF 0.0 2.0 flag101
    SELECTF flag101 0.0 tmpf101 F.0

    JR_GTF F.0 VL_1 endwhile95
  whilebody95:
    CALL MOTOR.GETCOUNT 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.1
    SUBF F.0 F.1 VU_1
    MULF VU_1 0.8 F.1
    ADDF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_1 0.8 F.1
    SUBF VSP_1 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf116
    DATA8 flag116
    DIVF F.1 2.0 tmpf116
    CP_EQF 0.0 2.0 flag116
    SELECTF flag116 0.0 tmpf116 F.0

    JR_LTEQF F.0 VL_1 whilebody95
  endwhile95:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_MOVE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_MOVE_2:
SUB_TOMM_2:
    DATAF tmpf118
    DATA8 flag118
    DIVF VMM_2 194.68 tmpf118
    CP_EQF 0.0 194.68 flag118
    SELECTF flag118 0.0 tmpf118 F.0

    MULF F.0 360.0 VL_2
    CALL MOTOR.RESETCOUNT 'BC'
    MOVEF_F VL_2 VL_1
    MOVEF_F VSP_2 VSP_1
    WRITE32 ENDSUB_MOVE_2:CALLSUB121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_MOVE_2
CALLSUB121:
    MOVEF_F 0.0 VSP_2
RETSUB_TOMM_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOMM_2:
SUB_LEFT2_1:
    MULF 1117.84 VGRAD_3 F.1
    DATAF tmpf123
    DATA8 flag123
    DIVF F.1 360.0 tmpf123
    CP_EQF 0.0 360.0 flag123
    SELECTF flag123 0.0 tmpf123 F.0

    DATAF tmpf124
    DATA8 flag124
    DIVF F.0 2.0 tmpf124
    CP_EQF 0.0 2.0 flag124
    SELECTF flag124 0.0 tmpf124 VL_3

    DATAF tmpf125
    DATA8 flag125
    DIVF VL_3 194.68 tmpf125
    CP_EQF 0.0 194.68 flag125
    SELECTF flag125 0.0 tmpf125 F.0

    MULF F.0 360.0 VL_3
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' 60.0
    CALL MOTOR.STARTPOWER 'B' -60.0
  while130:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf136
    DATA8 flag136
    DIVF F.1 2.0 tmpf136
    CP_EQF 0.0 2.0 flag136
    SELECTF flag136 0.0 tmpf136 F.0

    JR_GTF F.0 VL_3 endwhile130
  whilebody130:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf142
    DATA8 flag142
    DIVF F.1 2.0 tmpf142
    CP_EQF 0.0 2.0 flag142
    SELECTF flag142 0.0 tmpf142 F.0

    JR_LTEQF F.0 VL_3 whilebody130
  endwhile130:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_LEFT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT2_1:
SUB_RIGHT2_1:
    MULF 1117.84 VGRAD_4 F.1
    DATAF tmpf145
    DATA8 flag145
    DIVF F.1 360.0 tmpf145
    CP_EQF 0.0 360.0 flag145
    SELECTF flag145 0.0 tmpf145 F.0

    DATAF tmpf146
    DATA8 flag146
    DIVF F.0 2.0 tmpf146
    CP_EQF 0.0 2.0 flag146
    SELECTF flag146 0.0 tmpf146 VL_4

    DATAF tmpf147
    DATA8 flag147
    DIVF VL_4 194.68 tmpf147
    CP_EQF 0.0 194.68 flag147
    SELECTF flag147 0.0 tmpf147 F.0

    MULF F.0 360.0 VL_4
    CALL MOTOR.RESETCOUNT 'BC'
    CALL MOTOR.STARTPOWER 'C' -60.0
    CALL MOTOR.STARTPOWER 'B' 60.0
  while152:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf158
    DATA8 flag158
    DIVF F.1 2.0 tmpf158
    CP_EQF 0.0 2.0 flag158
    SELECTF flag158 0.0 tmpf158 F.0

    JR_GTF F.0 VL_4 endwhile152
  whilebody152:
    CALL MOTOR.GETCOUNT 'C' F.3
    MATH ABS F.3 F.2
    CALL MOTOR.GETCOUNT 'B' F.4
    MATH ABS F.4 F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf164
    DATA8 flag164
    DIVF F.1 2.0 tmpf164
    CP_EQF 0.0 2.0 flag164
    SELECTF flag164 0.0 tmpf164 F.0

    JR_LTEQF F.0 VL_4 whilebody152
  endwhile152:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_RIGHT2_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT2_1:
SUB_VIR:
    MOVEF_F 1.0 VI_M
  for166:
    JR_GTF VI_M 3.0 endfor166
  forbody166:
    MOVEF_F 5.0 VMM_2
    MOVEF_F 20.0 VSP_2
    WRITE32 ENDSUB_TOMM_2:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOMM_2
CALLSUB167:
    CALL MOTOR.STARTPOWER 'BC' -20.0
  while169:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 or170
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 15.0 endwhile169
  or170:
  whilebody169:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 15.0 else173_1
    CALL MOTOR.STOP 'B' 'true'
  else173_1:
  endif173:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 15.0 else176_1
    CALL MOTOR.STOP 'C' 'true'
  else176_1:
  endif176:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 15.0 whilebody169
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 15.0 whilebody169
  endwhile169:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody166
  endfor166:
RETSUB_VIR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIR:
SUB_FRZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FRZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FRZ:
SUB_UP:
    CALL MOTOR.STARTPOWER 'A' -70.0
    DATA32 milliseconds186
	MOVEF_32 300.0 milliseconds186
	DATA32 timer186
	TIMER_WAIT milliseconds186 timer186
	TIMER_READY timer186
  while187:
    CALL MOTOR.GETSPEED 'A' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile187
  whilebody187:
    CALL MOTOR.GETSPEED 'A' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 15.0 whilebody187
  endwhile187:
    CALL MOTOR.STOP 'A' 'true'
RETSUB_UP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_UP:
SUB_DOWN:
    CALL MOTOR.STARTPOWER 'A' 70.0
    DATA32 milliseconds194
	MOVEF_32 300.0 milliseconds194
	DATA32 timer194
	TIMER_WAIT milliseconds194 timer194
	TIMER_READY timer194
  while195:
    CALL MOTOR.GETSPEED 'A' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 20.0 endwhile195
  whilebody195:
    CALL MOTOR.GETSPEED 'A' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 20.0 whilebody195
  endwhile195:
    CALL MOTOR.STOP 'A' 'true'
    CALL MOTOR.SCHEDULE 'A' -30.0 0.0 20.0 0.0 'true' 

	DATA8 layer201
	DATA8 nos201
	DATA8 busy201
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer201 nos201
	JR_EQ8 0 nos201 motornotbusy201
  motorwaiting201:
	OUTPUT_TEST layer201 nos201 busy201
	JR_EQ8 busy201 0 motornotbusy201
	SLEEP
	JR motorwaiting201
  motornotbusy201:
RETSUB_DOWN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN:
SUB_DOWN2:
    CALL MOTOR.SCHEDULE 'A' 20.0 0.0 60.0 0.0 'true' 

	DATA8 layer202
	DATA8 nos202
	DATA8 busy202
	CALL MOTORDECODEPORTSDESCRIPTOR 'A' layer202 nos202
	JR_EQ8 0 nos202 motornotbusy202
  motorwaiting202:
	OUTPUT_TEST layer202 nos202 busy202
	JR_EQ8 busy202 0 motornotbusy202
	SLEEP
	JR motorwaiting202
  motornotbusy202:
RETSUB_DOWN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_DOWN2:
SUB_OPEN:
    CALL MOTOR.START 'D' -70.0
    CALL MOTOR.STOP 'B' 'true'
    DATA32 milliseconds205
	MOVEF_32 200.0 milliseconds205
	DATA32 timer205
	TIMER_WAIT milliseconds205 timer205
	TIMER_READY timer205
  while206:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_GTEQF F.0 -15.0 endwhile206
  whilebody206:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_LTF F.0 -15.0 whilebody206
  endwhile206:
    CALL MOTOR.STOP 'D' 'true'
    CALL MOTOR.START 'D' -50.0
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
SUB_CLOSE:
    CALL MOTOR.START 'D' 70.0
    CALL MOTOR.STOP 'B' 'true'
    DATA32 milliseconds215
	MOVEF_32 200.0 milliseconds215
	DATA32 timer215
	TIMER_WAIT milliseconds215 timer215
	TIMER_READY timer215
  while216:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_LTEQF F.0 15.0 endwhile216
  whilebody216:
    CALL MOTOR.GETSPEED 'D' F.1
    MATH ABS F.1 F.0
    JR_GTF F.0 15.0 whilebody216
  endwhile216:
    CALL MOTOR.STOP 'D' 'true'
    CALL MOTOR.START 'D' 50.0
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
