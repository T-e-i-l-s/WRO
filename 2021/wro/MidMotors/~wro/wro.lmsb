DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VMIN1_M
DATAF VMAX1_M
DATAF VMIN2_M
DATAF VMAX2_M
DATAF VV_M
DATAF VK_M
DATAF VSV_M
DATAF VSK_M
DATAF VS1_M
DATAF VS2_M
DATAF VNUM_M
DATAF VGRAD_M
DATAF VVR_M
DATAF VU_M
DATAF VI_M
DATAF VCOL_M
DATAF VSUN_M

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VSV_M
    MOVEF_F 0.0 VSK_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VVR_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VSUN_M
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VK_M
    MOVEF_F 0.0 VSV_M
    MOVEF_F 0.0 VSK_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VVR_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VCOL_M
    MOVEF_F 0.0 VSUN_M
    CALL MOTOR.INVERT 'B'
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 2.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 3.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    MOVEF_F 100.0 VMIN1_M
    MOVEF_F 0.0 VMAX1_M
    MOVEF_F 100.0 VMIN2_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 70.0 VV_M
    MOVEF_F 0.12 VK_M
    MOVEF_F VV_M VSV_M
    MOVEF_F VK_M VSK_M
    MOVEF_F 0.0 VS1_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VNUM_M
    MOVEF_F 0.0 VGRAD_M
    MOVEF_F 0.0 VVR_M
    WRITE32 ENDSUB_CLOSE:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB144:
    MOVEF_F 5.0 VCOL_M
    MOVEF_F 1.0 VSUN_M
  while145:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf149
    DATA8 flag149
    DIVF F.1 2.0 tmpf149
    CP_EQF 0.0 2.0 flag149
    SELECTF flag149 0.0 tmpf149 F.0

    JR_GTEQF F.0 210.0 endwhile145
  whilebody145:
    CALL SENSOR.READPERCENT 2.0 VS1_M
    CALL SENSOR.READPERCENT 3.0 VS2_M
    JR_GTEQF VS1_M VMIN1_M else152_1
    MOVEF_F VS1_M VMIN1_M
  else152_1:
  endif152:
    JR_LTEQF VS1_M VMAX1_M else153_1
    MOVEF_F VS1_M VMAX1_M
  else153_1:
  endif153:
    JR_GTEQF VS2_M VMIN2_M else154_1
    MOVEF_F VS2_M VMIN2_M
  else154_1:
  endif154:
    JR_LTEQF VS2_M VMAX2_M else155_1
    MOVEF_F VS2_M VMAX2_M
  else155_1:
  endif155:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf160
    DATA8 flag160
    DIVF F.1 2.0 tmpf160
    CP_EQF 0.0 2.0 flag160
    SELECTF flag160 0.0 tmpf160 F.0

    JR_LTF F.0 210.0 whilebody145
  endwhile145:
    CALL MOTOR.STOP 'BC' 'true'
    JR_NEQF VSUN_M 1.0 else162_1
    MOVEF_F 530.0 VGRAD_M
    JR endif162
  else162_1:
    JR_NEQF VSUN_M 2.0 else162_2
    MOVEF_F 1500.0 VGRAD_M
  else162_2:
  endif162:
    WRITE32 ENDSUB_TOGRAD:CALLSUB163 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOGRAD
CALLSUB163:
    JR_NEQF VSUN_M 1.0 else164_1
    WRITE32 ENDSUB_LEFT:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB165:
    JR endif164
  else164_1:
    JR_NEQF VSUN_M 2.0 else164_2
    WRITE32 ENDSUB_RIGHT:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB166:
  else164_2:
  endif164:
  while167:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf171
    DATA8 flag171
    DIVF F.1 2.0 tmpf171
    CP_EQF 0.0 2.0 flag171
    SELECTF flag171 0.0 tmpf171 F.0

    JR_GTEQF F.0 500.0 endwhile167
  whilebody167:
    WRITE32 ENDSUB_LINE:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB172:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf176
    DATA8 flag176
    DIVF F.1 2.0 tmpf176
    CP_EQF 0.0 2.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    JR_LTF F.0 500.0 whilebody167
  endwhile167:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_OPEN:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB178:
    CALL MOTOR.SCHEDULE 'BC' -40.0 0.0 200.0 0.0 'true' 

	DATA8 layer179
	DATA8 nos179
	DATA8 busy179
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer179 nos179
	JR_EQ8 0 nos179 motornotbusy179
  motorwaiting179:
	OUTPUT_TEST layer179 nos179 busy179
	JR_EQ8 busy179 0 motornotbusy179
	SLEEP
	JR motorwaiting179
  motornotbusy179:
    WRITE32 ENDSUB_AROUND:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB180:
    MOVEF_F 40.0 VV_M
    MOVEF_F 0.4 VK_M
    MOVEF_F 1.0 VNUM_M
    WRITE32 ENDSUB_TOLINE:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB181:
    MOVEF_F VSV_M VV_M
    MOVEF_F VSK_M VK_M
    JR_NEQF VSUN_M 1.0 else182_1
    MOVEF_F 1.0 VVR_M
    WRITE32 ENDSUB_RIGHT:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB183:
    MOVEF_F 0.0 VVR_M
    JR endif182
  else182_1:
    JR_NEQF VSUN_M 2.0 else182_2
    WRITE32 ENDSUB_LEFT:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB184:
  else182_2:
  endif182:
    MOVEF_F 1080.0 VGRAD_M
    JR_NEQF VSUN_M 1.0 else185_1
  while186:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 11.0 endwhile186
  whilebody186:
    CALL SENSOR.READPERCENT 3.0 F.0
    SUBF 19.0 F.0 VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 11.0 whilebody186
  endwhile186:
    CALL MOTOR.STOP 'BC' 'true'
    JR endif185
  else185_1:
    WRITE32 ENDSUB_TOGRAD:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOGRAD
CALLSUB198:
  else185_2:
  endif185:
    JR_NEQF VCOL_M 5.0 else199_1
    WRITE32 ENDSUB_LEFT:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB200:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 130.0 0.0 'true' 

	DATA8 layer201
	DATA8 nos201
	DATA8 busy201
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer201 nos201
	JR_EQ8 0 nos201 motornotbusy201
  motorwaiting201:
	OUTPUT_TEST layer201 nos201 busy201
	JR_EQ8 busy201 0 motornotbusy201
	SLEEP
	JR motorwaiting201
  motornotbusy201:
    WRITE32 ENDSUB_CLOSE:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB202:
    WRITE32 ENDSUB_AROUND:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB203:
    MOVEF_F 20.0 VV_M
    MOVEF_F 0.05 VK_M
    MOVEF_F 1.0 VVR_M
    MOVEF_F 1.0 VNUM_M
    WRITE32 ENDSUB_TOLINE:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB204:
    MOVEF_F VSV_M VV_M
    MOVEF_F VSK_M VK_M
    WRITE32 ENDSUB_RIGHT:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB205:
    MOVEF_F 0.0 VVR_M
    MOVEF_F 2150.0 VGRAD_M
    WRITE32 ENDSUB_TOGRAD:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOGRAD
CALLSUB206:
    MOVEF_F 0.0 VVR_M
    WRITE32 ENDSUB_RIGHT:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB207:
  while208:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf212
    DATA8 flag212
    DIVF F.1 2.0 tmpf212
    CP_EQF 0.0 2.0 flag212
    SELECTF flag212 0.0 tmpf212 F.0

    JR_GTEQF F.0 350.0 endwhile208
  whilebody208:
    WRITE32 ENDSUB_LINE:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB213:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf217
    DATA8 flag217
    DIVF F.1 2.0 tmpf217
    CP_EQF 0.0 2.0 flag217
    SELECTF flag217 0.0 tmpf217 F.0

    JR_LTF F.0 350.0 whilebody208
  endwhile208:
    CALL MOTOR.STOP 'BC' 'false'
    WRITE32 ENDSUB_OPEN:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_OPEN
CALLSUB219:
    DATA32 milliseconds220
	MOVEF_32 200.0 milliseconds220
	DATA32 timer220
	TIMER_WAIT milliseconds220 timer220
	TIMER_READY timer220
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 -20.0 370.0 'true'

	DATA8 layer221
	DATA8 nos221
	DATA8 busy221
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer221 nos221
	JR_EQ8 0 nos221 motornotbusy221
  motorwaiting221:
	OUTPUT_TEST layer221 nos221 busy221
	JR_EQ8 busy221 0 motornotbusy221
	SLEEP
	JR motorwaiting221
  motornotbusy221:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -60.0 180.0 'true'

	DATA8 layer222
	DATA8 nos222
	DATA8 busy222
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer222 nos222
	JR_EQ8 0 nos222 motornotbusy222
  motorwaiting222:
	OUTPUT_TEST layer222 nos222 busy222
	JR_EQ8 busy222 0 motornotbusy222
	SLEEP
	JR motorwaiting222
  motornotbusy222:
  while223:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 40.0 endwhile223
  whilebody223:
    CALL MOTOR.STARTPOWER 'BC' 80.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 40.0 whilebody223
  endwhile223:
    CALL MOTOR.STOP 'BC' 'true'
  while228:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 11.0 endwhile228
  whilebody228:
    CALL MOTOR.STARTPOWER 'BC' 40.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 11.0 whilebody228
  endwhile228:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_RIGHT:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB233:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 130.0 0.0 'true' 

	DATA8 layer234
	DATA8 nos234
	DATA8 busy234
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer234 nos234
	JR_EQ8 0 nos234 motornotbusy234
  motorwaiting234:
	OUTPUT_TEST layer234 nos234 busy234
	JR_EQ8 busy234 0 motornotbusy234
	SLEEP
	JR motorwaiting234
  motornotbusy234:
    WRITE32 ENDSUB_CLOSE:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_CLOSE
CALLSUB235:
    CALL MOTOR.SCHEDULE 'BC' 20.0 0.0 80.0 0.0 'true' 

	DATA8 layer236
	DATA8 nos236
	DATA8 busy236
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer236 nos236
	JR_EQ8 0 nos236 motornotbusy236
  motorwaiting236:
	OUTPUT_TEST layer236 nos236 busy236
	JR_EQ8 busy236 0 motornotbusy236
	SLEEP
	JR motorwaiting236
  motornotbusy236:
    WRITE32 ENDSUB_AROUND:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_AROUND
CALLSUB237:
    MOVEF_F 1.0 VNUM_M
    WRITE32 ENDSUB_TOLINE:CALLSUB238 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB238:
    WRITE32 ENDSUB_LEFT:CALLSUB239 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LEFT
CALLSUB239:
    WRITE32 ENDSUB_FREEEZEEEEEEEEEEEEEE:CALLSUB240 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FREEEZEEEEEEEEEEEEEE
CALLSUB240:
    WRITE32 ENDSUB_TOLINE:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB241:
    WRITE32 ENDSUB_RIGHT:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_RIGHT
CALLSUB242:
    MOVEF_F 1650.0 VGRAD_M
    WRITE32 ENDSUB_TOGRAD:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOGRAD
CALLSUB243:
    WRITE32 ENDSUB_FREEEZEEEEEEEEEEEEEE:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_FREEEZEEEEEEEEEEEEEE
CALLSUB244:
    MOVEF_F 2.0 VNUM_M
    WRITE32 ENDSUB_TOLINE:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB245:
    JR endif199
  else199_1:
    MOVEF_F 2.0 VNUM_M
    WRITE32 ENDSUB_TOLINE:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_TOLINE
CALLSUB246:
  else199_2:
  endif199:
ENDTHREAD:
    RETURN
SUB_SEN1:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN1_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX1_M VMIN1_M F.1
    DATAF tmpf7
    DATA8 flag7
    DIVF F.0 F.1 tmpf7
    CP_EQF 0.0 F.1 flag7
    SELECTF flag7 0.0 tmpf7 VS1_M

RETSUB_SEN1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN1:
SUB_SEN2:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.0 F.1 tmpf12
    CP_EQF 0.0 F.1 flag12
    SELECTF flag12 0.0 tmpf12 VS2_M

RETSUB_SEN2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SEN2:
SUB_LINE:
    WRITE32 ENDSUB_SEN1:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB13:
    WRITE32 ENDSUB_SEN2:CALLSUB14 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB14:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M VK_M F.1
    SUBF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M VK_M F.1
    ADDF VV_M F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
RETSUB_LINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LINE:
SUB_VIR:
    CALL MOTOR.RESETCOUNT 'BC'
  while23:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf27
    DATA8 flag27
    DIVF F.1 2.0 tmpf27
    CP_EQF 0.0 2.0 flag27
    SELECTF flag27 0.0 tmpf27 F.0

    JR_GTEQF F.0 70.0 endwhile23
  whilebody23:
    WRITE32 ENDSUB_SEN1:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN1
CALLSUB28:
    WRITE32 ENDSUB_SEN2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SEN2
CALLSUB29:
    SUBF VS1_M VS2_M VU_M
    MULF VU_M 0.9 F.1
    SUBF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'C' F.0
    MULF VU_M 0.9 F.1
    ADDF 25.0 F.1 F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf40
    DATA8 flag40
    DIVF F.1 2.0 tmpf40
    CP_EQF 0.0 2.0 flag40
    SELECTF flag40 0.0 tmpf40 F.0

    JR_LTF F.0 70.0 whilebody23
  endwhile23:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_VIR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIR:
SUB_AROUND:
    DATA32 milliseconds42
	MOVEF_32 300.0 milliseconds42
	DATA32 timer42
	TIMER_WAIT milliseconds42 timer42
	TIMER_READY timer42
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 60.0 300.0 'false'

	DATA8 layer43
	DATA8 nos43
	DATA8 busy43
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer43 nos43
	JR_EQ8 0 nos43 motornotbusy43
  motorwaiting43:
	OUTPUT_TEST layer43 nos43 busy43
	JR_EQ8 busy43 0 motornotbusy43
	SLEEP
	JR motorwaiting43
  motornotbusy43:
  while44:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 50.0 endwhile44
  whilebody44:
    CALL MOTOR.STARTSYNC 'BC' -30.0 30.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 50.0 whilebody44
  endwhile44:
  while48:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 13.0 endwhile48
  whilebody48:
    CALL MOTOR.STARTSYNC 'BC' -30.0 30.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 13.0 whilebody48
  endwhile48:
    CALL MOTOR.STOP 'BC' 'true'
    WRITE32 ENDSUB_VIR:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIR
CALLSUB53:
RETSUB_AROUND:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_AROUND:
SUB_RIGHT:
    DATA32 milliseconds54
	MOVEF_32 100.0 milliseconds54
	DATA32 timer54
	TIMER_WAIT milliseconds54 timer54
	TIMER_READY timer54
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 60.0 0.0 'true' 

	DATA8 layer55
	DATA8 nos55
	DATA8 busy55
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer55 nos55
	JR_EQ8 0 nos55 motornotbusy55
  motorwaiting55:
	OUTPUT_TEST layer55 nos55 busy55
	JR_EQ8 busy55 0 motornotbusy55
	SLEEP
	JR motorwaiting55
  motornotbusy55:
    CALL MOTOR.SCHEDULESYNC 'BC' 60.0 -60.0 130.0 'false'

	DATA8 layer56
	DATA8 nos56
	DATA8 busy56
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer56 nos56
	JR_EQ8 0 nos56 motornotbusy56
  motorwaiting56:
	OUTPUT_TEST layer56 nos56 busy56
	JR_EQ8 busy56 0 motornotbusy56
	SLEEP
	JR motorwaiting56
  motornotbusy56:
  while57:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 45.0 endwhile57
  whilebody57:
    CALL MOTOR.STARTSYNC 'BC' 30.0 -30.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 45.0 whilebody57
  endwhile57:
  while61:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 11.0 endwhile61
  whilebody61:
    CALL MOTOR.STARTSYNC 'BC' 30.0 -30.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 11.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' -20.0 20.0 35.0 'TRUE'

	DATA8 layer66
	DATA8 nos66
	DATA8 busy66
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer66 nos66
	JR_EQ8 0 nos66 motornotbusy66
  motorwaiting66:
	OUTPUT_TEST layer66 nos66 busy66
	JR_EQ8 busy66 0 motornotbusy66
	SLEEP
	JR motorwaiting66
  motornotbusy66:
    DATA32 milliseconds67
	MOVEF_32 150.0 milliseconds67
	DATA32 timer67
	TIMER_WAIT milliseconds67 timer67
	TIMER_READY timer67
    JR_EQF VVR_M 1.0 else68_1
    WRITE32 ENDSUB_VIR:CALLSUB69 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIR
CALLSUB69:
  else68_1:
  endif68:
RETSUB_RIGHT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RIGHT:
SUB_LEFT:
    DATA32 milliseconds70
	MOVEF_32 100.0 milliseconds70
	DATA32 timer70
	TIMER_WAIT milliseconds70 timer70
	TIMER_READY timer70
    CALL MOTOR.SCHEDULE 'BC' 30.0 0.0 58.0 0.0 'true' 

	DATA8 layer71
	DATA8 nos71
	DATA8 busy71
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer71 nos71
	JR_EQ8 0 nos71 motornotbusy71
  motorwaiting71:
	OUTPUT_TEST layer71 nos71 busy71
	JR_EQ8 busy71 0 motornotbusy71
	SLEEP
	JR motorwaiting71
  motornotbusy71:
    CALL MOTOR.SCHEDULESYNC 'BC' -60.0 60.0 130.0 'false'

	DATA8 layer72
	DATA8 nos72
	DATA8 busy72
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer72 nos72
	JR_EQ8 0 nos72 motornotbusy72
  motorwaiting72:
	OUTPUT_TEST layer72 nos72 busy72
	JR_EQ8 busy72 0 motornotbusy72
	SLEEP
	JR motorwaiting72
  motornotbusy72:
  while73:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 45.0 endwhile73
  whilebody73:
    CALL MOTOR.STARTSYNC 'BC' -30.0 30.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 45.0 whilebody73
  endwhile73:
  while77:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 11.0 endwhile77
  whilebody77:
    CALL MOTOR.STARTSYNC 'BC' -30.0 30.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 11.0 whilebody77
  endwhile77:
    CALL MOTOR.STOP 'BC' 'true'
    CALL MOTOR.SCHEDULESYNC 'BC' 20.0 -20.0 35.0 'TRUE'

	DATA8 layer82
	DATA8 nos82
	DATA8 busy82
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer82 nos82
	JR_EQ8 0 nos82 motornotbusy82
  motorwaiting82:
	OUTPUT_TEST layer82 nos82 busy82
	JR_EQ8 busy82 0 motornotbusy82
	SLEEP
	JR motorwaiting82
  motornotbusy82:
    DATA32 milliseconds83
	MOVEF_32 150.0 milliseconds83
	DATA32 timer83
	TIMER_WAIT milliseconds83 timer83
	TIMER_READY timer83
    JR_EQF VVR_M 1.0 else84_1
    WRITE32 ENDSUB_VIR:CALLSUB85 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIR
CALLSUB85:
  else84_1:
  endif84:
RETSUB_LEFT:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_LEFT:
SUB_FREEEZEEEEEEEEEEEEEE:
    UI_BUTTON FLUSH
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_FREEEZEEEEEEEEEEEEEE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_FREEEZEEEEEEEEEEEEEE:
SUB_TOLINE:
    JR_EQF VVR_M 1.0 else88_1
    WRITE32 ENDSUB_VIR:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIR
CALLSUB89:
  else88_1:
  endif88:
    MOVEF_F 1.0 VI_M
  for90:
    JR_GTF VI_M VNUM_M endfor90
  forbody90:
  while91:
    JR_GTF VS1_M 7.0 or92
    JR_LTEQF VS2_M 7.0 endwhile91
  or92:
    JR_LTF VS1_M 60.0 or93
    JR_LTEQF VS2_M 7.0 endwhile91
  or93:
    JR_GTF VS1_M 7.0 or94
    JR_GTEQF VS2_M 60.0 endwhile91
  or94:
  whilebody91:
    WRITE32 ENDSUB_LINE:CALLSUB95 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB95:
    JR_GTF VS1_M 7.0 or97
    JR_LTEQF VS2_M 7.0 and96
  or97:
    JR_LTF VS1_M 60.0 or98
    JR_LTEQF VS2_M 7.0 and96
  or98:
    JR_GTF VS1_M 7.0 whilebody91
    JR_LTF VS2_M 60.0 whilebody91
  and96:
  endwhile91:
    JR_EQF VI_M VNUM_M else99_1
    CALL MOTOR.SCHEDULE 'BC' 40.0 0.0 40.0 0.0 'false' 

	DATA8 layer100
	DATA8 nos100
	DATA8 busy100
	CALL MOTORDECODEPORTSDESCRIPTOR 'BC' layer100 nos100
	JR_EQ8 0 nos100 motornotbusy100
  motorwaiting100:
	OUTPUT_TEST layer100 nos100 busy100
	JR_EQ8 busy100 0 motornotbusy100
	SLEEP
	JR motorwaiting100
  motornotbusy100:
    CALL MOTOR.RESETCOUNT 'BC'
  while102:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf106
    DATA8 flag106
    DIVF F.1 2.0 tmpf106
    CP_EQF 0.0 2.0 flag106
    SELECTF flag106 0.0 tmpf106 F.0

    JR_GTEQF F.0 35.0 endwhile102
  whilebody102:
    WRITE32 ENDSUB_LINE:CALLSUB107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB107:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf111
    DATA8 flag111
    DIVF F.1 2.0 tmpf111
    CP_EQF 0.0 2.0 flag111
    SELECTF flag111 0.0 tmpf111 F.0

    JR_LTF F.0 35.0 whilebody102
  endwhile102:
  else99_1:
  endif99:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M VNUM_M forbody90
  endfor90:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOLINE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOLINE:
SUB_TOGRAD:
    JR_EQF VVR_M 1.0 else114_1
    WRITE32 ENDSUB_VIR:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIR
CALLSUB115:
  else114_1:
  endif114:
    CALL MOTOR.RESETCOUNT 'BC'
  while117:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf121
    DATA8 flag121
    DIVF F.1 2.0 tmpf121
    CP_EQF 0.0 2.0 flag121
    SELECTF flag121 0.0 tmpf121 F.0

    SUBF VGRAD_M 70.0 F.1
    JR_GTEQF F.0 F.1 endwhile117
  whilebody117:
    WRITE32 ENDSUB_LINE:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB123:
    CALL MOTOR.GETCOUNT 'B' F.2
    CALL MOTOR.GETCOUNT 'C' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf127
    DATA8 flag127
    DIVF F.1 2.0 tmpf127
    CP_EQF 0.0 2.0 flag127
    SELECTF flag127 0.0 tmpf127 F.0

    SUBF VGRAD_M 70.0 F.1
    JR_LTF F.0 F.1 whilebody117
  endwhile117:
  while129:
    JR_GTF VS1_M 7.0 or130
    JR_LTEQF VS2_M 7.0 endwhile129
  or130:
    JR_LTF VS1_M 60.0 or131
    JR_LTEQF VS2_M 7.0 endwhile129
  or131:
    JR_GTF VS1_M 7.0 or132
    JR_GTEQF VS2_M 60.0 endwhile129
  or132:
  whilebody129:
    WRITE32 ENDSUB_LINE:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_LINE
CALLSUB133:
    JR_GTF VS1_M 7.0 or135
    JR_LTEQF VS2_M 7.0 and134
  or135:
    JR_LTF VS1_M 60.0 or136
    JR_LTEQF VS2_M 7.0 and134
  or136:
    JR_GTF VS1_M 7.0 whilebody129
    JR_LTF VS2_M 60.0 whilebody129
  and134:
  endwhile129:
    CALL MOTOR.STOP 'BC' 'true'
RETSUB_TOGRAD:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_TOGRAD:
SUB_CLOSE:
    CALL MOTOR.STARTPOWER 'D' -60.0
    DATA32 milliseconds139
	MOVEF_32 700.0 milliseconds139
	DATA32 timer139
	TIMER_WAIT milliseconds139 timer139
	TIMER_READY timer139
    CALL MOTOR.STARTPOWER 'D' -4.0
RETSUB_CLOSE:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_CLOSE:
SUB_OPEN:
    CALL MOTOR.STARTPOWER 'D' 60.0
    DATA32 milliseconds142
	MOVEF_32 700.0 milliseconds142
	DATA32 timer142
	TIMER_WAIT milliseconds142 timer142
	TIMER_READY timer142
    CALL MOTOR.STARTPOWER 'D' 4.0
RETSUB_OPEN:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_OPEN:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
