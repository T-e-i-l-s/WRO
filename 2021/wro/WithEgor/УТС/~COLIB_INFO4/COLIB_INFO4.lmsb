DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VGV_X
DATAF VGV_Z
DATAF VGV_D
DATAF VGV_MAX2
DATAF VGV_MAX3
DATAF VGV_MIN2
DATAF VGV_MIN3
DATAF VGV_P
DATAF VGV_I
DATAF VGV_I2CPORT
DATAF VGV_I2CSLVADDR
DATAF VGV_G
DATAF VGV_R
DATAF VGV_Y
DATAF VGV_W
DATAF VGV_COLOR
DATAF VGV_K1
DATAF VGV_K2
DATAF VGV_SPEED
DATAF VGV_SPEEDL
DATAF VGV_SPEEDR
DATAF VGV_EOLD
DATAF VGV_N
DATAF VGV_Q
DATAF VGV_S3
DATAF VGV_S2
DATAF VGV_E
DATAF VGV_U
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_SNUM
DATAF VGV_SRED
DATAF VGV_SGREEN
DATAF VGV_SBLUE
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_S
DATAF VGV_V
DATAF VGV_H1
DATAF VGV_S1
DATAF VGV_V1
DATAF VGV_COLOR1
DATAF VGV_H2
DATAF VGV_S22
DATAF VGV_V2
DATAF VGV_COLOR2
DATAF VGV_H4
DATAF VGV_S4
DATAF VGV_V4
DATAF VGV_COLOR4
DATAF VGV_H5
DATAF VGV_S5
DATAF VGV_V5
DATAF VGV_COLOR5

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_Z
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_I2CPORT
    MOVEF_F 0.0 VGV_I2CSLVADDR
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.0 VGV_K1
    MOVEF_F 0.0 VGV_K2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    MOVEF_F 0.0 VGV_Q
    MOVEF_F 0.0 VGV_S3
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VGV_E
    MOVEF_F 0.0 VGV_U
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_SNUM
    MOVEF_F 0.0 VGV_SRED
    MOVEF_F 0.0 VGV_SGREEN
    MOVEF_F 0.0 VGV_SBLUE
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_H1
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_V1
    MOVEF_F 0.0 VGV_COLOR1
    MOVEF_F 0.0 VGV_H2
    MOVEF_F 0.0 VGV_S22
    MOVEF_F 0.0 VGV_V2
    MOVEF_F 0.0 VGV_COLOR2
    MOVEF_F 0.0 VGV_H4
    MOVEF_F 0.0 VGV_S4
    MOVEF_F 0.0 VGV_V4
    MOVEF_F 0.0 VGV_COLOR4
    MOVEF_F 0.0 VGV_H5
    MOVEF_F 0.0 VGV_S5
    MOVEF_F 0.0 VGV_V5
    MOVEF_F 0.0 VGV_COLOR5
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_Z
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_I2CPORT
    MOVEF_F 0.0 VGV_I2CSLVADDR
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.0 VGV_K1
    MOVEF_F 0.0 VGV_K2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    MOVEF_F 0.0 VGV_Q
    MOVEF_F 0.0 VGV_S3
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VGV_E
    MOVEF_F 0.0 VGV_U
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_SENDARRAY
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VGV_RECVARRAY
    MOVEF_F 0.0 VGV_SNUM
    MOVEF_F 0.0 VGV_SRED
    MOVEF_F 0.0 VGV_SGREEN
    MOVEF_F 0.0 VGV_SBLUE
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_V
    MOVEF_F 0.0 VGV_H1
    MOVEF_F 0.0 VGV_S1
    MOVEF_F 0.0 VGV_V1
    MOVEF_F 0.0 VGV_COLOR1
    MOVEF_F 0.0 VGV_H2
    MOVEF_F 0.0 VGV_S22
    MOVEF_F 0.0 VGV_V2
    MOVEF_F 0.0 VGV_COLOR2
    MOVEF_F 0.0 VGV_H4
    MOVEF_F 0.0 VGV_S4
    MOVEF_F 0.0 VGV_V4
    MOVEF_F 0.0 VGV_COLOR4
    MOVEF_F 0.0 VGV_H5
    MOVEF_F 0.0 VGV_S5
    MOVEF_F 0.0 VGV_V5
    MOVEF_F 0.0 VGV_COLOR5
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_Z
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    CALL MOTOR.INVERT 'b'
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 1.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 2.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 2.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 3.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.15 VGV_K1
    MOVEF_F 2.0 VGV_K2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 100.0 VGV_MIN2
    MOVEF_F 100.0 VGV_MIN3
    CALL MOTOR.RESETCOUNT 'bc'
    CALL MOTOR.START 'bc' 30.0
  while8:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf12
    DATA8 flag12
    DIVF F.1 2.0 tmpf12
    CP_EQF 0.0 2.0 flag12
    SELECTF flag12 0.0 tmpf12 F.0

    JR_GTEQF F.0 500.0 endwhile8
  whilebody8:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VGV_MAX2 else13_1
    CALL SENSOR.READPERCENT 2.0 VGV_MAX2
  else13_1:
  endif13:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 VGV_MIN2 else16_1
    CALL SENSOR.READPERCENT 2.0 VGV_MIN2
  else16_1:
  endif16:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VGV_MAX3 else19_1
    CALL SENSOR.READPERCENT 3.0 VGV_MAX3
  else19_1:
  endif19:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 VGV_MIN3 else22_1
    CALL SENSOR.READPERCENT 3.0 VGV_MIN3
  else22_1:
  endif22:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf28
    DATA8 flag28
    DIVF F.1 2.0 tmpf28
    CP_EQF 0.0 2.0 flag28
    SELECTF flag28 0.0 tmpf28 F.0

    JR_LTF F.0 500.0 whilebody8
  endwhile8:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    MOVEF_F 20.0 VGV_SPEED
    MOVEF_F 1.0 VGV_Q
    MOVEF_F 1.0 VGV_I
  for31:
    JR_GTF VGV_I 9.0 endfor31
  forbody31:
    WRITE32 ENDSUB_F_A3_0:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB32:
    WRITE32 ENDSUB_F_A2_0:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB33:
  while34:
    JR_LTEQF VGV_S3 10.0 and36
    JR_GTF VGV_S2 10.0 or35
  and36:
    JR_GTEQF VGV_S3 10.0 endwhile34
    JR_GTEQF VGV_S2 10.0 endwhile34
  or35:
  whilebody34:
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB37:
    JR_LTEQF VGV_S3 10.0 and38
    JR_GTF VGV_S2 10.0 whilebody34
  and38:
    JR_GTEQF VGV_S3 10.0 and39
    JR_LTF VGV_S2 10.0 whilebody34
  and39:
  endwhile34:
    CALL MOTOR.STOP 'bc' 'true'
    JR_NEQF VGV_Q 1.0 else41_1
    WRITE32 ENDSUB_F_HSV_100_0:CALLSUB42 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_100_0
CALLSUB42:
    MOVEF_F VGV_H VGV_H1
    MOVEF_F VGV_S VGV_S1
    MOVEF_F VGV_V VGV_V1
    JR_GTF VGV_H 120.0 or44
    JR_EQF VGV_H 0.0 or44
    JR_LTF VGV_H 0.0 else43_1
    JR_GTF VGV_H 20.0 else43_1
  or44:
    MOVEF_F 5.0 VGV_COLOR1
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    JR endif43
  else43_1:
    JR_GTEQF VGV_H 120.0 else43_2
    MOVEF_F 4.0 VGV_COLOR1
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    JR endif43
  else43_2:
    MOVEF_F 6.0 VGV_COLOR1
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
  else43_3:
  endif43:
  else41_1:
  endif41:
    JR_NEQF VGV_Q 3.0 else48_1
    WRITE32 ENDSUB_F_HSV_100_0:CALLSUB49 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_100_0
CALLSUB49:
    MOVEF_F VGV_H VGV_H2
    MOVEF_F VGV_S VGV_S22
    MOVEF_F VGV_V VGV_V2
    JR_GTEQF VGV_V 0.043 else50_1
    MOVEF_F 5.0 VGV_COLOR2
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    JR endif50
  else50_1:
    MOVEF_F 4.0 VGV_COLOR2
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
  else50_2:
  endif50:
  else48_1:
  endif48:
    JR_NEQF VGV_Q 8.0 else53_1
    WRITE32 ENDSUB_F_HSV_100_0:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_100_0
CALLSUB54:
    MOVEF_F VGV_H VGV_H4
    MOVEF_F VGV_S VGV_S4
    MOVEF_F VGV_V VGV_V4
    JR_GTEQF VGV_H 30.0 else55_1
    MOVEF_F 5.0 VGV_COLOR4
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    JR endif55
  else55_1:
    MOVEF_F 4.0 VGV_COLOR4
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
  else55_2:
  endif55:
  else53_1:
  endif53:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer58
	DATA8 nos58
	DATA8 busy58
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer58 nos58
	JR_EQ8 0 nos58 motornotbusy58
  motorwaiting58:
	OUTPUT_TEST layer58 nos58 busy58
	JR_EQ8 busy58 0 motornotbusy58
	SLEEP
	JR motorwaiting58
  motornotbusy58:
    ADDF VGV_Q 1.0 VGV_Q
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 9.0 forbody31
  endfor31:
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 -20.0 150.0 'true'

	DATA8 layer61
	DATA8 nos61
	DATA8 busy61
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer61 nos61
	JR_EQ8 0 nos61 motornotbusy61
  motorwaiting61:
	OUTPUT_TEST layer61 nos61 busy61
	JR_EQ8 busy61 0 motornotbusy61
	SLEEP
	JR motorwaiting61
  motornotbusy61:
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 300.0 'true'

	DATA8 layer62
	DATA8 nos62
	DATA8 busy62
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer62 nos62
	JR_EQ8 0 nos62 motornotbusy62
  motorwaiting62:
	OUTPUT_TEST layer62 nos62 busy62
	JR_EQ8 busy62 0 motornotbusy62
	SLEEP
	JR motorwaiting62
  motornotbusy62:
    WRITE32 ENDSUB_F_A2_0:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB63:
    WRITE32 ENDSUB_F_A3_0:CALLSUB64 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB64:
  while65:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile65
  whilebody65:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody65
  endwhile65:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A2_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB70:
    WRITE32 ENDSUB_F_A3_0:CALLSUB71 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB71:
  while72:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 50.0 endwhile72
  whilebody72:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 50.0 whilebody72
  endwhile72:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB77 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB77:
    WRITE32 ENDSUB_F_A2_0:CALLSUB78 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB78:
  while79:
    JR_LTEQF VGV_S3 10.0 and81
    JR_GTF VGV_S2 10.0 or80
  and81:
    JR_GTEQF VGV_S3 10.0 endwhile79
    JR_GTEQF VGV_S2 10.0 endwhile79
  or80:
  whilebody79:
    MOVEF_F 30.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB82 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB82:
    JR_LTEQF VGV_S3 10.0 and83
    JR_GTF VGV_S2 10.0 whilebody79
  and83:
    JR_GTEQF VGV_S3 10.0 and84
    JR_LTF VGV_S2 10.0 whilebody79
  and84:
  endwhile79:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer86
	DATA8 nos86
	DATA8 busy86
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer86 nos86
	JR_EQ8 0 nos86 motornotbusy86
  motorwaiting86:
	OUTPUT_TEST layer86 nos86 busy86
	JR_EQ8 busy86 0 motornotbusy86
	SLEEP
	JR motorwaiting86
  motornotbusy86:
    MOVEF_F 50.0 VGV_SPEED
    MOVEF_F 0.0 VGV_Q
    MOVEF_F 1.0 VGV_I
  for87:
    JR_GTF VGV_I 4.0 endfor87
  forbody87:
    MOVEF_F 0.2 VGV_K1
    MOVEF_F 0.0 VGV_K2
    WRITE32 ENDSUB_F_A3_0:CALLSUB88 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB88:
    WRITE32 ENDSUB_F_A2_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB89:
  while90:
    JR_LTEQF VGV_S3 10.0 and92
    JR_GTF VGV_S2 10.0 or91
  and92:
    JR_GTEQF VGV_S3 10.0 endwhile90
    JR_GTEQF VGV_S2 10.0 endwhile90
  or91:
  whilebody90:
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB93:
    JR_LTEQF VGV_S3 10.0 and94
    JR_GTF VGV_S2 10.0 whilebody90
  and94:
    JR_GTEQF VGV_S3 10.0 and95
    JR_LTF VGV_S2 10.0 whilebody90
  and95:
  endwhile90:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_ZAMOROZ_0:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAMOROZ_0
CALLSUB97:
    JR_NEQF VGV_Q 1.0 else98_1
    WRITE32 ENDSUB_F_HSV_100_0:CALLSUB99 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_100_0
CALLSUB99:
    MOVEF_F VGV_H VGV_H5
    MOVEF_F VGV_S VGV_S5
    MOVEF_F VGV_V VGV_V5
    JR_LTF VGV_H 25.0 or101
    JR_LTEQF VGV_H 280.0 else100_1
  or101:
    MOVEF_F 5.0 VGV_COLOR5
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    JR endif100
  else100_1:
    MOVEF_F 4.0 VGV_COLOR5
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
  else100_2:
  endif100:
  else98_1:
  endif98:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer104
	DATA8 nos104
	DATA8 busy104
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer104 nos104
	JR_EQ8 0 nos104 motornotbusy104
  motorwaiting104:
	OUTPUT_TEST layer104 nos104 busy104
	JR_EQ8 busy104 0 motornotbusy104
	SLEEP
	JR motorwaiting104
  motornotbusy104:
    ADDF VGV_Q 1.0 VGV_Q
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 4.0 forbody87
  endfor87:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_H1 '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VGV_S1 '%g' 99 S.0
    CALL LCD.WRITE 10.0 40.0 S.0
    STRINGS VALUE_FORMATTED VGV_V1 '%g' 99 S.0
    CALL LCD.WRITE 10.0 70.0 S.0
    STRINGS VALUE_FORMATTED VGV_COLOR1 '%g' 99 S.0
    CALL LCD.WRITE 10.0 100.0 S.0
    STRINGS VALUE_FORMATTED VGV_H2 '%g' 99 S.0
    CALL LCD.WRITE 40.0 20.0 S.0
    STRINGS VALUE_FORMATTED VGV_S22 '%g' 99 S.0
    CALL LCD.WRITE 40.0 50.0 S.0
    STRINGS VALUE_FORMATTED VGV_V2 '%g' 99 S.0
    CALL LCD.WRITE 40.0 80.0 S.0
    STRINGS VALUE_FORMATTED VGV_COLOR2 '%g' 99 S.0
    CALL LCD.WRITE 40.0 110.0 S.0
    STRINGS VALUE_FORMATTED VGV_H4 '%g' 99 S.0
    CALL LCD.WRITE 70.0 10.0 S.0
    STRINGS VALUE_FORMATTED VGV_S4 '%g' 99 S.0
    CALL LCD.WRITE 70.0 40.0 S.0
    STRINGS VALUE_FORMATTED VGV_V4 '%g' 99 S.0
    CALL LCD.WRITE 70.0 70.0 S.0
    STRINGS VALUE_FORMATTED VGV_COLOR4 '%g' 99 S.0
    CALL LCD.WRITE 70.0 100.0 S.0
    STRINGS VALUE_FORMATTED VGV_H5 '%g' 99 S.0
    CALL LCD.WRITE 100.0 20.0 S.0
    STRINGS VALUE_FORMATTED VGV_S5 '%g' 99 S.0
    CALL LCD.WRITE 100.0 50.0 S.0
    STRINGS VALUE_FORMATTED VGV_V5 '%g' 99 S.0
    CALL LCD.WRITE 100.0 80.0 S.0
    STRINGS VALUE_FORMATTED VGV_COLOR5 '%g' 99 S.0
    CALL LCD.WRITE 100.0 110.0 S.0
    DATA32 milliseconds140
	MOVEF_32 1200000.0 milliseconds140
	DATA32 timer140
	TIMER_WAIT milliseconds140 timer140
	TIMER_READY timer140
ENDTHREAD:
    RETURN
SUB_F_HSV_0:
    DATA8 layer141
	DATA8 no141
	DATA8 mode8141
	
	MOVEF_8 1.0 no141
	SUB8 no141 1 no141
	DIV8 no141 4 layer141
	MATH MOD8 no141 4 no141

	MOVEF_8 2.0 mode8141
	
	INPUT_DEVICE READY_RAW layer141 no141 0 mode8141 0
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C VGV_I2CPORT VGV_I2CSLVADDR 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_SNUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_SRED VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_SGREEN VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_SBLUE VGV_RECVARRAY
    DATAF tmpf148
    DATA8 flag148
    DIVF VGV_SRED 255.0 tmpf148
    CP_EQF 0.0 255.0 flag148
    SELECTF flag148 0.0 tmpf148 VGV_SRED

    DATAF tmpf149
    DATA8 flag149
    DIVF VGV_SGREEN 255.0 tmpf149
    CP_EQF 0.0 255.0 flag149
    SELECTF flag149 0.0 tmpf149 VGV_SGREEN

    DATAF tmpf150
    DATA8 flag150
    DIVF VGV_SBLUE 255.0 tmpf150
    CP_EQF 0.0 255.0 flag150
    SELECTF flag150 0.0 tmpf150 VGV_SBLUE

    JR_LTEQF VGV_SRED VGV_SGREEN else151_1
    JR_LTEQF VGV_SRED VGV_SBLUE else151_1
    MOVEF_F VGV_SRED VGV_MAX
    JR endif151
  else151_1:
    JR_LTEQF VGV_SGREEN VGV_SRED else151_2
    JR_LTEQF VGV_SGREEN VGV_SBLUE else151_2
    MOVEF_F VGV_SGREEN VGV_MAX
    JR endif151
  else151_2:
    JR_LTEQF VGV_SBLUE VGV_SRED else151_3
    JR_LTEQF VGV_SBLUE VGV_SGREEN else151_3
    MOVEF_F VGV_SBLUE VGV_MAX
  else151_3:
  endif151:
    JR_GTEQF VGV_SRED VGV_SGREEN else152_1
    JR_GTEQF VGV_SRED VGV_SBLUE else152_1
    MOVEF_F VGV_SRED VGV_MIN
    JR endif152
  else152_1:
    JR_GTEQF VGV_SGREEN VGV_SRED else152_2
    JR_GTEQF VGV_SGREEN VGV_SBLUE else152_2
    MOVEF_F VGV_SGREEN VGV_MIN
    JR endif152
  else152_2:
    JR_GTEQF VGV_SBLUE VGV_SRED else152_3
    JR_GTEQF VGV_SBLUE VGV_SGREEN else152_3
    MOVEF_F VGV_SBLUE VGV_MIN
  else152_3:
  endif152:
    JR_NEQF VGV_MAX VGV_MIN else153_1
    MOVEF_F 0.0 VGV_H
    JR endif153
  else153_1:
    JR_NEQF VGV_SRED VGV_MAX else154_1
    JR_LTF VGV_SGREEN VGV_SBLUE else155_1
    SUBF VGV_SGREEN VGV_SBLUE F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf159
    DATA8 flag159
    DIVF F.0 F.1 tmpf159
    CP_EQF 0.0 F.1 flag159
    SELECTF flag159 0.0 tmpf159 VGV_H

    JR endif155
  else155_1:
    SUBF VGV_SGREEN VGV_SBLUE F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf163
    DATA8 flag163
    DIVF F.1 F.2 tmpf163
    CP_EQF 0.0 F.2 flag163
    SELECTF flag163 0.0 tmpf163 F.0

    ADDF F.0 360.0 VGV_H
  else155_2:
  endif155:
    JR endif154
  else154_1:
    JR_NEQF VGV_MAX VGV_SGREEN else165_1
    SUBF VGV_SBLUE VGV_SRED F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf169
    DATA8 flag169
    DIVF F.1 F.2 tmpf169
    CP_EQF 0.0 F.2 flag169
    SELECTF flag169 0.0 tmpf169 F.0

    ADDF F.0 120.0 VGV_H
    JR endif165
  else165_1:
    SUBF VGV_SRED VGV_SGREEN F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf174
    DATA8 flag174
    DIVF F.1 F.2 tmpf174
    CP_EQF 0.0 F.2 flag174
    SELECTF flag174 0.0 tmpf174 F.0

    ADDF F.0 240.0 VGV_H
  else165_2:
  endif165:
  else154_2:
  endif154:
  else153_2:
  endif153:
    JR_NEQF VGV_MAX 0.0 else176_1
    MOVEF_F 0.0 VGV_S
    JR endif176
  else176_1:
    DATAF tmpf177
    DATA8 flag177
    DIVF VGV_MIN VGV_MAX tmpf177
    CP_EQF 0.0 VGV_MAX flag177
    SELECTF flag177 0.0 tmpf177 F.0

    SUBF 1.0 F.0 VGV_S
  else176_2:
  endif176:
    MOVEF_F VGV_MAX VGV_V
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_H '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VGV_S '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VGV_V '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_HSV_100_0:
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_Z
    DATA8 layer186
	DATA8 no186
	DATA8 mode8186
	
	MOVEF_8 1.0 no186
	SUB8 no186 1 no186
	DIV8 no186 4 layer186
	MATH MOD8 no186 4 no186

	MOVEF_8 2.0 mode8186
	
	INPUT_DEVICE READY_RAW layer186 no186 0 mode8186 0
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    MOVEF_F 1.0 VGV_P
  for187:
    JR_GTF VGV_P 100.0 endfor187
  forbody187:
    WRITE32 ENDSUB_F_HSV_0:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_HSV_0
CALLSUB188:
    ADDF VGV_X VGV_H VGV_X
    ADDF VGV_Z VGV_S VGV_Z
    ADDF VGV_D VGV_V VGV_D
    ADDF VGV_P 1.0 VGV_P
    JR_LTEQF VGV_P 100.0 forbody187
  endfor187:
    DATAF tmpf193
    DATA8 flag193
    DIVF VGV_X 100.0 tmpf193
    CP_EQF 0.0 100.0 flag193
    SELECTF flag193 0.0 tmpf193 VGV_H

    DATAF tmpf194
    DATA8 flag194
    DIVF VGV_Z 100.0 tmpf194
    CP_EQF 0.0 100.0 flag194
    SELECTF flag194 0.0 tmpf194 VGV_S

    DATAF tmpf195
    DATA8 flag195
    DIVF VGV_D 100.0 tmpf195
    CP_EQF 0.0 100.0 flag195
    SELECTF flag195 0.0 tmpf195 VGV_V

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_H '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VGV_S '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VGV_V '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_F_HSV_100_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_100_0:
SUB_F_A3_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN3 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX3 VGV_MIN3 F.1
    DATAF tmpf207
    DATA8 flag207
    DIVF F.0 F.1 tmpf207
    CP_EQF 0.0 F.1 flag207
    SELECTF flag207 0.0 tmpf207 VGV_S3

RETSUB_F_A3_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_A3_0:
SUB_F_A2_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf212
    DATA8 flag212
    DIVF F.0 F.1 tmpf212
    CP_EQF 0.0 F.1 flag212
    SELECTF flag212 0.0 tmpf212 VGV_S2

RETSUB_F_A2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_A2_0:
SUB_F_POLIN2D_0:
    WRITE32 ENDSUB_F_A3_0:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB213:
    WRITE32 ENDSUB_F_A2_0:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB214:
    SUBF VGV_S2 VGV_S3 VGV_E
    MULF VGV_K1 VGV_E F.0
    SUBF VGV_E VGV_EOLD F.2
    MULF VGV_K2 F.2 F.1
    ADDF F.0 F.1 VGV_U
    MOVEF_F VGV_E VGV_EOLD
    ADDF VGV_SPEED VGV_U VGV_SPEEDL
    SUBF VGV_SPEED VGV_U VGV_SPEEDR
    CALL MOTOR.STARTPOWER 'B' VGV_SPEEDL
    CALL MOTOR.STARTPOWER 'C' VGV_SPEEDR
RETSUB_F_POLIN2D_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_POLIN2D_0:
SUB_F_ZAMOROZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_ZAMOROZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZAMOROZ_0:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
