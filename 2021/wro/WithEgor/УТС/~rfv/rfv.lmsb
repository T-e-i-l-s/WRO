DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VG_M
DATAF VR_M
DATAF VY_M
DATAF VW_M
DATAF VCOLOR_M
DATAF VX_M
DATAF VC_M
DATAF VS_M
DATAF VMAX2_M
DATAF VMAX3_M
DATAF VMIN2_M
DATAF VMIN3_M
DATAF VK1_M
DATAF VK2_M
DATAF VK3_M
DATAF VS3_M
DATAF VS2_M
DATAF VSPEED_M
DATAF VSPEEDL_M
DATAF VSPEEDR_M
DATAF VEOLD_M
DATAF VN_M
DATAF VP_M
DATAF VI_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VL_M
DATAF VJ_M
DATAF VE_M
DATAF VU_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VV_M
DATAF VD_M
DATAF VZ_M
ARRAY16 VA_M 2
DATA32 RUNCOUNTER_ZADVIG
DATA32 RUNCOUNTER_VIDVIG

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYCREATE_FLOAT VA_M
    MOVE32_32 0 RUNCOUNTER_ZADVIG
    MOVE32_32 0 RUNCOUNTER_VIDVIG
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TZADVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_ZADVIG 0
    CALL GETANDINC32 RUNCOUNTER_ZADVIG -1 RUNCOUNTER_ZADVIG tmp
    JR_GT32 tmp 1 launch
}
vmthread TVIDVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_VIDVIG 1
    CALL GETANDINC32 RUNCOUNTER_VIDVIG -1 RUNCOUNTER_VIDVIG tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_ZADVIG
subcall PROGRAM_VIDVIG
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1081
    WRITE32 ENDSUB_ZADVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
  dispatch1081:
    JR_NEQ32 SUBPROGRAM 1 dispatch1082
    WRITE32 ENDSUB_VIDVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIDVIG
  dispatch1082:
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_M
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    MOVEF_F 0.2 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL MOTOR.START 'bc' 40.0
  while1007:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1011
    DATA8 flag1011
    DIVF F.1 2.0 tmpf1011
    CP_EQF 0.0 2.0 flag1011
    SELECTF flag1011 0.0 tmpf1011 F.0

    JR_GTEQF F.0 500.0 endwhile1007
  whilebody1007:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VMAX2_M else1012_1
    CALL SENSOR.READPERCENT 2.0 VMAX2_M
  else1012_1:
  endif1012:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 VMIN2_M else1015_1
    CALL SENSOR.READPERCENT 2.0 VMIN2_M
  else1015_1:
  endif1015:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VMAX3_M else1018_1
    CALL SENSOR.READPERCENT 3.0 VMAX3_M
  else1018_1:
  endif1018:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 VMIN3_M else1021_1
    CALL SENSOR.READPERCENT 3.0 VMIN3_M
  else1021_1:
  endif1021:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1027
    DATA8 flag1027
    DIVF F.1 2.0 tmpf1027
    CP_EQF 0.0 2.0 flag1027
    SELECTF flag1027 0.0 tmpf1027 F.0

    JR_LTF F.0 500.0 whilebody1007
  endwhile1007:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_ZAMOROZ:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZAMOROZ
CALLSUB1029:
    WRITE32 ENDSUB_A2:CALLSUB1051 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1051:
    WRITE32 ENDSUB_A3:CALLSUB1052 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1052:
  while1053:
    JR_LTEQF VS3_M 10.0 and1055
    JR_GTF VS2_M 10.0 or1054
  and1055:
    JR_GTEQF VS3_M 10.0 and1056
    JR_GTF VS2_M 10.0 or1054
  and1056:
    JR_LTEQF VS3_M 10.0 endwhile1053
    JR_GTEQF VS2_M 10.0 endwhile1053
  or1054:
  whilebody1053:
    WRITE32 ENDSUB_A2:CALLSUB1057 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1057:
    WRITE32 ENDSUB_A3:CALLSUB1058 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1058:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    JR_LTEQF VS3_M 10.0 and1060
    JR_GTF VS2_M 10.0 whilebody1053
  and1060:
    JR_GTEQF VS3_M 10.0 and1061
    JR_GTF VS2_M 10.0 whilebody1053
  and1061:
    JR_LTEQF VS3_M 10.0 and1062
    JR_LTF VS2_M 10.0 whilebody1053
  and1062:
  endwhile1053:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer1064
	DATA8 nos1064
	DATA8 busy1064
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1064 nos1064
	JR_EQ8 0 nos1064 motornotbusy1064
  motorwaiting1064:
	OUTPUT_TEST layer1064 nos1064 busy1064
	JR_EQ8 busy1064 0 motornotbusy1064
	SLEEP
	JR motorwaiting1064
  motornotbusy1064:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer1066
	DATA8 nos1066
	DATA8 busy1066
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1066 nos1066
	JR_EQ8 0 nos1066 motornotbusy1066
  motorwaiting1066:
	OUTPUT_TEST layer1066 nos1066 busy1066
	JR_EQ8 busy1066 0 motornotbusy1066
	SLEEP
	JR motorwaiting1066
  motornotbusy1066:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB1068 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1068:
    WRITE32 ENDSUB_A2:CALLSUB1069 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1069:
  while1070:
    JR_LTEQF VS2_M 10.0 endwhile1070
  whilebody1070:
    WRITE32 ENDSUB_A3:CALLSUB1071 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1071:
    WRITE32 ENDSUB_A2:CALLSUB1072 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1072:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody1070
  endwhile1070:
    WRITE32 ENDSUB_A3:CALLSUB1074 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1074:
    WRITE32 ENDSUB_A2:CALLSUB1075 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1075:
  while1076:
    JR_GTEQF VS2_M 60.0 endwhile1076
  whilebody1076:
    WRITE32 ENDSUB_A3:CALLSUB1077 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1077:
    WRITE32 ENDSUB_A2:CALLSUB1078 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1078:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody1076
  endwhile1076:
    CALL MOTOR.STOP 'bc' 'true'
ENDTHREAD:
    RETURN
SUB_US:
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf7
    DATA8 flag7
    DIVF 360.0 VL_M tmpf7
    CP_EQF 0.0 VL_M flag7
    SELECTF flag7 0.0 tmpf7 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while10:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.1 2.0 tmpf14
    CP_EQF 0.0 2.0 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    JR_GTEQF F.0 VX_M endwhile10
  whilebody10:
    WRITE32 ENDSUB_A3:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB15:
    WRITE32 ENDSUB_A2:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB16:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB17:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.1 2.0 tmpf21
    CP_EQF 0.0 2.0 flag21
    SELECTF flag21 0.0 tmpf21 F.0

    JR_LTF F.0 VX_M whilebody10
  endwhile10:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB23:
    WRITE32 ENDSUB_A2:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB24:
  while25:
    JR_LTEQF VS3_M 15.0 and27
    JR_GTF VS2_M 15.0 or26
  and27:
    JR_GTEQF VS3_M 15.0 endwhile25
    JR_GTEQF VS2_M 15.0 endwhile25
  or26:
  whilebody25:
    WRITE32 ENDSUB_A3:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB28:
    WRITE32 ENDSUB_A2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB29:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB30:
    JR_LTEQF VS3_M 15.0 and31
    JR_GTF VS2_M 15.0 whilebody25
  and31:
    JR_GTEQF VS3_M 15.0 and32
    JR_LTF VS2_M 15.0 whilebody25
  and32:
  endwhile25:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_US:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_US:
SUB_PL:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer34
	DATA8 nos34
	DATA8 busy34
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer34 nos34
	JR_EQ8 0 nos34 motornotbusy34
  motorwaiting34:
	OUTPUT_TEST layer34 nos34 busy34
	JR_EQ8 busy34 0 motornotbusy34
	SLEEP
	JR motorwaiting34
  motornotbusy34:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB36:
    WRITE32 ENDSUB_A2:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB37:
  while38:
    JR_LTEQF VS2_M 15.0 endwhile38
  whilebody38:
    WRITE32 ENDSUB_A3:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB39:
    WRITE32 ENDSUB_A2:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB40:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody38
  endwhile38:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB43:
    WRITE32 ENDSUB_A2:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB44:
  while45:
    JR_GTEQF VS2_M 15.0 endwhile45
  whilebody45:
    WRITE32 ENDSUB_A3:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB46:
    WRITE32 ENDSUB_A2:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB47:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody45
  endwhile45:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PL:
SUB_PR:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 60.0 'true'

	DATA8 layer50
	DATA8 nos50
	DATA8 busy50
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer50 nos50
	JR_EQ8 0 nos50 motornotbusy50
  motorwaiting50:
	OUTPUT_TEST layer50 nos50 busy50
	JR_EQ8 busy50 0 motornotbusy50
	SLEEP
	JR motorwaiting50
  motornotbusy50:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB52:
    WRITE32 ENDSUB_A2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB53:
  while54:
    JR_LTEQF VS3_M 15.0 endwhile54
  whilebody54:
    WRITE32 ENDSUB_A3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB55:
    WRITE32 ENDSUB_A2:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB56:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody54
  endwhile54:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB59:
    WRITE32 ENDSUB_A2:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB60:
  while61:
    JR_GTEQF VS3_M 15.0 endwhile61
  whilebody61:
    WRITE32 ENDSUB_A3:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB62:
    WRITE32 ENDSUB_A2:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB63:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PR:
SUB_NPL:
    WRITE32 ENDSUB_A2:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB66:
    WRITE32 ENDSUB_A3:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB67:
  while68:
    JR_LTEQF VS3_M 10.0 and70
    JR_GTF VS2_M 10.0 or69
  and70:
    JR_GTEQF VS3_M 10.0 and71
    JR_GTF VS2_M 10.0 or69
  and71:
    JR_LTEQF VS3_M 10.0 endwhile68
    JR_GTEQF VS2_M 10.0 endwhile68
  or69:
  whilebody68:
    WRITE32 ENDSUB_A2:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB72:
    WRITE32 ENDSUB_A3:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB73:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    JR_LTEQF VS3_M 10.0 and75
    JR_GTF VS2_M 10.0 whilebody68
  and75:
    JR_GTEQF VS3_M 10.0 and76
    JR_GTF VS2_M 10.0 whilebody68
  and76:
    JR_LTEQF VS3_M 10.0 and77
    JR_LTF VS2_M 10.0 whilebody68
  and77:
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer81
	DATA8 nos81
	DATA8 busy81
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer81 nos81
	JR_EQ8 0 nos81 motornotbusy81
  motorwaiting81:
	OUTPUT_TEST layer81 nos81 busy81
	JR_EQ8 busy81 0 motornotbusy81
	SLEEP
	JR motorwaiting81
  motornotbusy81:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB83:
    WRITE32 ENDSUB_A2:CALLSUB84 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB84:
  while85:
    JR_LTEQF VS2_M 10.0 endwhile85
  whilebody85:
    WRITE32 ENDSUB_A3:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB86:
    WRITE32 ENDSUB_A2:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB87:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody85
  endwhile85:
    WRITE32 ENDSUB_A3:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB89:
    WRITE32 ENDSUB_A2:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB90:
  while91:
    JR_GTEQF VS2_M 60.0 endwhile91
  whilebody91:
    WRITE32 ENDSUB_A3:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB92:
    WRITE32 ENDSUB_A2:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB93:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody91
  endwhile91:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPL:
SUB_NPP:
    WRITE32 ENDSUB_A2:CALLSUB96 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB96:
    WRITE32 ENDSUB_A3:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB97:
  while98:
    JR_LTEQF VS3_M 10.0 and100
    JR_GTF VS2_M 10.0 or99
  and100:
    JR_GTEQF VS3_M 10.0 and101
    JR_GTF VS2_M 10.0 or99
  and101:
    JR_LTEQF VS3_M 10.0 endwhile98
    JR_GTEQF VS2_M 10.0 endwhile98
  or99:
  whilebody98:
    WRITE32 ENDSUB_A2:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB102:
    WRITE32 ENDSUB_A3:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB103:
    CALL MOTOR.STARTPOWER 'bc' -60.0
    JR_LTEQF VS3_M 10.0 and105
    JR_GTF VS2_M 10.0 whilebody98
  and105:
    JR_GTEQF VS3_M 10.0 and106
    JR_GTF VS2_M 10.0 whilebody98
  and106:
    JR_LTEQF VS3_M 10.0 and107
    JR_LTF VS2_M 10.0 whilebody98
  and107:
  endwhile98:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 90.0 'true'

	DATA8 layer109
	DATA8 nos109
	DATA8 busy109
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer109 nos109
	JR_EQ8 0 nos109 motornotbusy109
  motorwaiting109:
	OUTPUT_TEST layer109 nos109 busy109
	JR_EQ8 busy109 0 motornotbusy109
	SLEEP
	JR motorwaiting109
  motornotbusy109:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 90.0 'true'

	DATA8 layer111
	DATA8 nos111
	DATA8 busy111
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer111 nos111
	JR_EQ8 0 nos111 motornotbusy111
  motorwaiting111:
	OUTPUT_TEST layer111 nos111 busy111
	JR_EQ8 busy111 0 motornotbusy111
	SLEEP
	JR motorwaiting111
  motornotbusy111:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB113:
    WRITE32 ENDSUB_A2:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB114:
  while115:
    JR_LTEQF VS3_M 10.0 endwhile115
  whilebody115:
    WRITE32 ENDSUB_A3:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB116:
    WRITE32 ENDSUB_A2:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB117:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody115
  endwhile115:
    WRITE32 ENDSUB_A3:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB119:
    WRITE32 ENDSUB_A2:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB120:
  while121:
    JR_GTEQF VS3_M 60.0 endwhile121
  whilebody121:
    WRITE32 ENDSUB_A3:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB122:
    WRITE32 ENDSUB_A2:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB123:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 60.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPP:
SUB_REDL:
    DATA32 tmp126
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp126
    JR_NEQ32 0 tmp126 alreadylaunched126
    OBJECT_START TZADVIG
  alreadylaunched126:
    WRITE32 ENDSUB_A3:CALLSUB127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB127:
    WRITE32 ENDSUB_A2:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB128:
  while129:
    JR_LTEQF VS3_M 10.0 and131
    JR_GTF VS2_M 10.0 or130
  and131:
    JR_GTEQF VS3_M 10.0 and132
    JR_GTF VS2_M 10.0 or130
  and132:
    JR_LTEQF VS3_M 10.0 endwhile129
    JR_GTEQF VS2_M 10.0 endwhile129
  or130:
  whilebody129:
    WRITE32 ENDSUB_A3:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB133:
    WRITE32 ENDSUB_A2:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB134:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB135:
    JR_LTEQF VS3_M 10.0 and136
    JR_GTF VS2_M 10.0 whilebody129
  and136:
    JR_GTEQF VS3_M 10.0 and137
    JR_GTF VS2_M 10.0 whilebody129
  and137:
    JR_LTEQF VS3_M 10.0 and138
    JR_LTF VS2_M 10.0 whilebody129
  and138:
  endwhile129:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer140
	DATA8 nos140
	DATA8 busy140
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer140 nos140
	JR_EQ8 0 nos140 motornotbusy140
  motorwaiting140:
	OUTPUT_TEST layer140 nos140 busy140
	JR_EQ8 busy140 0 motornotbusy140
	SLEEP
	JR motorwaiting140
  motornotbusy140:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer141
	DATA8 nos141
	DATA8 busy141
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer141 nos141
	JR_EQ8 0 nos141 motornotbusy141
  motorwaiting141:
	OUTPUT_TEST layer141 nos141 busy141
	JR_EQ8 busy141 0 motornotbusy141
	SLEEP
	JR motorwaiting141
  motornotbusy141:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB144:
    WRITE32 ENDSUB_A3:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB145:
  while146:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile146
  whilebody146:
    WRITE32 ENDSUB_A2:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB148:
    WRITE32 ENDSUB_A3:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB149:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB150 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB150:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds154
	MOVEF_32 500.0 milliseconds154
	DATA32 timer154
	TIMER_WAIT milliseconds154 timer154
	TIMER_READY timer154
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer156
	DATA8 nos156
	DATA8 busy156
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer156 nos156
	JR_EQ8 0 nos156 motornotbusy156
  motorwaiting156:
	OUTPUT_TEST layer156 nos156 busy156
	JR_EQ8 busy156 0 motornotbusy156
	SLEEP
	JR motorwaiting156
  motornotbusy156:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer157
	DATA8 nos157
	DATA8 busy157
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer157 nos157
	JR_EQ8 0 nos157 motornotbusy157
  motorwaiting157:
	OUTPUT_TEST layer157 nos157 busy157
	JR_EQ8 busy157 0 motornotbusy157
	SLEEP
	JR motorwaiting157
  motornotbusy157:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer158
	DATA8 nos158
	DATA8 busy158
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer158 nos158
	JR_EQ8 0 nos158 motornotbusy158
  motorwaiting158:
	OUTPUT_TEST layer158 nos158 busy158
	JR_EQ8 busy158 0 motornotbusy158
	SLEEP
	JR motorwaiting158
  motornotbusy158:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer159
	DATA8 nos159
	DATA8 busy159
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer159 nos159
	JR_EQ8 0 nos159 motornotbusy159
  motorwaiting159:
	OUTPUT_TEST layer159 nos159 busy159
	JR_EQ8 busy159 0 motornotbusy159
	SLEEP
	JR motorwaiting159
  motornotbusy159:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer160
	DATA8 nos160
	DATA8 busy160
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer160 nos160
	JR_EQ8 0 nos160 motornotbusy160
  motorwaiting160:
	OUTPUT_TEST layer160 nos160 busy160
	JR_EQ8 busy160 0 motornotbusy160
	SLEEP
	JR motorwaiting160
  motornotbusy160:
    WRITE32 ENDSUB_A2:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB161:
    WRITE32 ENDSUB_A3:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB162:
  while163:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile163
  whilebody163:
    WRITE32 ENDSUB_A2:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB165:
    WRITE32 ENDSUB_A3:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB166:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB167:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody163
  endwhile163:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer170
	DATA8 nos170
	DATA8 busy170
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer170 nos170
	JR_EQ8 0 nos170 motornotbusy170
  motorwaiting170:
	OUTPUT_TEST layer170 nos170 busy170
	JR_EQ8 busy170 0 motornotbusy170
	SLEEP
	JR motorwaiting170
  motornotbusy170:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer171
	DATA8 nos171
	DATA8 busy171
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer171 nos171
	JR_EQ8 0 nos171 motornotbusy171
  motorwaiting171:
	OUTPUT_TEST layer171 nos171 busy171
	JR_EQ8 busy171 0 motornotbusy171
	SLEEP
	JR motorwaiting171
  motornotbusy171:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_REDL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_REDL:
SUB_BELLAM:
  while173:
    JR_LTEQF VS3_M 15.0 and175
    JR_GTF VS2_M 15.0 or174
  and175:
    JR_GTEQF VS3_M 15.0 endwhile173
    JR_GTEQF VS2_M 15.0 endwhile173
  or174:
  whilebody173:
    WRITE32 ENDSUB_A3:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB176:
    WRITE32 ENDSUB_A2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB177:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB178:
    JR_LTEQF VS3_M 15.0 and179
    JR_GTF VS2_M 15.0 whilebody173
  and179:
    JR_GTEQF VS3_M 15.0 and180
    JR_LTF VS2_M 15.0 whilebody173
  and180:
  endwhile173:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer182
	DATA8 nos182
	DATA8 busy182
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer182 nos182
	JR_EQ8 0 nos182 motornotbusy182
  motorwaiting182:
	OUTPUT_TEST layer182 nos182 busy182
	JR_EQ8 busy182 0 motornotbusy182
	SLEEP
	JR motorwaiting182
  motornotbusy182:
    WRITE32 ENDSUB_A3:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB183:
    WRITE32 ENDSUB_A2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB184:
  while185:
    JR_LTEQF VS3_M 15.0 endwhile185
  whilebody185:
    WRITE32 ENDSUB_A3:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB186:
    WRITE32 ENDSUB_A2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB187:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody185
  endwhile185:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB190:
    WRITE32 ENDSUB_A2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB191:
  while192:
    JR_GTEQF VS3_M 15.0 endwhile192
  whilebody192:
    WRITE32 ENDSUB_A3:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB193:
    WRITE32 ENDSUB_A2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB194:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody192
  endwhile192:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while198:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile198
  whilebody198:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB200:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody198
  endwhile198:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB203:
    WRITE32 ENDSUB_A2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB204:
    MOVEF_F 1.0 VI_M
  for205:
    JR_GTF VI_M 1.0 endfor205
  forbody205:
    WRITE32 ENDSUB_A3:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB206:
    WRITE32 ENDSUB_A2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB207:
  while208:
    JR_LTEQF VS3_M 15.0 and210
    JR_GTF VS2_M 15.0 or209
  and210:
    JR_GTEQF VS3_M 15.0 endwhile208
    JR_GTEQF VS2_M 15.0 endwhile208
  or209:
  whilebody208:
    WRITE32 ENDSUB_A3:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB211:
    WRITE32 ENDSUB_A2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB212:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB213:
    JR_LTEQF VS3_M 15.0 and214
    JR_GTF VS2_M 15.0 whilebody208
  and214:
    JR_GTEQF VS3_M 15.0 and215
    JR_LTF VS2_M 15.0 whilebody208
  and215:
  endwhile208:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer217
	DATA8 nos217
	DATA8 busy217
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer217 nos217
	JR_EQ8 0 nos217 motornotbusy217
  motorwaiting217:
	OUTPUT_TEST layer217 nos217 busy217
	JR_EQ8 busy217 0 motornotbusy217
	SLEEP
	JR motorwaiting217
  motornotbusy217:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody205
  endfor205:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB220:
    WRITE32 ENDSUB_A2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB221:
    MOVEF_F 80.0 VJ_M
  while222:
    JR_LTEQF VS3_M 15.0 endwhile222
  whilebody222:
    WRITE32 ENDSUB_A3:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB223:
    WRITE32 ENDSUB_A2:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB224:
    JR_LTEQF VJ_M 30.0 else225_1
    SUBF VJ_M 0.1 VJ_M
  else225_1:
  endif225:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody222
  endwhile222:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB229:
    WRITE32 ENDSUB_A2:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB230:
    MOVEF_F 80.0 VJ_M
  while231:
    JR_GTEQF VS3_M 25.0 endwhile231
  whilebody231:
    WRITE32 ENDSUB_A3:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB232:
    WRITE32 ENDSUB_A2:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB233:
    JR_LTEQF VJ_M 30.0 else234_1
    SUBF VJ_M 0.1 VJ_M
  else234_1:
  endif234:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 25.0 whilebody231
  endwhile231:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while239:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf243
    DATA8 flag243
    DIVF F.1 2.0 tmpf243
    CP_EQF 0.0 2.0 flag243
    SELECTF flag243 0.0 tmpf243 F.0

    JR_GTEQF F.0 50.0 endwhile239
  whilebody239:
    WRITE32 ENDSUB_A3:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB244:
    WRITE32 ENDSUB_A2:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB245:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_A3:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB246:
    WRITE32 ENDSUB_A2:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB247:
    ADDF VMIN3_M VMAX3_M F.1
    DATAF tmpf249
    DATA8 flag249
    DIVF F.1 2.0 tmpf249
    CP_EQF 0.0 2.0 flag249
    SELECTF flag249 0.0 tmpf249 F.0

    SUBF VS3_M F.0 VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf261
    DATA8 flag261
    DIVF F.1 2.0 tmpf261
    CP_EQF 0.0 2.0 flag261
    SELECTF flag261 0.0 tmpf261 F.0

    JR_LTF F.0 50.0 whilebody239
  endwhile239:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer263
	DATA8 nos263
	DATA8 busy263
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer263 nos263
	JR_EQ8 0 nos263 motornotbusy263
  motorwaiting263:
	OUTPUT_TEST layer263 nos263 busy263
	JR_EQ8 busy263 0 motornotbusy263
	SLEEP
	JR motorwaiting263
  motornotbusy263:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds265
	MOVEF_32 500.0 milliseconds265
	DATA32 timer265
	TIMER_WAIT milliseconds265 timer265
	TIMER_READY timer265
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 50.0 'true'

	DATA8 layer267
	DATA8 nos267
	DATA8 busy267
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer267 nos267
	JR_EQ8 0 nos267 motornotbusy267
  motorwaiting267:
	OUTPUT_TEST layer267 nos267 busy267
	JR_EQ8 busy267 0 motornotbusy267
	SLEEP
	JR motorwaiting267
  motornotbusy267:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 350.0 'true'

	DATA8 layer268
	DATA8 nos268
	DATA8 busy268
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer268 nos268
	JR_EQ8 0 nos268 motornotbusy268
  motorwaiting268:
	OUTPUT_TEST layer268 nos268 busy268
	JR_EQ8 busy268 0 motornotbusy268
	SLEEP
	JR motorwaiting268
  motornotbusy268:
    WRITE32 ENDSUB_A2:CALLSUB269 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB269:
    WRITE32 ENDSUB_A3:CALLSUB270 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB270:
  while271:
    JR_LTEQF VS3_M 10.0 and273
    JR_GTF VS2_M 10.0 or272
  and273:
    JR_GTEQF VS3_M 10.0 and274
    JR_GTF VS2_M 10.0 or272
  and274:
    JR_LTEQF VS3_M 6.0 endwhile271
    JR_GTEQF VS2_M 6.0 endwhile271
  or272:
  whilebody271:
    WRITE32 ENDSUB_A2:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB275:
    WRITE32 ENDSUB_A3:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB276:
    CALL MOTOR.STARTPOWER 'bc' 20.0
    JR_LTEQF VS3_M 10.0 and278
    JR_GTF VS2_M 10.0 whilebody271
  and278:
    JR_GTEQF VS3_M 10.0 and279
    JR_GTF VS2_M 10.0 whilebody271
  and279:
    JR_LTEQF VS3_M 6.0 and280
    JR_LTF VS2_M 6.0 whilebody271
  and280:
  endwhile271:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer282
	DATA8 nos282
	DATA8 busy282
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer282 nos282
	JR_EQ8 0 nos282 motornotbusy282
  motorwaiting282:
	OUTPUT_TEST layer282 nos282 busy282
	JR_EQ8 busy282 0 motornotbusy282
	SLEEP
	JR motorwaiting282
  motornotbusy282:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB284:
    WRITE32 ENDSUB_A2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB285:
  while286:
    JR_LTEQF VS3_M 10.0 endwhile286
  whilebody286:
    WRITE32 ENDSUB_A3:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB287:
    WRITE32 ENDSUB_A2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB288:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody286
  endwhile286:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB291 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB291:
    WRITE32 ENDSUB_A2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB292:
  while293:
    JR_GTEQF VS3_M 15.0 endwhile293
  whilebody293:
    WRITE32 ENDSUB_A3:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB294:
    WRITE32 ENDSUB_A2:CALLSUB295 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB295:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody293
  endwhile293:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds298
	MOVEF_32 100.0 milliseconds298
	DATA32 timer298
	TIMER_WAIT milliseconds298 timer298
	TIMER_READY timer298
RETSUB_BELLAM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM:
SUB_BELLAM2:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer299
	DATA8 nos299
	DATA8 busy299
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer299 nos299
	JR_EQ8 0 nos299 motornotbusy299
  motorwaiting299:
	OUTPUT_TEST layer299 nos299 busy299
	JR_EQ8 busy299 0 motornotbusy299
	SLEEP
	JR motorwaiting299
  motornotbusy299:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer300
	DATA8 nos300
	DATA8 busy300
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer300 nos300
	JR_EQ8 0 nos300 motornotbusy300
  motorwaiting300:
	OUTPUT_TEST layer300 nos300 busy300
	JR_EQ8 busy300 0 motornotbusy300
	SLEEP
	JR motorwaiting300
  motornotbusy300:
    WRITE32 ENDSUB_A2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB301:
    WRITE32 ENDSUB_A3:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB302:
  while303:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 60.0 endwhile303
  whilebody303:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 60.0 whilebody303
  endwhile303:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB308:
    WRITE32 ENDSUB_A3:CALLSUB309 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB309:
  while310:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf314
    DATA8 flag314
    DIVF F.1 2.0 tmpf314
    CP_EQF 0.0 2.0 flag314
    SELECTF flag314 0.0 tmpf314 F.0

    JR_GTEQF F.0 80.0 endwhile310
  whilebody310:
    WRITE32 ENDSUB_A3:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB315:
    WRITE32 ENDSUB_A2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB316:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB317:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf321
    DATA8 flag321
    DIVF F.1 2.0 tmpf321
    CP_EQF 0.0 2.0 flag321
    SELECTF flag321 0.0 tmpf321 F.0

    JR_LTF F.0 80.0 whilebody310
  endwhile310:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB323:
    WRITE32 ENDSUB_A2:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB324:
  while325:
    JR_LTEQF VS3_M 10.0 and327
    JR_GTF VS2_M 10.0 or326
  and327:
    JR_GTEQF VS3_M 10.0 endwhile325
    JR_GTEQF VS2_M 10.0 endwhile325
  or326:
  whilebody325:
    WRITE32 ENDSUB_A3:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB328:
    WRITE32 ENDSUB_A2:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB329:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB330:
    JR_LTEQF VS3_M 10.0 and331
    JR_GTF VS2_M 10.0 whilebody325
  and331:
    JR_GTEQF VS3_M 10.0 and332
    JR_LTF VS2_M 10.0 whilebody325
  and332:
  endwhile325:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer334
	DATA8 nos334
	DATA8 busy334
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer334 nos334
	JR_EQ8 0 nos334 motornotbusy334
  motorwaiting334:
	OUTPUT_TEST layer334 nos334 busy334
	JR_EQ8 busy334 0 motornotbusy334
	SLEEP
	JR motorwaiting334
  motornotbusy334:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB336:
    WRITE32 ENDSUB_A2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB337:
  while338:
    JR_LTEQF VS3_M 10.0 endwhile338
  whilebody338:
    WRITE32 ENDSUB_A3:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB339:
    WRITE32 ENDSUB_A2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB340:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody338
  endwhile338:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB343 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB343:
    WRITE32 ENDSUB_A2:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB344:
  while345:
    JR_GTEQF VS3_M 15.0 endwhile345
  whilebody345:
    WRITE32 ENDSUB_A3:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB346:
    WRITE32 ENDSUB_A2:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB347:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody345
  endwhile345:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB350:
    WRITE32 ENDSUB_A2:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB351:
    MOVEF_F 1.0 VI_M
  for352:
    JR_GTF VI_M 2.0 endfor352
  forbody352:
    WRITE32 ENDSUB_A3:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB353:
    WRITE32 ENDSUB_A2:CALLSUB354 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB354:
  while355:
    JR_LTEQF VS3_M 15.0 and357
    JR_GTF VS2_M 15.0 or356
  and357:
    JR_GTEQF VS3_M 15.0 endwhile355
    JR_GTEQF VS2_M 15.0 endwhile355
  or356:
  whilebody355:
    WRITE32 ENDSUB_A3:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB358:
    WRITE32 ENDSUB_A2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB359:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB360 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB360:
    JR_LTEQF VS3_M 15.0 and361
    JR_GTF VS2_M 15.0 whilebody355
  and361:
    JR_GTEQF VS3_M 15.0 and362
    JR_LTF VS2_M 15.0 whilebody355
  and362:
  endwhile355:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer363
	DATA8 nos363
	DATA8 busy363
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer363 nos363
	JR_EQ8 0 nos363 motornotbusy363
  motorwaiting363:
	OUTPUT_TEST layer363 nos363 busy363
	JR_EQ8 busy363 0 motornotbusy363
	SLEEP
	JR motorwaiting363
  motornotbusy363:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 2.0 forbody352
  endfor352:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 20.0 'true'

	DATA8 layer365
	DATA8 nos365
	DATA8 busy365
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer365 nos365
	JR_EQ8 0 nos365 motornotbusy365
  motorwaiting365:
	OUTPUT_TEST layer365 nos365 busy365
	JR_EQ8 busy365 0 motornotbusy365
	SLEEP
	JR motorwaiting365
  motornotbusy365:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB367:
    WRITE32 ENDSUB_A2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB368:
    MOVEF_F 80.0 VJ_M
  while369:
    JR_LTEQF VS3_M 10.0 endwhile369
  whilebody369:
    WRITE32 ENDSUB_A3:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB370:
    WRITE32 ENDSUB_A2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB371:
    JR_LTEQF VJ_M 30.0 else372_1
    SUBF VJ_M 0.1 VJ_M
  else372_1:
  endif372:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody369
  endwhile369:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB376:
    WRITE32 ENDSUB_A2:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB377:
    MOVEF_F 80.0 VJ_M
  while378:
    JR_GTEQF VS3_M 15.0 endwhile378
  whilebody378:
    WRITE32 ENDSUB_A3:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB379:
    WRITE32 ENDSUB_A2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB380:
    JR_LTEQF VJ_M 30.0 else381_1
    SUBF VJ_M 0.1 VJ_M
  else381_1:
  endif381:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody378
  endwhile378:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while386:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf390
    DATA8 flag390
    DIVF F.1 2.0 tmpf390
    CP_EQF 0.0 2.0 flag390
    SELECTF flag390 0.0 tmpf390 F.0

    JR_GTEQF F.0 50.0 endwhile386
  whilebody386:
    WRITE32 ENDSUB_A3:CALLSUB391 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB391:
    WRITE32 ENDSUB_A2:CALLSUB392 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB392:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB393 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB393:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf397
    DATA8 flag397
    DIVF F.1 2.0 tmpf397
    CP_EQF 0.0 2.0 flag397
    SELECTF flag397 0.0 tmpf397 F.0

    JR_LTF F.0 50.0 whilebody386
  endwhile386:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer399
	DATA8 nos399
	DATA8 busy399
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer399 nos399
	JR_EQ8 0 nos399 motornotbusy399
  motorwaiting399:
	OUTPUT_TEST layer399 nos399 busy399
	JR_EQ8 busy399 0 motornotbusy399
	SLEEP
	JR motorwaiting399
  motornotbusy399:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds401
	MOVEF_32 500.0 milliseconds401
	DATA32 timer401
	TIMER_WAIT milliseconds401 timer401
	TIMER_READY timer401
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while404:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf408
    DATA8 flag408
    DIVF F.1 2.0 tmpf408
    CP_EQF 0.0 2.0 flag408
    SELECTF flag408 0.0 tmpf408 F.0

    JR_LTEQF F.0 -200.0 endwhile404
  whilebody404:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf413
    DATA8 flag413
    DIVF F.1 2.0 tmpf413
    CP_EQF 0.0 2.0 flag413
    SELECTF flag413 0.0 tmpf413 F.0

    JR_GTF F.0 -200.0 whilebody404
  endwhile404:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer415
	DATA8 nos415
	DATA8 busy415
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer415 nos415
	JR_EQ8 0 nos415 motornotbusy415
  motorwaiting415:
	OUTPUT_TEST layer415 nos415 busy415
	JR_EQ8 busy415 0 motornotbusy415
	SLEEP
	JR motorwaiting415
  motornotbusy415:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB417:
    WRITE32 ENDSUB_A3:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB418:
  while419:
    JR_LTEQF VS3_M 10.0 and421
    JR_GTF VS2_M 10.0 or420
  and421:
    JR_LTEQF VS3_M 10.0 and422
    JR_LTF VS2_M 10.0 or420
  and422:
    JR_GTEQF VS3_M 10.0 endwhile419
    JR_LTEQF VS2_M 10.0 endwhile419
  or420:
  whilebody419:
    WRITE32 ENDSUB_A2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB423:
    WRITE32 ENDSUB_A3:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB424:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VS3_M 10.0 and426
    JR_GTF VS2_M 10.0 whilebody419
  and426:
    JR_LTEQF VS3_M 10.0 and427
    JR_LTF VS2_M 10.0 whilebody419
  and427:
    JR_GTEQF VS3_M 10.0 and428
    JR_GTF VS2_M 10.0 whilebody419
  and428:
  endwhile419:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer430
	DATA8 nos430
	DATA8 busy430
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer430 nos430
	JR_EQ8 0 nos430 motornotbusy430
  motorwaiting430:
	OUTPUT_TEST layer430 nos430 busy430
	JR_EQ8 busy430 0 motornotbusy430
	SLEEP
	JR motorwaiting430
  motornotbusy430:
    WRITE32 ENDSUB_A3:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB431:
    WRITE32 ENDSUB_A2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB432:
  while433:
    JR_LTEQF VS3_M 10.0 endwhile433
  whilebody433:
    WRITE32 ENDSUB_A3:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB434:
    WRITE32 ENDSUB_A2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB435:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody433
  endwhile433:
    WRITE32 ENDSUB_A3:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB437:
    WRITE32 ENDSUB_A2:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB438:
  while439:
    JR_GTEQF VS3_M 15.0 endwhile439
  whilebody439:
    WRITE32 ENDSUB_A3:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB440:
    WRITE32 ENDSUB_A2:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB441:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody439
  endwhile439:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM2:
SUB_BELLAM3:
  while444:
    JR_LTEQF VS3_M 15.0 and446
    JR_GTF VS2_M 15.0 or445
  and446:
    JR_GTEQF VS3_M 15.0 endwhile444
    JR_GTEQF VS2_M 15.0 endwhile444
  or445:
  whilebody444:
    WRITE32 ENDSUB_A3:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB447:
    WRITE32 ENDSUB_A2:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB448:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB449:
    JR_LTEQF VS3_M 15.0 and450
    JR_GTF VS2_M 15.0 whilebody444
  and450:
    JR_GTEQF VS3_M 15.0 and451
    JR_LTF VS2_M 15.0 whilebody444
  and451:
  endwhile444:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer453
	DATA8 nos453
	DATA8 busy453
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer453 nos453
	JR_EQ8 0 nos453 motornotbusy453
  motorwaiting453:
	OUTPUT_TEST layer453 nos453 busy453
	JR_EQ8 busy453 0 motornotbusy453
	SLEEP
	JR motorwaiting453
  motornotbusy453:
    WRITE32 ENDSUB_A3:CALLSUB454 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB454:
    WRITE32 ENDSUB_A2:CALLSUB455 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB455:
  while456:
    JR_LTEQF VS3_M 15.0 endwhile456
  whilebody456:
    WRITE32 ENDSUB_A3:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB457:
    WRITE32 ENDSUB_A2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB458:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody456
  endwhile456:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB461:
    WRITE32 ENDSUB_A2:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB462:
  while463:
    JR_GTEQF VS3_M 15.0 endwhile463
  whilebody463:
    WRITE32 ENDSUB_A3:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB464:
    WRITE32 ENDSUB_A2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB465:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody463
  endwhile463:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while469:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile469
  whilebody469:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB471:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody469
  endwhile469:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB474:
    WRITE32 ENDSUB_A2:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB475:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 1.0 VI_M
  for476:
    JR_GTF VI_M 3.0 endfor476
  forbody476:
    WRITE32 ENDSUB_A3:CALLSUB477 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB477:
    WRITE32 ENDSUB_A2:CALLSUB478 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB478:
  while479:
    JR_LTEQF VS3_M 15.0 and481
    JR_GTF VS2_M 15.0 or480
  and481:
    JR_GTEQF VS3_M 15.0 endwhile479
    JR_GTEQF VS2_M 15.0 endwhile479
  or480:
  whilebody479:
    WRITE32 ENDSUB_A3:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB482:
    WRITE32 ENDSUB_A2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB483:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB484 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB484:
    JR_LTEQF VS3_M 15.0 and485
    JR_GTF VS2_M 15.0 whilebody479
  and485:
    JR_GTEQF VS3_M 15.0 and486
    JR_LTF VS2_M 15.0 whilebody479
  and486:
  endwhile479:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer487
	DATA8 nos487
	DATA8 busy487
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer487 nos487
	JR_EQ8 0 nos487 motornotbusy487
  motorwaiting487:
	OUTPUT_TEST layer487 nos487 busy487
	JR_EQ8 busy487 0 motornotbusy487
	SLEEP
	JR motorwaiting487
  motornotbusy487:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody476
  endfor476:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.2 VK1_M
    MOVEF_F 8.0 VK2_M
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer490
	DATA8 nos490
	DATA8 busy490
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer490 nos490
	JR_EQ8 0 nos490 motornotbusy490
  motorwaiting490:
	OUTPUT_TEST layer490 nos490 busy490
	JR_EQ8 busy490 0 motornotbusy490
	SLEEP
	JR motorwaiting490
  motornotbusy490:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 100.0 'true'

	DATA8 layer491
	DATA8 nos491
	DATA8 busy491
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer491 nos491
	JR_EQ8 0 nos491 motornotbusy491
  motorwaiting491:
	OUTPUT_TEST layer491 nos491 busy491
	JR_EQ8 busy491 0 motornotbusy491
	SLEEP
	JR motorwaiting491
  motornotbusy491:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds493
	MOVEF_32 500.0 milliseconds493
	DATA32 timer493
	TIMER_WAIT milliseconds493 timer493
	TIMER_READY timer493
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 100.0 'true'

	DATA8 layer495
	DATA8 nos495
	DATA8 busy495
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer495 nos495
	JR_EQ8 0 nos495 motornotbusy495
  motorwaiting495:
	OUTPUT_TEST layer495 nos495 busy495
	JR_EQ8 busy495 0 motornotbusy495
	SLEEP
	JR motorwaiting495
  motornotbusy495:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 400.0 'true'

	DATA8 layer496
	DATA8 nos496
	DATA8 busy496
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer496 nos496
	JR_EQ8 0 nos496 motornotbusy496
  motorwaiting496:
	OUTPUT_TEST layer496 nos496 busy496
	JR_EQ8 busy496 0 motornotbusy496
	SLEEP
	JR motorwaiting496
  motornotbusy496:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 200.0 'true'

	DATA8 layer497
	DATA8 nos497
	DATA8 busy497
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer497 nos497
	JR_EQ8 0 nos497 motornotbusy497
  motorwaiting497:
	OUTPUT_TEST layer497 nos497 busy497
	JR_EQ8 busy497 0 motornotbusy497
	SLEEP
	JR motorwaiting497
  motornotbusy497:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 300.0 'true'

	DATA8 layer498
	DATA8 nos498
	DATA8 busy498
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer498 nos498
	JR_EQ8 0 nos498 motornotbusy498
  motorwaiting498:
	OUTPUT_TEST layer498 nos498 busy498
	JR_EQ8 busy498 0 motornotbusy498
	SLEEP
	JR motorwaiting498
  motornotbusy498:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 20.0 300.0 'true'

	DATA8 layer499
	DATA8 nos499
	DATA8 busy499
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer499 nos499
	JR_EQ8 0 nos499 motornotbusy499
  motorwaiting499:
	OUTPUT_TEST layer499 nos499 busy499
	JR_EQ8 busy499 0 motornotbusy499
	SLEEP
	JR motorwaiting499
  motornotbusy499:
    WRITE32 ENDSUB_A2:CALLSUB500 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB500:
    WRITE32 ENDSUB_A3:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB501:
  while502:
    JR_LTEQF VS3_M 10.0 and504
    JR_GTF VS2_M 10.0 or503
  and504:
    JR_GTEQF VS3_M 10.0 and505
    JR_GTF VS2_M 10.0 or503
  and505:
    JR_LTEQF VS3_M 10.0 endwhile502
    JR_GTEQF VS2_M 10.0 endwhile502
  or503:
  whilebody502:
    WRITE32 ENDSUB_A2:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB506:
    WRITE32 ENDSUB_A3:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB507:
    CALL MOTOR.STARTPOWER 'bc' 80.0
    JR_LTEQF VS3_M 10.0 and509
    JR_GTF VS2_M 10.0 whilebody502
  and509:
    JR_GTEQF VS3_M 10.0 and510
    JR_GTF VS2_M 10.0 whilebody502
  and510:
    JR_LTEQF VS3_M 10.0 and511
    JR_LTF VS2_M 10.0 whilebody502
  and511:
  endwhile502:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 40.0 'true'

	DATA8 layer513
	DATA8 nos513
	DATA8 busy513
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer513 nos513
	JR_EQ8 0 nos513 motornotbusy513
  motorwaiting513:
	OUTPUT_TEST layer513 nos513 busy513
	JR_EQ8 busy513 0 motornotbusy513
	SLEEP
	JR motorwaiting513
  motornotbusy513:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB515:
    WRITE32 ENDSUB_A2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB516:
  while517:
    JR_LTEQF VS3_M 10.0 endwhile517
  whilebody517:
    WRITE32 ENDSUB_A3:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB518:
    WRITE32 ENDSUB_A2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB519:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_GTF VS3_M 10.0 whilebody517
  endwhile517:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB522:
    WRITE32 ENDSUB_A2:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB523:
  while524:
    JR_GTEQF VS3_M 15.0 endwhile524
  whilebody524:
    WRITE32 ENDSUB_A3:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB525:
    WRITE32 ENDSUB_A2:CALLSUB526 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB526:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_LTF VS3_M 15.0 whilebody524
  endwhile524:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 1.0 VI_M
  for529:
    JR_GTF VI_M 1.0 endfor529
  forbody529:
    WRITE32 ENDSUB_A3:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB530:
    WRITE32 ENDSUB_A2:CALLSUB531 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB531:
  while532:
    JR_LTEQF VS3_M 10.0 and534
    JR_GTF VS2_M 10.0 or533
  and534:
    JR_GTEQF VS3_M 10.0 endwhile532
    JR_GTEQF VS2_M 10.0 endwhile532
  or533:
  whilebody532:
    WRITE32 ENDSUB_A3:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB535:
    WRITE32 ENDSUB_A2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB536:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB537:
    JR_LTEQF VS3_M 10.0 and538
    JR_GTF VS2_M 10.0 whilebody532
  and538:
    JR_GTEQF VS3_M 10.0 and539
    JR_LTF VS2_M 10.0 whilebody532
  and539:
  endwhile532:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer541
	DATA8 nos541
	DATA8 busy541
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer541 nos541
	JR_EQ8 0 nos541 motornotbusy541
  motorwaiting541:
	OUTPUT_TEST layer541 nos541 busy541
	JR_EQ8 busy541 0 motornotbusy541
	SLEEP
	JR motorwaiting541
  motornotbusy541:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody529
  endfor529:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM3:
SUB_RED_1:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer544
	DATA8 nos544
	DATA8 busy544
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer544 nos544
	JR_EQ8 0 nos544 motornotbusy544
  motorwaiting544:
	OUTPUT_TEST layer544 nos544 busy544
	JR_EQ8 busy544 0 motornotbusy544
	SLEEP
	JR motorwaiting544
  motornotbusy544:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB546:
    WRITE32 ENDSUB_A2:CALLSUB547 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB547:
  while548:
    JR_LTEQF VS2_M 15.0 endwhile548
  whilebody548:
    WRITE32 ENDSUB_A3:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB549:
    WRITE32 ENDSUB_A2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB550:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody548
  endwhile548:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB553:
    WRITE32 ENDSUB_A2:CALLSUB554 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB554:
  while555:
    JR_GTEQF VS2_M 15.0 endwhile555
  whilebody555:
    WRITE32 ENDSUB_A3:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB556:
    WRITE32 ENDSUB_A2:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB557:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody555
  endwhile555:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while562:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf566
    DATA8 flag566
    DIVF F.1 2.0 tmpf566
    CP_EQF 0.0 2.0 flag566
    SELECTF flag566 0.0 tmpf566 F.0

    JR_GTEQF F.0 270.0 endwhile562
  whilebody562:
    MOVEF_F 50.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB567 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB567:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf571
    DATA8 flag571
    DIVF F.1 2.0 tmpf571
    CP_EQF 0.0 2.0 flag571
    SELECTF flag571 0.0 tmpf571 F.0

    JR_LTF F.0 270.0 whilebody562
  endwhile562:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds573
	MOVEF_32 100.0 milliseconds573
	DATA32 timer573
	TIMER_WAIT milliseconds573 timer573
	TIMER_READY timer573
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds575
	MOVEF_32 500.0 milliseconds575
	DATA32 timer575
	TIMER_WAIT milliseconds575 timer575
	TIMER_READY timer575
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB577:
    MOVEF_F 1470.0 VS_M
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf578
    DATA8 flag578
    DIVF 360.0 VL_M tmpf578
    CP_EQF 0.0 VL_M flag578
    SELECTF flag578 0.0 tmpf578 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while581:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 VX_M endwhile581
  whilebody581:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2DUS:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2DUS
CALLSUB583:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 VX_M whilebody581
  endwhile581:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_REDL:CALLSUB586 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_REDL
CALLSUB586:
    WRITE32 ENDSUB_BELLAM:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BELLAM
CALLSUB587:
    MOVEF_F 1400.0 VS_M
    WRITE32 ENDSUB_US:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_US
CALLSUB588:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 70.0 'true'

	DATA8 layer590
	DATA8 nos590
	DATA8 busy590
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer590 nos590
	JR_EQ8 0 nos590 motornotbusy590
  motorwaiting590:
	OUTPUT_TEST layer590 nos590 busy590
	JR_EQ8 busy590 0 motornotbusy590
	SLEEP
	JR motorwaiting590
  motornotbusy590:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB592 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB592:
    WRITE32 ENDSUB_A2:CALLSUB593 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB593:
  while594:
    JR_LTEQF VS2_M 15.0 endwhile594
  whilebody594:
    WRITE32 ENDSUB_A3:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB595:
    WRITE32 ENDSUB_A2:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB596:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody594
  endwhile594:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB599:
    WRITE32 ENDSUB_A2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB600:
  while601:
    JR_GTEQF VS2_M 15.0 endwhile601
  whilebody601:
    WRITE32 ENDSUB_A3:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB602:
    WRITE32 ENDSUB_A2:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB603:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody601
  endwhile601:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while607:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf611
    DATA8 flag611
    DIVF F.1 2.0 tmpf611
    CP_EQF 0.0 2.0 flag611
    SELECTF flag611 0.0 tmpf611 F.0

    JR_GTEQF F.0 200.0 endwhile607
  whilebody607:
    WRITE32 ENDSUB_A3:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB612:
    WRITE32 ENDSUB_A2:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB613:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB614:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf618
    DATA8 flag618
    DIVF F.1 2.0 tmpf618
    CP_EQF 0.0 2.0 flag618
    SELECTF flag618 0.0 tmpf618 F.0

    JR_LTF F.0 200.0 whilebody607
  endwhile607:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds621
	MOVEF_32 500.0 milliseconds621
	DATA32 timer621
	TIMER_WAIT milliseconds621 timer621
	TIMER_READY timer621
    CALL MOTOR.STOP 'd' 'true'
    DATA32 tmp623
    CALL GETANDINC32 RUNCOUNTER_VIDVIG 1  RUNCOUNTER_VIDVIG tmp623
    JR_NEQ32 0 tmp623 alreadylaunched623
    OBJECT_START TVIDVIG
  alreadylaunched623:
    WRITE32 ENDSUB_NPL:CALLSUB624 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB624:
    WRITE32 ENDSUB_A3:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB625:
    WRITE32 ENDSUB_A2:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB626:
  while627:
    JR_LTEQF VS3_M 15.0 and629
    JR_GTF VS2_M 15.0 or628
  and629:
    JR_GTEQF VS3_M 15.0 endwhile627
    JR_GTEQF VS2_M 15.0 endwhile627
  or628:
  whilebody627:
    WRITE32 ENDSUB_A3:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB630:
    WRITE32 ENDSUB_A2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB631:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB632:
    JR_LTEQF VS3_M 15.0 and633
    JR_GTF VS2_M 15.0 whilebody627
  and633:
    JR_GTEQF VS3_M 15.0 and634
    JR_LTF VS2_M 15.0 whilebody627
  and634:
  endwhile627:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer636
	DATA8 nos636
	DATA8 busy636
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer636 nos636
	JR_EQ8 0 nos636 motornotbusy636
  motorwaiting636:
	OUTPUT_TEST layer636 nos636 busy636
	JR_EQ8 busy636 0 motornotbusy636
	SLEEP
	JR motorwaiting636
  motornotbusy636:
    WRITE32 ENDSUB_A3:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB637:
    WRITE32 ENDSUB_A2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB638:
  while639:
    JR_LTEQF VS3_M 15.0 and641
    JR_GTF VS2_M 15.0 or640
  and641:
    JR_GTEQF VS3_M 15.0 endwhile639
    JR_GTEQF VS2_M 15.0 endwhile639
  or640:
  whilebody639:
    WRITE32 ENDSUB_A3:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB642:
    WRITE32 ENDSUB_A2:CALLSUB643 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB643:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB644 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB644:
    JR_LTEQF VS3_M 15.0 and645
    JR_GTF VS2_M 15.0 whilebody639
  and645:
    JR_GTEQF VS3_M 15.0 and646
    JR_LTF VS2_M 15.0 whilebody639
  and646:
  endwhile639:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RED_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RED_1:
SUB_SB1:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 -40.0 200.0 'true'

	DATA8 layer648
	DATA8 nos648
	DATA8 busy648
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer648 nos648
	JR_EQ8 0 nos648 motornotbusy648
  motorwaiting648:
	OUTPUT_TEST layer648 nos648 busy648
	JR_EQ8 busy648 0 motornotbusy648
	SLEEP
	JR motorwaiting648
  motornotbusy648:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 40.0 300.0 'true'

	DATA8 layer649
	DATA8 nos649
	DATA8 busy649
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer649 nos649
	JR_EQ8 0 nos649 motornotbusy649
  motorwaiting649:
	OUTPUT_TEST layer649 nos649 busy649
	JR_EQ8 busy649 0 motornotbusy649
	SLEEP
	JR motorwaiting649
  motornotbusy649:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB651:
    WRITE32 ENDSUB_A2:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB652:
  while653:
    JR_LTEQF VS2_M 10.0 endwhile653
  whilebody653:
    WRITE32 ENDSUB_A3:CALLSUB654 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB654:
    WRITE32 ENDSUB_A2:CALLSUB655 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB655:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 10.0 whilebody653
  endwhile653:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB658:
    WRITE32 ENDSUB_A2:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB659:
  while660:
    JR_GTEQF VS2_M 15.0 endwhile660
  whilebody660:
    WRITE32 ENDSUB_A3:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB661:
    WRITE32 ENDSUB_A2:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB662:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody660
  endwhile660:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds665
	MOVEF_32 100.0 milliseconds665
	DATA32 timer665
	TIMER_WAIT milliseconds665 timer665
	TIMER_READY timer665
    CALL MOTOR.RESETCOUNT 'bc'
  while667:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf671
    DATA8 flag671
    DIVF F.1 2.0 tmpf671
    CP_EQF 0.0 2.0 flag671
    SELECTF flag671 0.0 tmpf671 F.0

    JR_GTEQF F.0 200.0 endwhile667
  whilebody667:
    WRITE32 ENDSUB_A3:CALLSUB672 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB672:
    WRITE32 ENDSUB_A2:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB673:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB674:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf678
    DATA8 flag678
    DIVF F.1 2.0 tmpf678
    CP_EQF 0.0 2.0 flag678
    SELECTF flag678 0.0 tmpf678 F.0

    JR_LTF F.0 200.0 whilebody667
  endwhile667:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB680 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB680:
    WRITE32 ENDSUB_A2:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB681:
  while682:
    JR_LTEQF VS3_M 10.0 and684
    JR_GTF VS2_M 10.0 or683
  and684:
    JR_GTEQF VS3_M 10.0 endwhile682
    JR_GTEQF VS2_M 10.0 endwhile682
  or683:
  whilebody682:
    WRITE32 ENDSUB_A3:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB685:
    WRITE32 ENDSUB_A2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB686:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB687 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB687:
    JR_LTEQF VS3_M 10.0 and688
    JR_GTF VS2_M 10.0 whilebody682
  and688:
    JR_GTEQF VS3_M 10.0 and689
    JR_LTF VS2_M 10.0 whilebody682
  and689:
  endwhile682:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_SB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SB1:
SUB_HSV:
    DATA8 layer691
	DATA8 no691
	DATA8 mode8691
	
	MOVEF_8 1.0 no691
	SUB8 no691 1 no691
	DIV8 no691 4 layer691
	MATH MOD8 no691 4 no691

	MOVEF_8 2.0 mode8691
	
	INPUT_DEVICE READY_RAW layer691 no691 0 mode8691 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf698
    DATA8 flag698
    DIVF VSRED_M 255.0 tmpf698
    CP_EQF 0.0 255.0 flag698
    SELECTF flag698 0.0 tmpf698 VSRED_M

    DATAF tmpf699
    DATA8 flag699
    DIVF VSGREEN_M 255.0 tmpf699
    CP_EQF 0.0 255.0 flag699
    SELECTF flag699 0.0 tmpf699 VSGREEN_M

    DATAF tmpf700
    DATA8 flag700
    DIVF VSBLUE_M 255.0 tmpf700
    CP_EQF 0.0 255.0 flag700
    SELECTF flag700 0.0 tmpf700 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else701_1
    JR_LTEQF VSRED_M VSBLUE_M else701_1
    MOVEF_F VSRED_M VMAX_M
    JR endif701
  else701_1:
    JR_LTEQF VSGREEN_M VSRED_M else701_2
    JR_LTEQF VSGREEN_M VSBLUE_M else701_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif701
  else701_2:
    JR_LTEQF VSBLUE_M VSRED_M else701_3
    JR_LTEQF VSBLUE_M VSGREEN_M else701_3
    MOVEF_F VSBLUE_M VMAX_M
  else701_3:
  endif701:
    JR_GTEQF VSRED_M VSGREEN_M else702_1
    JR_GTEQF VSRED_M VSBLUE_M else702_1
    MOVEF_F VSRED_M VMIN_M
    JR endif702
  else702_1:
    JR_GTEQF VSGREEN_M VSRED_M else702_2
    JR_GTEQF VSGREEN_M VSBLUE_M else702_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif702
  else702_2:
    JR_GTEQF VSBLUE_M VSRED_M else702_3
    JR_GTEQF VSBLUE_M VSGREEN_M else702_3
    MOVEF_F VSBLUE_M VMIN_M
  else702_3:
  endif702:
    JR_NEQF VMAX_M VMIN_M else703_1
    MOVEF_F 0.0 VH_M
    JR endif703
  else703_1:
    JR_NEQF VSRED_M VMAX_M else704_1
    JR_LTF VSGREEN_M VSBLUE_M else705_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf709
    DATA8 flag709
    DIVF F.0 F.1 tmpf709
    CP_EQF 0.0 F.1 flag709
    SELECTF flag709 0.0 tmpf709 VH_M

    JR endif705
  else705_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf713
    DATA8 flag713
    DIVF F.1 F.2 tmpf713
    CP_EQF 0.0 F.2 flag713
    SELECTF flag713 0.0 tmpf713 F.0

    ADDF F.0 360.0 VH_M
  else705_2:
  endif705:
    JR endif704
  else704_1:
    JR_NEQF VMAX_M VSGREEN_M else715_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf719
    DATA8 flag719
    DIVF F.1 F.2 tmpf719
    CP_EQF 0.0 F.2 flag719
    SELECTF flag719 0.0 tmpf719 F.0

    ADDF F.0 120.0 VH_M
    JR endif715
  else715_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf724
    DATA8 flag724
    DIVF F.1 F.2 tmpf724
    CP_EQF 0.0 F.2 flag724
    SELECTF flag724 0.0 tmpf724 F.0

    ADDF F.0 240.0 VH_M
  else715_2:
  endif715:
  else704_2:
  endif704:
  else703_2:
  endif703:
    JR_NEQF VMAX_M 0.0 else726_1
    MOVEF_F 0.0 VS_M
    JR endif726
  else726_1:
    DATAF tmpf727
    DATA8 flag727
    DIVF VMIN_M VMAX_M tmpf727
    CP_EQF 0.0 VMAX_M flag727
    SELECTF flag727 0.0 tmpf727 F.0

    SUBF 1.0 F.0 VS_M
  else726_2:
  endif726:
    MOVEF_F VMAX_M VV_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_HSV_100:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    DATA8 layer736
	DATA8 no736
	DATA8 mode8736
	
	MOVEF_8 1.0 no736
	SUB8 no736 1 no736
	DIV8 no736 4 layer736
	MATH MOD8 no736 4 no736

	MOVEF_8 2.0 mode8736
	
	INPUT_DEVICE READY_RAW layer736 no736 0 mode8736 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 1.0 VP_M
  for737:
    JR_GTF VP_M 100.0 endfor737
  forbody737:
    WRITE32 ENDSUB_HSV:CALLSUB738 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB738:
    ADDF VX_M VH_M VX_M
    ADDF VZ_M VS_M VZ_M
    ADDF VD_M VV_M VD_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody737
  endfor737:
    DATAF tmpf743
    DATA8 flag743
    DIVF VX_M 100.0 tmpf743
    CP_EQF 0.0 100.0 flag743
    SELECTF flag743 0.0 tmpf743 VH_M

    DATAF tmpf744
    DATA8 flag744
    DIVF VZ_M 100.0 tmpf744
    CP_EQF 0.0 100.0 flag744
    SELECTF flag744 0.0 tmpf744 VS_M

    DATAF tmpf745
    DATA8 flag745
    DIVF VD_M 100.0 tmpf745
    CP_EQF 0.0 100.0 flag745
    SELECTF flag745 0.0 tmpf745 VV_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV_100:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_100:
SUB_HSV_B:
    DATA8 layer753
	DATA8 no753
	DATA8 mode8753
	
	MOVEF_8 1.0 no753
	SUB8 no753 1 no753
	DIV8 no753 4 layer753
	MATH MOD8 no753 4 no753

	MOVEF_8 2.0 mode8753
	
	INPUT_DEVICE READY_RAW layer753 no753 0 mode8753 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf760
    DATA8 flag760
    DIVF VSRED_M 255.0 tmpf760
    CP_EQF 0.0 255.0 flag760
    SELECTF flag760 0.0 tmpf760 VSRED_M

    DATAF tmpf761
    DATA8 flag761
    DIVF VSGREEN_M 255.0 tmpf761
    CP_EQF 0.0 255.0 flag761
    SELECTF flag761 0.0 tmpf761 VSGREEN_M

    DATAF tmpf762
    DATA8 flag762
    DIVF VSBLUE_M 255.0 tmpf762
    CP_EQF 0.0 255.0 flag762
    SELECTF flag762 0.0 tmpf762 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else763_1
    JR_LTEQF VSRED_M VSBLUE_M else763_1
    MOVEF_F VSRED_M VMAX_M
    JR endif763
  else763_1:
    JR_LTEQF VSGREEN_M VSRED_M else763_2
    JR_LTEQF VSGREEN_M VSBLUE_M else763_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif763
  else763_2:
    JR_LTEQF VSBLUE_M VSRED_M else763_3
    JR_LTEQF VSBLUE_M VSGREEN_M else763_3
    MOVEF_F VSBLUE_M VMAX_M
  else763_3:
  endif763:
    JR_GTEQF VSRED_M VSGREEN_M else764_1
    JR_GTEQF VSRED_M VSBLUE_M else764_1
    MOVEF_F VSRED_M VMIN_M
    JR endif764
  else764_1:
    JR_GTEQF VSGREEN_M VSRED_M else764_2
    JR_GTEQF VSGREEN_M VSBLUE_M else764_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif764
  else764_2:
    JR_GTEQF VSBLUE_M VSRED_M else764_3
    JR_GTEQF VSBLUE_M VSGREEN_M else764_3
    MOVEF_F VSBLUE_M VMIN_M
  else764_3:
  endif764:
    JR_NEQF VMAX_M VMIN_M else765_1
    MOVEF_F 0.0 VH_M
    JR endif765
  else765_1:
    JR_NEQF VSRED_M VMAX_M else766_1
    JR_LTF VSGREEN_M VSBLUE_M else767_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf771
    DATA8 flag771
    DIVF F.0 F.1 tmpf771
    CP_EQF 0.0 F.1 flag771
    SELECTF flag771 0.0 tmpf771 VH_M

    JR endif767
  else767_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf775
    DATA8 flag775
    DIVF F.1 F.2 tmpf775
    CP_EQF 0.0 F.2 flag775
    SELECTF flag775 0.0 tmpf775 F.0

    ADDF F.0 360.0 VH_M
  else767_2:
  endif767:
    JR endif766
  else766_1:
    JR_NEQF VMAX_M VSGREEN_M else777_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf781
    DATA8 flag781
    DIVF F.1 F.2 tmpf781
    CP_EQF 0.0 F.2 flag781
    SELECTF flag781 0.0 tmpf781 F.0

    ADDF F.0 120.0 VH_M
    JR endif777
  else777_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf786
    DATA8 flag786
    DIVF F.1 F.2 tmpf786
    CP_EQF 0.0 F.2 flag786
    SELECTF flag786 0.0 tmpf786 F.0

    ADDF F.0 240.0 VH_M
  else777_2:
  endif777:
  else766_2:
  endif766:
  else765_2:
  endif765:
    JR_NEQF VMAX_M 0.0 else788_1
    MOVEF_F 0.0 VS_M
    JR endif788
  else788_1:
    DATAF tmpf789
    DATA8 flag789
    DIVF VMIN_M VMAX_M tmpf789
    CP_EQF 0.0 VMAX_M flag789
    SELECTF flag789 0.0 tmpf789 F.0

    SUBF 1.0 F.0 VS_M
  else788_2:
  endif788:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 300.0 and793
    JR_LTF VH_M 360.0 or792
  and793:
    JR_LTF VH_M 0.0 else791_1
    JR_GTF VH_M 20.0 else791_1
    JR_LTEQF VS_M 0.3 else791_1
    JR_GTF VS_M 1.0 else791_1
    JR_LTEQF VV_M 0.025 else791_1
    JR_GTEQF VV_M 0.1 else791_1
  or792:
    MOVEF_F 5.0 VCOLOR_M
    JR endif791
  else791_1:
    JR_LTF VH_M 20.0 else791_2
    JR_GTEQF VH_M 60.0 else791_2
    JR_LTF VS_M 0.4 else791_2
    JR_LTEQF VV_M 0.03 else791_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif791
  else791_2:
    MOVEF_F 6.0 VCOLOR_M
  else791_3:
  endif791:
RETSUB_HSV_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_B:
SUB_HSV_D:
    DATA8 layer794
	DATA8 no794
	DATA8 mode8794
	
	MOVEF_8 1.0 no794
	SUB8 no794 1 no794
	DIV8 no794 4 layer794
	MATH MOD8 no794 4 no794

	MOVEF_8 2.0 mode8794
	
	INPUT_DEVICE READY_RAW layer794 no794 0 mode8794 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf801
    DATA8 flag801
    DIVF VSRED_M 255.0 tmpf801
    CP_EQF 0.0 255.0 flag801
    SELECTF flag801 0.0 tmpf801 VSRED_M

    DATAF tmpf802
    DATA8 flag802
    DIVF VSGREEN_M 255.0 tmpf802
    CP_EQF 0.0 255.0 flag802
    SELECTF flag802 0.0 tmpf802 VSGREEN_M

    DATAF tmpf803
    DATA8 flag803
    DIVF VSBLUE_M 255.0 tmpf803
    CP_EQF 0.0 255.0 flag803
    SELECTF flag803 0.0 tmpf803 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else804_1
    JR_LTEQF VSRED_M VSBLUE_M else804_1
    MOVEF_F VSRED_M VMAX_M
    JR endif804
  else804_1:
    JR_LTEQF VSGREEN_M VSRED_M else804_2
    JR_LTEQF VSGREEN_M VSBLUE_M else804_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif804
  else804_2:
    JR_LTEQF VSBLUE_M VSRED_M else804_3
    JR_LTEQF VSBLUE_M VSGREEN_M else804_3
    MOVEF_F VSBLUE_M VMAX_M
  else804_3:
  endif804:
    JR_GTEQF VSRED_M VSGREEN_M else805_1
    JR_GTEQF VSRED_M VSBLUE_M else805_1
    MOVEF_F VSRED_M VMIN_M
    JR endif805
  else805_1:
    JR_GTEQF VSGREEN_M VSRED_M else805_2
    JR_GTEQF VSGREEN_M VSBLUE_M else805_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif805
  else805_2:
    JR_GTEQF VSBLUE_M VSRED_M else805_3
    JR_GTEQF VSBLUE_M VSGREEN_M else805_3
    MOVEF_F VSBLUE_M VMIN_M
  else805_3:
  endif805:
    JR_NEQF VMAX_M VMIN_M else806_1
    MOVEF_F 0.0 VH_M
    JR endif806
  else806_1:
    JR_NEQF VSRED_M VMAX_M else807_1
    JR_LTF VSGREEN_M VSBLUE_M else808_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf812
    DATA8 flag812
    DIVF F.0 F.1 tmpf812
    CP_EQF 0.0 F.1 flag812
    SELECTF flag812 0.0 tmpf812 VH_M

    JR endif808
  else808_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf816
    DATA8 flag816
    DIVF F.1 F.2 tmpf816
    CP_EQF 0.0 F.2 flag816
    SELECTF flag816 0.0 tmpf816 F.0

    ADDF F.0 360.0 VH_M
  else808_2:
  endif808:
    JR endif807
  else807_1:
    JR_NEQF VMAX_M VSGREEN_M else818_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf822
    DATA8 flag822
    DIVF F.1 F.2 tmpf822
    CP_EQF 0.0 F.2 flag822
    SELECTF flag822 0.0 tmpf822 F.0

    ADDF F.0 120.0 VH_M
    JR endif818
  else818_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf827
    DATA8 flag827
    DIVF F.1 F.2 tmpf827
    CP_EQF 0.0 F.2 flag827
    SELECTF flag827 0.0 tmpf827 F.0

    ADDF F.0 240.0 VH_M
  else818_2:
  endif818:
  else807_2:
  endif807:
  else806_2:
  endif806:
    JR_NEQF VMAX_M 0.0 else829_1
    MOVEF_F 0.0 VS_M
    JR endif829
  else829_1:
    DATAF tmpf830
    DATA8 flag830
    DIVF VMIN_M VMAX_M tmpf830
    CP_EQF 0.0 VMAX_M flag830
    SELECTF flag830 0.0 tmpf830 F.0

    SUBF 1.0 F.0 VS_M
  else829_2:
  endif829:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 200.0 and834
    JR_LTF VH_M 360.0 or833
  and834:
    JR_LTF VH_M 0.0 else832_1
    JR_GTF VH_M 30.0 else832_1
    JR_LTEQF VS_M 0.3 else832_1
    JR_GTF VS_M 1.0 else832_1
    JR_LTF VV_M 0.0 else832_1
    JR_GTEQF VV_M 0.02 else832_1
  or833:
    MOVEF_F 5.0 VCOLOR_M
    JR endif832
  else832_1:
    JR_LTF VH_M 0.0 else832_2
    JR_GTEQF VH_M 60.0 else832_2
    JR_LTF VS_M 0.4 else832_2
    JR_GTF VS_M 1.0 else832_2
    JR_LTEQF VV_M 0.003 else832_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif832
  else832_2:
    MOVEF_F 6.0 VCOLOR_M
  else832_3:
  endif832:
RETSUB_HSV_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_D:
SUB_HSV_RGB_B:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer835
	DATA8 no835
	DATA8 mode8835
	
	MOVEF_8 1.0 no835
	SUB8 no835 1 no835
	DIV8 no835 4 layer835
	MATH MOD8 no835 4 no835

	MOVEF_8 2.0 mode8835
	
	INPUT_DEVICE READY_RAW layer835 no835 0 mode8835 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV:CALLSUB837 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB837:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    DATA32 milliseconds846
	MOVEF_32 100.0 milliseconds846
	DATA32 timer846
	TIMER_WAIT milliseconds846 timer846
	TIMER_READY timer846
    MOVEF_F 1.0 VP_M
  for847:
    JR_GTF VP_M 100.0 endfor847
  forbody847:
    WRITE32 ENDSUB_HSV_B:CALLSUB848 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_B
CALLSUB848:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody847
  endfor847:
    DATAF tmpf851
    DATA8 flag851
    DIVF VX_M 100.0 tmpf851
    CP_EQF 0.0 100.0 flag851
    SELECTF flag851 0.0 tmpf851 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds855
	MOVEF_32 100.0 milliseconds855
	DATA32 timer855
	TIMER_WAIT milliseconds855 timer855
	TIMER_READY timer855
    JR_LTEQF VH_M 100.0 and858
    JR_LTF VH_M 360.0 or857
  and858:
    JR_LTF VH_M 0.0 else856_1
    JR_GTF VH_M 20.0 else856_1
    JR_LTEQF VS_M 0.3 else856_1
    JR_GTF VS_M 1.0 else856_1
    JR_LTEQF VV_M 0.025 else856_1
    JR_GTEQF VV_M 0.1 else856_1
  or857:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif856
  else856_1:
    JR_LTF VH_M 20.0 else856_2
    JR_GTEQF VH_M 60.0 else856_2
    JR_LTF VS_M 0.4 else856_2
    JR_LTEQF VV_M 0.03 else856_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif856
  else856_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else856_3:
  endif856:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds868
	MOVEF_32 1000.0 milliseconds868
	DATA32 timer868
	TIMER_WAIT milliseconds868 timer868
	TIMER_READY timer868
RETSUB_HSV_RGB_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_B:
SUB_HSV_RGB_D:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer869
	DATA8 no869
	DATA8 mode8869
	
	MOVEF_8 1.0 no869
	SUB8 no869 1 no869
	DIV8 no869 4 layer869
	MATH MOD8 no869 4 no869

	MOVEF_8 2.0 mode8869
	
	INPUT_DEVICE READY_RAW layer869 no869 0 mode8869 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV_D:CALLSUB871 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB871:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    MOVEF_F 1.0 VP_M
  for880:
    JR_GTF VP_M 100.0 endfor880
  forbody880:
    WRITE32 ENDSUB_HSV_D:CALLSUB881 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB881:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody880
  endfor880:
    DATAF tmpf884
    DATA8 flag884
    DIVF VX_M 100.0 tmpf884
    CP_EQF 0.0 100.0 flag884
    SELECTF flag884 0.0 tmpf884 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    JR_LTEQF VH_M 200.0 and890
    JR_LTF VH_M 360.0 or889
  and890:
    JR_LTF VH_M 0.0 else888_1
    JR_GTF VH_M 40.0 else888_1
    JR_LTEQF VS_M 0.3 else888_1
    JR_GTF VS_M 1.0 else888_1
    JR_LTF VV_M 0.0 else888_1
    JR_GTEQF VV_M 0.02 else888_1
  or889:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif888
  else888_1:
    JR_LTF VH_M 0.0 else888_2
    JR_GTEQF VH_M 100.0 else888_2
    JR_LTF VS_M 0.4 else888_2
    JR_GTF VS_M 1.0 else888_2
    JR_LTEQF VV_M 0.003 else888_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif888
  else888_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else888_3:
  endif888:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds900
	MOVEF_32 1000.0 milliseconds900
	DATA32 timer900
	TIMER_WAIT milliseconds900 timer900
	TIMER_READY timer900
RETSUB_HSV_RGB_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_D:
SUB_A3:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN3_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX3_M VMIN3_M F.1
    DATAF tmpf905
    DATA8 flag905
    DIVF F.0 F.1 tmpf905
    CP_EQF 0.0 F.1 flag905
    SELECTF flag905 0.0 tmpf905 VS3_M

RETSUB_A3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A3:
SUB_A2:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf910
    DATA8 flag910
    DIVF F.0 F.1 tmpf910
    CP_EQF 0.0 F.1 flag910
    SELECTF flag910 0.0 tmpf910 VS2_M

RETSUB_A2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A2:
SUB_POLIN2D:
    WRITE32 ENDSUB_A3:CALLSUB911 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB911:
    WRITE32 ENDSUB_A2:CALLSUB912 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB912:
    SUBF VS2_M VS3_M VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2D:
SUB_POLIN2DUS:
    WRITE32 ENDSUB_A3:CALLSUB922 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB922:
    WRITE32 ENDSUB_A2:CALLSUB923 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB923:
    SUBF VS2_M VS3_M VE_M
    MULF VK3_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2DUS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2DUS:
SUB_ZAMOROZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_ZAMOROZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZAMOROZ:
SUB_ZADVIG:
    CALL MOTOR.START 'a' 80.0
    DATA32 milliseconds937
	MOVEF_32 100.0 milliseconds937
	DATA32 timer937
	TIMER_WAIT milliseconds937 timer937
	TIMER_READY timer937
  while938:
    CALL MOTOR.GETSPEED 'a' F.0
    JR_LTEQF F.0 20.0 endwhile938
  whilebody938:
    CALL MOTOR.START 'a' 80.0
    CALL MOTOR.GETSPEED 'a' F.0
    JR_GTF F.0 20.0 whilebody938
  endwhile938:
    CALL MOTOR.STOP 'a' 'true'
RETSUB_ZADVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZADVIG:
SUB_VIDVIG:
    CALL MOTOR.START 'a' -80.0
    DATA32 milliseconds944
	MOVEF_32 350.0 milliseconds944
	DATA32 timer944
	TIMER_WAIT milliseconds944 timer944
	TIMER_READY timer944
    CALL MOTOR.STOP 'a' 'true'
RETSUB_VIDVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIDVIG:
SUB_VIRAV_NAZ:
    DATA8 layer946
	DATA8 no946
	DATA8 mode8946
	
	MOVEF_8 2.0 no946
	SUB8 no946 1 no946
	DIV8 no946 4 layer946
	MATH MOD8 no946 4 no946

	MOVEF_8 0.0 mode8946
	
	INPUT_DEVICE READY_RAW layer946 no946 0 mode8946 0
    DATA8 layer947
	DATA8 no947
	DATA8 mode8947
	
	MOVEF_8 3.0 no947
	SUB8 no947 1 no947
	DIV8 no947 4 layer947
	MATH MOD8 no947 4 no947

	MOVEF_8 0.0 mode8947
	
	INPUT_DEVICE READY_RAW layer947 no947 0 mode8947 0
  while948:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile948
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile948
  whilebody948:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and952
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody948
  and952:
  endwhile948:
    CALL MOTOR.STOP 'BC' 'True'
  while956:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile956
  whilebody956:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody956
  endwhile956:
    CALL MOTOR.STOP 'B' 'True'
  while961:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile961
  whilebody961:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody961
  endwhile961:
    CALL MOTOR.STOP 'C' 'True'
  while966:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile966
  whilebody966:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody966
  endwhile966:
    CALL MOTOR.STOP 'B' 'True'
  while971:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile971
  whilebody971:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody971
  endwhile971:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV_NAZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_NAZ:
SUB_VIRAV:
    DATA8 layer976
	DATA8 no976
	DATA8 mode8976
	
	MOVEF_8 2.0 no976
	SUB8 no976 1 no976
	DIV8 no976 4 layer976
	MATH MOD8 no976 4 no976

	MOVEF_8 0.0 mode8976
	
	INPUT_DEVICE READY_RAW layer976 no976 0 mode8976 0
    DATA8 layer977
	DATA8 no977
	DATA8 mode8977
	
	MOVEF_8 3.0 no977
	SUB8 no977 1 no977
	DIV8 no977 4 layer977
	MATH MOD8 no977 4 no977

	MOVEF_8 0.0 mode8977
	
	INPUT_DEVICE READY_RAW layer977 no977 0 mode8977 0
  while978:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile978
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile978
  whilebody978:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 and982
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody978
  and982:
  endwhile978:
    CALL MOTOR.STOP 'BC' 'True'
  while986:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile986
  whilebody986:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 7.0 whilebody986
  endwhile986:
    CALL MOTOR.STOP 'B' 'True'
  while991:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile991
  whilebody991:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody991
  endwhile991:
    CALL MOTOR.STOP 'C' 'True'
  while996:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 7.0 endwhile996
  whilebody996:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 7.0 whilebody996
  endwhile996:
    CALL MOTOR.STOP 'B' 'True'
  while1001:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile1001
  whilebody1001:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody1001
  endwhile1001:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV:
SUB_RGB:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 F.0 VRECVARRAY_M
    CALL ARRAYSTORE_FLOAT VI_M F.0 VA_M
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 5.0 or1035
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 14.0 or1035
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 6.0 else1034_1
  or1035:
    CALL SPEAKER.NOTE 100.0 'C#1' 500.0
    JR endif1034
  else1034_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 1.0 or1040
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 10.0 or1040
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 7.0 or1040
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 8.0 else1034_2
  or1040:
    CALL SPEAKER.NOTE 100.0 'C#5' 500.0
    JR endif1034
  else1034_2:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 3.0 or1046
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 2.0 or1046
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 4.0 else1034_3
  or1046:
    CALL SPEAKER.NOTE 50.0 'C#9' 1000.0
  else1034_3:
  endif1034:
RETSUB_RGB:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RGB:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
