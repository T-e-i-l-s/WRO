DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VG_M
DATAF VR_M
DATAF VY_M
DATAF VW_M
DATAF VCOLOR_M
DATAF VX_M
DATAF VC_M
DATAF VS_M
DATAF VMAX2_M
DATAF VMAX3_M
DATAF VMIN2_M
DATAF VMIN3_M
DATAF VK1_M
DATAF VK2_M
DATAF VK3_M
DATAF VS3_M
DATAF VS2_M
DATAF VSPEED_M
DATAF VSPEEDL_M
DATAF VSPEEDR_M
DATAF VEOLD_M
DATAF VN_M
DATAF VP_M
DATAF VI_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VL_M
DATAF VJ_M
DATAF VE_M
DATAF VU_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VV_M
DATAF VD_M
DATAF VZ_M
ARRAY16 VA_M 2
DATAF VF_M
DATA32 RUNCOUNTER_ZADVIG
DATA32 RUNCOUNTER_VIDVIG

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYCREATE_FLOAT VA_M
    MOVEF_F 0.0 VF_M
    MOVE32_32 0 RUNCOUNTER_ZADVIG
    MOVE32_32 0 RUNCOUNTER_VIDVIG
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TZADVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_ZADVIG 0
    CALL GETANDINC32 RUNCOUNTER_ZADVIG -1 RUNCOUNTER_ZADVIG tmp
    JR_GT32 tmp 1 launch
}
vmthread TVIDVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_VIDVIG 1
    CALL GETANDINC32 RUNCOUNTER_VIDVIG -1 RUNCOUNTER_VIDVIG tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_ZADVIG
subcall PROGRAM_VIDVIG
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1030
    WRITE32 ENDSUB_ZADVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
  dispatch1030:
    JR_NEQ32 SUBPROGRAM 1 dispatch1031
    WRITE32 ENDSUB_VIDVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIDVIG
  dispatch1031:
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_M
    MOVEF_F 0.0 VF_M
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    MOVEF_F 0.2 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL EV3FILE.OPENREAD 'a123/colib.dat' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN3_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX3_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMIN2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMIN3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 30.0 30.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 1.0 S.0
    DATA32 milliseconds1017
	MOVEF_32 100.0 milliseconds1017
	DATA32 timer1017
	TIMER_WAIT milliseconds1017 timer1017
	TIMER_READY timer1017
    WRITE32 ENDSUB_A3:CALLSUB1018 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1018:
    WRITE32 ENDSUB_A2:CALLSUB1019 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1019:
  while1020:
    JR_LTEQF VS3_M 15.0 and1022
    JR_GTF VS2_M 15.0 or1021
  and1022:
    JR_GTEQF VS3_M 15.0 endwhile1020
    JR_GTEQF VS2_M 15.0 endwhile1020
  or1021:
  whilebody1020:
    WRITE32 ENDSUB_A3:CALLSUB1023 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1023:
    WRITE32 ENDSUB_A2:CALLSUB1024 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1024:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1025 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1025:
    JR_LTEQF VS3_M 15.0 and1026
    JR_GTF VS2_M 15.0 whilebody1020
  and1026:
    JR_GTEQF VS3_M 15.0 and1027
    JR_LTF VS2_M 15.0 whilebody1020
  and1027:
  endwhile1020:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_PR:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_PR
CALLSUB1029:
ENDTHREAD:
    RETURN
SUB_US:
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf7
    DATA8 flag7
    DIVF 360.0 VL_M tmpf7
    CP_EQF 0.0 VL_M flag7
    SELECTF flag7 0.0 tmpf7 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while10:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.1 2.0 tmpf14
    CP_EQF 0.0 2.0 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    JR_GTEQF F.0 VX_M endwhile10
  whilebody10:
    WRITE32 ENDSUB_A3:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB15:
    WRITE32 ENDSUB_A2:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB16:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB17:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.1 2.0 tmpf21
    CP_EQF 0.0 2.0 flag21
    SELECTF flag21 0.0 tmpf21 F.0

    JR_LTF F.0 VX_M whilebody10
  endwhile10:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB23:
    WRITE32 ENDSUB_A2:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB24:
  while25:
    JR_LTEQF VS3_M 15.0 and27
    JR_GTF VS2_M 15.0 or26
  and27:
    JR_GTEQF VS3_M 15.0 endwhile25
    JR_GTEQF VS2_M 15.0 endwhile25
  or26:
  whilebody25:
    WRITE32 ENDSUB_A3:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB28:
    WRITE32 ENDSUB_A2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB29:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB30:
    JR_LTEQF VS3_M 15.0 and31
    JR_GTF VS2_M 15.0 whilebody25
  and31:
    JR_GTEQF VS3_M 15.0 and32
    JR_LTF VS2_M 15.0 whilebody25
  and32:
  endwhile25:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_US:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_US:
SUB_PL:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer34
	DATA8 nos34
	DATA8 busy34
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer34 nos34
	JR_EQ8 0 nos34 motornotbusy34
  motorwaiting34:
	OUTPUT_TEST layer34 nos34 busy34
	JR_EQ8 busy34 0 motornotbusy34
	SLEEP
	JR motorwaiting34
  motornotbusy34:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB36:
    WRITE32 ENDSUB_A2:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB37:
  while38:
    JR_LTEQF VS2_M 15.0 endwhile38
  whilebody38:
    WRITE32 ENDSUB_A3:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB39:
    WRITE32 ENDSUB_A2:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB40:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody38
  endwhile38:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB43:
    WRITE32 ENDSUB_A2:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB44:
  while45:
    JR_GTEQF VS2_M 15.0 endwhile45
  whilebody45:
    WRITE32 ENDSUB_A3:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB46:
    WRITE32 ENDSUB_A2:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB47:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody45
  endwhile45:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PL:
SUB_PR:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer50
	DATA8 nos50
	DATA8 busy50
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer50 nos50
	JR_EQ8 0 nos50 motornotbusy50
  motorwaiting50:
	OUTPUT_TEST layer50 nos50 busy50
	JR_EQ8 busy50 0 motornotbusy50
	SLEEP
	JR motorwaiting50
  motornotbusy50:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB52:
    WRITE32 ENDSUB_A2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB53:
  while54:
    JR_LTEQF VS3_M 15.0 endwhile54
  whilebody54:
    WRITE32 ENDSUB_A3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB55:
    WRITE32 ENDSUB_A2:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB56:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody54
  endwhile54:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB59:
    WRITE32 ENDSUB_A2:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB60:
  while61:
    JR_GTEQF VS3_M 60.0 endwhile61
  whilebody61:
    WRITE32 ENDSUB_A3:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB62:
    WRITE32 ENDSUB_A2:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB63:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 60.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PR:
SUB_NPL:
    WRITE32 ENDSUB_A2:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB66:
    WRITE32 ENDSUB_A3:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB67:
  while68:
    JR_LTEQF VS3_M 9.0 and70
    JR_GTF VS2_M 9.0 or69
  and70:
    JR_GTEQF VS3_M 9.0 and71
    JR_GTF VS2_M 9.0 or69
  and71:
    JR_LTEQF VS3_M 9.0 endwhile68
    JR_GTEQF VS2_M 9.0 endwhile68
  or69:
  whilebody68:
    WRITE32 ENDSUB_A2:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB72:
    WRITE32 ENDSUB_A3:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB73:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    JR_LTEQF VS3_M 9.0 and75
    JR_GTF VS2_M 9.0 whilebody68
  and75:
    JR_GTEQF VS3_M 9.0 and76
    JR_GTF VS2_M 9.0 whilebody68
  and76:
    JR_LTEQF VS3_M 9.0 and77
    JR_LTF VS2_M 9.0 whilebody68
  and77:
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer81
	DATA8 nos81
	DATA8 busy81
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer81 nos81
	JR_EQ8 0 nos81 motornotbusy81
  motorwaiting81:
	OUTPUT_TEST layer81 nos81 busy81
	JR_EQ8 busy81 0 motornotbusy81
	SLEEP
	JR motorwaiting81
  motornotbusy81:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB83:
    WRITE32 ENDSUB_A2:CALLSUB84 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB84:
  while85:
    JR_LTEQF VS2_M 10.0 endwhile85
  whilebody85:
    WRITE32 ENDSUB_A3:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB86:
    WRITE32 ENDSUB_A2:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB87:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody85
  endwhile85:
    WRITE32 ENDSUB_A3:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB89:
    WRITE32 ENDSUB_A2:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB90:
  while91:
    JR_GTEQF VS2_M 60.0 endwhile91
  whilebody91:
    WRITE32 ENDSUB_A3:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB92:
    WRITE32 ENDSUB_A2:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB93:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody91
  endwhile91:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPL:
SUB_NPP:
    WRITE32 ENDSUB_A2:CALLSUB96 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB96:
    WRITE32 ENDSUB_A3:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB97:
  while98:
    JR_LTEQF VS3_M 10.0 and100
    JR_GTF VS2_M 10.0 or99
  and100:
    JR_GTEQF VS3_M 10.0 and101
    JR_GTF VS2_M 10.0 or99
  and101:
    JR_LTEQF VS3_M 10.0 endwhile98
    JR_GTEQF VS2_M 10.0 endwhile98
  or99:
  whilebody98:
    WRITE32 ENDSUB_A2:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB102:
    WRITE32 ENDSUB_A3:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB103:
    CALL MOTOR.STARTPOWER 'bc' -60.0
    JR_LTEQF VS3_M 10.0 and105
    JR_GTF VS2_M 10.0 whilebody98
  and105:
    JR_GTEQF VS3_M 10.0 and106
    JR_GTF VS2_M 10.0 whilebody98
  and106:
    JR_LTEQF VS3_M 10.0 and107
    JR_LTF VS2_M 10.0 whilebody98
  and107:
  endwhile98:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 50.0 'true'

	DATA8 layer109
	DATA8 nos109
	DATA8 busy109
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer109 nos109
	JR_EQ8 0 nos109 motornotbusy109
  motorwaiting109:
	OUTPUT_TEST layer109 nos109 busy109
	JR_EQ8 busy109 0 motornotbusy109
	SLEEP
	JR motorwaiting109
  motornotbusy109:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 90.0 'true'

	DATA8 layer111
	DATA8 nos111
	DATA8 busy111
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer111 nos111
	JR_EQ8 0 nos111 motornotbusy111
  motorwaiting111:
	OUTPUT_TEST layer111 nos111 busy111
	JR_EQ8 busy111 0 motornotbusy111
	SLEEP
	JR motorwaiting111
  motornotbusy111:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB113:
    WRITE32 ENDSUB_A2:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB114:
  while115:
    JR_LTEQF VS3_M 10.0 endwhile115
  whilebody115:
    WRITE32 ENDSUB_A3:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB116:
    WRITE32 ENDSUB_A2:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB117:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody115
  endwhile115:
    WRITE32 ENDSUB_A3:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB119:
    WRITE32 ENDSUB_A2:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB120:
  while121:
    JR_GTEQF VS3_M 60.0 endwhile121
  whilebody121:
    WRITE32 ENDSUB_A3:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB122:
    WRITE32 ENDSUB_A2:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB123:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 60.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPP:
SUB_REDL:
    DATA32 tmp126
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp126
    JR_NEQ32 0 tmp126 alreadylaunched126
    OBJECT_START TZADVIG
  alreadylaunched126:
    WRITE32 ENDSUB_A3:CALLSUB127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB127:
    WRITE32 ENDSUB_A2:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB128:
  while129:
    JR_LTEQF VS3_M 10.0 and131
    JR_GTF VS2_M 10.0 or130
  and131:
    JR_GTEQF VS3_M 10.0 and132
    JR_GTF VS2_M 10.0 or130
  and132:
    JR_LTEQF VS3_M 10.0 endwhile129
    JR_GTEQF VS2_M 10.0 endwhile129
  or130:
  whilebody129:
    WRITE32 ENDSUB_A3:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB133:
    WRITE32 ENDSUB_A2:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB134:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB135:
    JR_LTEQF VS3_M 10.0 and136
    JR_GTF VS2_M 10.0 whilebody129
  and136:
    JR_GTEQF VS3_M 10.0 and137
    JR_GTF VS2_M 10.0 whilebody129
  and137:
    JR_LTEQF VS3_M 10.0 and138
    JR_LTF VS2_M 10.0 whilebody129
  and138:
  endwhile129:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer140
	DATA8 nos140
	DATA8 busy140
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer140 nos140
	JR_EQ8 0 nos140 motornotbusy140
  motorwaiting140:
	OUTPUT_TEST layer140 nos140 busy140
	JR_EQ8 busy140 0 motornotbusy140
	SLEEP
	JR motorwaiting140
  motornotbusy140:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer141
	DATA8 nos141
	DATA8 busy141
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer141 nos141
	JR_EQ8 0 nos141 motornotbusy141
  motorwaiting141:
	OUTPUT_TEST layer141 nos141 busy141
	JR_EQ8 busy141 0 motornotbusy141
	SLEEP
	JR motorwaiting141
  motornotbusy141:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB144:
    WRITE32 ENDSUB_A3:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB145:
  while146:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile146
  whilebody146:
    WRITE32 ENDSUB_A2:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB148:
    WRITE32 ENDSUB_A3:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB149:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB150 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB150:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds154
	MOVEF_32 500.0 milliseconds154
	DATA32 timer154
	TIMER_WAIT milliseconds154 timer154
	TIMER_READY timer154
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer156
	DATA8 nos156
	DATA8 busy156
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer156 nos156
	JR_EQ8 0 nos156 motornotbusy156
  motorwaiting156:
	OUTPUT_TEST layer156 nos156 busy156
	JR_EQ8 busy156 0 motornotbusy156
	SLEEP
	JR motorwaiting156
  motornotbusy156:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer157
	DATA8 nos157
	DATA8 busy157
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer157 nos157
	JR_EQ8 0 nos157 motornotbusy157
  motorwaiting157:
	OUTPUT_TEST layer157 nos157 busy157
	JR_EQ8 busy157 0 motornotbusy157
	SLEEP
	JR motorwaiting157
  motornotbusy157:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer158
	DATA8 nos158
	DATA8 busy158
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer158 nos158
	JR_EQ8 0 nos158 motornotbusy158
  motorwaiting158:
	OUTPUT_TEST layer158 nos158 busy158
	JR_EQ8 busy158 0 motornotbusy158
	SLEEP
	JR motorwaiting158
  motornotbusy158:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer159
	DATA8 nos159
	DATA8 busy159
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer159 nos159
	JR_EQ8 0 nos159 motornotbusy159
  motorwaiting159:
	OUTPUT_TEST layer159 nos159 busy159
	JR_EQ8 busy159 0 motornotbusy159
	SLEEP
	JR motorwaiting159
  motornotbusy159:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer160
	DATA8 nos160
	DATA8 busy160
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer160 nos160
	JR_EQ8 0 nos160 motornotbusy160
  motorwaiting160:
	OUTPUT_TEST layer160 nos160 busy160
	JR_EQ8 busy160 0 motornotbusy160
	SLEEP
	JR motorwaiting160
  motornotbusy160:
    WRITE32 ENDSUB_A2:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB161:
    WRITE32 ENDSUB_A3:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB162:
  while163:
    JR_LTEQF VS3_M 9.0 endwhile163
  whilebody163:
    WRITE32 ENDSUB_A2:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB164:
    WRITE32 ENDSUB_A3:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB165:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB166:
    JR_GTF VS3_M 9.0 whilebody163
  endwhile163:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer168
	DATA8 nos168
	DATA8 busy168
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer168 nos168
	JR_EQ8 0 nos168 motornotbusy168
  motorwaiting168:
	OUTPUT_TEST layer168 nos168 busy168
	JR_EQ8 busy168 0 motornotbusy168
	SLEEP
	JR motorwaiting168
  motornotbusy168:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 100.0 'true'

	DATA8 layer169
	DATA8 nos169
	DATA8 busy169
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer169 nos169
	JR_EQ8 0 nos169 motornotbusy169
  motorwaiting169:
	OUTPUT_TEST layer169 nos169 busy169
	JR_EQ8 busy169 0 motornotbusy169
	SLEEP
	JR motorwaiting169
  motornotbusy169:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB171:
    WRITE32 ENDSUB_A2:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB172:
  while173:
    JR_LTEQF VS2_M 15.0 endwhile173
  whilebody173:
    WRITE32 ENDSUB_A3:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB174:
    WRITE32 ENDSUB_A2:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB175:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody173
  endwhile173:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB178:
    WRITE32 ENDSUB_A2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB179:
  while180:
    JR_GTEQF VS2_M 55.0 endwhile180
  whilebody180:
    WRITE32 ENDSUB_A3:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB181:
    WRITE32 ENDSUB_A2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB182:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 55.0 whilebody180
  endwhile180:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_REDL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_REDL:
SUB_BELLAM:
  while185:
    JR_LTEQF VS3_M 15.0 and187
    JR_GTF VS2_M 15.0 or186
  and187:
    JR_GTEQF VS3_M 15.0 endwhile185
    JR_GTEQF VS2_M 15.0 endwhile185
  or186:
  whilebody185:
    WRITE32 ENDSUB_A3:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB188:
    WRITE32 ENDSUB_A2:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB189:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB190:
    JR_LTEQF VS3_M 15.0 and191
    JR_GTF VS2_M 15.0 whilebody185
  and191:
    JR_GTEQF VS3_M 15.0 and192
    JR_LTF VS2_M 15.0 whilebody185
  and192:
  endwhile185:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer194
	DATA8 nos194
	DATA8 busy194
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer194 nos194
	JR_EQ8 0 nos194 motornotbusy194
  motorwaiting194:
	OUTPUT_TEST layer194 nos194 busy194
	JR_EQ8 busy194 0 motornotbusy194
	SLEEP
	JR motorwaiting194
  motornotbusy194:
    WRITE32 ENDSUB_A3:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB195:
    WRITE32 ENDSUB_A2:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB196:
  while197:
    JR_LTEQF VS3_M 15.0 endwhile197
  whilebody197:
    WRITE32 ENDSUB_A3:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB198:
    WRITE32 ENDSUB_A2:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB199:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody197
  endwhile197:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB202:
    WRITE32 ENDSUB_A2:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB203:
  while204:
    JR_GTEQF VS3_M 15.0 endwhile204
  whilebody204:
    WRITE32 ENDSUB_A3:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB205:
    WRITE32 ENDSUB_A2:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB206:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody204
  endwhile204:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while210:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile210
  whilebody210:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB212:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody210
  endwhile210:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB215:
    WRITE32 ENDSUB_A2:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB216:
    MOVEF_F 1.0 VI_M
  for217:
    JR_GTF VI_M 1.0 endfor217
  forbody217:
    WRITE32 ENDSUB_A3:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB218:
    WRITE32 ENDSUB_A2:CALLSUB219 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB219:
  while220:
    JR_LTEQF VS3_M 15.0 and222
    JR_GTF VS2_M 15.0 or221
  and222:
    JR_GTEQF VS3_M 15.0 endwhile220
    JR_GTEQF VS2_M 15.0 endwhile220
  or221:
  whilebody220:
    WRITE32 ENDSUB_A3:CALLSUB223 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB223:
    WRITE32 ENDSUB_A2:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB224:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB225:
    JR_LTEQF VS3_M 15.0 and226
    JR_GTF VS2_M 15.0 whilebody220
  and226:
    JR_GTEQF VS3_M 15.0 and227
    JR_LTF VS2_M 15.0 whilebody220
  and227:
  endwhile220:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer229
	DATA8 nos229
	DATA8 busy229
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer229 nos229
	JR_EQ8 0 nos229 motornotbusy229
  motorwaiting229:
	OUTPUT_TEST layer229 nos229 busy229
	JR_EQ8 busy229 0 motornotbusy229
	SLEEP
	JR motorwaiting229
  motornotbusy229:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody217
  endfor217:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB232:
    WRITE32 ENDSUB_A2:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB233:
    MOVEF_F 80.0 VJ_M
  while234:
    JR_LTEQF VS3_M 15.0 endwhile234
  whilebody234:
    WRITE32 ENDSUB_A3:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB235:
    WRITE32 ENDSUB_A2:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB236:
    JR_LTEQF VJ_M 30.0 else237_1
    SUBF VJ_M 0.1 VJ_M
  else237_1:
  endif237:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody234
  endwhile234:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB241:
    WRITE32 ENDSUB_A2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB242:
    MOVEF_F 80.0 VJ_M
  while243:
    JR_GTEQF VS3_M 25.0 endwhile243
  whilebody243:
    WRITE32 ENDSUB_A3:CALLSUB244 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB244:
    WRITE32 ENDSUB_A2:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB245:
    JR_LTEQF VJ_M 30.0 else246_1
    SUBF VJ_M 0.1 VJ_M
  else246_1:
  endif246:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 25.0 whilebody243
  endwhile243:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while251:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf255
    DATA8 flag255
    DIVF F.1 2.0 tmpf255
    CP_EQF 0.0 2.0 flag255
    SELECTF flag255 0.0 tmpf255 F.0

    JR_GTEQF F.0 50.0 endwhile251
  whilebody251:
    WRITE32 ENDSUB_A3:CALLSUB256 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB256:
    WRITE32 ENDSUB_A2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB257:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_A3:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB258:
    WRITE32 ENDSUB_A2:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB259:
    ADDF VMIN3_M VMAX3_M F.2
    DATAF tmpf261
    DATA8 flag261
    DIVF F.2 2.0 tmpf261
    CP_EQF 0.0 2.0 flag261
    SELECTF flag261 0.0 tmpf261 F.1

    ADDF F.1 15.0 F.0
    SUBF VS3_M F.0 VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf274
    DATA8 flag274
    DIVF F.1 2.0 tmpf274
    CP_EQF 0.0 2.0 flag274
    SELECTF flag274 0.0 tmpf274 F.0

    JR_LTF F.0 50.0 whilebody251
  endwhile251:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer276
	DATA8 nos276
	DATA8 busy276
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer276 nos276
	JR_EQ8 0 nos276 motornotbusy276
  motorwaiting276:
	OUTPUT_TEST layer276 nos276 busy276
	JR_EQ8 busy276 0 motornotbusy276
	SLEEP
	JR motorwaiting276
  motornotbusy276:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds278
	MOVEF_32 500.0 milliseconds278
	DATA32 timer278
	TIMER_WAIT milliseconds278 timer278
	TIMER_READY timer278
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 50.0 'true'

	DATA8 layer280
	DATA8 nos280
	DATA8 busy280
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer280 nos280
	JR_EQ8 0 nos280 motornotbusy280
  motorwaiting280:
	OUTPUT_TEST layer280 nos280 busy280
	JR_EQ8 busy280 0 motornotbusy280
	SLEEP
	JR motorwaiting280
  motornotbusy280:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 350.0 'true'

	DATA8 layer281
	DATA8 nos281
	DATA8 busy281
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer281 nos281
	JR_EQ8 0 nos281 motornotbusy281
  motorwaiting281:
	OUTPUT_TEST layer281 nos281 busy281
	JR_EQ8 busy281 0 motornotbusy281
	SLEEP
	JR motorwaiting281
  motornotbusy281:
    WRITE32 ENDSUB_A2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB282:
    WRITE32 ENDSUB_A3:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB283:
  while284:
    JR_LTEQF VS3_M 10.0 and286
    JR_GTF VS2_M 10.0 or285
  and286:
    JR_GTEQF VS3_M 10.0 and287
    JR_GTF VS2_M 10.0 or285
  and287:
    JR_LTEQF VS3_M 6.0 endwhile284
    JR_GTEQF VS2_M 6.0 endwhile284
  or285:
  whilebody284:
    WRITE32 ENDSUB_A2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB288:
    WRITE32 ENDSUB_A3:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB289:
    CALL MOTOR.STARTPOWER 'bc' 20.0
    JR_LTEQF VS3_M 10.0 and291
    JR_GTF VS2_M 10.0 whilebody284
  and291:
    JR_GTEQF VS3_M 10.0 and292
    JR_GTF VS2_M 10.0 whilebody284
  and292:
    JR_LTEQF VS3_M 6.0 and293
    JR_LTF VS2_M 6.0 whilebody284
  and293:
  endwhile284:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer295
	DATA8 nos295
	DATA8 busy295
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer295 nos295
	JR_EQ8 0 nos295 motornotbusy295
  motorwaiting295:
	OUTPUT_TEST layer295 nos295 busy295
	JR_EQ8 busy295 0 motornotbusy295
	SLEEP
	JR motorwaiting295
  motornotbusy295:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB297:
    WRITE32 ENDSUB_A2:CALLSUB298 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB298:
  while299:
    JR_LTEQF VS3_M 10.0 endwhile299
  whilebody299:
    WRITE32 ENDSUB_A3:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB300:
    WRITE32 ENDSUB_A2:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB301:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody299
  endwhile299:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB304:
    WRITE32 ENDSUB_A2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB305:
  while306:
    JR_GTEQF VS3_M 15.0 endwhile306
  whilebody306:
    WRITE32 ENDSUB_A3:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB307:
    WRITE32 ENDSUB_A2:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB308:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody306
  endwhile306:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds311
	MOVEF_32 100.0 milliseconds311
	DATA32 timer311
	TIMER_WAIT milliseconds311 timer311
	TIMER_READY timer311
RETSUB_BELLAM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM:
SUB_BELLAM2:
  while312:
    JR_LTEQF VS3_M 15.0 and314
    JR_GTF VS2_M 15.0 or313
  and314:
    JR_GTEQF VS3_M 15.0 endwhile312
    JR_GTEQF VS2_M 15.0 endwhile312
  or313:
  whilebody312:
    WRITE32 ENDSUB_A3:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB315:
    WRITE32 ENDSUB_A2:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB316:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB317:
    JR_LTEQF VS3_M 15.0 and318
    JR_GTF VS2_M 15.0 whilebody312
  and318:
    JR_GTEQF VS3_M 15.0 and319
    JR_LTF VS2_M 15.0 whilebody312
  and319:
  endwhile312:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 60.0 'true'

	DATA8 layer321
	DATA8 nos321
	DATA8 busy321
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer321 nos321
	JR_EQ8 0 nos321 motornotbusy321
  motorwaiting321:
	OUTPUT_TEST layer321 nos321 busy321
	JR_EQ8 busy321 0 motornotbusy321
	SLEEP
	JR motorwaiting321
  motornotbusy321:
    WRITE32 ENDSUB_A3:CALLSUB322 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB322:
    WRITE32 ENDSUB_A2:CALLSUB323 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB323:
  while324:
    JR_LTEQF VS3_M 15.0 endwhile324
  whilebody324:
    WRITE32 ENDSUB_A3:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB325:
    WRITE32 ENDSUB_A2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB326:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody324
  endwhile324:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB329 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB329:
    WRITE32 ENDSUB_A2:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB330:
  while331:
    JR_GTEQF VS3_M 15.0 endwhile331
  whilebody331:
    WRITE32 ENDSUB_A3:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB332:
    WRITE32 ENDSUB_A2:CALLSUB333 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB333:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody331
  endwhile331:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB336 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB336:
    WRITE32 ENDSUB_A2:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB337:
    MOVEF_F 1.0 VI_M
  for338:
    JR_GTF VI_M 2.0 endfor338
  forbody338:
    WRITE32 ENDSUB_A3:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB339:
    WRITE32 ENDSUB_A2:CALLSUB340 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB340:
  while341:
    JR_LTEQF VS3_M 15.0 and343
    JR_GTF VS2_M 15.0 or342
  and343:
    JR_GTEQF VS3_M 15.0 endwhile341
    JR_GTEQF VS2_M 15.0 endwhile341
  or342:
  whilebody341:
    WRITE32 ENDSUB_A3:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB344:
    WRITE32 ENDSUB_A2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB345:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB346:
    JR_LTEQF VS3_M 15.0 and347
    JR_GTF VS2_M 15.0 whilebody341
  and347:
    JR_GTEQF VS3_M 15.0 and348
    JR_LTF VS2_M 15.0 whilebody341
  and348:
  endwhile341:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 40.0 50.0 'true'

	DATA8 layer349
	DATA8 nos349
	DATA8 busy349
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer349 nos349
	JR_EQ8 0 nos349 motornotbusy349
  motorwaiting349:
	OUTPUT_TEST layer349 nos349 busy349
	JR_EQ8 busy349 0 motornotbusy349
	SLEEP
	JR motorwaiting349
  motornotbusy349:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 2.0 forbody338
  endfor338:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB352 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB352:
    WRITE32 ENDSUB_A2:CALLSUB353 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB353:
    MOVEF_F 80.0 VJ_M
  while354:
    JR_LTEQF VS3_M 10.0 endwhile354
  whilebody354:
    WRITE32 ENDSUB_A3:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB355:
    WRITE32 ENDSUB_A2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB356:
    JR_LTEQF VJ_M 30.0 else357_1
    SUBF VJ_M 0.1 VJ_M
  else357_1:
  endif357:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody354
  endwhile354:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB361:
    WRITE32 ENDSUB_A2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB362:
    MOVEF_F 80.0 VJ_M
  while363:
    JR_GTEQF VS3_M 15.0 endwhile363
  whilebody363:
    WRITE32 ENDSUB_A3:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB364:
    WRITE32 ENDSUB_A2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB365:
    JR_LTEQF VJ_M 30.0 else366_1
    SUBF VJ_M 0.1 VJ_M
  else366_1:
  endif366:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody363
  endwhile363:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_ZAMOROZ:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZAMOROZ
CALLSUB370:
    CALL MOTOR.RESETCOUNT 'bc'
  while372:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf376
    DATA8 flag376
    DIVF F.1 2.0 tmpf376
    CP_EQF 0.0 2.0 flag376
    SELECTF flag376 0.0 tmpf376 F.0

    JR_GTEQF F.0 50.0 endwhile372
  whilebody372:
    WRITE32 ENDSUB_A3:CALLSUB377 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB377:
    WRITE32 ENDSUB_A2:CALLSUB378 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB378:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB379:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf383
    DATA8 flag383
    DIVF F.1 2.0 tmpf383
    CP_EQF 0.0 2.0 flag383
    SELECTF flag383 0.0 tmpf383 F.0

    JR_LTF F.0 50.0 whilebody372
  endwhile372:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 70.0 'true'

	DATA8 layer385
	DATA8 nos385
	DATA8 busy385
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer385 nos385
	JR_EQ8 0 nos385 motornotbusy385
  motorwaiting385:
	OUTPUT_TEST layer385 nos385 busy385
	JR_EQ8 busy385 0 motornotbusy385
	SLEEP
	JR motorwaiting385
  motornotbusy385:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds387
	MOVEF_32 500.0 milliseconds387
	DATA32 timer387
	TIMER_WAIT milliseconds387 timer387
	TIMER_READY timer387
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while390:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf394
    DATA8 flag394
    DIVF F.1 2.0 tmpf394
    CP_EQF 0.0 2.0 flag394
    SELECTF flag394 0.0 tmpf394 F.0

    JR_LTEQF F.0 -200.0 endwhile390
  whilebody390:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf399
    DATA8 flag399
    DIVF F.1 2.0 tmpf399
    CP_EQF 0.0 2.0 flag399
    SELECTF flag399 0.0 tmpf399 F.0

    JR_GTF F.0 -200.0 whilebody390
  endwhile390:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer401
	DATA8 nos401
	DATA8 busy401
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer401 nos401
	JR_EQ8 0 nos401 motornotbusy401
  motorwaiting401:
	OUTPUT_TEST layer401 nos401 busy401
	JR_EQ8 busy401 0 motornotbusy401
	SLEEP
	JR motorwaiting401
  motornotbusy401:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB403 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB403:
    WRITE32 ENDSUB_A3:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB404:
  while405:
    JR_LTEQF VS3_M 10.0 and407
    JR_GTF VS2_M 10.0 or406
  and407:
    JR_LTEQF VS3_M 10.0 and408
    JR_LTF VS2_M 10.0 or406
  and408:
    JR_GTEQF VS3_M 10.0 endwhile405
    JR_LTEQF VS2_M 10.0 endwhile405
  or406:
  whilebody405:
    WRITE32 ENDSUB_A2:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB409:
    WRITE32 ENDSUB_A3:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB410:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VS3_M 10.0 and412
    JR_GTF VS2_M 10.0 whilebody405
  and412:
    JR_LTEQF VS3_M 10.0 and413
    JR_LTF VS2_M 10.0 whilebody405
  and413:
    JR_GTEQF VS3_M 10.0 and414
    JR_GTF VS2_M 10.0 whilebody405
  and414:
  endwhile405:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 50.0 'true'

	DATA8 layer416
	DATA8 nos416
	DATA8 busy416
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer416 nos416
	JR_EQ8 0 nos416 motornotbusy416
  motorwaiting416:
	OUTPUT_TEST layer416 nos416 busy416
	JR_EQ8 busy416 0 motornotbusy416
	SLEEP
	JR motorwaiting416
  motornotbusy416:
    WRITE32 ENDSUB_A3:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB417:
    WRITE32 ENDSUB_A2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB418:
  while419:
    JR_LTEQF VS3_M 10.0 endwhile419
  whilebody419:
    WRITE32 ENDSUB_A3:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB420:
    WRITE32 ENDSUB_A2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB421:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody419
  endwhile419:
    WRITE32 ENDSUB_A3:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB423:
    WRITE32 ENDSUB_A2:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB424:
  while425:
    JR_GTEQF VS3_M 15.0 endwhile425
  whilebody425:
    WRITE32 ENDSUB_A3:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB426:
    WRITE32 ENDSUB_A2:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB427:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody425
  endwhile425:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM2:
SUB_BELLAM3:
  while430:
    JR_LTEQF VS3_M 15.0 and432
    JR_GTF VS2_M 15.0 or431
  and432:
    JR_GTEQF VS3_M 15.0 endwhile430
    JR_GTEQF VS2_M 15.0 endwhile430
  or431:
  whilebody430:
    WRITE32 ENDSUB_A3:CALLSUB433 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB433:
    WRITE32 ENDSUB_A2:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB434:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB435:
    JR_LTEQF VS3_M 15.0 and436
    JR_GTF VS2_M 15.0 whilebody430
  and436:
    JR_GTEQF VS3_M 15.0 and437
    JR_LTF VS2_M 15.0 whilebody430
  and437:
  endwhile430:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer439
	DATA8 nos439
	DATA8 busy439
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer439 nos439
	JR_EQ8 0 nos439 motornotbusy439
  motorwaiting439:
	OUTPUT_TEST layer439 nos439 busy439
	JR_EQ8 busy439 0 motornotbusy439
	SLEEP
	JR motorwaiting439
  motornotbusy439:
    WRITE32 ENDSUB_A3:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB440:
    WRITE32 ENDSUB_A2:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB441:
  while442:
    JR_LTEQF VS3_M 15.0 endwhile442
  whilebody442:
    WRITE32 ENDSUB_A3:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB443:
    WRITE32 ENDSUB_A2:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB444:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody442
  endwhile442:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB447 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB447:
    WRITE32 ENDSUB_A2:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB448:
  while449:
    JR_GTEQF VS3_M 15.0 endwhile449
  whilebody449:
    WRITE32 ENDSUB_A3:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB450:
    WRITE32 ENDSUB_A2:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB451:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody449
  endwhile449:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while455:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile455
  whilebody455:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB457:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody455
  endwhile455:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB460:
    WRITE32 ENDSUB_A2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB461:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 1.0 VI_M
  for462:
    JR_GTF VI_M 3.0 endfor462
  forbody462:
    WRITE32 ENDSUB_A3:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB463:
    WRITE32 ENDSUB_A2:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB464:
  while465:
    JR_LTEQF VS3_M 15.0 and467
    JR_GTF VS2_M 15.0 or466
  and467:
    JR_GTEQF VS3_M 15.0 endwhile465
    JR_GTEQF VS2_M 15.0 endwhile465
  or466:
  whilebody465:
    WRITE32 ENDSUB_A3:CALLSUB468 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB468:
    WRITE32 ENDSUB_A2:CALLSUB469 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB469:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB470:
    JR_LTEQF VS3_M 15.0 and471
    JR_GTF VS2_M 15.0 whilebody465
  and471:
    JR_GTEQF VS3_M 15.0 and472
    JR_LTF VS2_M 15.0 whilebody465
  and472:
  endwhile465:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer473
	DATA8 nos473
	DATA8 busy473
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer473 nos473
	JR_EQ8 0 nos473 motornotbusy473
  motorwaiting473:
	OUTPUT_TEST layer473 nos473 busy473
	JR_EQ8 busy473 0 motornotbusy473
	SLEEP
	JR motorwaiting473
  motornotbusy473:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody462
  endfor462:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.2 VK1_M
    MOVEF_F 8.0 VK2_M
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer476
	DATA8 nos476
	DATA8 busy476
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer476 nos476
	JR_EQ8 0 nos476 motornotbusy476
  motorwaiting476:
	OUTPUT_TEST layer476 nos476 busy476
	JR_EQ8 busy476 0 motornotbusy476
	SLEEP
	JR motorwaiting476
  motornotbusy476:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 130.0 'true'

	DATA8 layer477
	DATA8 nos477
	DATA8 busy477
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer477 nos477
	JR_EQ8 0 nos477 motornotbusy477
  motorwaiting477:
	OUTPUT_TEST layer477 nos477 busy477
	JR_EQ8 busy477 0 motornotbusy477
	SLEEP
	JR motorwaiting477
  motornotbusy477:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds479
	MOVEF_32 500.0 milliseconds479
	DATA32 timer479
	TIMER_WAIT milliseconds479 timer479
	TIMER_READY timer479
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer481
	DATA8 nos481
	DATA8 busy481
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer481 nos481
	JR_EQ8 0 nos481 motornotbusy481
  motorwaiting481:
	OUTPUT_TEST layer481 nos481 busy481
	JR_EQ8 busy481 0 motornotbusy481
	SLEEP
	JR motorwaiting481
  motornotbusy481:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 400.0 'true'

	DATA8 layer482
	DATA8 nos482
	DATA8 busy482
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer482 nos482
	JR_EQ8 0 nos482 motornotbusy482
  motorwaiting482:
	OUTPUT_TEST layer482 nos482 busy482
	JR_EQ8 busy482 0 motornotbusy482
	SLEEP
	JR motorwaiting482
  motornotbusy482:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 200.0 'true'

	DATA8 layer483
	DATA8 nos483
	DATA8 busy483
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer483 nos483
	JR_EQ8 0 nos483 motornotbusy483
  motorwaiting483:
	OUTPUT_TEST layer483 nos483 busy483
	JR_EQ8 busy483 0 motornotbusy483
	SLEEP
	JR motorwaiting483
  motornotbusy483:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 300.0 'true'

	DATA8 layer484
	DATA8 nos484
	DATA8 busy484
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer484 nos484
	JR_EQ8 0 nos484 motornotbusy484
  motorwaiting484:
	OUTPUT_TEST layer484 nos484 busy484
	JR_EQ8 busy484 0 motornotbusy484
	SLEEP
	JR motorwaiting484
  motornotbusy484:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 20.0 300.0 'true'

	DATA8 layer485
	DATA8 nos485
	DATA8 busy485
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer485 nos485
	JR_EQ8 0 nos485 motornotbusy485
  motorwaiting485:
	OUTPUT_TEST layer485 nos485 busy485
	JR_EQ8 busy485 0 motornotbusy485
	SLEEP
	JR motorwaiting485
  motornotbusy485:
    WRITE32 ENDSUB_A2:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB486:
    WRITE32 ENDSUB_A3:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB487:
  while488:
    JR_LTEQF VS3_M 10.0 and490
    JR_GTF VS2_M 10.0 or489
  and490:
    JR_GTEQF VS3_M 10.0 and491
    JR_GTF VS2_M 10.0 or489
  and491:
    JR_LTEQF VS3_M 10.0 endwhile488
    JR_GTEQF VS2_M 10.0 endwhile488
  or489:
  whilebody488:
    WRITE32 ENDSUB_A2:CALLSUB492 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB492:
    WRITE32 ENDSUB_A3:CALLSUB493 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB493:
    CALL MOTOR.STARTPOWER 'bc' 80.0
    JR_LTEQF VS3_M 10.0 and495
    JR_GTF VS2_M 10.0 whilebody488
  and495:
    JR_GTEQF VS3_M 10.0 and496
    JR_GTF VS2_M 10.0 whilebody488
  and496:
    JR_LTEQF VS3_M 10.0 and497
    JR_LTF VS2_M 10.0 whilebody488
  and497:
  endwhile488:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 40.0 'true'

	DATA8 layer499
	DATA8 nos499
	DATA8 busy499
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer499 nos499
	JR_EQ8 0 nos499 motornotbusy499
  motorwaiting499:
	OUTPUT_TEST layer499 nos499 busy499
	JR_EQ8 busy499 0 motornotbusy499
	SLEEP
	JR motorwaiting499
  motornotbusy499:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB501 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB501:
    WRITE32 ENDSUB_A2:CALLSUB502 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB502:
  while503:
    JR_LTEQF VS3_M 10.0 endwhile503
  whilebody503:
    WRITE32 ENDSUB_A3:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB504:
    WRITE32 ENDSUB_A2:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB505:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_GTF VS3_M 10.0 whilebody503
  endwhile503:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB508 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB508:
    WRITE32 ENDSUB_A2:CALLSUB509 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB509:
  while510:
    JR_GTEQF VS3_M 15.0 endwhile510
  whilebody510:
    WRITE32 ENDSUB_A3:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB511:
    WRITE32 ENDSUB_A2:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB512:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_LTF VS3_M 15.0 whilebody510
  endwhile510:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 1.0 VI_M
  for515:
    JR_GTF VI_M 1.0 endfor515
  forbody515:
    WRITE32 ENDSUB_A3:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB516:
    WRITE32 ENDSUB_A2:CALLSUB517 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB517:
  while518:
    JR_LTEQF VS3_M 10.0 and520
    JR_GTF VS2_M 10.0 or519
  and520:
    JR_GTEQF VS3_M 10.0 endwhile518
    JR_GTEQF VS2_M 10.0 endwhile518
  or519:
  whilebody518:
    WRITE32 ENDSUB_A3:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB521:
    WRITE32 ENDSUB_A2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB522:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB523:
    JR_LTEQF VS3_M 10.0 and524
    JR_GTF VS2_M 10.0 whilebody518
  and524:
    JR_GTEQF VS3_M 10.0 and525
    JR_LTF VS2_M 10.0 whilebody518
  and525:
  endwhile518:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer527
	DATA8 nos527
	DATA8 busy527
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer527 nos527
	JR_EQ8 0 nos527 motornotbusy527
  motorwaiting527:
	OUTPUT_TEST layer527 nos527 busy527
	JR_EQ8 busy527 0 motornotbusy527
	SLEEP
	JR motorwaiting527
  motornotbusy527:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody515
  endfor515:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM3:
SUB_RED_1:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer530
	DATA8 nos530
	DATA8 busy530
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer530 nos530
	JR_EQ8 0 nos530 motornotbusy530
  motorwaiting530:
	OUTPUT_TEST layer530 nos530 busy530
	JR_EQ8 busy530 0 motornotbusy530
	SLEEP
	JR motorwaiting530
  motornotbusy530:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB532 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB532:
    WRITE32 ENDSUB_A2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB533:
  while534:
    JR_LTEQF VS2_M 15.0 endwhile534
  whilebody534:
    WRITE32 ENDSUB_A3:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB535:
    WRITE32 ENDSUB_A2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB536:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody534
  endwhile534:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB539:
    WRITE32 ENDSUB_A2:CALLSUB540 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB540:
  while541:
    JR_GTEQF VS2_M 15.0 endwhile541
  whilebody541:
    WRITE32 ENDSUB_A3:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB542:
    WRITE32 ENDSUB_A2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB543:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody541
  endwhile541:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while548:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf552
    DATA8 flag552
    DIVF F.1 2.0 tmpf552
    CP_EQF 0.0 2.0 flag552
    SELECTF flag552 0.0 tmpf552 F.0

    JR_GTEQF F.0 270.0 endwhile548
  whilebody548:
    MOVEF_F 50.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB553:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf557
    DATA8 flag557
    DIVF F.1 2.0 tmpf557
    CP_EQF 0.0 2.0 flag557
    SELECTF flag557 0.0 tmpf557 F.0

    JR_LTF F.0 270.0 whilebody548
  endwhile548:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds559
	MOVEF_32 100.0 milliseconds559
	DATA32 timer559
	TIMER_WAIT milliseconds559 timer559
	TIMER_READY timer559
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds561
	MOVEF_32 500.0 milliseconds561
	DATA32 timer561
	TIMER_WAIT milliseconds561 timer561
	TIMER_READY timer561
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB563:
    MOVEF_F 1400.0 VS_M
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf564
    DATA8 flag564
    DIVF 360.0 VL_M tmpf564
    CP_EQF 0.0 VL_M flag564
    SELECTF flag564 0.0 tmpf564 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while567:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 VX_M endwhile567
  whilebody567:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2DUS:CALLSUB569 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2DUS
CALLSUB569:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 VX_M whilebody567
  endwhile567:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_REDL:CALLSUB572 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_REDL
CALLSUB572:
    WRITE32 ENDSUB_BELLAM:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BELLAM
CALLSUB573:
    MOVEF_F 1400.0 VS_M
    WRITE32 ENDSUB_US:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_US
CALLSUB574:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_PL:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_PL
CALLSUB576:
    CALL MOTOR.RESETCOUNT 'bc'
  while578:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf582
    DATA8 flag582
    DIVF F.1 2.0 tmpf582
    CP_EQF 0.0 2.0 flag582
    SELECTF flag582 0.0 tmpf582 F.0

    JR_GTEQF F.0 200.0 endwhile578
  whilebody578:
    WRITE32 ENDSUB_A3:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB583:
    WRITE32 ENDSUB_A2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB584:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB585 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB585:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf589
    DATA8 flag589
    DIVF F.1 2.0 tmpf589
    CP_EQF 0.0 2.0 flag589
    SELECTF flag589 0.0 tmpf589 F.0

    JR_LTF F.0 200.0 whilebody578
  endwhile578:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds592
	MOVEF_32 500.0 milliseconds592
	DATA32 timer592
	TIMER_WAIT milliseconds592 timer592
	TIMER_READY timer592
    CALL MOTOR.STOP 'd' 'true'
    DATA32 tmp594
    CALL GETANDINC32 RUNCOUNTER_VIDVIG 1  RUNCOUNTER_VIDVIG tmp594
    JR_NEQ32 0 tmp594 alreadylaunched594
    OBJECT_START TVIDVIG
  alreadylaunched594:
    WRITE32 ENDSUB_NPL:CALLSUB595 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB595:
    WRITE32 ENDSUB_A3:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB596:
    WRITE32 ENDSUB_A2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB597:
  while598:
    JR_LTEQF VS3_M 15.0 and600
    JR_GTF VS2_M 15.0 or599
  and600:
    JR_GTEQF VS3_M 15.0 endwhile598
    JR_GTEQF VS2_M 15.0 endwhile598
  or599:
  whilebody598:
    WRITE32 ENDSUB_A3:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB601:
    WRITE32 ENDSUB_A2:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB602:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB603:
    JR_LTEQF VS3_M 15.0 and604
    JR_GTF VS2_M 15.0 whilebody598
  and604:
    JR_GTEQF VS3_M 15.0 and605
    JR_LTF VS2_M 15.0 whilebody598
  and605:
  endwhile598:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer607
	DATA8 nos607
	DATA8 busy607
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer607 nos607
	JR_EQ8 0 nos607 motornotbusy607
  motorwaiting607:
	OUTPUT_TEST layer607 nos607 busy607
	JR_EQ8 busy607 0 motornotbusy607
	SLEEP
	JR motorwaiting607
  motornotbusy607:
    WRITE32 ENDSUB_A3:CALLSUB608 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB608:
    WRITE32 ENDSUB_A2:CALLSUB609 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB609:
  while610:
    JR_LTEQF VS3_M 15.0 and612
    JR_GTF VS2_M 15.0 or611
  and612:
    JR_GTEQF VS3_M 15.0 endwhile610
    JR_GTEQF VS2_M 15.0 endwhile610
  or611:
  whilebody610:
    WRITE32 ENDSUB_A3:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB613:
    WRITE32 ENDSUB_A2:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB614:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB615:
    JR_LTEQF VS3_M 15.0 and616
    JR_GTF VS2_M 15.0 whilebody610
  and616:
    JR_GTEQF VS3_M 15.0 and617
    JR_LTF VS2_M 15.0 whilebody610
  and617:
  endwhile610:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RED_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RED_1:
SUB_SB1:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 -40.0 200.0 'true'

	DATA8 layer619
	DATA8 nos619
	DATA8 busy619
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer619 nos619
	JR_EQ8 0 nos619 motornotbusy619
  motorwaiting619:
	OUTPUT_TEST layer619 nos619 busy619
	JR_EQ8 busy619 0 motornotbusy619
	SLEEP
	JR motorwaiting619
  motornotbusy619:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 40.0 300.0 'true'

	DATA8 layer620
	DATA8 nos620
	DATA8 busy620
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer620 nos620
	JR_EQ8 0 nos620 motornotbusy620
  motorwaiting620:
	OUTPUT_TEST layer620 nos620 busy620
	JR_EQ8 busy620 0 motornotbusy620
	SLEEP
	JR motorwaiting620
  motornotbusy620:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB622:
    WRITE32 ENDSUB_A2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB623:
  while624:
    JR_LTEQF VS2_M 10.0 endwhile624
  whilebody624:
    WRITE32 ENDSUB_A3:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB625:
    WRITE32 ENDSUB_A2:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB626:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 10.0 whilebody624
  endwhile624:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB629:
    WRITE32 ENDSUB_A2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB630:
  while631:
    JR_GTEQF VS2_M 15.0 endwhile631
  whilebody631:
    WRITE32 ENDSUB_A3:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB632:
    WRITE32 ENDSUB_A2:CALLSUB633 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB633:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody631
  endwhile631:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds636
	MOVEF_32 100.0 milliseconds636
	DATA32 timer636
	TIMER_WAIT milliseconds636 timer636
	TIMER_READY timer636
    CALL MOTOR.RESETCOUNT 'bc'
  while638:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf642
    DATA8 flag642
    DIVF F.1 2.0 tmpf642
    CP_EQF 0.0 2.0 flag642
    SELECTF flag642 0.0 tmpf642 F.0

    JR_GTEQF F.0 200.0 endwhile638
  whilebody638:
    WRITE32 ENDSUB_A3:CALLSUB643 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB643:
    WRITE32 ENDSUB_A2:CALLSUB644 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB644:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB645 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB645:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf649
    DATA8 flag649
    DIVF F.1 2.0 tmpf649
    CP_EQF 0.0 2.0 flag649
    SELECTF flag649 0.0 tmpf649 F.0

    JR_LTF F.0 200.0 whilebody638
  endwhile638:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB651:
    WRITE32 ENDSUB_A2:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB652:
  while653:
    JR_LTEQF VS3_M 10.0 and655
    JR_GTF VS2_M 10.0 or654
  and655:
    JR_GTEQF VS3_M 10.0 endwhile653
    JR_GTEQF VS2_M 10.0 endwhile653
  or654:
  whilebody653:
    WRITE32 ENDSUB_A3:CALLSUB656 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB656:
    WRITE32 ENDSUB_A2:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB657:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB658:
    JR_LTEQF VS3_M 10.0 and659
    JR_GTF VS2_M 10.0 whilebody653
  and659:
    JR_GTEQF VS3_M 10.0 and660
    JR_LTF VS2_M 10.0 whilebody653
  and660:
  endwhile653:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_SB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SB1:
SUB_HSV:
    DATA8 layer662
	DATA8 no662
	DATA8 mode8662
	
	MOVEF_8 1.0 no662
	SUB8 no662 1 no662
	DIV8 no662 4 layer662
	MATH MOD8 no662 4 no662

	MOVEF_8 2.0 mode8662
	
	INPUT_DEVICE READY_RAW layer662 no662 0 mode8662 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf669
    DATA8 flag669
    DIVF VSRED_M 255.0 tmpf669
    CP_EQF 0.0 255.0 flag669
    SELECTF flag669 0.0 tmpf669 VSRED_M

    DATAF tmpf670
    DATA8 flag670
    DIVF VSGREEN_M 255.0 tmpf670
    CP_EQF 0.0 255.0 flag670
    SELECTF flag670 0.0 tmpf670 VSGREEN_M

    DATAF tmpf671
    DATA8 flag671
    DIVF VSBLUE_M 255.0 tmpf671
    CP_EQF 0.0 255.0 flag671
    SELECTF flag671 0.0 tmpf671 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else672_1
    JR_LTEQF VSRED_M VSBLUE_M else672_1
    MOVEF_F VSRED_M VMAX_M
    JR endif672
  else672_1:
    JR_LTEQF VSGREEN_M VSRED_M else672_2
    JR_LTEQF VSGREEN_M VSBLUE_M else672_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif672
  else672_2:
    JR_LTEQF VSBLUE_M VSRED_M else672_3
    JR_LTEQF VSBLUE_M VSGREEN_M else672_3
    MOVEF_F VSBLUE_M VMAX_M
  else672_3:
  endif672:
    JR_GTEQF VSRED_M VSGREEN_M else673_1
    JR_GTEQF VSRED_M VSBLUE_M else673_1
    MOVEF_F VSRED_M VMIN_M
    JR endif673
  else673_1:
    JR_GTEQF VSGREEN_M VSRED_M else673_2
    JR_GTEQF VSGREEN_M VSBLUE_M else673_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif673
  else673_2:
    JR_GTEQF VSBLUE_M VSRED_M else673_3
    JR_GTEQF VSBLUE_M VSGREEN_M else673_3
    MOVEF_F VSBLUE_M VMIN_M
  else673_3:
  endif673:
    JR_NEQF VMAX_M VMIN_M else674_1
    MOVEF_F 0.0 VH_M
    JR endif674
  else674_1:
    JR_NEQF VSRED_M VMAX_M else675_1
    JR_LTF VSGREEN_M VSBLUE_M else676_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf680
    DATA8 flag680
    DIVF F.0 F.1 tmpf680
    CP_EQF 0.0 F.1 flag680
    SELECTF flag680 0.0 tmpf680 VH_M

    JR endif676
  else676_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf684
    DATA8 flag684
    DIVF F.1 F.2 tmpf684
    CP_EQF 0.0 F.2 flag684
    SELECTF flag684 0.0 tmpf684 F.0

    ADDF F.0 360.0 VH_M
  else676_2:
  endif676:
    JR endif675
  else675_1:
    JR_NEQF VMAX_M VSGREEN_M else686_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf690
    DATA8 flag690
    DIVF F.1 F.2 tmpf690
    CP_EQF 0.0 F.2 flag690
    SELECTF flag690 0.0 tmpf690 F.0

    ADDF F.0 120.0 VH_M
    JR endif686
  else686_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf695
    DATA8 flag695
    DIVF F.1 F.2 tmpf695
    CP_EQF 0.0 F.2 flag695
    SELECTF flag695 0.0 tmpf695 F.0

    ADDF F.0 240.0 VH_M
  else686_2:
  endif686:
  else675_2:
  endif675:
  else674_2:
  endif674:
    JR_NEQF VMAX_M 0.0 else697_1
    MOVEF_F 0.0 VS_M
    JR endif697
  else697_1:
    DATAF tmpf698
    DATA8 flag698
    DIVF VMIN_M VMAX_M tmpf698
    CP_EQF 0.0 VMAX_M flag698
    SELECTF flag698 0.0 tmpf698 F.0

    SUBF 1.0 F.0 VS_M
  else697_2:
  endif697:
    MOVEF_F VMAX_M VV_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_HSV_100:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    DATA8 layer707
	DATA8 no707
	DATA8 mode8707
	
	MOVEF_8 1.0 no707
	SUB8 no707 1 no707
	DIV8 no707 4 layer707
	MATH MOD8 no707 4 no707

	MOVEF_8 2.0 mode8707
	
	INPUT_DEVICE READY_RAW layer707 no707 0 mode8707 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 1.0 VP_M
  for708:
    JR_GTF VP_M 100.0 endfor708
  forbody708:
    WRITE32 ENDSUB_HSV:CALLSUB709 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB709:
    ADDF VX_M VH_M VX_M
    ADDF VZ_M VS_M VZ_M
    ADDF VD_M VV_M VD_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody708
  endfor708:
    DATAF tmpf714
    DATA8 flag714
    DIVF VX_M 100.0 tmpf714
    CP_EQF 0.0 100.0 flag714
    SELECTF flag714 0.0 tmpf714 VH_M

    DATAF tmpf715
    DATA8 flag715
    DIVF VZ_M 100.0 tmpf715
    CP_EQF 0.0 100.0 flag715
    SELECTF flag715 0.0 tmpf715 VS_M

    DATAF tmpf716
    DATA8 flag716
    DIVF VD_M 100.0 tmpf716
    CP_EQF 0.0 100.0 flag716
    SELECTF flag716 0.0 tmpf716 VV_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV_100:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_100:
SUB_HSV_B:
    DATA8 layer724
	DATA8 no724
	DATA8 mode8724
	
	MOVEF_8 1.0 no724
	SUB8 no724 1 no724
	DIV8 no724 4 layer724
	MATH MOD8 no724 4 no724

	MOVEF_8 2.0 mode8724
	
	INPUT_DEVICE READY_RAW layer724 no724 0 mode8724 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf731
    DATA8 flag731
    DIVF VSRED_M 255.0 tmpf731
    CP_EQF 0.0 255.0 flag731
    SELECTF flag731 0.0 tmpf731 VSRED_M

    DATAF tmpf732
    DATA8 flag732
    DIVF VSGREEN_M 255.0 tmpf732
    CP_EQF 0.0 255.0 flag732
    SELECTF flag732 0.0 tmpf732 VSGREEN_M

    DATAF tmpf733
    DATA8 flag733
    DIVF VSBLUE_M 255.0 tmpf733
    CP_EQF 0.0 255.0 flag733
    SELECTF flag733 0.0 tmpf733 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else734_1
    JR_LTEQF VSRED_M VSBLUE_M else734_1
    MOVEF_F VSRED_M VMAX_M
    JR endif734
  else734_1:
    JR_LTEQF VSGREEN_M VSRED_M else734_2
    JR_LTEQF VSGREEN_M VSBLUE_M else734_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif734
  else734_2:
    JR_LTEQF VSBLUE_M VSRED_M else734_3
    JR_LTEQF VSBLUE_M VSGREEN_M else734_3
    MOVEF_F VSBLUE_M VMAX_M
  else734_3:
  endif734:
    JR_GTEQF VSRED_M VSGREEN_M else735_1
    JR_GTEQF VSRED_M VSBLUE_M else735_1
    MOVEF_F VSRED_M VMIN_M
    JR endif735
  else735_1:
    JR_GTEQF VSGREEN_M VSRED_M else735_2
    JR_GTEQF VSGREEN_M VSBLUE_M else735_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif735
  else735_2:
    JR_GTEQF VSBLUE_M VSRED_M else735_3
    JR_GTEQF VSBLUE_M VSGREEN_M else735_3
    MOVEF_F VSBLUE_M VMIN_M
  else735_3:
  endif735:
    JR_NEQF VMAX_M VMIN_M else736_1
    MOVEF_F 0.0 VH_M
    JR endif736
  else736_1:
    JR_NEQF VSRED_M VMAX_M else737_1
    JR_LTF VSGREEN_M VSBLUE_M else738_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf742
    DATA8 flag742
    DIVF F.0 F.1 tmpf742
    CP_EQF 0.0 F.1 flag742
    SELECTF flag742 0.0 tmpf742 VH_M

    JR endif738
  else738_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf746
    DATA8 flag746
    DIVF F.1 F.2 tmpf746
    CP_EQF 0.0 F.2 flag746
    SELECTF flag746 0.0 tmpf746 F.0

    ADDF F.0 360.0 VH_M
  else738_2:
  endif738:
    JR endif737
  else737_1:
    JR_NEQF VMAX_M VSGREEN_M else748_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf752
    DATA8 flag752
    DIVF F.1 F.2 tmpf752
    CP_EQF 0.0 F.2 flag752
    SELECTF flag752 0.0 tmpf752 F.0

    ADDF F.0 120.0 VH_M
    JR endif748
  else748_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf757
    DATA8 flag757
    DIVF F.1 F.2 tmpf757
    CP_EQF 0.0 F.2 flag757
    SELECTF flag757 0.0 tmpf757 F.0

    ADDF F.0 240.0 VH_M
  else748_2:
  endif748:
  else737_2:
  endif737:
  else736_2:
  endif736:
    JR_NEQF VMAX_M 0.0 else759_1
    MOVEF_F 0.0 VS_M
    JR endif759
  else759_1:
    DATAF tmpf760
    DATA8 flag760
    DIVF VMIN_M VMAX_M tmpf760
    CP_EQF 0.0 VMAX_M flag760
    SELECTF flag760 0.0 tmpf760 F.0

    SUBF 1.0 F.0 VS_M
  else759_2:
  endif759:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 300.0 and764
    JR_LTF VH_M 360.0 or763
  and764:
    JR_LTF VH_M 0.0 else762_1
    JR_GTF VH_M 20.0 else762_1
    JR_LTEQF VS_M 0.3 else762_1
    JR_GTF VS_M 1.0 else762_1
    JR_LTEQF VV_M 0.025 else762_1
    JR_GTEQF VV_M 0.1 else762_1
  or763:
    MOVEF_F 5.0 VCOLOR_M
    JR endif762
  else762_1:
    JR_LTF VH_M 20.0 else762_2
    JR_GTEQF VH_M 60.0 else762_2
    JR_LTF VS_M 0.4 else762_2
    JR_LTEQF VV_M 0.03 else762_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif762
  else762_2:
    MOVEF_F 6.0 VCOLOR_M
  else762_3:
  endif762:
RETSUB_HSV_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_B:
SUB_HSV_D:
    DATA8 layer765
	DATA8 no765
	DATA8 mode8765
	
	MOVEF_8 1.0 no765
	SUB8 no765 1 no765
	DIV8 no765 4 layer765
	MATH MOD8 no765 4 no765

	MOVEF_8 2.0 mode8765
	
	INPUT_DEVICE READY_RAW layer765 no765 0 mode8765 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf772
    DATA8 flag772
    DIVF VSRED_M 255.0 tmpf772
    CP_EQF 0.0 255.0 flag772
    SELECTF flag772 0.0 tmpf772 VSRED_M

    DATAF tmpf773
    DATA8 flag773
    DIVF VSGREEN_M 255.0 tmpf773
    CP_EQF 0.0 255.0 flag773
    SELECTF flag773 0.0 tmpf773 VSGREEN_M

    DATAF tmpf774
    DATA8 flag774
    DIVF VSBLUE_M 255.0 tmpf774
    CP_EQF 0.0 255.0 flag774
    SELECTF flag774 0.0 tmpf774 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else775_1
    JR_LTEQF VSRED_M VSBLUE_M else775_1
    MOVEF_F VSRED_M VMAX_M
    JR endif775
  else775_1:
    JR_LTEQF VSGREEN_M VSRED_M else775_2
    JR_LTEQF VSGREEN_M VSBLUE_M else775_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif775
  else775_2:
    JR_LTEQF VSBLUE_M VSRED_M else775_3
    JR_LTEQF VSBLUE_M VSGREEN_M else775_3
    MOVEF_F VSBLUE_M VMAX_M
  else775_3:
  endif775:
    JR_GTEQF VSRED_M VSGREEN_M else776_1
    JR_GTEQF VSRED_M VSBLUE_M else776_1
    MOVEF_F VSRED_M VMIN_M
    JR endif776
  else776_1:
    JR_GTEQF VSGREEN_M VSRED_M else776_2
    JR_GTEQF VSGREEN_M VSBLUE_M else776_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif776
  else776_2:
    JR_GTEQF VSBLUE_M VSRED_M else776_3
    JR_GTEQF VSBLUE_M VSGREEN_M else776_3
    MOVEF_F VSBLUE_M VMIN_M
  else776_3:
  endif776:
    JR_NEQF VMAX_M VMIN_M else777_1
    MOVEF_F 0.0 VH_M
    JR endif777
  else777_1:
    JR_NEQF VSRED_M VMAX_M else778_1
    JR_LTF VSGREEN_M VSBLUE_M else779_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf783
    DATA8 flag783
    DIVF F.0 F.1 tmpf783
    CP_EQF 0.0 F.1 flag783
    SELECTF flag783 0.0 tmpf783 VH_M

    JR endif779
  else779_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf787
    DATA8 flag787
    DIVF F.1 F.2 tmpf787
    CP_EQF 0.0 F.2 flag787
    SELECTF flag787 0.0 tmpf787 F.0

    ADDF F.0 360.0 VH_M
  else779_2:
  endif779:
    JR endif778
  else778_1:
    JR_NEQF VMAX_M VSGREEN_M else789_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf793
    DATA8 flag793
    DIVF F.1 F.2 tmpf793
    CP_EQF 0.0 F.2 flag793
    SELECTF flag793 0.0 tmpf793 F.0

    ADDF F.0 120.0 VH_M
    JR endif789
  else789_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf798
    DATA8 flag798
    DIVF F.1 F.2 tmpf798
    CP_EQF 0.0 F.2 flag798
    SELECTF flag798 0.0 tmpf798 F.0

    ADDF F.0 240.0 VH_M
  else789_2:
  endif789:
  else778_2:
  endif778:
  else777_2:
  endif777:
    JR_NEQF VMAX_M 0.0 else800_1
    MOVEF_F 0.0 VS_M
    JR endif800
  else800_1:
    DATAF tmpf801
    DATA8 flag801
    DIVF VMIN_M VMAX_M tmpf801
    CP_EQF 0.0 VMAX_M flag801
    SELECTF flag801 0.0 tmpf801 F.0

    SUBF 1.0 F.0 VS_M
  else800_2:
  endif800:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 200.0 and805
    JR_LTF VH_M 360.0 or804
  and805:
    JR_LTF VH_M 0.0 else803_1
    JR_GTF VH_M 30.0 else803_1
    JR_LTEQF VS_M 0.3 else803_1
    JR_GTF VS_M 1.0 else803_1
    JR_LTF VV_M 0.0 else803_1
    JR_GTEQF VV_M 0.02 else803_1
  or804:
    MOVEF_F 5.0 VCOLOR_M
    JR endif803
  else803_1:
    JR_LTF VH_M 0.0 else803_2
    JR_GTEQF VH_M 60.0 else803_2
    JR_LTF VS_M 0.4 else803_2
    JR_GTF VS_M 1.0 else803_2
    JR_LTEQF VV_M 0.003 else803_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif803
  else803_2:
    MOVEF_F 6.0 VCOLOR_M
  else803_3:
  endif803:
RETSUB_HSV_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_D:
SUB_HSV_RGB_B:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer806
	DATA8 no806
	DATA8 mode8806
	
	MOVEF_8 1.0 no806
	SUB8 no806 1 no806
	DIV8 no806 4 layer806
	MATH MOD8 no806 4 no806

	MOVEF_8 2.0 mode8806
	
	INPUT_DEVICE READY_RAW layer806 no806 0 mode8806 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV:CALLSUB808 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB808:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    DATA32 milliseconds817
	MOVEF_32 100.0 milliseconds817
	DATA32 timer817
	TIMER_WAIT milliseconds817 timer817
	TIMER_READY timer817
    MOVEF_F 1.0 VP_M
  for818:
    JR_GTF VP_M 100.0 endfor818
  forbody818:
    WRITE32 ENDSUB_HSV_B:CALLSUB819 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_B
CALLSUB819:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody818
  endfor818:
    DATAF tmpf822
    DATA8 flag822
    DIVF VX_M 100.0 tmpf822
    CP_EQF 0.0 100.0 flag822
    SELECTF flag822 0.0 tmpf822 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds826
	MOVEF_32 100.0 milliseconds826
	DATA32 timer826
	TIMER_WAIT milliseconds826 timer826
	TIMER_READY timer826
    JR_LTEQF VH_M 100.0 and829
    JR_LTF VH_M 360.0 or828
  and829:
    JR_LTF VH_M 0.0 else827_1
    JR_GTF VH_M 20.0 else827_1
    JR_LTEQF VS_M 0.3 else827_1
    JR_GTF VS_M 1.0 else827_1
    JR_LTEQF VV_M 0.025 else827_1
    JR_GTEQF VV_M 0.1 else827_1
  or828:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif827
  else827_1:
    JR_LTF VH_M 20.0 else827_2
    JR_GTEQF VH_M 60.0 else827_2
    JR_LTF VS_M 0.4 else827_2
    JR_LTEQF VV_M 0.03 else827_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif827
  else827_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else827_3:
  endif827:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds839
	MOVEF_32 1000.0 milliseconds839
	DATA32 timer839
	TIMER_WAIT milliseconds839 timer839
	TIMER_READY timer839
RETSUB_HSV_RGB_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_B:
SUB_HSV_RGB_D:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer840
	DATA8 no840
	DATA8 mode8840
	
	MOVEF_8 1.0 no840
	SUB8 no840 1 no840
	DIV8 no840 4 layer840
	MATH MOD8 no840 4 no840

	MOVEF_8 2.0 mode8840
	
	INPUT_DEVICE READY_RAW layer840 no840 0 mode8840 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV_D:CALLSUB842 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB842:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    MOVEF_F 1.0 VP_M
  for851:
    JR_GTF VP_M 100.0 endfor851
  forbody851:
    WRITE32 ENDSUB_HSV_D:CALLSUB852 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB852:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody851
  endfor851:
    DATAF tmpf855
    DATA8 flag855
    DIVF VX_M 100.0 tmpf855
    CP_EQF 0.0 100.0 flag855
    SELECTF flag855 0.0 tmpf855 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    JR_LTEQF VH_M 200.0 and861
    JR_LTF VH_M 360.0 or860
  and861:
    JR_LTF VH_M 0.0 else859_1
    JR_GTF VH_M 40.0 else859_1
    JR_LTEQF VS_M 0.3 else859_1
    JR_GTF VS_M 1.0 else859_1
    JR_LTF VV_M 0.0 else859_1
    JR_GTEQF VV_M 0.02 else859_1
  or860:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif859
  else859_1:
    JR_LTF VH_M 0.0 else859_2
    JR_GTEQF VH_M 100.0 else859_2
    JR_LTF VS_M 0.4 else859_2
    JR_GTF VS_M 1.0 else859_2
    JR_LTEQF VV_M 0.003 else859_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif859
  else859_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else859_3:
  endif859:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds871
	MOVEF_32 1000.0 milliseconds871
	DATA32 timer871
	TIMER_WAIT milliseconds871 timer871
	TIMER_READY timer871
RETSUB_HSV_RGB_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_D:
SUB_A3:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN3_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX3_M VMIN3_M F.1
    DATAF tmpf876
    DATA8 flag876
    DIVF F.0 F.1 tmpf876
    CP_EQF 0.0 F.1 flag876
    SELECTF flag876 0.0 tmpf876 VS3_M

RETSUB_A3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A3:
SUB_A2:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf881
    DATA8 flag881
    DIVF F.0 F.1 tmpf881
    CP_EQF 0.0 F.1 flag881
    SELECTF flag881 0.0 tmpf881 VS2_M

RETSUB_A2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A2:
SUB_POLIN2D:
    WRITE32 ENDSUB_A3:CALLSUB882 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB882:
    WRITE32 ENDSUB_A2:CALLSUB883 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB883:
    SUBF VS2_M VS3_M VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2D:
SUB_POLIN2DUS:
    WRITE32 ENDSUB_A3:CALLSUB893 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB893:
    WRITE32 ENDSUB_A2:CALLSUB894 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB894:
    SUBF VS2_M VS3_M VE_M
    MULF VK3_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2DUS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2DUS:
SUB_ZAMOROZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_ZAMOROZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZAMOROZ:
SUB_ZADVIG:
    CALL MOTOR.START 'a' 80.0
    DATA32 milliseconds908
	MOVEF_32 100.0 milliseconds908
	DATA32 timer908
	TIMER_WAIT milliseconds908 timer908
	TIMER_READY timer908
  while909:
    CALL MOTOR.GETSPEED 'a' F.0
    JR_LTEQF F.0 20.0 endwhile909
  whilebody909:
    CALL MOTOR.START 'a' 80.0
    CALL MOTOR.GETSPEED 'a' F.0
    JR_GTF F.0 20.0 whilebody909
  endwhile909:
    CALL MOTOR.STOP 'a' 'true'
RETSUB_ZADVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZADVIG:
SUB_VIDVIG:
    CALL MOTOR.START 'a' -80.0
    DATA32 milliseconds915
	MOVEF_32 350.0 milliseconds915
	DATA32 timer915
	TIMER_WAIT milliseconds915 timer915
	TIMER_READY timer915
    CALL MOTOR.STOP 'a' 'true'
RETSUB_VIDVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIDVIG:
SUB_VIRAV_NAZ:
    DATA8 layer917
	DATA8 no917
	DATA8 mode8917
	
	MOVEF_8 2.0 no917
	SUB8 no917 1 no917
	DIV8 no917 4 layer917
	MATH MOD8 no917 4 no917

	MOVEF_8 0.0 mode8917
	
	INPUT_DEVICE READY_RAW layer917 no917 0 mode8917 0
    DATA8 layer918
	DATA8 no918
	DATA8 mode8918
	
	MOVEF_8 3.0 no918
	SUB8 no918 1 no918
	DIV8 no918 4 layer918
	MATH MOD8 no918 4 no918

	MOVEF_8 0.0 mode8918
	
	INPUT_DEVICE READY_RAW layer918 no918 0 mode8918 0
  while919:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile919
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile919
  whilebody919:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and923
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody919
  and923:
  endwhile919:
    CALL MOTOR.STOP 'BC' 'True'
  while927:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile927
  whilebody927:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody927
  endwhile927:
    CALL MOTOR.STOP 'B' 'True'
  while932:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile932
  whilebody932:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody932
  endwhile932:
    CALL MOTOR.STOP 'C' 'True'
  while937:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile937
  whilebody937:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody937
  endwhile937:
    CALL MOTOR.STOP 'B' 'True'
  while942:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile942
  whilebody942:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody942
  endwhile942:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV_NAZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_NAZ:
SUB_VIRAV:
    DATA8 layer947
	DATA8 no947
	DATA8 mode8947
	
	MOVEF_8 2.0 no947
	SUB8 no947 1 no947
	DIV8 no947 4 layer947
	MATH MOD8 no947 4 no947

	MOVEF_8 0.0 mode8947
	
	INPUT_DEVICE READY_RAW layer947 no947 0 mode8947 0
    DATA8 layer948
	DATA8 no948
	DATA8 mode8948
	
	MOVEF_8 3.0 no948
	SUB8 no948 1 no948
	DIV8 no948 4 layer948
	MATH MOD8 no948 4 no948

	MOVEF_8 0.0 mode8948
	
	INPUT_DEVICE READY_RAW layer948 no948 0 mode8948 0
  while949:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile949
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile949
  whilebody949:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 and953
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody949
  and953:
  endwhile949:
    CALL MOTOR.STOP 'BC' 'True'
  while957:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile957
  whilebody957:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 7.0 whilebody957
  endwhile957:
    CALL MOTOR.STOP 'B' 'True'
  while962:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile962
  whilebody962:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody962
  endwhile962:
    CALL MOTOR.STOP 'C' 'True'
  while967:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 7.0 endwhile967
  whilebody967:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 7.0 whilebody967
  endwhile967:
    CALL MOTOR.STOP 'B' 'True'
  while972:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile972
  whilebody972:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody972
  endwhile972:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV:
SUB_RGB:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 F.0 VRECVARRAY_M
    CALL ARRAYSTORE_FLOAT VI_M F.0 VA_M
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 5.0 or982
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 14.0 or982
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 6.0 else981_1
  or982:
    CALL SPEAKER.NOTE 100.0 'C#1' 500.0
    JR endif981
  else981_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 1.0 or987
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 10.0 or987
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 7.0 or987
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 8.0 else981_2
  or987:
    CALL SPEAKER.NOTE 100.0 'C#5' 500.0
    JR endif981
  else981_2:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 3.0 or993
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 2.0 or993
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 4.0 else981_3
  or993:
    CALL SPEAKER.NOTE 50.0 'C#9' 1000.0
  else981_3:
  endif981:
RETSUB_RGB:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RGB:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
