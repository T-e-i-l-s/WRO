DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VG_M
DATAF VR_M
DATAF VY_M
DATAF VW_M
DATAF VCOLOR_M
DATAF VX_M
DATAF VC_M
DATAF VS_M
DATAF VMAX2_M
DATAF VMAX3_M
DATAF VMIN2_M
DATAF VMIN3_M
DATAF VK1_M
DATAF VK2_M
DATAF VK3_M
DATAF VK4_M
DATAF VS3_M
DATAF VS2_M
DATAF VSPEED_M
DATAF VSPEEDL_M
DATAF VSPEEDR_M
DATAF VEOLD_M
DATAF VN_M
DATAF VP_M
DATAF VI_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VE_M
DATAF VU_M
DATAF VL_M
DATAF VJ_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VV_M
DATAF VD_M
DATAF VZ_M
ARRAY16 VA_M 2
DATAF VF_M
DATA32 RUNCOUNTER_ZADVIG
DATA32 RUNCOUNTER_VIDVIG

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VK4_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYCREATE_FLOAT VA_M
    MOVEF_F 0.0 VF_M
    MOVE32_32 0 RUNCOUNTER_ZADVIG
    MOVE32_32 0 RUNCOUNTER_VIDVIG
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TZADVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_ZADVIG 0
    CALL GETANDINC32 RUNCOUNTER_ZADVIG -1 RUNCOUNTER_ZADVIG tmp
    JR_GT32 tmp 1 launch
}
vmthread TVIDVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_VIDVIG 1
    CALL GETANDINC32 RUNCOUNTER_VIDVIG -1 RUNCOUNTER_VIDVIG tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_ZADVIG
subcall PROGRAM_VIDVIG
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1103
    WRITE32 ENDSUB_ZADVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
  dispatch1103:
    JR_NEQ32 SUBPROGRAM 1 dispatch1104
    WRITE32 ENDSUB_VIDVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIDVIG
  dispatch1104:
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VK4_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_M
    MOVEF_F 0.0 VF_M
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    MOVEF_F 0.2 VK3_M
    MOVEF_F 0.0 VK4_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL EV3FILE.OPENREAD 'a123/colib.dat' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN3_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX3_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMIN2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMIN3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 30.0 30.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 1.0 S.0
    DATA32 milliseconds1021
	MOVEF_32 100.0 milliseconds1021
	DATA32 timer1021
	TIMER_WAIT milliseconds1021 timer1021
	TIMER_READY timer1021
    WRITE32 ENDSUB_A3:CALLSUB1022 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1022:
    WRITE32 ENDSUB_A2:CALLSUB1023 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1023:
  while1024:
    JR_LTEQF VS3_M 10.0 and1026
    JR_GTF VS2_M 10.0 or1025
  and1026:
    JR_GTEQF VS3_M 10.0 endwhile1024
    JR_GTEQF VS2_M 10.0 endwhile1024
  or1025:
  whilebody1024:
    WRITE32 ENDSUB_A3:CALLSUB1027 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1027:
    WRITE32 ENDSUB_A2:CALLSUB1028 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1028:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1029 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1029:
    JR_LTEQF VS3_M 10.0 and1030
    JR_GTF VS2_M 10.0 whilebody1024
  and1030:
    JR_GTEQF VS3_M 10.0 and1031
    JR_LTF VS2_M 10.0 whilebody1024
  and1031:
  endwhile1024:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer1033
	DATA8 nos1033
	DATA8 busy1033
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1033 nos1033
	JR_EQ8 0 nos1033 motornotbusy1033
  motorwaiting1033:
	OUTPUT_TEST layer1033 nos1033 busy1033
	JR_EQ8 busy1033 0 motornotbusy1033
	SLEEP
	JR motorwaiting1033
  motornotbusy1033:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer1034
	DATA8 nos1034
	DATA8 busy1034
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1034 nos1034
	JR_EQ8 0 nos1034 motornotbusy1034
  motorwaiting1034:
	OUTPUT_TEST layer1034 nos1034 busy1034
	JR_EQ8 busy1034 0 motornotbusy1034
	SLEEP
	JR motorwaiting1034
  motornotbusy1034:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds1037
	MOVEF_32 500.0 milliseconds1037
	DATA32 timer1037
	TIMER_WAIT milliseconds1037 timer1037
	TIMER_READY timer1037
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_ZADVIG:CALLSUB1039 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
CALLSUB1039:
    MOVEF_F 60.0 VSPEED_M
    CALL MOTOR.RESETCOUNT 'bc'
  while1041:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 550.0 endwhile1041
  whilebody1041:
    WRITE32 ENDSUB_POLIN2D:CALLSUB1043 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1043:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 550.0 whilebody1041
  endwhile1041:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_SB1:CALLSUB1046 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_SB1
CALLSUB1046:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 60.0 'true'

	DATA8 layer1047
	DATA8 nos1047
	DATA8 busy1047
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1047 nos1047
	JR_EQ8 0 nos1047 motornotbusy1047
  motorwaiting1047:
	OUTPUT_TEST layer1047 nos1047 busy1047
	JR_EQ8 busy1047 0 motornotbusy1047
	SLEEP
	JR motorwaiting1047
  motornotbusy1047:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB1049 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1049:
    WRITE32 ENDSUB_A2:CALLSUB1050 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1050:
  while1051:
    JR_LTEQF VS3_M 15.0 endwhile1051
  whilebody1051:
    WRITE32 ENDSUB_A3:CALLSUB1052 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1052:
    WRITE32 ENDSUB_A2:CALLSUB1053 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1053:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody1051
  endwhile1051:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB1056 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1056:
    WRITE32 ENDSUB_A2:CALLSUB1057 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1057:
  while1058:
    JR_GTEQF VS3_M 35.0 endwhile1058
  whilebody1058:
    WRITE32 ENDSUB_A3:CALLSUB1059 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1059:
    WRITE32 ENDSUB_A2:CALLSUB1060 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1060:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 35.0 whilebody1058
  endwhile1058:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB1064 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1064:
    WRITE32 ENDSUB_A2:CALLSUB1065 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1065:
  while1066:
    JR_LTEQF VS3_M 10.0 and1068
    JR_GTF VS2_M 10.0 or1067
  and1068:
    JR_GTEQF VS3_M 10.0 endwhile1066
    JR_GTEQF VS2_M 10.0 endwhile1066
  or1067:
  whilebody1066:
    WRITE32 ENDSUB_A3:CALLSUB1069 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1069:
    WRITE32 ENDSUB_A2:CALLSUB1070 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1070:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1071 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1071:
    JR_LTEQF VS3_M 10.0 and1072
    JR_GTF VS2_M 10.0 whilebody1066
  and1072:
    JR_GTEQF VS3_M 10.0 and1073
    JR_LTF VS2_M 10.0 whilebody1066
  and1073:
  endwhile1066:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    WRITE32 ENDSUB_PL:CALLSUB1075 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_PL
CALLSUB1075:
    CALL MOTOR.RESETCOUNT 'bc'
  while1077:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1081
    DATA8 flag1081
    DIVF F.1 2.0 tmpf1081
    CP_EQF 0.0 2.0 flag1081
    SELECTF flag1081 0.0 tmpf1081 F.0

    JR_GTEQF F.0 230.0 endwhile1077
  whilebody1077:
    MOVEF_F 30.0 VSPEED_M
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1082 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1082:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1086
    DATA8 flag1086
    DIVF F.1 2.0 tmpf1086
    CP_EQF 0.0 2.0 flag1086
    SELECTF flag1086 0.0 tmpf1086 F.0

    JR_LTF F.0 230.0 whilebody1077
  endwhile1077:
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds1089
	MOVEF_32 500.0 milliseconds1089
	DATA32 timer1089
	TIMER_WAIT milliseconds1089 timer1089
	TIMER_READY timer1089
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB1091 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB1091:
    WRITE32 ENDSUB_A3:CALLSUB1092 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1092:
    WRITE32 ENDSUB_A2:CALLSUB1093 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1093:
  while1094:
    JR_LTEQF VS3_M 10.0 and1096
    JR_GTF VS2_M 10.0 or1095
  and1096:
    JR_GTEQF VS3_M 10.0 endwhile1094
    JR_GTEQF VS2_M 10.0 endwhile1094
  or1095:
  whilebody1094:
    WRITE32 ENDSUB_A3:CALLSUB1097 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1097:
    WRITE32 ENDSUB_A2:CALLSUB1098 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1098:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1099 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1099:
    JR_LTEQF VS3_M 10.0 and1100
    JR_GTF VS2_M 10.0 whilebody1094
  and1100:
    JR_GTEQF VS3_M 10.0 and1101
    JR_LTF VS2_M 10.0 whilebody1094
  and1101:
  endwhile1094:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
ENDTHREAD:
    RETURN
SUB_A3:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN3_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX3_M VMIN3_M F.1
    DATAF tmpf11
    DATA8 flag11
    DIVF F.0 F.1 tmpf11
    CP_EQF 0.0 F.1 flag11
    SELECTF flag11 0.0 tmpf11 VS3_M

RETSUB_A3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A3:
SUB_A2:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf16
    DATA8 flag16
    DIVF F.0 F.1 tmpf16
    CP_EQF 0.0 F.1 flag16
    SELECTF flag16 0.0 tmpf16 VS2_M

RETSUB_A2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A2:
SUB_POLIN2D:
    WRITE32 ENDSUB_A3:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB17:
    WRITE32 ENDSUB_A2:CALLSUB18 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB18:
    SUBF VS2_M VS3_M VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2D:
SUB_POLIN2DUS:
    WRITE32 ENDSUB_A3:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB28:
    WRITE32 ENDSUB_A2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB29:
    SUBF VS2_M VS3_M VE_M
    MULF VK3_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK4_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2DUS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2DUS:
SUB_ZAMOROZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_ZAMOROZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZAMOROZ:
SUB_ZADVIG:
    CALL MOTOR.START 'a' 80.0
    DATA32 milliseconds43
	MOVEF_32 100.0 milliseconds43
	DATA32 timer43
	TIMER_WAIT milliseconds43 timer43
	TIMER_READY timer43
  while44:
    CALL MOTOR.GETSPEED 'a' F.0
    JR_LTEQF F.0 20.0 endwhile44
  whilebody44:
    CALL MOTOR.START 'a' 80.0
    CALL MOTOR.GETSPEED 'a' F.0
    JR_GTF F.0 20.0 whilebody44
  endwhile44:
    CALL MOTOR.STOP 'a' 'true'
RETSUB_ZADVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZADVIG:
SUB_VIDVIG:
    CALL MOTOR.START 'a' -80.0
    DATA32 milliseconds50
	MOVEF_32 350.0 milliseconds50
	DATA32 timer50
	TIMER_WAIT milliseconds50 timer50
	TIMER_READY timer50
    CALL MOTOR.STOP 'a' 'true'
RETSUB_VIDVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIDVIG:
SUB_VIRAV_NAZ:
    DATA8 layer52
	DATA8 no52
	DATA8 mode852
	
	MOVEF_8 2.0 no52
	SUB8 no52 1 no52
	DIV8 no52 4 layer52
	MATH MOD8 no52 4 no52

	MOVEF_8 0.0 mode852
	
	INPUT_DEVICE READY_RAW layer52 no52 0 mode852 0
    DATA8 layer53
	DATA8 no53
	DATA8 mode853
	
	MOVEF_8 3.0 no53
	SUB8 no53 1 no53
	DIV8 no53 4 layer53
	MATH MOD8 no53 4 no53

	MOVEF_8 0.0 mode853
	
	INPUT_DEVICE READY_RAW layer53 no53 0 mode853 0
  while54:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile54
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile54
  whilebody54:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and58
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody54
  and58:
  endwhile54:
    CALL MOTOR.STOP 'BC' 'True'
  while62:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile62
  whilebody62:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody62
  endwhile62:
    CALL MOTOR.STOP 'B' 'True'
  while67:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile67
  whilebody67:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody67
  endwhile67:
    CALL MOTOR.STOP 'C' 'True'
  while72:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile72
  whilebody72:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody72
  endwhile72:
    CALL MOTOR.STOP 'B' 'True'
  while77:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile77
  whilebody77:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody77
  endwhile77:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV_NAZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_NAZ:
SUB_VIRAV:
    DATA8 layer82
	DATA8 no82
	DATA8 mode882
	
	MOVEF_8 2.0 no82
	SUB8 no82 1 no82
	DIV8 no82 4 layer82
	MATH MOD8 no82 4 no82

	MOVEF_8 0.0 mode882
	
	INPUT_DEVICE READY_RAW layer82 no82 0 mode882 0
    DATA8 layer83
	DATA8 no83
	DATA8 mode883
	
	MOVEF_8 3.0 no83
	SUB8 no83 1 no83
	DIV8 no83 4 layer83
	MATH MOD8 no83 4 no83

	MOVEF_8 0.0 mode883
	
	INPUT_DEVICE READY_RAW layer83 no83 0 mode883 0
  while84:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile84
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile84
  whilebody84:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 and88
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody84
  and88:
  endwhile84:
    CALL MOTOR.STOP 'BC' 'True'
  while92:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile92
  whilebody92:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 7.0 whilebody92
  endwhile92:
    CALL MOTOR.STOP 'B' 'True'
  while97:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile97
  whilebody97:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody97
  endwhile97:
    CALL MOTOR.STOP 'C' 'True'
  while102:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 7.0 endwhile102
  whilebody102:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 7.0 whilebody102
  endwhile102:
    CALL MOTOR.STOP 'B' 'True'
  while107:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile107
  whilebody107:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody107
  endwhile107:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV:
SUB_US:
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf112
    DATA8 flag112
    DIVF 360.0 VL_M tmpf112
    CP_EQF 0.0 VL_M flag112
    SELECTF flag112 0.0 tmpf112 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while115:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf119
    DATA8 flag119
    DIVF F.1 2.0 tmpf119
    CP_EQF 0.0 2.0 flag119
    SELECTF flag119 0.0 tmpf119 F.0

    JR_GTEQF F.0 VX_M endwhile115
  whilebody115:
    WRITE32 ENDSUB_A3:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB120:
    WRITE32 ENDSUB_A2:CALLSUB121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB121:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB122:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf126
    DATA8 flag126
    DIVF F.1 2.0 tmpf126
    CP_EQF 0.0 2.0 flag126
    SELECTF flag126 0.0 tmpf126 F.0

    JR_LTF F.0 VX_M whilebody115
  endwhile115:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB128:
    WRITE32 ENDSUB_A2:CALLSUB129 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB129:
  while130:
    JR_LTEQF VS3_M 15.0 and132
    JR_GTF VS2_M 15.0 or131
  and132:
    JR_GTEQF VS3_M 15.0 endwhile130
    JR_GTEQF VS2_M 15.0 endwhile130
  or131:
  whilebody130:
    WRITE32 ENDSUB_A3:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB133:
    WRITE32 ENDSUB_A2:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB134:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB135:
    JR_LTEQF VS3_M 15.0 and136
    JR_GTF VS2_M 15.0 whilebody130
  and136:
    JR_GTEQF VS3_M 15.0 and137
    JR_LTF VS2_M 15.0 whilebody130
  and137:
  endwhile130:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_US:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_US:
SUB_PL:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer139
	DATA8 nos139
	DATA8 busy139
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer139 nos139
	JR_EQ8 0 nos139 motornotbusy139
  motorwaiting139:
	OUTPUT_TEST layer139 nos139 busy139
	JR_EQ8 busy139 0 motornotbusy139
	SLEEP
	JR motorwaiting139
  motornotbusy139:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB141:
    WRITE32 ENDSUB_A2:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB142:
  while143:
    JR_LTEQF VS2_M 15.0 endwhile143
  whilebody143:
    WRITE32 ENDSUB_A3:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB144:
    WRITE32 ENDSUB_A2:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB145:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody143
  endwhile143:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB148:
    WRITE32 ENDSUB_A2:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB149:
  while150:
    JR_GTEQF VS2_M 55.0 endwhile150
  whilebody150:
    WRITE32 ENDSUB_A3:CALLSUB151 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB151:
    WRITE32 ENDSUB_A2:CALLSUB152 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB152:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 55.0 whilebody150
  endwhile150:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PL:
SUB_PR:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer155
	DATA8 nos155
	DATA8 busy155
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer155 nos155
	JR_EQ8 0 nos155 motornotbusy155
  motorwaiting155:
	OUTPUT_TEST layer155 nos155 busy155
	JR_EQ8 busy155 0 motornotbusy155
	SLEEP
	JR motorwaiting155
  motornotbusy155:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB157:
    WRITE32 ENDSUB_A2:CALLSUB158 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB158:
  while159:
    JR_LTEQF VS3_M 15.0 endwhile159
  whilebody159:
    WRITE32 ENDSUB_A3:CALLSUB160 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB160:
    WRITE32 ENDSUB_A2:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB161:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody159
  endwhile159:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB164:
    WRITE32 ENDSUB_A2:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB165:
  while166:
    JR_GTEQF VS3_M 60.0 endwhile166
  whilebody166:
    WRITE32 ENDSUB_A3:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB167:
    WRITE32 ENDSUB_A2:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB168:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 60.0 whilebody166
  endwhile166:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PR:
SUB_NPL:
    WRITE32 ENDSUB_VIRAV_NAZ:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_NAZ
CALLSUB171:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 40.0 'true'

	DATA8 layer172
	DATA8 nos172
	DATA8 busy172
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer172 nos172
	JR_EQ8 0 nos172 motornotbusy172
  motorwaiting172:
	OUTPUT_TEST layer172 nos172 busy172
	JR_EQ8 busy172 0 motornotbusy172
	SLEEP
	JR motorwaiting172
  motornotbusy172:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer174
	DATA8 nos174
	DATA8 busy174
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer174 nos174
	JR_EQ8 0 nos174 motornotbusy174
  motorwaiting174:
	OUTPUT_TEST layer174 nos174 busy174
	JR_EQ8 busy174 0 motornotbusy174
	SLEEP
	JR motorwaiting174
  motornotbusy174:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB176:
    WRITE32 ENDSUB_A2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB177:
  while178:
    JR_LTEQF VS2_M 10.0 endwhile178
  whilebody178:
    WRITE32 ENDSUB_A3:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB179:
    WRITE32 ENDSUB_A2:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB180:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody178
  endwhile178:
    WRITE32 ENDSUB_A3:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB182:
    WRITE32 ENDSUB_A2:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB183:
  while184:
    JR_GTEQF VS2_M 60.0 endwhile184
  whilebody184:
    WRITE32 ENDSUB_A3:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB185:
    WRITE32 ENDSUB_A2:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB186:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody184
  endwhile184:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPL:
SUB_NPP:
    WRITE32 ENDSUB_VIRAV_NAZ:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_NAZ
CALLSUB189:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 30.0 'true'

	DATA8 layer190
	DATA8 nos190
	DATA8 busy190
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer190 nos190
	JR_EQ8 0 nos190 motornotbusy190
  motorwaiting190:
	OUTPUT_TEST layer190 nos190 busy190
	JR_EQ8 busy190 0 motornotbusy190
	SLEEP
	JR motorwaiting190
  motornotbusy190:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 90.0 'true'

	DATA8 layer192
	DATA8 nos192
	DATA8 busy192
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer192 nos192
	JR_EQ8 0 nos192 motornotbusy192
  motorwaiting192:
	OUTPUT_TEST layer192 nos192 busy192
	JR_EQ8 busy192 0 motornotbusy192
	SLEEP
	JR motorwaiting192
  motornotbusy192:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB194:
    WRITE32 ENDSUB_A2:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB195:
  while196:
    JR_LTEQF VS3_M 10.0 endwhile196
  whilebody196:
    WRITE32 ENDSUB_A3:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB197:
    WRITE32 ENDSUB_A2:CALLSUB198 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB198:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody196
  endwhile196:
    WRITE32 ENDSUB_A3:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB200:
    WRITE32 ENDSUB_A2:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB201:
  while202:
    JR_GTEQF VS3_M 55.0 endwhile202
  whilebody202:
    WRITE32 ENDSUB_A3:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB203:
    WRITE32 ENDSUB_A2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB204:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 55.0 whilebody202
  endwhile202:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPP:
SUB_REDL:
    DATA32 tmp207
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp207
    JR_NEQ32 0 tmp207 alreadylaunched207
    OBJECT_START TZADVIG
  alreadylaunched207:
    WRITE32 ENDSUB_A3:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB208:
    WRITE32 ENDSUB_A2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB209:
  while210:
    JR_LTEQF VS3_M 10.0 and212
    JR_GTF VS2_M 10.0 or211
  and212:
    JR_GTEQF VS3_M 10.0 and213
    JR_GTF VS2_M 10.0 or211
  and213:
    JR_LTEQF VS3_M 10.0 endwhile210
    JR_GTEQF VS2_M 10.0 endwhile210
  or211:
  whilebody210:
    WRITE32 ENDSUB_A3:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB214:
    WRITE32 ENDSUB_A2:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB215:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB216:
    JR_LTEQF VS3_M 10.0 and217
    JR_GTF VS2_M 10.0 whilebody210
  and217:
    JR_GTEQF VS3_M 10.0 and218
    JR_GTF VS2_M 10.0 whilebody210
  and218:
    JR_LTEQF VS3_M 10.0 and219
    JR_LTF VS2_M 10.0 whilebody210
  and219:
  endwhile210:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer221
	DATA8 nos221
	DATA8 busy221
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer221 nos221
	JR_EQ8 0 nos221 motornotbusy221
  motorwaiting221:
	OUTPUT_TEST layer221 nos221 busy221
	JR_EQ8 busy221 0 motornotbusy221
	SLEEP
	JR motorwaiting221
  motornotbusy221:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer222
	DATA8 nos222
	DATA8 busy222
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer222 nos222
	JR_EQ8 0 nos222 motornotbusy222
  motorwaiting222:
	OUTPUT_TEST layer222 nos222 busy222
	JR_EQ8 busy222 0 motornotbusy222
	SLEEP
	JR motorwaiting222
  motornotbusy222:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB225:
    WRITE32 ENDSUB_A3:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB226:
  while227:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile227
  whilebody227:
    WRITE32 ENDSUB_A2:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB229:
    WRITE32 ENDSUB_A3:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB230:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB231:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody227
  endwhile227:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds235
	MOVEF_32 500.0 milliseconds235
	DATA32 timer235
	TIMER_WAIT milliseconds235 timer235
	TIMER_READY timer235
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer237
	DATA8 nos237
	DATA8 busy237
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer237 nos237
	JR_EQ8 0 nos237 motornotbusy237
  motorwaiting237:
	OUTPUT_TEST layer237 nos237 busy237
	JR_EQ8 busy237 0 motornotbusy237
	SLEEP
	JR motorwaiting237
  motornotbusy237:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer238
	DATA8 nos238
	DATA8 busy238
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer238 nos238
	JR_EQ8 0 nos238 motornotbusy238
  motorwaiting238:
	OUTPUT_TEST layer238 nos238 busy238
	JR_EQ8 busy238 0 motornotbusy238
	SLEEP
	JR motorwaiting238
  motornotbusy238:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer239
	DATA8 nos239
	DATA8 busy239
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer239 nos239
	JR_EQ8 0 nos239 motornotbusy239
  motorwaiting239:
	OUTPUT_TEST layer239 nos239 busy239
	JR_EQ8 busy239 0 motornotbusy239
	SLEEP
	JR motorwaiting239
  motornotbusy239:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer240
	DATA8 nos240
	DATA8 busy240
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer240 nos240
	JR_EQ8 0 nos240 motornotbusy240
  motorwaiting240:
	OUTPUT_TEST layer240 nos240 busy240
	JR_EQ8 busy240 0 motornotbusy240
	SLEEP
	JR motorwaiting240
  motornotbusy240:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer241
	DATA8 nos241
	DATA8 busy241
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer241 nos241
	JR_EQ8 0 nos241 motornotbusy241
  motorwaiting241:
	OUTPUT_TEST layer241 nos241 busy241
	JR_EQ8 busy241 0 motornotbusy241
	SLEEP
	JR motorwaiting241
  motornotbusy241:
    WRITE32 ENDSUB_A2:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB242:
    WRITE32 ENDSUB_A3:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB243:
  while244:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile244
  whilebody244:
    WRITE32 ENDSUB_A2:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB246:
    WRITE32 ENDSUB_A3:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB247:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB248 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB248:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody244
  endwhile244:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer251
	DATA8 nos251
	DATA8 busy251
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer251 nos251
	JR_EQ8 0 nos251 motornotbusy251
  motorwaiting251:
	OUTPUT_TEST layer251 nos251 busy251
	JR_EQ8 busy251 0 motornotbusy251
	SLEEP
	JR motorwaiting251
  motornotbusy251:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer252
	DATA8 nos252
	DATA8 busy252
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer252 nos252
	JR_EQ8 0 nos252 motornotbusy252
  motorwaiting252:
	OUTPUT_TEST layer252 nos252 busy252
	JR_EQ8 busy252 0 motornotbusy252
	SLEEP
	JR motorwaiting252
  motornotbusy252:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_REDL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_REDL:
SUB_BELLAM:
  while254:
    JR_LTEQF VS3_M 15.0 and256
    JR_GTF VS2_M 15.0 or255
  and256:
    JR_GTEQF VS3_M 15.0 endwhile254
    JR_GTEQF VS2_M 15.0 endwhile254
  or255:
  whilebody254:
    WRITE32 ENDSUB_A3:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB257:
    WRITE32 ENDSUB_A2:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB258:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB259:
    JR_LTEQF VS3_M 15.0 and260
    JR_GTF VS2_M 15.0 whilebody254
  and260:
    JR_GTEQF VS3_M 15.0 and261
    JR_LTF VS2_M 15.0 whilebody254
  and261:
  endwhile254:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer263
	DATA8 nos263
	DATA8 busy263
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer263 nos263
	JR_EQ8 0 nos263 motornotbusy263
  motorwaiting263:
	OUTPUT_TEST layer263 nos263 busy263
	JR_EQ8 busy263 0 motornotbusy263
	SLEEP
	JR motorwaiting263
  motornotbusy263:
    WRITE32 ENDSUB_A3:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB264:
    WRITE32 ENDSUB_A2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB265:
  while266:
    JR_LTEQF VS3_M 15.0 endwhile266
  whilebody266:
    WRITE32 ENDSUB_A3:CALLSUB267 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB267:
    WRITE32 ENDSUB_A2:CALLSUB268 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB268:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody266
  endwhile266:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB271 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB271:
    WRITE32 ENDSUB_A2:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB272:
  while273:
    JR_GTEQF VS3_M 15.0 endwhile273
  whilebody273:
    WRITE32 ENDSUB_A3:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB274:
    WRITE32 ENDSUB_A2:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB275:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody273
  endwhile273:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while279:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile279
  whilebody279:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB281:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody279
  endwhile279:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB284:
    WRITE32 ENDSUB_A2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB285:
    MOVEF_F 1.0 VI_M
  for286:
    JR_GTF VI_M 1.0 endfor286
  forbody286:
    WRITE32 ENDSUB_A3:CALLSUB287 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB287:
    WRITE32 ENDSUB_A2:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB288:
  while289:
    JR_LTEQF VS3_M 15.0 and291
    JR_GTF VS2_M 15.0 or290
  and291:
    JR_GTEQF VS3_M 15.0 endwhile289
    JR_GTEQF VS2_M 15.0 endwhile289
  or290:
  whilebody289:
    WRITE32 ENDSUB_A3:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB292:
    WRITE32 ENDSUB_A2:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB293:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB294 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB294:
    JR_LTEQF VS3_M 15.0 and295
    JR_GTF VS2_M 15.0 whilebody289
  and295:
    JR_GTEQF VS3_M 15.0 and296
    JR_LTF VS2_M 15.0 whilebody289
  and296:
  endwhile289:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer298
	DATA8 nos298
	DATA8 busy298
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer298 nos298
	JR_EQ8 0 nos298 motornotbusy298
  motorwaiting298:
	OUTPUT_TEST layer298 nos298 busy298
	JR_EQ8 busy298 0 motornotbusy298
	SLEEP
	JR motorwaiting298
  motornotbusy298:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody286
  endfor286:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB301 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB301:
    WRITE32 ENDSUB_A2:CALLSUB302 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB302:
    MOVEF_F 80.0 VJ_M
  while303:
    JR_LTEQF VS3_M 15.0 endwhile303
  whilebody303:
    WRITE32 ENDSUB_A3:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB304:
    WRITE32 ENDSUB_A2:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB305:
    JR_LTEQF VJ_M 30.0 else306_1
    SUBF VJ_M 0.1 VJ_M
  else306_1:
  endif306:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody303
  endwhile303:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB310 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB310:
    WRITE32 ENDSUB_A2:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB311:
    MOVEF_F 80.0 VJ_M
  while312:
    JR_GTEQF VS3_M 25.0 endwhile312
  whilebody312:
    WRITE32 ENDSUB_A3:CALLSUB313 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB313:
    WRITE32 ENDSUB_A2:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB314:
    JR_LTEQF VJ_M 30.0 else315_1
    SUBF VJ_M 0.1 VJ_M
  else315_1:
  endif315:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 25.0 whilebody312
  endwhile312:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while320:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf324
    DATA8 flag324
    DIVF F.1 2.0 tmpf324
    CP_EQF 0.0 2.0 flag324
    SELECTF flag324 0.0 tmpf324 F.0

    JR_GTEQF F.0 50.0 endwhile320
  whilebody320:
    WRITE32 ENDSUB_A3:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB325:
    WRITE32 ENDSUB_A2:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB326:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_A3:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB327:
    WRITE32 ENDSUB_A2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB328:
    ADDF VMIN3_M VMAX3_M F.1
    DATAF tmpf330
    DATA8 flag330
    DIVF F.1 2.0 tmpf330
    CP_EQF 0.0 2.0 flag330
    SELECTF flag330 0.0 tmpf330 F.0

    SUBF VS3_M F.0 VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf342
    DATA8 flag342
    DIVF F.1 2.0 tmpf342
    CP_EQF 0.0 2.0 flag342
    SELECTF flag342 0.0 tmpf342 F.0

    JR_LTF F.0 50.0 whilebody320
  endwhile320:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer344
	DATA8 nos344
	DATA8 busy344
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer344 nos344
	JR_EQ8 0 nos344 motornotbusy344
  motorwaiting344:
	OUTPUT_TEST layer344 nos344 busy344
	JR_EQ8 busy344 0 motornotbusy344
	SLEEP
	JR motorwaiting344
  motornotbusy344:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds346
	MOVEF_32 500.0 milliseconds346
	DATA32 timer346
	TIMER_WAIT milliseconds346 timer346
	TIMER_READY timer346
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 50.0 'true'

	DATA8 layer348
	DATA8 nos348
	DATA8 busy348
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer348 nos348
	JR_EQ8 0 nos348 motornotbusy348
  motorwaiting348:
	OUTPUT_TEST layer348 nos348 busy348
	JR_EQ8 busy348 0 motornotbusy348
	SLEEP
	JR motorwaiting348
  motornotbusy348:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 350.0 'true'

	DATA8 layer349
	DATA8 nos349
	DATA8 busy349
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer349 nos349
	JR_EQ8 0 nos349 motornotbusy349
  motorwaiting349:
	OUTPUT_TEST layer349 nos349 busy349
	JR_EQ8 busy349 0 motornotbusy349
	SLEEP
	JR motorwaiting349
  motornotbusy349:
    WRITE32 ENDSUB_A2:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB350:
    WRITE32 ENDSUB_A3:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB351:
  while352:
    JR_LTEQF VS3_M 10.0 and354
    JR_GTF VS2_M 10.0 or353
  and354:
    JR_GTEQF VS3_M 10.0 and355
    JR_GTF VS2_M 10.0 or353
  and355:
    JR_LTEQF VS3_M 6.0 endwhile352
    JR_GTEQF VS2_M 6.0 endwhile352
  or353:
  whilebody352:
    WRITE32 ENDSUB_A2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB356:
    WRITE32 ENDSUB_A3:CALLSUB357 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB357:
    CALL MOTOR.STARTPOWER 'bc' 20.0
    JR_LTEQF VS3_M 10.0 and359
    JR_GTF VS2_M 10.0 whilebody352
  and359:
    JR_GTEQF VS3_M 10.0 and360
    JR_GTF VS2_M 10.0 whilebody352
  and360:
    JR_LTEQF VS3_M 6.0 and361
    JR_LTF VS2_M 6.0 whilebody352
  and361:
  endwhile352:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer363
	DATA8 nos363
	DATA8 busy363
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer363 nos363
	JR_EQ8 0 nos363 motornotbusy363
  motorwaiting363:
	OUTPUT_TEST layer363 nos363 busy363
	JR_EQ8 busy363 0 motornotbusy363
	SLEEP
	JR motorwaiting363
  motornotbusy363:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB365:
    WRITE32 ENDSUB_A2:CALLSUB366 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB366:
  while367:
    JR_LTEQF VS3_M 10.0 endwhile367
  whilebody367:
    WRITE32 ENDSUB_A3:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB368:
    WRITE32 ENDSUB_A2:CALLSUB369 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB369:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody367
  endwhile367:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB372 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB372:
    WRITE32 ENDSUB_A2:CALLSUB373 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB373:
  while374:
    JR_GTEQF VS3_M 15.0 endwhile374
  whilebody374:
    WRITE32 ENDSUB_A3:CALLSUB375 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB375:
    WRITE32 ENDSUB_A2:CALLSUB376 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB376:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody374
  endwhile374:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds379
	MOVEF_32 100.0 milliseconds379
	DATA32 timer379
	TIMER_WAIT milliseconds379 timer379
	TIMER_READY timer379
RETSUB_BELLAM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM:
SUB_BELLAM2:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer380
	DATA8 nos380
	DATA8 busy380
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer380 nos380
	JR_EQ8 0 nos380 motornotbusy380
  motorwaiting380:
	OUTPUT_TEST layer380 nos380 busy380
	JR_EQ8 busy380 0 motornotbusy380
	SLEEP
	JR motorwaiting380
  motornotbusy380:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer381
	DATA8 nos381
	DATA8 busy381
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer381 nos381
	JR_EQ8 0 nos381 motornotbusy381
  motorwaiting381:
	OUTPUT_TEST layer381 nos381 busy381
	JR_EQ8 busy381 0 motornotbusy381
	SLEEP
	JR motorwaiting381
  motornotbusy381:
    WRITE32 ENDSUB_A2:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB382:
    WRITE32 ENDSUB_A3:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB383:
  while384:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 60.0 endwhile384
  whilebody384:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 60.0 whilebody384
  endwhile384:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB389 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB389:
    WRITE32 ENDSUB_A3:CALLSUB390 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB390:
  while391:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf395
    DATA8 flag395
    DIVF F.1 2.0 tmpf395
    CP_EQF 0.0 2.0 flag395
    SELECTF flag395 0.0 tmpf395 F.0

    JR_GTEQF F.0 80.0 endwhile391
  whilebody391:
    WRITE32 ENDSUB_A3:CALLSUB396 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB396:
    WRITE32 ENDSUB_A2:CALLSUB397 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB397:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB398 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB398:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf402
    DATA8 flag402
    DIVF F.1 2.0 tmpf402
    CP_EQF 0.0 2.0 flag402
    SELECTF flag402 0.0 tmpf402 F.0

    JR_LTF F.0 80.0 whilebody391
  endwhile391:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB404 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB404:
    WRITE32 ENDSUB_A2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB405:
  while406:
    JR_LTEQF VS3_M 10.0 and408
    JR_GTF VS2_M 10.0 or407
  and408:
    JR_GTEQF VS3_M 10.0 endwhile406
    JR_GTEQF VS2_M 10.0 endwhile406
  or407:
  whilebody406:
    WRITE32 ENDSUB_A3:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB409:
    WRITE32 ENDSUB_A2:CALLSUB410 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB410:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB411:
    JR_LTEQF VS3_M 10.0 and412
    JR_GTF VS2_M 10.0 whilebody406
  and412:
    JR_GTEQF VS3_M 10.0 and413
    JR_LTF VS2_M 10.0 whilebody406
  and413:
  endwhile406:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer415
	DATA8 nos415
	DATA8 busy415
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer415 nos415
	JR_EQ8 0 nos415 motornotbusy415
  motorwaiting415:
	OUTPUT_TEST layer415 nos415 busy415
	JR_EQ8 busy415 0 motornotbusy415
	SLEEP
	JR motorwaiting415
  motornotbusy415:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB417 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB417:
    WRITE32 ENDSUB_A2:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB418:
  while419:
    JR_LTEQF VS3_M 10.0 endwhile419
  whilebody419:
    WRITE32 ENDSUB_A3:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB420:
    WRITE32 ENDSUB_A2:CALLSUB421 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB421:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody419
  endwhile419:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB424:
    WRITE32 ENDSUB_A2:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB425:
  while426:
    JR_GTEQF VS3_M 15.0 endwhile426
  whilebody426:
    WRITE32 ENDSUB_A3:CALLSUB427 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB427:
    WRITE32 ENDSUB_A2:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB428:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody426
  endwhile426:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB431:
    WRITE32 ENDSUB_A2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB432:
    MOVEF_F 1.0 VI_M
  for433:
    JR_GTF VI_M 2.0 endfor433
  forbody433:
    WRITE32 ENDSUB_A3:CALLSUB434 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB434:
    WRITE32 ENDSUB_A2:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB435:
  while436:
    JR_LTEQF VS3_M 15.0 and438
    JR_GTF VS2_M 15.0 or437
  and438:
    JR_GTEQF VS3_M 15.0 endwhile436
    JR_GTEQF VS2_M 15.0 endwhile436
  or437:
  whilebody436:
    WRITE32 ENDSUB_A3:CALLSUB439 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB439:
    WRITE32 ENDSUB_A2:CALLSUB440 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB440:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB441 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB441:
    JR_LTEQF VS3_M 15.0 and442
    JR_GTF VS2_M 15.0 whilebody436
  and442:
    JR_GTEQF VS3_M 15.0 and443
    JR_LTF VS2_M 15.0 whilebody436
  and443:
  endwhile436:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer444
	DATA8 nos444
	DATA8 busy444
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer444 nos444
	JR_EQ8 0 nos444 motornotbusy444
  motorwaiting444:
	OUTPUT_TEST layer444 nos444 busy444
	JR_EQ8 busy444 0 motornotbusy444
	SLEEP
	JR motorwaiting444
  motornotbusy444:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 2.0 forbody433
  endfor433:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 20.0 'true'

	DATA8 layer446
	DATA8 nos446
	DATA8 busy446
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer446 nos446
	JR_EQ8 0 nos446 motornotbusy446
  motorwaiting446:
	OUTPUT_TEST layer446 nos446 busy446
	JR_EQ8 busy446 0 motornotbusy446
	SLEEP
	JR motorwaiting446
  motornotbusy446:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB448 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB448:
    WRITE32 ENDSUB_A2:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB449:
    MOVEF_F 80.0 VJ_M
  while450:
    JR_LTEQF VS3_M 10.0 endwhile450
  whilebody450:
    WRITE32 ENDSUB_A3:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB451:
    WRITE32 ENDSUB_A2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB452:
    JR_LTEQF VJ_M 30.0 else453_1
    SUBF VJ_M 0.1 VJ_M
  else453_1:
  endif453:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody450
  endwhile450:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB457 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB457:
    WRITE32 ENDSUB_A2:CALLSUB458 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB458:
    MOVEF_F 80.0 VJ_M
  while459:
    JR_GTEQF VS3_M 15.0 endwhile459
  whilebody459:
    WRITE32 ENDSUB_A3:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB460:
    WRITE32 ENDSUB_A2:CALLSUB461 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB461:
    JR_LTEQF VJ_M 30.0 else462_1
    SUBF VJ_M 0.1 VJ_M
  else462_1:
  endif462:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody459
  endwhile459:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while467:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf471
    DATA8 flag471
    DIVF F.1 2.0 tmpf471
    CP_EQF 0.0 2.0 flag471
    SELECTF flag471 0.0 tmpf471 F.0

    JR_GTEQF F.0 50.0 endwhile467
  whilebody467:
    WRITE32 ENDSUB_A3:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB472:
    WRITE32 ENDSUB_A2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB473:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB474 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB474:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf478
    DATA8 flag478
    DIVF F.1 2.0 tmpf478
    CP_EQF 0.0 2.0 flag478
    SELECTF flag478 0.0 tmpf478 F.0

    JR_LTF F.0 50.0 whilebody467
  endwhile467:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer480
	DATA8 nos480
	DATA8 busy480
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer480 nos480
	JR_EQ8 0 nos480 motornotbusy480
  motorwaiting480:
	OUTPUT_TEST layer480 nos480 busy480
	JR_EQ8 busy480 0 motornotbusy480
	SLEEP
	JR motorwaiting480
  motornotbusy480:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds482
	MOVEF_32 500.0 milliseconds482
	DATA32 timer482
	TIMER_WAIT milliseconds482 timer482
	TIMER_READY timer482
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while485:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf489
    DATA8 flag489
    DIVF F.1 2.0 tmpf489
    CP_EQF 0.0 2.0 flag489
    SELECTF flag489 0.0 tmpf489 F.0

    JR_LTEQF F.0 -200.0 endwhile485
  whilebody485:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf494
    DATA8 flag494
    DIVF F.1 2.0 tmpf494
    CP_EQF 0.0 2.0 flag494
    SELECTF flag494 0.0 tmpf494 F.0

    JR_GTF F.0 -200.0 whilebody485
  endwhile485:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer496
	DATA8 nos496
	DATA8 busy496
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer496 nos496
	JR_EQ8 0 nos496 motornotbusy496
  motorwaiting496:
	OUTPUT_TEST layer496 nos496 busy496
	JR_EQ8 busy496 0 motornotbusy496
	SLEEP
	JR motorwaiting496
  motornotbusy496:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB498 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB498:
    WRITE32 ENDSUB_A3:CALLSUB499 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB499:
  while500:
    JR_LTEQF VS3_M 10.0 and502
    JR_GTF VS2_M 10.0 or501
  and502:
    JR_LTEQF VS3_M 10.0 and503
    JR_LTF VS2_M 10.0 or501
  and503:
    JR_GTEQF VS3_M 10.0 endwhile500
    JR_LTEQF VS2_M 10.0 endwhile500
  or501:
  whilebody500:
    WRITE32 ENDSUB_A2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB504:
    WRITE32 ENDSUB_A3:CALLSUB505 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB505:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VS3_M 10.0 and507
    JR_GTF VS2_M 10.0 whilebody500
  and507:
    JR_LTEQF VS3_M 10.0 and508
    JR_LTF VS2_M 10.0 whilebody500
  and508:
    JR_GTEQF VS3_M 10.0 and509
    JR_GTF VS2_M 10.0 whilebody500
  and509:
  endwhile500:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer511
	DATA8 nos511
	DATA8 busy511
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer511 nos511
	JR_EQ8 0 nos511 motornotbusy511
  motorwaiting511:
	OUTPUT_TEST layer511 nos511 busy511
	JR_EQ8 busy511 0 motornotbusy511
	SLEEP
	JR motorwaiting511
  motornotbusy511:
    WRITE32 ENDSUB_A3:CALLSUB512 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB512:
    WRITE32 ENDSUB_A2:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB513:
  while514:
    JR_LTEQF VS3_M 10.0 endwhile514
  whilebody514:
    WRITE32 ENDSUB_A3:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB515:
    WRITE32 ENDSUB_A2:CALLSUB516 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB516:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody514
  endwhile514:
    WRITE32 ENDSUB_A3:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB518:
    WRITE32 ENDSUB_A2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB519:
  while520:
    JR_GTEQF VS3_M 15.0 endwhile520
  whilebody520:
    WRITE32 ENDSUB_A3:CALLSUB521 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB521:
    WRITE32 ENDSUB_A2:CALLSUB522 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB522:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody520
  endwhile520:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM2:
SUB_BELLAM3:
  while525:
    JR_LTEQF VS3_M 15.0 and527
    JR_GTF VS2_M 15.0 or526
  and527:
    JR_GTEQF VS3_M 15.0 endwhile525
    JR_GTEQF VS2_M 15.0 endwhile525
  or526:
  whilebody525:
    WRITE32 ENDSUB_A3:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB528:
    WRITE32 ENDSUB_A2:CALLSUB529 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB529:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB530 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB530:
    JR_LTEQF VS3_M 15.0 and531
    JR_GTF VS2_M 15.0 whilebody525
  and531:
    JR_GTEQF VS3_M 15.0 and532
    JR_LTF VS2_M 15.0 whilebody525
  and532:
  endwhile525:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer534
	DATA8 nos534
	DATA8 busy534
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer534 nos534
	JR_EQ8 0 nos534 motornotbusy534
  motorwaiting534:
	OUTPUT_TEST layer534 nos534 busy534
	JR_EQ8 busy534 0 motornotbusy534
	SLEEP
	JR motorwaiting534
  motornotbusy534:
    WRITE32 ENDSUB_A3:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB535:
    WRITE32 ENDSUB_A2:CALLSUB536 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB536:
  while537:
    JR_LTEQF VS3_M 15.0 endwhile537
  whilebody537:
    WRITE32 ENDSUB_A3:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB538:
    WRITE32 ENDSUB_A2:CALLSUB539 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB539:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody537
  endwhile537:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB542:
    WRITE32 ENDSUB_A2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB543:
  while544:
    JR_GTEQF VS3_M 15.0 endwhile544
  whilebody544:
    WRITE32 ENDSUB_A3:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB545:
    WRITE32 ENDSUB_A2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB546:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody544
  endwhile544:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while550:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile550
  whilebody550:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB552:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody550
  endwhile550:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB555:
    WRITE32 ENDSUB_A2:CALLSUB556 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB556:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 1.0 VI_M
  for557:
    JR_GTF VI_M 3.0 endfor557
  forbody557:
    WRITE32 ENDSUB_A3:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB558:
    WRITE32 ENDSUB_A2:CALLSUB559 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB559:
  while560:
    JR_LTEQF VS3_M 15.0 and562
    JR_GTF VS2_M 15.0 or561
  and562:
    JR_GTEQF VS3_M 15.0 endwhile560
    JR_GTEQF VS2_M 15.0 endwhile560
  or561:
  whilebody560:
    WRITE32 ENDSUB_A3:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB563:
    WRITE32 ENDSUB_A2:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB564:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB565:
    JR_LTEQF VS3_M 15.0 and566
    JR_GTF VS2_M 15.0 whilebody560
  and566:
    JR_GTEQF VS3_M 15.0 and567
    JR_LTF VS2_M 15.0 whilebody560
  and567:
  endwhile560:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer568
	DATA8 nos568
	DATA8 busy568
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer568 nos568
	JR_EQ8 0 nos568 motornotbusy568
  motorwaiting568:
	OUTPUT_TEST layer568 nos568 busy568
	JR_EQ8 busy568 0 motornotbusy568
	SLEEP
	JR motorwaiting568
  motornotbusy568:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody557
  endfor557:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.2 VK1_M
    MOVEF_F 8.0 VK2_M
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer571
	DATA8 nos571
	DATA8 busy571
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer571 nos571
	JR_EQ8 0 nos571 motornotbusy571
  motorwaiting571:
	OUTPUT_TEST layer571 nos571 busy571
	JR_EQ8 busy571 0 motornotbusy571
	SLEEP
	JR motorwaiting571
  motornotbusy571:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 100.0 'true'

	DATA8 layer572
	DATA8 nos572
	DATA8 busy572
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer572 nos572
	JR_EQ8 0 nos572 motornotbusy572
  motorwaiting572:
	OUTPUT_TEST layer572 nos572 busy572
	JR_EQ8 busy572 0 motornotbusy572
	SLEEP
	JR motorwaiting572
  motornotbusy572:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds574
	MOVEF_32 500.0 milliseconds574
	DATA32 timer574
	TIMER_WAIT milliseconds574 timer574
	TIMER_READY timer574
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 100.0 'true'

	DATA8 layer576
	DATA8 nos576
	DATA8 busy576
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer576 nos576
	JR_EQ8 0 nos576 motornotbusy576
  motorwaiting576:
	OUTPUT_TEST layer576 nos576 busy576
	JR_EQ8 busy576 0 motornotbusy576
	SLEEP
	JR motorwaiting576
  motornotbusy576:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 400.0 'true'

	DATA8 layer577
	DATA8 nos577
	DATA8 busy577
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer577 nos577
	JR_EQ8 0 nos577 motornotbusy577
  motorwaiting577:
	OUTPUT_TEST layer577 nos577 busy577
	JR_EQ8 busy577 0 motornotbusy577
	SLEEP
	JR motorwaiting577
  motornotbusy577:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 200.0 'true'

	DATA8 layer578
	DATA8 nos578
	DATA8 busy578
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer578 nos578
	JR_EQ8 0 nos578 motornotbusy578
  motorwaiting578:
	OUTPUT_TEST layer578 nos578 busy578
	JR_EQ8 busy578 0 motornotbusy578
	SLEEP
	JR motorwaiting578
  motornotbusy578:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 300.0 'true'

	DATA8 layer579
	DATA8 nos579
	DATA8 busy579
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer579 nos579
	JR_EQ8 0 nos579 motornotbusy579
  motorwaiting579:
	OUTPUT_TEST layer579 nos579 busy579
	JR_EQ8 busy579 0 motornotbusy579
	SLEEP
	JR motorwaiting579
  motornotbusy579:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 20.0 300.0 'true'

	DATA8 layer580
	DATA8 nos580
	DATA8 busy580
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer580 nos580
	JR_EQ8 0 nos580 motornotbusy580
  motorwaiting580:
	OUTPUT_TEST layer580 nos580 busy580
	JR_EQ8 busy580 0 motornotbusy580
	SLEEP
	JR motorwaiting580
  motornotbusy580:
    WRITE32 ENDSUB_A2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB581:
    WRITE32 ENDSUB_A3:CALLSUB582 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB582:
  while583:
    JR_LTEQF VS3_M 10.0 and585
    JR_GTF VS2_M 10.0 or584
  and585:
    JR_GTEQF VS3_M 10.0 and586
    JR_GTF VS2_M 10.0 or584
  and586:
    JR_LTEQF VS3_M 10.0 endwhile583
    JR_GTEQF VS2_M 10.0 endwhile583
  or584:
  whilebody583:
    WRITE32 ENDSUB_A2:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB587:
    WRITE32 ENDSUB_A3:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB588:
    CALL MOTOR.STARTPOWER 'bc' 80.0
    JR_LTEQF VS3_M 10.0 and590
    JR_GTF VS2_M 10.0 whilebody583
  and590:
    JR_GTEQF VS3_M 10.0 and591
    JR_GTF VS2_M 10.0 whilebody583
  and591:
    JR_LTEQF VS3_M 10.0 and592
    JR_LTF VS2_M 10.0 whilebody583
  and592:
  endwhile583:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 40.0 'true'

	DATA8 layer594
	DATA8 nos594
	DATA8 busy594
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer594 nos594
	JR_EQ8 0 nos594 motornotbusy594
  motorwaiting594:
	OUTPUT_TEST layer594 nos594 busy594
	JR_EQ8 busy594 0 motornotbusy594
	SLEEP
	JR motorwaiting594
  motornotbusy594:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB596 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB596:
    WRITE32 ENDSUB_A2:CALLSUB597 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB597:
  while598:
    JR_LTEQF VS3_M 10.0 endwhile598
  whilebody598:
    WRITE32 ENDSUB_A3:CALLSUB599 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB599:
    WRITE32 ENDSUB_A2:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB600:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_GTF VS3_M 10.0 whilebody598
  endwhile598:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB603 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB603:
    WRITE32 ENDSUB_A2:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB604:
  while605:
    JR_GTEQF VS3_M 15.0 endwhile605
  whilebody605:
    WRITE32 ENDSUB_A3:CALLSUB606 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB606:
    WRITE32 ENDSUB_A2:CALLSUB607 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB607:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_LTF VS3_M 15.0 whilebody605
  endwhile605:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 1.0 VI_M
  for610:
    JR_GTF VI_M 1.0 endfor610
  forbody610:
    WRITE32 ENDSUB_A3:CALLSUB611 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB611:
    WRITE32 ENDSUB_A2:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB612:
  while613:
    JR_LTEQF VS3_M 10.0 and615
    JR_GTF VS2_M 10.0 or614
  and615:
    JR_GTEQF VS3_M 10.0 endwhile613
    JR_GTEQF VS2_M 10.0 endwhile613
  or614:
  whilebody613:
    WRITE32 ENDSUB_A3:CALLSUB616 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB616:
    WRITE32 ENDSUB_A2:CALLSUB617 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB617:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB618:
    JR_LTEQF VS3_M 10.0 and619
    JR_GTF VS2_M 10.0 whilebody613
  and619:
    JR_GTEQF VS3_M 10.0 and620
    JR_LTF VS2_M 10.0 whilebody613
  and620:
  endwhile613:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer622
	DATA8 nos622
	DATA8 busy622
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer622 nos622
	JR_EQ8 0 nos622 motornotbusy622
  motorwaiting622:
	OUTPUT_TEST layer622 nos622 busy622
	JR_EQ8 busy622 0 motornotbusy622
	SLEEP
	JR motorwaiting622
  motornotbusy622:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody610
  endfor610:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM3:
SUB_RED_1:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer625
	DATA8 nos625
	DATA8 busy625
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer625 nos625
	JR_EQ8 0 nos625 motornotbusy625
  motorwaiting625:
	OUTPUT_TEST layer625 nos625 busy625
	JR_EQ8 busy625 0 motornotbusy625
	SLEEP
	JR motorwaiting625
  motornotbusy625:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB627:
    WRITE32 ENDSUB_A2:CALLSUB628 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB628:
  while629:
    JR_LTEQF VS2_M 15.0 endwhile629
  whilebody629:
    WRITE32 ENDSUB_A3:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB630:
    WRITE32 ENDSUB_A2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB631:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody629
  endwhile629:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB634 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB634:
    WRITE32 ENDSUB_A2:CALLSUB635 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB635:
  while636:
    JR_GTEQF VS2_M 15.0 endwhile636
  whilebody636:
    WRITE32 ENDSUB_A3:CALLSUB637 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB637:
    WRITE32 ENDSUB_A2:CALLSUB638 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB638:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody636
  endwhile636:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while643:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf647
    DATA8 flag647
    DIVF F.1 2.0 tmpf647
    CP_EQF 0.0 2.0 flag647
    SELECTF flag647 0.0 tmpf647 F.0

    JR_GTEQF F.0 270.0 endwhile643
  whilebody643:
    MOVEF_F 50.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB648 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB648:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf652
    DATA8 flag652
    DIVF F.1 2.0 tmpf652
    CP_EQF 0.0 2.0 flag652
    SELECTF flag652 0.0 tmpf652 F.0

    JR_LTF F.0 270.0 whilebody643
  endwhile643:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds654
	MOVEF_32 100.0 milliseconds654
	DATA32 timer654
	TIMER_WAIT milliseconds654 timer654
	TIMER_READY timer654
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds656
	MOVEF_32 500.0 milliseconds656
	DATA32 timer656
	TIMER_WAIT milliseconds656 timer656
	TIMER_READY timer656
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB658:
    MOVEF_F 1470.0 VS_M
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf659
    DATA8 flag659
    DIVF 360.0 VL_M tmpf659
    CP_EQF 0.0 VL_M flag659
    SELECTF flag659 0.0 tmpf659 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while662:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 VX_M endwhile662
  whilebody662:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2DUS:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2DUS
CALLSUB664:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 VX_M whilebody662
  endwhile662:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_REDL:CALLSUB667 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_REDL
CALLSUB667:
    WRITE32 ENDSUB_BELLAM:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BELLAM
CALLSUB668:
    MOVEF_F 1400.0 VS_M
    WRITE32 ENDSUB_US:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_US
CALLSUB669:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 70.0 'true'

	DATA8 layer671
	DATA8 nos671
	DATA8 busy671
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer671 nos671
	JR_EQ8 0 nos671 motornotbusy671
  motorwaiting671:
	OUTPUT_TEST layer671 nos671 busy671
	JR_EQ8 busy671 0 motornotbusy671
	SLEEP
	JR motorwaiting671
  motornotbusy671:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB673:
    WRITE32 ENDSUB_A2:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB674:
  while675:
    JR_LTEQF VS2_M 15.0 endwhile675
  whilebody675:
    WRITE32 ENDSUB_A3:CALLSUB676 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB676:
    WRITE32 ENDSUB_A2:CALLSUB677 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB677:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody675
  endwhile675:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB680 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB680:
    WRITE32 ENDSUB_A2:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB681:
  while682:
    JR_GTEQF VS2_M 15.0 endwhile682
  whilebody682:
    WRITE32 ENDSUB_A3:CALLSUB683 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB683:
    WRITE32 ENDSUB_A2:CALLSUB684 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB684:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody682
  endwhile682:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while688:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf692
    DATA8 flag692
    DIVF F.1 2.0 tmpf692
    CP_EQF 0.0 2.0 flag692
    SELECTF flag692 0.0 tmpf692 F.0

    JR_GTEQF F.0 200.0 endwhile688
  whilebody688:
    WRITE32 ENDSUB_A3:CALLSUB693 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB693:
    WRITE32 ENDSUB_A2:CALLSUB694 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB694:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB695 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB695:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf699
    DATA8 flag699
    DIVF F.1 2.0 tmpf699
    CP_EQF 0.0 2.0 flag699
    SELECTF flag699 0.0 tmpf699 F.0

    JR_LTF F.0 200.0 whilebody688
  endwhile688:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds702
	MOVEF_32 500.0 milliseconds702
	DATA32 timer702
	TIMER_WAIT milliseconds702 timer702
	TIMER_READY timer702
    CALL MOTOR.STOP 'd' 'true'
    DATA32 tmp704
    CALL GETANDINC32 RUNCOUNTER_VIDVIG 1  RUNCOUNTER_VIDVIG tmp704
    JR_NEQ32 0 tmp704 alreadylaunched704
    OBJECT_START TVIDVIG
  alreadylaunched704:
    WRITE32 ENDSUB_NPL:CALLSUB705 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB705:
    WRITE32 ENDSUB_A3:CALLSUB706 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB706:
    WRITE32 ENDSUB_A2:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB707:
  while708:
    JR_LTEQF VS3_M 15.0 and710
    JR_GTF VS2_M 15.0 or709
  and710:
    JR_GTEQF VS3_M 15.0 endwhile708
    JR_GTEQF VS2_M 15.0 endwhile708
  or709:
  whilebody708:
    WRITE32 ENDSUB_A3:CALLSUB711 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB711:
    WRITE32 ENDSUB_A2:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB712:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB713:
    JR_LTEQF VS3_M 15.0 and714
    JR_GTF VS2_M 15.0 whilebody708
  and714:
    JR_GTEQF VS3_M 15.0 and715
    JR_LTF VS2_M 15.0 whilebody708
  and715:
  endwhile708:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer717
	DATA8 nos717
	DATA8 busy717
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer717 nos717
	JR_EQ8 0 nos717 motornotbusy717
  motorwaiting717:
	OUTPUT_TEST layer717 nos717 busy717
	JR_EQ8 busy717 0 motornotbusy717
	SLEEP
	JR motorwaiting717
  motornotbusy717:
    WRITE32 ENDSUB_A3:CALLSUB718 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB718:
    WRITE32 ENDSUB_A2:CALLSUB719 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB719:
  while720:
    JR_LTEQF VS3_M 15.0 and722
    JR_GTF VS2_M 15.0 or721
  and722:
    JR_GTEQF VS3_M 15.0 endwhile720
    JR_GTEQF VS2_M 15.0 endwhile720
  or721:
  whilebody720:
    WRITE32 ENDSUB_A3:CALLSUB723 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB723:
    WRITE32 ENDSUB_A2:CALLSUB724 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB724:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB725 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB725:
    JR_LTEQF VS3_M 15.0 and726
    JR_GTF VS2_M 15.0 whilebody720
  and726:
    JR_GTEQF VS3_M 15.0 and727
    JR_LTF VS2_M 15.0 whilebody720
  and727:
  endwhile720:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RED_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RED_1:
SUB_SB1:
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 -20.0 150.0 'true'

	DATA8 layer729
	DATA8 nos729
	DATA8 busy729
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer729 nos729
	JR_EQ8 0 nos729 motornotbusy729
  motorwaiting729:
	OUTPUT_TEST layer729 nos729 busy729
	JR_EQ8 busy729 0 motornotbusy729
	SLEEP
	JR motorwaiting729
  motornotbusy729:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 300.0 'true'

	DATA8 layer730
	DATA8 nos730
	DATA8 busy730
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer730 nos730
	JR_EQ8 0 nos730 motornotbusy730
  motorwaiting730:
	OUTPUT_TEST layer730 nos730 busy730
	JR_EQ8 busy730 0 motornotbusy730
	SLEEP
	JR motorwaiting730
  motornotbusy730:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB732 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB732:
    WRITE32 ENDSUB_A2:CALLSUB733 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB733:
  while734:
    JR_LTEQF VS2_M 10.0 endwhile734
  whilebody734:
    WRITE32 ENDSUB_A3:CALLSUB735 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB735:
    WRITE32 ENDSUB_A2:CALLSUB736 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB736:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody734
  endwhile734:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB739 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB739:
    WRITE32 ENDSUB_A2:CALLSUB740 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB740:
  while741:
    JR_GTEQF VS2_M 60.0 endwhile741
  whilebody741:
    WRITE32 ENDSUB_A3:CALLSUB742 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB742:
    WRITE32 ENDSUB_A2:CALLSUB743 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB743:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 60.0 whilebody741
  endwhile741:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while747:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf751
    DATA8 flag751
    DIVF F.1 2.0 tmpf751
    CP_EQF 0.0 2.0 flag751
    SELECTF flag751 0.0 tmpf751 F.0

    JR_GTEQF F.0 100.0 endwhile747
  whilebody747:
    WRITE32 ENDSUB_A3:CALLSUB752 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB752:
    WRITE32 ENDSUB_A2:CALLSUB753 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB753:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB754 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB754:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf758
    DATA8 flag758
    DIVF F.1 2.0 tmpf758
    CP_EQF 0.0 2.0 flag758
    SELECTF flag758 0.0 tmpf758 F.0

    JR_LTF F.0 100.0 whilebody747
  endwhile747:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB760 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB760:
    WRITE32 ENDSUB_A2:CALLSUB761 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB761:
  while762:
    JR_LTEQF VS3_M 10.0 and764
    JR_GTF VS2_M 10.0 or763
  and764:
    JR_GTEQF VS3_M 10.0 endwhile762
    JR_GTEQF VS2_M 10.0 endwhile762
  or763:
  whilebody762:
    WRITE32 ENDSUB_A3:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB765:
    WRITE32 ENDSUB_A2:CALLSUB766 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB766:
    MOVEF_F 40.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB767 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB767:
    JR_LTEQF VS3_M 10.0 and768
    JR_GTF VS2_M 10.0 whilebody762
  and768:
    JR_GTEQF VS3_M 10.0 and769
    JR_LTF VS2_M 10.0 whilebody762
  and769:
  endwhile762:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_SB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SB1:
SUB_HSV:
    DATA8 layer771
	DATA8 no771
	DATA8 mode8771
	
	MOVEF_8 1.0 no771
	SUB8 no771 1 no771
	DIV8 no771 4 layer771
	MATH MOD8 no771 4 no771

	MOVEF_8 2.0 mode8771
	
	INPUT_DEVICE READY_RAW layer771 no771 0 mode8771 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf778
    DATA8 flag778
    DIVF VSRED_M 255.0 tmpf778
    CP_EQF 0.0 255.0 flag778
    SELECTF flag778 0.0 tmpf778 VSRED_M

    DATAF tmpf779
    DATA8 flag779
    DIVF VSGREEN_M 255.0 tmpf779
    CP_EQF 0.0 255.0 flag779
    SELECTF flag779 0.0 tmpf779 VSGREEN_M

    DATAF tmpf780
    DATA8 flag780
    DIVF VSBLUE_M 255.0 tmpf780
    CP_EQF 0.0 255.0 flag780
    SELECTF flag780 0.0 tmpf780 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else781_1
    JR_LTEQF VSRED_M VSBLUE_M else781_1
    MOVEF_F VSRED_M VMAX_M
    JR endif781
  else781_1:
    JR_LTEQF VSGREEN_M VSRED_M else781_2
    JR_LTEQF VSGREEN_M VSBLUE_M else781_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif781
  else781_2:
    JR_LTEQF VSBLUE_M VSRED_M else781_3
    JR_LTEQF VSBLUE_M VSGREEN_M else781_3
    MOVEF_F VSBLUE_M VMAX_M
  else781_3:
  endif781:
    JR_GTEQF VSRED_M VSGREEN_M else782_1
    JR_GTEQF VSRED_M VSBLUE_M else782_1
    MOVEF_F VSRED_M VMIN_M
    JR endif782
  else782_1:
    JR_GTEQF VSGREEN_M VSRED_M else782_2
    JR_GTEQF VSGREEN_M VSBLUE_M else782_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif782
  else782_2:
    JR_GTEQF VSBLUE_M VSRED_M else782_3
    JR_GTEQF VSBLUE_M VSGREEN_M else782_3
    MOVEF_F VSBLUE_M VMIN_M
  else782_3:
  endif782:
    JR_NEQF VMAX_M VMIN_M else783_1
    MOVEF_F 0.0 VH_M
    JR endif783
  else783_1:
    JR_NEQF VSRED_M VMAX_M else784_1
    JR_LTF VSGREEN_M VSBLUE_M else785_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf789
    DATA8 flag789
    DIVF F.0 F.1 tmpf789
    CP_EQF 0.0 F.1 flag789
    SELECTF flag789 0.0 tmpf789 VH_M

    JR endif785
  else785_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf793
    DATA8 flag793
    DIVF F.1 F.2 tmpf793
    CP_EQF 0.0 F.2 flag793
    SELECTF flag793 0.0 tmpf793 F.0

    ADDF F.0 360.0 VH_M
  else785_2:
  endif785:
    JR endif784
  else784_1:
    JR_NEQF VMAX_M VSGREEN_M else795_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf799
    DATA8 flag799
    DIVF F.1 F.2 tmpf799
    CP_EQF 0.0 F.2 flag799
    SELECTF flag799 0.0 tmpf799 F.0

    ADDF F.0 120.0 VH_M
    JR endif795
  else795_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf804
    DATA8 flag804
    DIVF F.1 F.2 tmpf804
    CP_EQF 0.0 F.2 flag804
    SELECTF flag804 0.0 tmpf804 F.0

    ADDF F.0 240.0 VH_M
  else795_2:
  endif795:
  else784_2:
  endif784:
  else783_2:
  endif783:
    JR_NEQF VMAX_M 0.0 else806_1
    MOVEF_F 0.0 VS_M
    JR endif806
  else806_1:
    DATAF tmpf807
    DATA8 flag807
    DIVF VMIN_M VMAX_M tmpf807
    CP_EQF 0.0 VMAX_M flag807
    SELECTF flag807 0.0 tmpf807 F.0

    SUBF 1.0 F.0 VS_M
  else806_2:
  endif806:
    MOVEF_F VMAX_M VV_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_HSV_100:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    DATA8 layer816
	DATA8 no816
	DATA8 mode8816
	
	MOVEF_8 1.0 no816
	SUB8 no816 1 no816
	DIV8 no816 4 layer816
	MATH MOD8 no816 4 no816

	MOVEF_8 2.0 mode8816
	
	INPUT_DEVICE READY_RAW layer816 no816 0 mode8816 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 1.0 VP_M
  for817:
    JR_GTF VP_M 100.0 endfor817
  forbody817:
    WRITE32 ENDSUB_HSV:CALLSUB818 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB818:
    ADDF VX_M VH_M VX_M
    ADDF VZ_M VS_M VZ_M
    ADDF VD_M VV_M VD_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody817
  endfor817:
    DATAF tmpf823
    DATA8 flag823
    DIVF VX_M 100.0 tmpf823
    CP_EQF 0.0 100.0 flag823
    SELECTF flag823 0.0 tmpf823 VH_M

    DATAF tmpf824
    DATA8 flag824
    DIVF VZ_M 100.0 tmpf824
    CP_EQF 0.0 100.0 flag824
    SELECTF flag824 0.0 tmpf824 VS_M

    DATAF tmpf825
    DATA8 flag825
    DIVF VD_M 100.0 tmpf825
    CP_EQF 0.0 100.0 flag825
    SELECTF flag825 0.0 tmpf825 VV_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV_100:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_100:
SUB_HSV_B:
    DATA8 layer833
	DATA8 no833
	DATA8 mode8833
	
	MOVEF_8 1.0 no833
	SUB8 no833 1 no833
	DIV8 no833 4 layer833
	MATH MOD8 no833 4 no833

	MOVEF_8 2.0 mode8833
	
	INPUT_DEVICE READY_RAW layer833 no833 0 mode8833 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf840
    DATA8 flag840
    DIVF VSRED_M 255.0 tmpf840
    CP_EQF 0.0 255.0 flag840
    SELECTF flag840 0.0 tmpf840 VSRED_M

    DATAF tmpf841
    DATA8 flag841
    DIVF VSGREEN_M 255.0 tmpf841
    CP_EQF 0.0 255.0 flag841
    SELECTF flag841 0.0 tmpf841 VSGREEN_M

    DATAF tmpf842
    DATA8 flag842
    DIVF VSBLUE_M 255.0 tmpf842
    CP_EQF 0.0 255.0 flag842
    SELECTF flag842 0.0 tmpf842 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else843_1
    JR_LTEQF VSRED_M VSBLUE_M else843_1
    MOVEF_F VSRED_M VMAX_M
    JR endif843
  else843_1:
    JR_LTEQF VSGREEN_M VSRED_M else843_2
    JR_LTEQF VSGREEN_M VSBLUE_M else843_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif843
  else843_2:
    JR_LTEQF VSBLUE_M VSRED_M else843_3
    JR_LTEQF VSBLUE_M VSGREEN_M else843_3
    MOVEF_F VSBLUE_M VMAX_M
  else843_3:
  endif843:
    JR_GTEQF VSRED_M VSGREEN_M else844_1
    JR_GTEQF VSRED_M VSBLUE_M else844_1
    MOVEF_F VSRED_M VMIN_M
    JR endif844
  else844_1:
    JR_GTEQF VSGREEN_M VSRED_M else844_2
    JR_GTEQF VSGREEN_M VSBLUE_M else844_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif844
  else844_2:
    JR_GTEQF VSBLUE_M VSRED_M else844_3
    JR_GTEQF VSBLUE_M VSGREEN_M else844_3
    MOVEF_F VSBLUE_M VMIN_M
  else844_3:
  endif844:
    JR_NEQF VMAX_M VMIN_M else845_1
    MOVEF_F 0.0 VH_M
    JR endif845
  else845_1:
    JR_NEQF VSRED_M VMAX_M else846_1
    JR_LTF VSGREEN_M VSBLUE_M else847_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf851
    DATA8 flag851
    DIVF F.0 F.1 tmpf851
    CP_EQF 0.0 F.1 flag851
    SELECTF flag851 0.0 tmpf851 VH_M

    JR endif847
  else847_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf855
    DATA8 flag855
    DIVF F.1 F.2 tmpf855
    CP_EQF 0.0 F.2 flag855
    SELECTF flag855 0.0 tmpf855 F.0

    ADDF F.0 360.0 VH_M
  else847_2:
  endif847:
    JR endif846
  else846_1:
    JR_NEQF VMAX_M VSGREEN_M else857_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf861
    DATA8 flag861
    DIVF F.1 F.2 tmpf861
    CP_EQF 0.0 F.2 flag861
    SELECTF flag861 0.0 tmpf861 F.0

    ADDF F.0 120.0 VH_M
    JR endif857
  else857_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf866
    DATA8 flag866
    DIVF F.1 F.2 tmpf866
    CP_EQF 0.0 F.2 flag866
    SELECTF flag866 0.0 tmpf866 F.0

    ADDF F.0 240.0 VH_M
  else857_2:
  endif857:
  else846_2:
  endif846:
  else845_2:
  endif845:
    JR_NEQF VMAX_M 0.0 else868_1
    MOVEF_F 0.0 VS_M
    JR endif868
  else868_1:
    DATAF tmpf869
    DATA8 flag869
    DIVF VMIN_M VMAX_M tmpf869
    CP_EQF 0.0 VMAX_M flag869
    SELECTF flag869 0.0 tmpf869 F.0

    SUBF 1.0 F.0 VS_M
  else868_2:
  endif868:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 300.0 and873
    JR_LTF VH_M 360.0 or872
  and873:
    JR_LTF VH_M 0.0 else871_1
    JR_GTF VH_M 20.0 else871_1
    JR_LTEQF VS_M 0.3 else871_1
    JR_GTF VS_M 1.0 else871_1
    JR_LTEQF VV_M 0.025 else871_1
    JR_GTEQF VV_M 0.1 else871_1
  or872:
    MOVEF_F 5.0 VCOLOR_M
    JR endif871
  else871_1:
    JR_LTF VH_M 20.0 else871_2
    JR_GTEQF VH_M 60.0 else871_2
    JR_LTF VS_M 0.4 else871_2
    JR_LTEQF VV_M 0.03 else871_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif871
  else871_2:
    MOVEF_F 6.0 VCOLOR_M
  else871_3:
  endif871:
RETSUB_HSV_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_B:
SUB_HSV_D:
    DATA8 layer874
	DATA8 no874
	DATA8 mode8874
	
	MOVEF_8 1.0 no874
	SUB8 no874 1 no874
	DIV8 no874 4 layer874
	MATH MOD8 no874 4 no874

	MOVEF_8 2.0 mode8874
	
	INPUT_DEVICE READY_RAW layer874 no874 0 mode8874 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf881
    DATA8 flag881
    DIVF VSRED_M 255.0 tmpf881
    CP_EQF 0.0 255.0 flag881
    SELECTF flag881 0.0 tmpf881 VSRED_M

    DATAF tmpf882
    DATA8 flag882
    DIVF VSGREEN_M 255.0 tmpf882
    CP_EQF 0.0 255.0 flag882
    SELECTF flag882 0.0 tmpf882 VSGREEN_M

    DATAF tmpf883
    DATA8 flag883
    DIVF VSBLUE_M 255.0 tmpf883
    CP_EQF 0.0 255.0 flag883
    SELECTF flag883 0.0 tmpf883 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else884_1
    JR_LTEQF VSRED_M VSBLUE_M else884_1
    MOVEF_F VSRED_M VMAX_M
    JR endif884
  else884_1:
    JR_LTEQF VSGREEN_M VSRED_M else884_2
    JR_LTEQF VSGREEN_M VSBLUE_M else884_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif884
  else884_2:
    JR_LTEQF VSBLUE_M VSRED_M else884_3
    JR_LTEQF VSBLUE_M VSGREEN_M else884_3
    MOVEF_F VSBLUE_M VMAX_M
  else884_3:
  endif884:
    JR_GTEQF VSRED_M VSGREEN_M else885_1
    JR_GTEQF VSRED_M VSBLUE_M else885_1
    MOVEF_F VSRED_M VMIN_M
    JR endif885
  else885_1:
    JR_GTEQF VSGREEN_M VSRED_M else885_2
    JR_GTEQF VSGREEN_M VSBLUE_M else885_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif885
  else885_2:
    JR_GTEQF VSBLUE_M VSRED_M else885_3
    JR_GTEQF VSBLUE_M VSGREEN_M else885_3
    MOVEF_F VSBLUE_M VMIN_M
  else885_3:
  endif885:
    JR_NEQF VMAX_M VMIN_M else886_1
    MOVEF_F 0.0 VH_M
    JR endif886
  else886_1:
    JR_NEQF VSRED_M VMAX_M else887_1
    JR_LTF VSGREEN_M VSBLUE_M else888_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf892
    DATA8 flag892
    DIVF F.0 F.1 tmpf892
    CP_EQF 0.0 F.1 flag892
    SELECTF flag892 0.0 tmpf892 VH_M

    JR endif888
  else888_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf896
    DATA8 flag896
    DIVF F.1 F.2 tmpf896
    CP_EQF 0.0 F.2 flag896
    SELECTF flag896 0.0 tmpf896 F.0

    ADDF F.0 360.0 VH_M
  else888_2:
  endif888:
    JR endif887
  else887_1:
    JR_NEQF VMAX_M VSGREEN_M else898_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf902
    DATA8 flag902
    DIVF F.1 F.2 tmpf902
    CP_EQF 0.0 F.2 flag902
    SELECTF flag902 0.0 tmpf902 F.0

    ADDF F.0 120.0 VH_M
    JR endif898
  else898_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf907
    DATA8 flag907
    DIVF F.1 F.2 tmpf907
    CP_EQF 0.0 F.2 flag907
    SELECTF flag907 0.0 tmpf907 F.0

    ADDF F.0 240.0 VH_M
  else898_2:
  endif898:
  else887_2:
  endif887:
  else886_2:
  endif886:
    JR_NEQF VMAX_M 0.0 else909_1
    MOVEF_F 0.0 VS_M
    JR endif909
  else909_1:
    DATAF tmpf910
    DATA8 flag910
    DIVF VMIN_M VMAX_M tmpf910
    CP_EQF 0.0 VMAX_M flag910
    SELECTF flag910 0.0 tmpf910 F.0

    SUBF 1.0 F.0 VS_M
  else909_2:
  endif909:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 200.0 and914
    JR_LTF VH_M 360.0 or913
  and914:
    JR_LTF VH_M 0.0 else912_1
    JR_GTF VH_M 30.0 else912_1
    JR_LTEQF VS_M 0.3 else912_1
    JR_GTF VS_M 1.0 else912_1
    JR_LTF VV_M 0.0 else912_1
    JR_GTEQF VV_M 0.02 else912_1
  or913:
    MOVEF_F 5.0 VCOLOR_M
    JR endif912
  else912_1:
    JR_LTF VH_M 0.0 else912_2
    JR_GTEQF VH_M 60.0 else912_2
    JR_LTF VS_M 0.4 else912_2
    JR_GTF VS_M 1.0 else912_2
    JR_LTEQF VV_M 0.003 else912_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif912
  else912_2:
    MOVEF_F 6.0 VCOLOR_M
  else912_3:
  endif912:
RETSUB_HSV_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_D:
SUB_HSV_RGB_B:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer915
	DATA8 no915
	DATA8 mode8915
	
	MOVEF_8 1.0 no915
	SUB8 no915 1 no915
	DIV8 no915 4 layer915
	MATH MOD8 no915 4 no915

	MOVEF_8 2.0 mode8915
	
	INPUT_DEVICE READY_RAW layer915 no915 0 mode8915 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV:CALLSUB917 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB917:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    DATA32 milliseconds926
	MOVEF_32 100.0 milliseconds926
	DATA32 timer926
	TIMER_WAIT milliseconds926 timer926
	TIMER_READY timer926
    MOVEF_F 1.0 VP_M
  for927:
    JR_GTF VP_M 100.0 endfor927
  forbody927:
    WRITE32 ENDSUB_HSV_B:CALLSUB928 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_B
CALLSUB928:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody927
  endfor927:
    DATAF tmpf931
    DATA8 flag931
    DIVF VX_M 100.0 tmpf931
    CP_EQF 0.0 100.0 flag931
    SELECTF flag931 0.0 tmpf931 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds935
	MOVEF_32 100.0 milliseconds935
	DATA32 timer935
	TIMER_WAIT milliseconds935 timer935
	TIMER_READY timer935
    JR_LTEQF VH_M 100.0 and938
    JR_LTF VH_M 360.0 or937
  and938:
    JR_LTF VH_M 0.0 else936_1
    JR_GTF VH_M 20.0 else936_1
    JR_LTEQF VS_M 0.3 else936_1
    JR_GTF VS_M 1.0 else936_1
    JR_LTEQF VV_M 0.025 else936_1
    JR_GTEQF VV_M 0.1 else936_1
  or937:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif936
  else936_1:
    JR_LTF VH_M 20.0 else936_2
    JR_GTEQF VH_M 60.0 else936_2
    JR_LTF VS_M 0.4 else936_2
    JR_LTEQF VV_M 0.03 else936_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif936
  else936_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else936_3:
  endif936:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds948
	MOVEF_32 1000.0 milliseconds948
	DATA32 timer948
	TIMER_WAIT milliseconds948 timer948
	TIMER_READY timer948
RETSUB_HSV_RGB_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_B:
SUB_HSV_RGB_D:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer949
	DATA8 no949
	DATA8 mode8949
	
	MOVEF_8 1.0 no949
	SUB8 no949 1 no949
	DIV8 no949 4 layer949
	MATH MOD8 no949 4 no949

	MOVEF_8 2.0 mode8949
	
	INPUT_DEVICE READY_RAW layer949 no949 0 mode8949 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV_D:CALLSUB951 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB951:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    MOVEF_F 1.0 VP_M
  for960:
    JR_GTF VP_M 100.0 endfor960
  forbody960:
    WRITE32 ENDSUB_HSV_D:CALLSUB961 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB961:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody960
  endfor960:
    DATAF tmpf964
    DATA8 flag964
    DIVF VX_M 100.0 tmpf964
    CP_EQF 0.0 100.0 flag964
    SELECTF flag964 0.0 tmpf964 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    JR_LTEQF VH_M 200.0 and970
    JR_LTF VH_M 360.0 or969
  and970:
    JR_LTF VH_M 0.0 else968_1
    JR_GTF VH_M 40.0 else968_1
    JR_LTEQF VS_M 0.3 else968_1
    JR_GTF VS_M 1.0 else968_1
    JR_LTF VV_M 0.0 else968_1
    JR_GTEQF VV_M 0.02 else968_1
  or969:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif968
  else968_1:
    JR_LTF VH_M 0.0 else968_2
    JR_GTEQF VH_M 100.0 else968_2
    JR_LTF VS_M 0.4 else968_2
    JR_GTF VS_M 1.0 else968_2
    JR_LTEQF VV_M 0.003 else968_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif968
  else968_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else968_3:
  endif968:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds980
	MOVEF_32 1000.0 milliseconds980
	DATA32 timer980
	TIMER_WAIT milliseconds980 timer980
	TIMER_READY timer980
RETSUB_HSV_RGB_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_D:
SUB_RGB:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 F.0 VRECVARRAY_M
    CALL ARRAYSTORE_FLOAT VI_M F.0 VA_M
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 5.0 or986
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 14.0 or986
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 6.0 else985_1
  or986:
    CALL SPEAKER.NOTE 100.0 'C#1' 500.0
    JR endif985
  else985_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 1.0 or991
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 10.0 or991
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 7.0 or991
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 8.0 else985_2
  or991:
    CALL SPEAKER.NOTE 100.0 'C#5' 500.0
    JR endif985
  else985_2:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 3.0 or997
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 2.0 or997
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 4.0 else985_3
  or997:
    CALL SPEAKER.NOTE 50.0 'C#9' 1000.0
  else985_3:
  endif985:
RETSUB_RGB:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RGB:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
