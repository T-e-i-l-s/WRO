DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VG_M
DATAF VR_M
DATAF VY_M
DATAF VW_M
DATAF VCOLOR_M
DATAF VX_M
DATAF VC_M
DATAF VS_M
DATAF VMAX2_M
DATAF VMAX3_M
DATAF VMIN2_M
DATAF VMIN3_M
DATAF VK1_M
DATAF VK2_M
DATAF VK3_M
DATAF VS3_M
DATAF VS2_M
DATAF VSPEED_M
DATAF VSPEEDL_M
DATAF VSPEEDR_M
DATAF VEOLD_M
DATAF VN_M
DATAF VP_M
DATAF VI_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VL_M
DATAF VJ_M
DATAF VE_M
DATAF VU_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VV_M
DATAF VD_M
DATAF VZ_M
DATAF VF_M
ARRAY16 VA_M 2
DATA32 RUNCOUNTER_ZADVIG
DATA32 RUNCOUNTER_VIDVIG

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VF_M
    CALL ARRAYCREATE_FLOAT VA_M
    MOVE32_32 0 RUNCOUNTER_ZADVIG
    MOVE32_32 0 RUNCOUNTER_VIDVIG
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TZADVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_ZADVIG 0
    CALL GETANDINC32 RUNCOUNTER_ZADVIG -1 RUNCOUNTER_ZADVIG tmp
    JR_GT32 tmp 1 launch
}
vmthread TVIDVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_VIDVIG 1
    CALL GETANDINC32 RUNCOUNTER_VIDVIG -1 RUNCOUNTER_VIDVIG tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_ZADVIG
subcall PROGRAM_VIDVIG
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1036
    WRITE32 ENDSUB_ZADVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
  dispatch1036:
    JR_NEQ32 SUBPROGRAM 1 dispatch1037
    WRITE32 ENDSUB_VIDVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIDVIG
  dispatch1037:
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VF_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_M
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    MOVEF_F 0.2 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL EV3FILE.OPENREAD 'a123/colib.dat' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN3_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX3_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMIN2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMIN3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 30.0 30.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 1.0 S.0
    DATA32 milliseconds1013
	MOVEF_32 100.0 milliseconds1013
	DATA32 timer1013
	TIMER_WAIT milliseconds1013 timer1013
	TIMER_READY timer1013
    WRITE32 ENDSUB_NPP:CALLSUB1035 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPP
CALLSUB1035:
ENDTHREAD:
    RETURN
SUB_US:
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf7
    DATA8 flag7
    DIVF 360.0 VL_M tmpf7
    CP_EQF 0.0 VL_M flag7
    SELECTF flag7 0.0 tmpf7 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while10:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.1 2.0 tmpf14
    CP_EQF 0.0 2.0 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    JR_GTEQF F.0 VX_M endwhile10
  whilebody10:
    WRITE32 ENDSUB_A3:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB15:
    WRITE32 ENDSUB_A2:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB16:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB17:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.1 2.0 tmpf21
    CP_EQF 0.0 2.0 flag21
    SELECTF flag21 0.0 tmpf21 F.0

    JR_LTF F.0 VX_M whilebody10
  endwhile10:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB23:
    WRITE32 ENDSUB_A2:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB24:
  while25:
    JR_LTEQF VS3_M 15.0 and27
    JR_GTF VS2_M 15.0 or26
  and27:
    JR_GTEQF VS3_M 15.0 endwhile25
    JR_GTEQF VS2_M 15.0 endwhile25
  or26:
  whilebody25:
    WRITE32 ENDSUB_A3:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB28:
    WRITE32 ENDSUB_A2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB29:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB30:
    JR_LTEQF VS3_M 15.0 and31
    JR_GTF VS2_M 15.0 whilebody25
  and31:
    JR_GTEQF VS3_M 15.0 and32
    JR_LTF VS2_M 15.0 whilebody25
  and32:
  endwhile25:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_US:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_US:
SUB_PL:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer34
	DATA8 nos34
	DATA8 busy34
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer34 nos34
	JR_EQ8 0 nos34 motornotbusy34
  motorwaiting34:
	OUTPUT_TEST layer34 nos34 busy34
	JR_EQ8 busy34 0 motornotbusy34
	SLEEP
	JR motorwaiting34
  motornotbusy34:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB36:
    WRITE32 ENDSUB_A2:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB37:
  while38:
    JR_LTEQF VS2_M 15.0 endwhile38
  whilebody38:
    WRITE32 ENDSUB_A3:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB39:
    WRITE32 ENDSUB_A2:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB40:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody38
  endwhile38:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB43:
    WRITE32 ENDSUB_A2:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB44:
  while45:
    JR_GTEQF VS2_M 15.0 endwhile45
  whilebody45:
    WRITE32 ENDSUB_A3:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB46:
    WRITE32 ENDSUB_A2:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB47:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody45
  endwhile45:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PL:
SUB_PR:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 60.0 'true'

	DATA8 layer50
	DATA8 nos50
	DATA8 busy50
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer50 nos50
	JR_EQ8 0 nos50 motornotbusy50
  motorwaiting50:
	OUTPUT_TEST layer50 nos50 busy50
	JR_EQ8 busy50 0 motornotbusy50
	SLEEP
	JR motorwaiting50
  motornotbusy50:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB52:
    WRITE32 ENDSUB_A2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB53:
  while54:
    JR_LTEQF VS3_M 15.0 endwhile54
  whilebody54:
    WRITE32 ENDSUB_A3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB55:
    WRITE32 ENDSUB_A2:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB56:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody54
  endwhile54:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB59:
    WRITE32 ENDSUB_A2:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB60:
  while61:
    JR_GTEQF VS3_M 15.0 endwhile61
  whilebody61:
    WRITE32 ENDSUB_A3:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB62:
    WRITE32 ENDSUB_A2:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB63:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PR:
SUB_NPL:
    WRITE32 ENDSUB_A2:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB66:
    WRITE32 ENDSUB_A3:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB67:
  while68:
    JR_LTEQF VS3_M 10.0 and70
    JR_GTF VS2_M 10.0 or69
  and70:
    JR_GTEQF VS3_M 10.0 and71
    JR_GTF VS2_M 10.0 or69
  and71:
    JR_LTEQF VS3_M 10.0 endwhile68
    JR_GTEQF VS2_M 10.0 endwhile68
  or69:
  whilebody68:
    WRITE32 ENDSUB_A2:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB72:
    WRITE32 ENDSUB_A3:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB73:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    JR_LTEQF VS3_M 10.0 and75
    JR_GTF VS2_M 10.0 whilebody68
  and75:
    JR_GTEQF VS3_M 10.0 and76
    JR_GTF VS2_M 10.0 whilebody68
  and76:
    JR_LTEQF VS3_M 10.0 and77
    JR_LTF VS2_M 10.0 whilebody68
  and77:
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer81
	DATA8 nos81
	DATA8 busy81
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer81 nos81
	JR_EQ8 0 nos81 motornotbusy81
  motorwaiting81:
	OUTPUT_TEST layer81 nos81 busy81
	JR_EQ8 busy81 0 motornotbusy81
	SLEEP
	JR motorwaiting81
  motornotbusy81:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB83:
    WRITE32 ENDSUB_A2:CALLSUB84 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB84:
  while85:
    JR_LTEQF VS2_M 10.0 endwhile85
  whilebody85:
    WRITE32 ENDSUB_A3:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB86:
    WRITE32 ENDSUB_A2:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB87:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody85
  endwhile85:
    WRITE32 ENDSUB_A3:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB89:
    WRITE32 ENDSUB_A2:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB90:
  while91:
    JR_GTEQF VS2_M 60.0 endwhile91
  whilebody91:
    WRITE32 ENDSUB_A3:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB92:
    WRITE32 ENDSUB_A2:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB93:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody91
  endwhile91:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPL:
SUB_NPP:
    WRITE32 ENDSUB_VIRAV_NAZ:CALLSUB96 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIRAV_NAZ
CALLSUB96:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 30.0 'true'

	DATA8 layer97
	DATA8 nos97
	DATA8 busy97
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer97 nos97
	JR_EQ8 0 nos97 motornotbusy97
  motorwaiting97:
	OUTPUT_TEST layer97 nos97 busy97
	JR_EQ8 busy97 0 motornotbusy97
	SLEEP
	JR motorwaiting97
  motornotbusy97:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 90.0 'true'

	DATA8 layer99
	DATA8 nos99
	DATA8 busy99
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer99 nos99
	JR_EQ8 0 nos99 motornotbusy99
  motorwaiting99:
	OUTPUT_TEST layer99 nos99 busy99
	JR_EQ8 busy99 0 motornotbusy99
	SLEEP
	JR motorwaiting99
  motornotbusy99:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB101:
    WRITE32 ENDSUB_A2:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB102:
  while103:
    JR_LTEQF VS3_M 10.0 endwhile103
  whilebody103:
    WRITE32 ENDSUB_A3:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB104:
    WRITE32 ENDSUB_A2:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB105:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody103
  endwhile103:
    WRITE32 ENDSUB_A3:CALLSUB107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB107:
    WRITE32 ENDSUB_A2:CALLSUB108 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB108:
  while109:
    JR_GTEQF VS3_M 55.0 endwhile109
  whilebody109:
    WRITE32 ENDSUB_A3:CALLSUB110 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB110:
    WRITE32 ENDSUB_A2:CALLSUB111 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB111:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 55.0 whilebody109
  endwhile109:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPP:
SUB_REDL:
    DATA32 tmp114
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp114
    JR_NEQ32 0 tmp114 alreadylaunched114
    OBJECT_START TZADVIG
  alreadylaunched114:
    WRITE32 ENDSUB_A3:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB115:
    WRITE32 ENDSUB_A2:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB116:
  while117:
    JR_LTEQF VS3_M 10.0 and119
    JR_GTF VS2_M 10.0 or118
  and119:
    JR_GTEQF VS3_M 10.0 and120
    JR_GTF VS2_M 10.0 or118
  and120:
    JR_LTEQF VS3_M 10.0 endwhile117
    JR_GTEQF VS2_M 10.0 endwhile117
  or118:
  whilebody117:
    WRITE32 ENDSUB_A3:CALLSUB121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB121:
    WRITE32 ENDSUB_A2:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB122:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB123:
    JR_LTEQF VS3_M 10.0 and124
    JR_GTF VS2_M 10.0 whilebody117
  and124:
    JR_GTEQF VS3_M 10.0 and125
    JR_GTF VS2_M 10.0 whilebody117
  and125:
    JR_LTEQF VS3_M 10.0 and126
    JR_LTF VS2_M 10.0 whilebody117
  and126:
  endwhile117:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer128
	DATA8 nos128
	DATA8 busy128
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer128 nos128
	JR_EQ8 0 nos128 motornotbusy128
  motorwaiting128:
	OUTPUT_TEST layer128 nos128 busy128
	JR_EQ8 busy128 0 motornotbusy128
	SLEEP
	JR motorwaiting128
  motornotbusy128:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer129
	DATA8 nos129
	DATA8 busy129
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer129 nos129
	JR_EQ8 0 nos129 motornotbusy129
  motorwaiting129:
	OUTPUT_TEST layer129 nos129 busy129
	JR_EQ8 busy129 0 motornotbusy129
	SLEEP
	JR motorwaiting129
  motornotbusy129:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB132 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB132:
    WRITE32 ENDSUB_A3:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB133:
  while134:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile134
  whilebody134:
    WRITE32 ENDSUB_A2:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB136:
    WRITE32 ENDSUB_A3:CALLSUB137 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB137:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB138:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody134
  endwhile134:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds142
	MOVEF_32 500.0 milliseconds142
	DATA32 timer142
	TIMER_WAIT milliseconds142 timer142
	TIMER_READY timer142
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer144
	DATA8 nos144
	DATA8 busy144
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer144 nos144
	JR_EQ8 0 nos144 motornotbusy144
  motorwaiting144:
	OUTPUT_TEST layer144 nos144 busy144
	JR_EQ8 busy144 0 motornotbusy144
	SLEEP
	JR motorwaiting144
  motornotbusy144:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer145
	DATA8 nos145
	DATA8 busy145
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer145 nos145
	JR_EQ8 0 nos145 motornotbusy145
  motorwaiting145:
	OUTPUT_TEST layer145 nos145 busy145
	JR_EQ8 busy145 0 motornotbusy145
	SLEEP
	JR motorwaiting145
  motornotbusy145:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer146
	DATA8 nos146
	DATA8 busy146
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer146 nos146
	JR_EQ8 0 nos146 motornotbusy146
  motorwaiting146:
	OUTPUT_TEST layer146 nos146 busy146
	JR_EQ8 busy146 0 motornotbusy146
	SLEEP
	JR motorwaiting146
  motornotbusy146:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer147
	DATA8 nos147
	DATA8 busy147
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer147 nos147
	JR_EQ8 0 nos147 motornotbusy147
  motorwaiting147:
	OUTPUT_TEST layer147 nos147 busy147
	JR_EQ8 busy147 0 motornotbusy147
	SLEEP
	JR motorwaiting147
  motornotbusy147:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer148
	DATA8 nos148
	DATA8 busy148
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer148 nos148
	JR_EQ8 0 nos148 motornotbusy148
  motorwaiting148:
	OUTPUT_TEST layer148 nos148 busy148
	JR_EQ8 busy148 0 motornotbusy148
	SLEEP
	JR motorwaiting148
  motornotbusy148:
    WRITE32 ENDSUB_A2:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB149:
    WRITE32 ENDSUB_A3:CALLSUB150 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB150:
  while151:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile151
  whilebody151:
    WRITE32 ENDSUB_A2:CALLSUB153 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB153:
    WRITE32 ENDSUB_A3:CALLSUB154 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB154:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB155 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB155:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody151
  endwhile151:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer158
	DATA8 nos158
	DATA8 busy158
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer158 nos158
	JR_EQ8 0 nos158 motornotbusy158
  motorwaiting158:
	OUTPUT_TEST layer158 nos158 busy158
	JR_EQ8 busy158 0 motornotbusy158
	SLEEP
	JR motorwaiting158
  motornotbusy158:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer159
	DATA8 nos159
	DATA8 busy159
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer159 nos159
	JR_EQ8 0 nos159 motornotbusy159
  motorwaiting159:
	OUTPUT_TEST layer159 nos159 busy159
	JR_EQ8 busy159 0 motornotbusy159
	SLEEP
	JR motorwaiting159
  motornotbusy159:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_REDL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_REDL:
SUB_BELLAM:
  while161:
    JR_LTEQF VS3_M 15.0 and163
    JR_GTF VS2_M 15.0 or162
  and163:
    JR_GTEQF VS3_M 15.0 endwhile161
    JR_GTEQF VS2_M 15.0 endwhile161
  or162:
  whilebody161:
    WRITE32 ENDSUB_A3:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB164:
    WRITE32 ENDSUB_A2:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB165:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB166:
    JR_LTEQF VS3_M 15.0 and167
    JR_GTF VS2_M 15.0 whilebody161
  and167:
    JR_GTEQF VS3_M 15.0 and168
    JR_LTF VS2_M 15.0 whilebody161
  and168:
  endwhile161:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer170
	DATA8 nos170
	DATA8 busy170
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer170 nos170
	JR_EQ8 0 nos170 motornotbusy170
  motorwaiting170:
	OUTPUT_TEST layer170 nos170 busy170
	JR_EQ8 busy170 0 motornotbusy170
	SLEEP
	JR motorwaiting170
  motornotbusy170:
    WRITE32 ENDSUB_A3:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB171:
    WRITE32 ENDSUB_A2:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB172:
  while173:
    JR_LTEQF VS3_M 15.0 endwhile173
  whilebody173:
    WRITE32 ENDSUB_A3:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB174:
    WRITE32 ENDSUB_A2:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB175:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody173
  endwhile173:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB178:
    WRITE32 ENDSUB_A2:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB179:
  while180:
    JR_GTEQF VS3_M 15.0 endwhile180
  whilebody180:
    WRITE32 ENDSUB_A3:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB181:
    WRITE32 ENDSUB_A2:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB182:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody180
  endwhile180:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while186:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile186
  whilebody186:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB188 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB188:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody186
  endwhile186:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB191:
    WRITE32 ENDSUB_A2:CALLSUB192 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB192:
    MOVEF_F 1.0 VI_M
  for193:
    JR_GTF VI_M 1.0 endfor193
  forbody193:
    WRITE32 ENDSUB_A3:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB194:
    WRITE32 ENDSUB_A2:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB195:
  while196:
    JR_LTEQF VS3_M 15.0 and198
    JR_GTF VS2_M 15.0 or197
  and198:
    JR_GTEQF VS3_M 15.0 endwhile196
    JR_GTEQF VS2_M 15.0 endwhile196
  or197:
  whilebody196:
    WRITE32 ENDSUB_A3:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB199:
    WRITE32 ENDSUB_A2:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB200:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB201:
    JR_LTEQF VS3_M 15.0 and202
    JR_GTF VS2_M 15.0 whilebody196
  and202:
    JR_GTEQF VS3_M 15.0 and203
    JR_LTF VS2_M 15.0 whilebody196
  and203:
  endwhile196:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer205
	DATA8 nos205
	DATA8 busy205
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer205 nos205
	JR_EQ8 0 nos205 motornotbusy205
  motorwaiting205:
	OUTPUT_TEST layer205 nos205 busy205
	JR_EQ8 busy205 0 motornotbusy205
	SLEEP
	JR motorwaiting205
  motornotbusy205:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody193
  endfor193:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB208 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB208:
    WRITE32 ENDSUB_A2:CALLSUB209 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB209:
    MOVEF_F 80.0 VJ_M
  while210:
    JR_LTEQF VS3_M 15.0 endwhile210
  whilebody210:
    WRITE32 ENDSUB_A3:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB211:
    WRITE32 ENDSUB_A2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB212:
    JR_LTEQF VJ_M 30.0 else213_1
    SUBF VJ_M 0.1 VJ_M
  else213_1:
  endif213:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody210
  endwhile210:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB217:
    WRITE32 ENDSUB_A2:CALLSUB218 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB218:
    MOVEF_F 80.0 VJ_M
  while219:
    JR_GTEQF VS3_M 25.0 endwhile219
  whilebody219:
    WRITE32 ENDSUB_A3:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB220:
    WRITE32 ENDSUB_A2:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB221:
    JR_LTEQF VJ_M 30.0 else222_1
    SUBF VJ_M 0.1 VJ_M
  else222_1:
  endif222:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 25.0 whilebody219
  endwhile219:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while227:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf231
    DATA8 flag231
    DIVF F.1 2.0 tmpf231
    CP_EQF 0.0 2.0 flag231
    SELECTF flag231 0.0 tmpf231 F.0

    JR_GTEQF F.0 50.0 endwhile227
  whilebody227:
    WRITE32 ENDSUB_A3:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB232:
    WRITE32 ENDSUB_A2:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB233:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_A3:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB234:
    WRITE32 ENDSUB_A2:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB235:
    ADDF VMIN3_M VMAX3_M F.1
    DATAF tmpf237
    DATA8 flag237
    DIVF F.1 2.0 tmpf237
    CP_EQF 0.0 2.0 flag237
    SELECTF flag237 0.0 tmpf237 F.0

    SUBF VS3_M F.0 VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf249
    DATA8 flag249
    DIVF F.1 2.0 tmpf249
    CP_EQF 0.0 2.0 flag249
    SELECTF flag249 0.0 tmpf249 F.0

    JR_LTF F.0 50.0 whilebody227
  endwhile227:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer251
	DATA8 nos251
	DATA8 busy251
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer251 nos251
	JR_EQ8 0 nos251 motornotbusy251
  motorwaiting251:
	OUTPUT_TEST layer251 nos251 busy251
	JR_EQ8 busy251 0 motornotbusy251
	SLEEP
	JR motorwaiting251
  motornotbusy251:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds253
	MOVEF_32 500.0 milliseconds253
	DATA32 timer253
	TIMER_WAIT milliseconds253 timer253
	TIMER_READY timer253
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 50.0 'true'

	DATA8 layer255
	DATA8 nos255
	DATA8 busy255
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer255 nos255
	JR_EQ8 0 nos255 motornotbusy255
  motorwaiting255:
	OUTPUT_TEST layer255 nos255 busy255
	JR_EQ8 busy255 0 motornotbusy255
	SLEEP
	JR motorwaiting255
  motornotbusy255:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 350.0 'true'

	DATA8 layer256
	DATA8 nos256
	DATA8 busy256
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer256 nos256
	JR_EQ8 0 nos256 motornotbusy256
  motorwaiting256:
	OUTPUT_TEST layer256 nos256 busy256
	JR_EQ8 busy256 0 motornotbusy256
	SLEEP
	JR motorwaiting256
  motornotbusy256:
    WRITE32 ENDSUB_A2:CALLSUB257 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB257:
    WRITE32 ENDSUB_A3:CALLSUB258 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB258:
  while259:
    JR_LTEQF VS3_M 10.0 and261
    JR_GTF VS2_M 10.0 or260
  and261:
    JR_GTEQF VS3_M 10.0 and262
    JR_GTF VS2_M 10.0 or260
  and262:
    JR_LTEQF VS3_M 6.0 endwhile259
    JR_GTEQF VS2_M 6.0 endwhile259
  or260:
  whilebody259:
    WRITE32 ENDSUB_A2:CALLSUB263 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB263:
    WRITE32 ENDSUB_A3:CALLSUB264 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB264:
    CALL MOTOR.STARTPOWER 'bc' 20.0
    JR_LTEQF VS3_M 10.0 and266
    JR_GTF VS2_M 10.0 whilebody259
  and266:
    JR_GTEQF VS3_M 10.0 and267
    JR_GTF VS2_M 10.0 whilebody259
  and267:
    JR_LTEQF VS3_M 6.0 and268
    JR_LTF VS2_M 6.0 whilebody259
  and268:
  endwhile259:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer270
	DATA8 nos270
	DATA8 busy270
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer270 nos270
	JR_EQ8 0 nos270 motornotbusy270
  motorwaiting270:
	OUTPUT_TEST layer270 nos270 busy270
	JR_EQ8 busy270 0 motornotbusy270
	SLEEP
	JR motorwaiting270
  motornotbusy270:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB272 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB272:
    WRITE32 ENDSUB_A2:CALLSUB273 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB273:
  while274:
    JR_LTEQF VS3_M 10.0 endwhile274
  whilebody274:
    WRITE32 ENDSUB_A3:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB275:
    WRITE32 ENDSUB_A2:CALLSUB276 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB276:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody274
  endwhile274:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB279 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB279:
    WRITE32 ENDSUB_A2:CALLSUB280 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB280:
  while281:
    JR_GTEQF VS3_M 15.0 endwhile281
  whilebody281:
    WRITE32 ENDSUB_A3:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB282:
    WRITE32 ENDSUB_A2:CALLSUB283 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB283:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody281
  endwhile281:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds286
	MOVEF_32 100.0 milliseconds286
	DATA32 timer286
	TIMER_WAIT milliseconds286 timer286
	TIMER_READY timer286
RETSUB_BELLAM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM:
SUB_BELLAM2:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer287
	DATA8 nos287
	DATA8 busy287
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer287 nos287
	JR_EQ8 0 nos287 motornotbusy287
  motorwaiting287:
	OUTPUT_TEST layer287 nos287 busy287
	JR_EQ8 busy287 0 motornotbusy287
	SLEEP
	JR motorwaiting287
  motornotbusy287:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer288
	DATA8 nos288
	DATA8 busy288
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer288 nos288
	JR_EQ8 0 nos288 motornotbusy288
  motorwaiting288:
	OUTPUT_TEST layer288 nos288 busy288
	JR_EQ8 busy288 0 motornotbusy288
	SLEEP
	JR motorwaiting288
  motornotbusy288:
    WRITE32 ENDSUB_A2:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB289:
    WRITE32 ENDSUB_A3:CALLSUB290 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB290:
  while291:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 60.0 endwhile291
  whilebody291:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 60.0 whilebody291
  endwhile291:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB296 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB296:
    WRITE32 ENDSUB_A3:CALLSUB297 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB297:
  while298:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf302
    DATA8 flag302
    DIVF F.1 2.0 tmpf302
    CP_EQF 0.0 2.0 flag302
    SELECTF flag302 0.0 tmpf302 F.0

    JR_GTEQF F.0 80.0 endwhile298
  whilebody298:
    WRITE32 ENDSUB_A3:CALLSUB303 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB303:
    WRITE32 ENDSUB_A2:CALLSUB304 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB304:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB305 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB305:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf309
    DATA8 flag309
    DIVF F.1 2.0 tmpf309
    CP_EQF 0.0 2.0 flag309
    SELECTF flag309 0.0 tmpf309 F.0

    JR_LTF F.0 80.0 whilebody298
  endwhile298:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB311 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB311:
    WRITE32 ENDSUB_A2:CALLSUB312 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB312:
  while313:
    JR_LTEQF VS3_M 10.0 and315
    JR_GTF VS2_M 10.0 or314
  and315:
    JR_GTEQF VS3_M 10.0 endwhile313
    JR_GTEQF VS2_M 10.0 endwhile313
  or314:
  whilebody313:
    WRITE32 ENDSUB_A3:CALLSUB316 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB316:
    WRITE32 ENDSUB_A2:CALLSUB317 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB317:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB318 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB318:
    JR_LTEQF VS3_M 10.0 and319
    JR_GTF VS2_M 10.0 whilebody313
  and319:
    JR_GTEQF VS3_M 10.0 and320
    JR_LTF VS2_M 10.0 whilebody313
  and320:
  endwhile313:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer322
	DATA8 nos322
	DATA8 busy322
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer322 nos322
	JR_EQ8 0 nos322 motornotbusy322
  motorwaiting322:
	OUTPUT_TEST layer322 nos322 busy322
	JR_EQ8 busy322 0 motornotbusy322
	SLEEP
	JR motorwaiting322
  motornotbusy322:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB324 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB324:
    WRITE32 ENDSUB_A2:CALLSUB325 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB325:
  while326:
    JR_LTEQF VS3_M 10.0 endwhile326
  whilebody326:
    WRITE32 ENDSUB_A3:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB327:
    WRITE32 ENDSUB_A2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB328:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody326
  endwhile326:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB331:
    WRITE32 ENDSUB_A2:CALLSUB332 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB332:
  while333:
    JR_GTEQF VS3_M 15.0 endwhile333
  whilebody333:
    WRITE32 ENDSUB_A3:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB334:
    WRITE32 ENDSUB_A2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB335:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody333
  endwhile333:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB338:
    WRITE32 ENDSUB_A2:CALLSUB339 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB339:
    MOVEF_F 1.0 VI_M
  for340:
    JR_GTF VI_M 2.0 endfor340
  forbody340:
    WRITE32 ENDSUB_A3:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB341:
    WRITE32 ENDSUB_A2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB342:
  while343:
    JR_LTEQF VS3_M 15.0 and345
    JR_GTF VS2_M 15.0 or344
  and345:
    JR_GTEQF VS3_M 15.0 endwhile343
    JR_GTEQF VS2_M 15.0 endwhile343
  or344:
  whilebody343:
    WRITE32 ENDSUB_A3:CALLSUB346 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB346:
    WRITE32 ENDSUB_A2:CALLSUB347 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB347:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB348 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB348:
    JR_LTEQF VS3_M 15.0 and349
    JR_GTF VS2_M 15.0 whilebody343
  and349:
    JR_GTEQF VS3_M 15.0 and350
    JR_LTF VS2_M 15.0 whilebody343
  and350:
  endwhile343:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer351
	DATA8 nos351
	DATA8 busy351
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer351 nos351
	JR_EQ8 0 nos351 motornotbusy351
  motorwaiting351:
	OUTPUT_TEST layer351 nos351 busy351
	JR_EQ8 busy351 0 motornotbusy351
	SLEEP
	JR motorwaiting351
  motornotbusy351:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 2.0 forbody340
  endfor340:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 20.0 'true'

	DATA8 layer353
	DATA8 nos353
	DATA8 busy353
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer353 nos353
	JR_EQ8 0 nos353 motornotbusy353
  motorwaiting353:
	OUTPUT_TEST layer353 nos353 busy353
	JR_EQ8 busy353 0 motornotbusy353
	SLEEP
	JR motorwaiting353
  motornotbusy353:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB355 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB355:
    WRITE32 ENDSUB_A2:CALLSUB356 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB356:
    MOVEF_F 80.0 VJ_M
  while357:
    JR_LTEQF VS3_M 10.0 endwhile357
  whilebody357:
    WRITE32 ENDSUB_A3:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB358:
    WRITE32 ENDSUB_A2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB359:
    JR_LTEQF VJ_M 30.0 else360_1
    SUBF VJ_M 0.1 VJ_M
  else360_1:
  endif360:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody357
  endwhile357:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB364 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB364:
    WRITE32 ENDSUB_A2:CALLSUB365 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB365:
    MOVEF_F 80.0 VJ_M
  while366:
    JR_GTEQF VS3_M 15.0 endwhile366
  whilebody366:
    WRITE32 ENDSUB_A3:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB367:
    WRITE32 ENDSUB_A2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB368:
    JR_LTEQF VJ_M 30.0 else369_1
    SUBF VJ_M 0.1 VJ_M
  else369_1:
  endif369:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody366
  endwhile366:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while374:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf378
    DATA8 flag378
    DIVF F.1 2.0 tmpf378
    CP_EQF 0.0 2.0 flag378
    SELECTF flag378 0.0 tmpf378 F.0

    JR_GTEQF F.0 50.0 endwhile374
  whilebody374:
    WRITE32 ENDSUB_A3:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB379:
    WRITE32 ENDSUB_A2:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB380:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB381 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB381:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf385
    DATA8 flag385
    DIVF F.1 2.0 tmpf385
    CP_EQF 0.0 2.0 flag385
    SELECTF flag385 0.0 tmpf385 F.0

    JR_LTF F.0 50.0 whilebody374
  endwhile374:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer387
	DATA8 nos387
	DATA8 busy387
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer387 nos387
	JR_EQ8 0 nos387 motornotbusy387
  motorwaiting387:
	OUTPUT_TEST layer387 nos387 busy387
	JR_EQ8 busy387 0 motornotbusy387
	SLEEP
	JR motorwaiting387
  motornotbusy387:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds389
	MOVEF_32 500.0 milliseconds389
	DATA32 timer389
	TIMER_WAIT milliseconds389 timer389
	TIMER_READY timer389
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while392:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf396
    DATA8 flag396
    DIVF F.1 2.0 tmpf396
    CP_EQF 0.0 2.0 flag396
    SELECTF flag396 0.0 tmpf396 F.0

    JR_LTEQF F.0 -200.0 endwhile392
  whilebody392:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf401
    DATA8 flag401
    DIVF F.1 2.0 tmpf401
    CP_EQF 0.0 2.0 flag401
    SELECTF flag401 0.0 tmpf401 F.0

    JR_GTF F.0 -200.0 whilebody392
  endwhile392:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer403
	DATA8 nos403
	DATA8 busy403
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer403 nos403
	JR_EQ8 0 nos403 motornotbusy403
  motorwaiting403:
	OUTPUT_TEST layer403 nos403 busy403
	JR_EQ8 busy403 0 motornotbusy403
	SLEEP
	JR motorwaiting403
  motornotbusy403:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB405 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB405:
    WRITE32 ENDSUB_A3:CALLSUB406 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB406:
  while407:
    JR_LTEQF VS3_M 10.0 and409
    JR_GTF VS2_M 10.0 or408
  and409:
    JR_LTEQF VS3_M 10.0 and410
    JR_LTF VS2_M 10.0 or408
  and410:
    JR_GTEQF VS3_M 10.0 endwhile407
    JR_LTEQF VS2_M 10.0 endwhile407
  or408:
  whilebody407:
    WRITE32 ENDSUB_A2:CALLSUB411 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB411:
    WRITE32 ENDSUB_A3:CALLSUB412 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB412:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VS3_M 10.0 and414
    JR_GTF VS2_M 10.0 whilebody407
  and414:
    JR_LTEQF VS3_M 10.0 and415
    JR_LTF VS2_M 10.0 whilebody407
  and415:
    JR_GTEQF VS3_M 10.0 and416
    JR_GTF VS2_M 10.0 whilebody407
  and416:
  endwhile407:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer418
	DATA8 nos418
	DATA8 busy418
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer418 nos418
	JR_EQ8 0 nos418 motornotbusy418
  motorwaiting418:
	OUTPUT_TEST layer418 nos418 busy418
	JR_EQ8 busy418 0 motornotbusy418
	SLEEP
	JR motorwaiting418
  motornotbusy418:
    WRITE32 ENDSUB_A3:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB419:
    WRITE32 ENDSUB_A2:CALLSUB420 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB420:
  while421:
    JR_LTEQF VS3_M 10.0 endwhile421
  whilebody421:
    WRITE32 ENDSUB_A3:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB422:
    WRITE32 ENDSUB_A2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB423:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody421
  endwhile421:
    WRITE32 ENDSUB_A3:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB425:
    WRITE32 ENDSUB_A2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB426:
  while427:
    JR_GTEQF VS3_M 15.0 endwhile427
  whilebody427:
    WRITE32 ENDSUB_A3:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB428:
    WRITE32 ENDSUB_A2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB429:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody427
  endwhile427:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM2:
SUB_BELLAM3:
  while432:
    JR_LTEQF VS3_M 15.0 and434
    JR_GTF VS2_M 15.0 or433
  and434:
    JR_GTEQF VS3_M 15.0 endwhile432
    JR_GTEQF VS2_M 15.0 endwhile432
  or433:
  whilebody432:
    WRITE32 ENDSUB_A3:CALLSUB435 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB435:
    WRITE32 ENDSUB_A2:CALLSUB436 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB436:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB437:
    JR_LTEQF VS3_M 15.0 and438
    JR_GTF VS2_M 15.0 whilebody432
  and438:
    JR_GTEQF VS3_M 15.0 and439
    JR_LTF VS2_M 15.0 whilebody432
  and439:
  endwhile432:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer441
	DATA8 nos441
	DATA8 busy441
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer441 nos441
	JR_EQ8 0 nos441 motornotbusy441
  motorwaiting441:
	OUTPUT_TEST layer441 nos441 busy441
	JR_EQ8 busy441 0 motornotbusy441
	SLEEP
	JR motorwaiting441
  motornotbusy441:
    WRITE32 ENDSUB_A3:CALLSUB442 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB442:
    WRITE32 ENDSUB_A2:CALLSUB443 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB443:
  while444:
    JR_LTEQF VS3_M 15.0 endwhile444
  whilebody444:
    WRITE32 ENDSUB_A3:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB445:
    WRITE32 ENDSUB_A2:CALLSUB446 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB446:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody444
  endwhile444:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB449 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB449:
    WRITE32 ENDSUB_A2:CALLSUB450 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB450:
  while451:
    JR_GTEQF VS3_M 15.0 endwhile451
  whilebody451:
    WRITE32 ENDSUB_A3:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB452:
    WRITE32 ENDSUB_A2:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB453:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody451
  endwhile451:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while457:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile457
  whilebody457:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB459:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody457
  endwhile457:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB462 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB462:
    WRITE32 ENDSUB_A2:CALLSUB463 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB463:
    MOVEF_F 0.2 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 1.0 VI_M
  for464:
    JR_GTF VI_M 3.0 endfor464
  forbody464:
    WRITE32 ENDSUB_A3:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB465:
    WRITE32 ENDSUB_A2:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB466:
  while467:
    JR_LTEQF VS3_M 15.0 and469
    JR_GTF VS2_M 15.0 or468
  and469:
    JR_GTEQF VS3_M 15.0 endwhile467
    JR_GTEQF VS2_M 15.0 endwhile467
  or468:
  whilebody467:
    WRITE32 ENDSUB_A3:CALLSUB470 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB470:
    WRITE32 ENDSUB_A2:CALLSUB471 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB471:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB472:
    JR_LTEQF VS3_M 15.0 and473
    JR_GTF VS2_M 15.0 whilebody467
  and473:
    JR_GTEQF VS3_M 15.0 and474
    JR_LTF VS2_M 15.0 whilebody467
  and474:
  endwhile467:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer475
	DATA8 nos475
	DATA8 busy475
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer475 nos475
	JR_EQ8 0 nos475 motornotbusy475
  motorwaiting475:
	OUTPUT_TEST layer475 nos475 busy475
	JR_EQ8 busy475 0 motornotbusy475
	SLEEP
	JR motorwaiting475
  motornotbusy475:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody464
  endfor464:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.2 VK1_M
    MOVEF_F 8.0 VK2_M
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer478
	DATA8 nos478
	DATA8 busy478
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer478 nos478
	JR_EQ8 0 nos478 motornotbusy478
  motorwaiting478:
	OUTPUT_TEST layer478 nos478 busy478
	JR_EQ8 busy478 0 motornotbusy478
	SLEEP
	JR motorwaiting478
  motornotbusy478:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 100.0 'true'

	DATA8 layer479
	DATA8 nos479
	DATA8 busy479
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer479 nos479
	JR_EQ8 0 nos479 motornotbusy479
  motorwaiting479:
	OUTPUT_TEST layer479 nos479 busy479
	JR_EQ8 busy479 0 motornotbusy479
	SLEEP
	JR motorwaiting479
  motornotbusy479:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds481
	MOVEF_32 500.0 milliseconds481
	DATA32 timer481
	TIMER_WAIT milliseconds481 timer481
	TIMER_READY timer481
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 100.0 'true'

	DATA8 layer483
	DATA8 nos483
	DATA8 busy483
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer483 nos483
	JR_EQ8 0 nos483 motornotbusy483
  motorwaiting483:
	OUTPUT_TEST layer483 nos483 busy483
	JR_EQ8 busy483 0 motornotbusy483
	SLEEP
	JR motorwaiting483
  motornotbusy483:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 400.0 'true'

	DATA8 layer484
	DATA8 nos484
	DATA8 busy484
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer484 nos484
	JR_EQ8 0 nos484 motornotbusy484
  motorwaiting484:
	OUTPUT_TEST layer484 nos484 busy484
	JR_EQ8 busy484 0 motornotbusy484
	SLEEP
	JR motorwaiting484
  motornotbusy484:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 200.0 'true'

	DATA8 layer485
	DATA8 nos485
	DATA8 busy485
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer485 nos485
	JR_EQ8 0 nos485 motornotbusy485
  motorwaiting485:
	OUTPUT_TEST layer485 nos485 busy485
	JR_EQ8 busy485 0 motornotbusy485
	SLEEP
	JR motorwaiting485
  motornotbusy485:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 300.0 'true'

	DATA8 layer486
	DATA8 nos486
	DATA8 busy486
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer486 nos486
	JR_EQ8 0 nos486 motornotbusy486
  motorwaiting486:
	OUTPUT_TEST layer486 nos486 busy486
	JR_EQ8 busy486 0 motornotbusy486
	SLEEP
	JR motorwaiting486
  motornotbusy486:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 20.0 300.0 'true'

	DATA8 layer487
	DATA8 nos487
	DATA8 busy487
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer487 nos487
	JR_EQ8 0 nos487 motornotbusy487
  motorwaiting487:
	OUTPUT_TEST layer487 nos487 busy487
	JR_EQ8 busy487 0 motornotbusy487
	SLEEP
	JR motorwaiting487
  motornotbusy487:
    WRITE32 ENDSUB_A2:CALLSUB488 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB488:
    WRITE32 ENDSUB_A3:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB489:
  while490:
    JR_LTEQF VS3_M 10.0 and492
    JR_GTF VS2_M 10.0 or491
  and492:
    JR_GTEQF VS3_M 10.0 and493
    JR_GTF VS2_M 10.0 or491
  and493:
    JR_LTEQF VS3_M 10.0 endwhile490
    JR_GTEQF VS2_M 10.0 endwhile490
  or491:
  whilebody490:
    WRITE32 ENDSUB_A2:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB494:
    WRITE32 ENDSUB_A3:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB495:
    CALL MOTOR.STARTPOWER 'bc' 80.0
    JR_LTEQF VS3_M 10.0 and497
    JR_GTF VS2_M 10.0 whilebody490
  and497:
    JR_GTEQF VS3_M 10.0 and498
    JR_GTF VS2_M 10.0 whilebody490
  and498:
    JR_LTEQF VS3_M 10.0 and499
    JR_LTF VS2_M 10.0 whilebody490
  and499:
  endwhile490:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 40.0 'true'

	DATA8 layer501
	DATA8 nos501
	DATA8 busy501
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer501 nos501
	JR_EQ8 0 nos501 motornotbusy501
  motorwaiting501:
	OUTPUT_TEST layer501 nos501 busy501
	JR_EQ8 busy501 0 motornotbusy501
	SLEEP
	JR motorwaiting501
  motornotbusy501:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB503 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB503:
    WRITE32 ENDSUB_A2:CALLSUB504 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB504:
  while505:
    JR_LTEQF VS3_M 10.0 endwhile505
  whilebody505:
    WRITE32 ENDSUB_A3:CALLSUB506 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB506:
    WRITE32 ENDSUB_A2:CALLSUB507 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB507:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_GTF VS3_M 10.0 whilebody505
  endwhile505:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB510 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB510:
    WRITE32 ENDSUB_A2:CALLSUB511 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB511:
  while512:
    JR_GTEQF VS3_M 15.0 endwhile512
  whilebody512:
    WRITE32 ENDSUB_A3:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB513:
    WRITE32 ENDSUB_A2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB514:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_LTF VS3_M 15.0 whilebody512
  endwhile512:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 1.0 VI_M
  for517:
    JR_GTF VI_M 1.0 endfor517
  forbody517:
    WRITE32 ENDSUB_A3:CALLSUB518 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB518:
    WRITE32 ENDSUB_A2:CALLSUB519 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB519:
  while520:
    JR_LTEQF VS3_M 10.0 and522
    JR_GTF VS2_M 10.0 or521
  and522:
    JR_GTEQF VS3_M 10.0 endwhile520
    JR_GTEQF VS2_M 10.0 endwhile520
  or521:
  whilebody520:
    WRITE32 ENDSUB_A3:CALLSUB523 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB523:
    WRITE32 ENDSUB_A2:CALLSUB524 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB524:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB525 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB525:
    JR_LTEQF VS3_M 10.0 and526
    JR_GTF VS2_M 10.0 whilebody520
  and526:
    JR_GTEQF VS3_M 10.0 and527
    JR_LTF VS2_M 10.0 whilebody520
  and527:
  endwhile520:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer529
	DATA8 nos529
	DATA8 busy529
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer529 nos529
	JR_EQ8 0 nos529 motornotbusy529
  motorwaiting529:
	OUTPUT_TEST layer529 nos529 busy529
	JR_EQ8 busy529 0 motornotbusy529
	SLEEP
	JR motorwaiting529
  motornotbusy529:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody517
  endfor517:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM3:
SUB_RED_1:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer532
	DATA8 nos532
	DATA8 busy532
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer532 nos532
	JR_EQ8 0 nos532 motornotbusy532
  motorwaiting532:
	OUTPUT_TEST layer532 nos532 busy532
	JR_EQ8 busy532 0 motornotbusy532
	SLEEP
	JR motorwaiting532
  motornotbusy532:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB534:
    WRITE32 ENDSUB_A2:CALLSUB535 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB535:
  while536:
    JR_LTEQF VS2_M 15.0 endwhile536
  whilebody536:
    WRITE32 ENDSUB_A3:CALLSUB537 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB537:
    WRITE32 ENDSUB_A2:CALLSUB538 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB538:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody536
  endwhile536:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB541 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB541:
    WRITE32 ENDSUB_A2:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB542:
  while543:
    JR_GTEQF VS2_M 15.0 endwhile543
  whilebody543:
    WRITE32 ENDSUB_A3:CALLSUB544 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB544:
    WRITE32 ENDSUB_A2:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB545:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody543
  endwhile543:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while550:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf554
    DATA8 flag554
    DIVF F.1 2.0 tmpf554
    CP_EQF 0.0 2.0 flag554
    SELECTF flag554 0.0 tmpf554 F.0

    JR_GTEQF F.0 270.0 endwhile550
  whilebody550:
    MOVEF_F 50.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB555 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB555:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf559
    DATA8 flag559
    DIVF F.1 2.0 tmpf559
    CP_EQF 0.0 2.0 flag559
    SELECTF flag559 0.0 tmpf559 F.0

    JR_LTF F.0 270.0 whilebody550
  endwhile550:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds561
	MOVEF_32 100.0 milliseconds561
	DATA32 timer561
	TIMER_WAIT milliseconds561 timer561
	TIMER_READY timer561
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds563
	MOVEF_32 500.0 milliseconds563
	DATA32 timer563
	TIMER_WAIT milliseconds563 timer563
	TIMER_READY timer563
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB565 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB565:
    MOVEF_F 1470.0 VS_M
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf566
    DATA8 flag566
    DIVF 360.0 VL_M tmpf566
    CP_EQF 0.0 VL_M flag566
    SELECTF flag566 0.0 tmpf566 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while569:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 VX_M endwhile569
  whilebody569:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2DUS:CALLSUB571 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2DUS
CALLSUB571:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 VX_M whilebody569
  endwhile569:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_REDL:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_REDL
CALLSUB574:
    WRITE32 ENDSUB_BELLAM:CALLSUB575 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BELLAM
CALLSUB575:
    MOVEF_F 1400.0 VS_M
    WRITE32 ENDSUB_US:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_US
CALLSUB576:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 70.0 'true'

	DATA8 layer578
	DATA8 nos578
	DATA8 busy578
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer578 nos578
	JR_EQ8 0 nos578 motornotbusy578
  motorwaiting578:
	OUTPUT_TEST layer578 nos578 busy578
	JR_EQ8 busy578 0 motornotbusy578
	SLEEP
	JR motorwaiting578
  motornotbusy578:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB580:
    WRITE32 ENDSUB_A2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB581:
  while582:
    JR_LTEQF VS2_M 15.0 endwhile582
  whilebody582:
    WRITE32 ENDSUB_A3:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB583:
    WRITE32 ENDSUB_A2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB584:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody582
  endwhile582:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB587 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB587:
    WRITE32 ENDSUB_A2:CALLSUB588 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB588:
  while589:
    JR_GTEQF VS2_M 15.0 endwhile589
  whilebody589:
    WRITE32 ENDSUB_A3:CALLSUB590 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB590:
    WRITE32 ENDSUB_A2:CALLSUB591 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB591:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody589
  endwhile589:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while595:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf599
    DATA8 flag599
    DIVF F.1 2.0 tmpf599
    CP_EQF 0.0 2.0 flag599
    SELECTF flag599 0.0 tmpf599 F.0

    JR_GTEQF F.0 200.0 endwhile595
  whilebody595:
    WRITE32 ENDSUB_A3:CALLSUB600 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB600:
    WRITE32 ENDSUB_A2:CALLSUB601 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB601:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB602 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB602:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf606
    DATA8 flag606
    DIVF F.1 2.0 tmpf606
    CP_EQF 0.0 2.0 flag606
    SELECTF flag606 0.0 tmpf606 F.0

    JR_LTF F.0 200.0 whilebody595
  endwhile595:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds609
	MOVEF_32 500.0 milliseconds609
	DATA32 timer609
	TIMER_WAIT milliseconds609 timer609
	TIMER_READY timer609
    CALL MOTOR.STOP 'd' 'true'
    DATA32 tmp611
    CALL GETANDINC32 RUNCOUNTER_VIDVIG 1  RUNCOUNTER_VIDVIG tmp611
    JR_NEQ32 0 tmp611 alreadylaunched611
    OBJECT_START TVIDVIG
  alreadylaunched611:
    WRITE32 ENDSUB_NPL:CALLSUB612 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB612:
    WRITE32 ENDSUB_A3:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB613:
    WRITE32 ENDSUB_A2:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB614:
  while615:
    JR_LTEQF VS3_M 15.0 and617
    JR_GTF VS2_M 15.0 or616
  and617:
    JR_GTEQF VS3_M 15.0 endwhile615
    JR_GTEQF VS2_M 15.0 endwhile615
  or616:
  whilebody615:
    WRITE32 ENDSUB_A3:CALLSUB618 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB618:
    WRITE32 ENDSUB_A2:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB619:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB620:
    JR_LTEQF VS3_M 15.0 and621
    JR_GTF VS2_M 15.0 whilebody615
  and621:
    JR_GTEQF VS3_M 15.0 and622
    JR_LTF VS2_M 15.0 whilebody615
  and622:
  endwhile615:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer624
	DATA8 nos624
	DATA8 busy624
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer624 nos624
	JR_EQ8 0 nos624 motornotbusy624
  motorwaiting624:
	OUTPUT_TEST layer624 nos624 busy624
	JR_EQ8 busy624 0 motornotbusy624
	SLEEP
	JR motorwaiting624
  motornotbusy624:
    WRITE32 ENDSUB_A3:CALLSUB625 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB625:
    WRITE32 ENDSUB_A2:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB626:
  while627:
    JR_LTEQF VS3_M 15.0 and629
    JR_GTF VS2_M 15.0 or628
  and629:
    JR_GTEQF VS3_M 15.0 endwhile627
    JR_GTEQF VS2_M 15.0 endwhile627
  or628:
  whilebody627:
    WRITE32 ENDSUB_A3:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB630:
    WRITE32 ENDSUB_A2:CALLSUB631 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB631:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB632 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB632:
    JR_LTEQF VS3_M 15.0 and633
    JR_GTF VS2_M 15.0 whilebody627
  and633:
    JR_GTEQF VS3_M 15.0 and634
    JR_LTF VS2_M 15.0 whilebody627
  and634:
  endwhile627:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RED_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RED_1:
SUB_SB1:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 -40.0 200.0 'true'

	DATA8 layer636
	DATA8 nos636
	DATA8 busy636
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer636 nos636
	JR_EQ8 0 nos636 motornotbusy636
  motorwaiting636:
	OUTPUT_TEST layer636 nos636 busy636
	JR_EQ8 busy636 0 motornotbusy636
	SLEEP
	JR motorwaiting636
  motornotbusy636:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 40.0 300.0 'true'

	DATA8 layer637
	DATA8 nos637
	DATA8 busy637
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer637 nos637
	JR_EQ8 0 nos637 motornotbusy637
  motorwaiting637:
	OUTPUT_TEST layer637 nos637 busy637
	JR_EQ8 busy637 0 motornotbusy637
	SLEEP
	JR motorwaiting637
  motornotbusy637:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB639 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB639:
    WRITE32 ENDSUB_A2:CALLSUB640 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB640:
  while641:
    JR_LTEQF VS2_M 10.0 endwhile641
  whilebody641:
    WRITE32 ENDSUB_A3:CALLSUB642 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB642:
    WRITE32 ENDSUB_A2:CALLSUB643 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB643:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 10.0 whilebody641
  endwhile641:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB646 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB646:
    WRITE32 ENDSUB_A2:CALLSUB647 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB647:
  while648:
    JR_GTEQF VS2_M 15.0 endwhile648
  whilebody648:
    WRITE32 ENDSUB_A3:CALLSUB649 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB649:
    WRITE32 ENDSUB_A2:CALLSUB650 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB650:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody648
  endwhile648:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds653
	MOVEF_32 100.0 milliseconds653
	DATA32 timer653
	TIMER_WAIT milliseconds653 timer653
	TIMER_READY timer653
    CALL MOTOR.RESETCOUNT 'bc'
  while655:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf659
    DATA8 flag659
    DIVF F.1 2.0 tmpf659
    CP_EQF 0.0 2.0 flag659
    SELECTF flag659 0.0 tmpf659 F.0

    JR_GTEQF F.0 200.0 endwhile655
  whilebody655:
    WRITE32 ENDSUB_A3:CALLSUB660 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB660:
    WRITE32 ENDSUB_A2:CALLSUB661 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB661:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB662 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB662:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf666
    DATA8 flag666
    DIVF F.1 2.0 tmpf666
    CP_EQF 0.0 2.0 flag666
    SELECTF flag666 0.0 tmpf666 F.0

    JR_LTF F.0 200.0 whilebody655
  endwhile655:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB668 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB668:
    WRITE32 ENDSUB_A2:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB669:
  while670:
    JR_LTEQF VS3_M 10.0 and672
    JR_GTF VS2_M 10.0 or671
  and672:
    JR_GTEQF VS3_M 10.0 endwhile670
    JR_GTEQF VS2_M 10.0 endwhile670
  or671:
  whilebody670:
    WRITE32 ENDSUB_A3:CALLSUB673 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB673:
    WRITE32 ENDSUB_A2:CALLSUB674 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB674:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB675 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB675:
    JR_LTEQF VS3_M 10.0 and676
    JR_GTF VS2_M 10.0 whilebody670
  and676:
    JR_GTEQF VS3_M 10.0 and677
    JR_LTF VS2_M 10.0 whilebody670
  and677:
  endwhile670:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_SB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SB1:
SUB_HSV:
    DATA8 layer679
	DATA8 no679
	DATA8 mode8679
	
	MOVEF_8 1.0 no679
	SUB8 no679 1 no679
	DIV8 no679 4 layer679
	MATH MOD8 no679 4 no679

	MOVEF_8 2.0 mode8679
	
	INPUT_DEVICE READY_RAW layer679 no679 0 mode8679 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf686
    DATA8 flag686
    DIVF VSRED_M 255.0 tmpf686
    CP_EQF 0.0 255.0 flag686
    SELECTF flag686 0.0 tmpf686 VSRED_M

    DATAF tmpf687
    DATA8 flag687
    DIVF VSGREEN_M 255.0 tmpf687
    CP_EQF 0.0 255.0 flag687
    SELECTF flag687 0.0 tmpf687 VSGREEN_M

    DATAF tmpf688
    DATA8 flag688
    DIVF VSBLUE_M 255.0 tmpf688
    CP_EQF 0.0 255.0 flag688
    SELECTF flag688 0.0 tmpf688 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else689_1
    JR_LTEQF VSRED_M VSBLUE_M else689_1
    MOVEF_F VSRED_M VMAX_M
    JR endif689
  else689_1:
    JR_LTEQF VSGREEN_M VSRED_M else689_2
    JR_LTEQF VSGREEN_M VSBLUE_M else689_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif689
  else689_2:
    JR_LTEQF VSBLUE_M VSRED_M else689_3
    JR_LTEQF VSBLUE_M VSGREEN_M else689_3
    MOVEF_F VSBLUE_M VMAX_M
  else689_3:
  endif689:
    JR_GTEQF VSRED_M VSGREEN_M else690_1
    JR_GTEQF VSRED_M VSBLUE_M else690_1
    MOVEF_F VSRED_M VMIN_M
    JR endif690
  else690_1:
    JR_GTEQF VSGREEN_M VSRED_M else690_2
    JR_GTEQF VSGREEN_M VSBLUE_M else690_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif690
  else690_2:
    JR_GTEQF VSBLUE_M VSRED_M else690_3
    JR_GTEQF VSBLUE_M VSGREEN_M else690_3
    MOVEF_F VSBLUE_M VMIN_M
  else690_3:
  endif690:
    JR_NEQF VMAX_M VMIN_M else691_1
    MOVEF_F 0.0 VH_M
    JR endif691
  else691_1:
    JR_NEQF VSRED_M VMAX_M else692_1
    JR_LTF VSGREEN_M VSBLUE_M else693_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf697
    DATA8 flag697
    DIVF F.0 F.1 tmpf697
    CP_EQF 0.0 F.1 flag697
    SELECTF flag697 0.0 tmpf697 VH_M

    JR endif693
  else693_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf701
    DATA8 flag701
    DIVF F.1 F.2 tmpf701
    CP_EQF 0.0 F.2 flag701
    SELECTF flag701 0.0 tmpf701 F.0

    ADDF F.0 360.0 VH_M
  else693_2:
  endif693:
    JR endif692
  else692_1:
    JR_NEQF VMAX_M VSGREEN_M else703_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf707
    DATA8 flag707
    DIVF F.1 F.2 tmpf707
    CP_EQF 0.0 F.2 flag707
    SELECTF flag707 0.0 tmpf707 F.0

    ADDF F.0 120.0 VH_M
    JR endif703
  else703_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf712
    DATA8 flag712
    DIVF F.1 F.2 tmpf712
    CP_EQF 0.0 F.2 flag712
    SELECTF flag712 0.0 tmpf712 F.0

    ADDF F.0 240.0 VH_M
  else703_2:
  endif703:
  else692_2:
  endif692:
  else691_2:
  endif691:
    JR_NEQF VMAX_M 0.0 else714_1
    MOVEF_F 0.0 VS_M
    JR endif714
  else714_1:
    DATAF tmpf715
    DATA8 flag715
    DIVF VMIN_M VMAX_M tmpf715
    CP_EQF 0.0 VMAX_M flag715
    SELECTF flag715 0.0 tmpf715 F.0

    SUBF 1.0 F.0 VS_M
  else714_2:
  endif714:
    MOVEF_F VMAX_M VV_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_HSV_100:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    DATA8 layer724
	DATA8 no724
	DATA8 mode8724
	
	MOVEF_8 1.0 no724
	SUB8 no724 1 no724
	DIV8 no724 4 layer724
	MATH MOD8 no724 4 no724

	MOVEF_8 2.0 mode8724
	
	INPUT_DEVICE READY_RAW layer724 no724 0 mode8724 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 1.0 VP_M
  for725:
    JR_GTF VP_M 100.0 endfor725
  forbody725:
    WRITE32 ENDSUB_HSV:CALLSUB726 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB726:
    ADDF VX_M VH_M VX_M
    ADDF VZ_M VS_M VZ_M
    ADDF VD_M VV_M VD_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody725
  endfor725:
    DATAF tmpf731
    DATA8 flag731
    DIVF VX_M 100.0 tmpf731
    CP_EQF 0.0 100.0 flag731
    SELECTF flag731 0.0 tmpf731 VH_M

    DATAF tmpf732
    DATA8 flag732
    DIVF VZ_M 100.0 tmpf732
    CP_EQF 0.0 100.0 flag732
    SELECTF flag732 0.0 tmpf732 VS_M

    DATAF tmpf733
    DATA8 flag733
    DIVF VD_M 100.0 tmpf733
    CP_EQF 0.0 100.0 flag733
    SELECTF flag733 0.0 tmpf733 VV_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV_100:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_100:
SUB_HSV_B:
    DATA8 layer741
	DATA8 no741
	DATA8 mode8741
	
	MOVEF_8 1.0 no741
	SUB8 no741 1 no741
	DIV8 no741 4 layer741
	MATH MOD8 no741 4 no741

	MOVEF_8 2.0 mode8741
	
	INPUT_DEVICE READY_RAW layer741 no741 0 mode8741 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf748
    DATA8 flag748
    DIVF VSRED_M 255.0 tmpf748
    CP_EQF 0.0 255.0 flag748
    SELECTF flag748 0.0 tmpf748 VSRED_M

    DATAF tmpf749
    DATA8 flag749
    DIVF VSGREEN_M 255.0 tmpf749
    CP_EQF 0.0 255.0 flag749
    SELECTF flag749 0.0 tmpf749 VSGREEN_M

    DATAF tmpf750
    DATA8 flag750
    DIVF VSBLUE_M 255.0 tmpf750
    CP_EQF 0.0 255.0 flag750
    SELECTF flag750 0.0 tmpf750 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else751_1
    JR_LTEQF VSRED_M VSBLUE_M else751_1
    MOVEF_F VSRED_M VMAX_M
    JR endif751
  else751_1:
    JR_LTEQF VSGREEN_M VSRED_M else751_2
    JR_LTEQF VSGREEN_M VSBLUE_M else751_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif751
  else751_2:
    JR_LTEQF VSBLUE_M VSRED_M else751_3
    JR_LTEQF VSBLUE_M VSGREEN_M else751_3
    MOVEF_F VSBLUE_M VMAX_M
  else751_3:
  endif751:
    JR_GTEQF VSRED_M VSGREEN_M else752_1
    JR_GTEQF VSRED_M VSBLUE_M else752_1
    MOVEF_F VSRED_M VMIN_M
    JR endif752
  else752_1:
    JR_GTEQF VSGREEN_M VSRED_M else752_2
    JR_GTEQF VSGREEN_M VSBLUE_M else752_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif752
  else752_2:
    JR_GTEQF VSBLUE_M VSRED_M else752_3
    JR_GTEQF VSBLUE_M VSGREEN_M else752_3
    MOVEF_F VSBLUE_M VMIN_M
  else752_3:
  endif752:
    JR_NEQF VMAX_M VMIN_M else753_1
    MOVEF_F 0.0 VH_M
    JR endif753
  else753_1:
    JR_NEQF VSRED_M VMAX_M else754_1
    JR_LTF VSGREEN_M VSBLUE_M else755_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf759
    DATA8 flag759
    DIVF F.0 F.1 tmpf759
    CP_EQF 0.0 F.1 flag759
    SELECTF flag759 0.0 tmpf759 VH_M

    JR endif755
  else755_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf763
    DATA8 flag763
    DIVF F.1 F.2 tmpf763
    CP_EQF 0.0 F.2 flag763
    SELECTF flag763 0.0 tmpf763 F.0

    ADDF F.0 360.0 VH_M
  else755_2:
  endif755:
    JR endif754
  else754_1:
    JR_NEQF VMAX_M VSGREEN_M else765_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf769
    DATA8 flag769
    DIVF F.1 F.2 tmpf769
    CP_EQF 0.0 F.2 flag769
    SELECTF flag769 0.0 tmpf769 F.0

    ADDF F.0 120.0 VH_M
    JR endif765
  else765_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf774
    DATA8 flag774
    DIVF F.1 F.2 tmpf774
    CP_EQF 0.0 F.2 flag774
    SELECTF flag774 0.0 tmpf774 F.0

    ADDF F.0 240.0 VH_M
  else765_2:
  endif765:
  else754_2:
  endif754:
  else753_2:
  endif753:
    JR_NEQF VMAX_M 0.0 else776_1
    MOVEF_F 0.0 VS_M
    JR endif776
  else776_1:
    DATAF tmpf777
    DATA8 flag777
    DIVF VMIN_M VMAX_M tmpf777
    CP_EQF 0.0 VMAX_M flag777
    SELECTF flag777 0.0 tmpf777 F.0

    SUBF 1.0 F.0 VS_M
  else776_2:
  endif776:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 300.0 and781
    JR_LTF VH_M 360.0 or780
  and781:
    JR_LTF VH_M 0.0 else779_1
    JR_GTF VH_M 20.0 else779_1
    JR_LTEQF VS_M 0.3 else779_1
    JR_GTF VS_M 1.0 else779_1
    JR_LTEQF VV_M 0.025 else779_1
    JR_GTEQF VV_M 0.1 else779_1
  or780:
    MOVEF_F 5.0 VCOLOR_M
    JR endif779
  else779_1:
    JR_LTF VH_M 20.0 else779_2
    JR_GTEQF VH_M 60.0 else779_2
    JR_LTF VS_M 0.4 else779_2
    JR_LTEQF VV_M 0.03 else779_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif779
  else779_2:
    MOVEF_F 6.0 VCOLOR_M
  else779_3:
  endif779:
RETSUB_HSV_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_B:
SUB_HSV_D:
    DATA8 layer782
	DATA8 no782
	DATA8 mode8782
	
	MOVEF_8 1.0 no782
	SUB8 no782 1 no782
	DIV8 no782 4 layer782
	MATH MOD8 no782 4 no782

	MOVEF_8 2.0 mode8782
	
	INPUT_DEVICE READY_RAW layer782 no782 0 mode8782 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf789
    DATA8 flag789
    DIVF VSRED_M 255.0 tmpf789
    CP_EQF 0.0 255.0 flag789
    SELECTF flag789 0.0 tmpf789 VSRED_M

    DATAF tmpf790
    DATA8 flag790
    DIVF VSGREEN_M 255.0 tmpf790
    CP_EQF 0.0 255.0 flag790
    SELECTF flag790 0.0 tmpf790 VSGREEN_M

    DATAF tmpf791
    DATA8 flag791
    DIVF VSBLUE_M 255.0 tmpf791
    CP_EQF 0.0 255.0 flag791
    SELECTF flag791 0.0 tmpf791 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else792_1
    JR_LTEQF VSRED_M VSBLUE_M else792_1
    MOVEF_F VSRED_M VMAX_M
    JR endif792
  else792_1:
    JR_LTEQF VSGREEN_M VSRED_M else792_2
    JR_LTEQF VSGREEN_M VSBLUE_M else792_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif792
  else792_2:
    JR_LTEQF VSBLUE_M VSRED_M else792_3
    JR_LTEQF VSBLUE_M VSGREEN_M else792_3
    MOVEF_F VSBLUE_M VMAX_M
  else792_3:
  endif792:
    JR_GTEQF VSRED_M VSGREEN_M else793_1
    JR_GTEQF VSRED_M VSBLUE_M else793_1
    MOVEF_F VSRED_M VMIN_M
    JR endif793
  else793_1:
    JR_GTEQF VSGREEN_M VSRED_M else793_2
    JR_GTEQF VSGREEN_M VSBLUE_M else793_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif793
  else793_2:
    JR_GTEQF VSBLUE_M VSRED_M else793_3
    JR_GTEQF VSBLUE_M VSGREEN_M else793_3
    MOVEF_F VSBLUE_M VMIN_M
  else793_3:
  endif793:
    JR_NEQF VMAX_M VMIN_M else794_1
    MOVEF_F 0.0 VH_M
    JR endif794
  else794_1:
    JR_NEQF VSRED_M VMAX_M else795_1
    JR_LTF VSGREEN_M VSBLUE_M else796_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf800
    DATA8 flag800
    DIVF F.0 F.1 tmpf800
    CP_EQF 0.0 F.1 flag800
    SELECTF flag800 0.0 tmpf800 VH_M

    JR endif796
  else796_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf804
    DATA8 flag804
    DIVF F.1 F.2 tmpf804
    CP_EQF 0.0 F.2 flag804
    SELECTF flag804 0.0 tmpf804 F.0

    ADDF F.0 360.0 VH_M
  else796_2:
  endif796:
    JR endif795
  else795_1:
    JR_NEQF VMAX_M VSGREEN_M else806_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf810
    DATA8 flag810
    DIVF F.1 F.2 tmpf810
    CP_EQF 0.0 F.2 flag810
    SELECTF flag810 0.0 tmpf810 F.0

    ADDF F.0 120.0 VH_M
    JR endif806
  else806_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf815
    DATA8 flag815
    DIVF F.1 F.2 tmpf815
    CP_EQF 0.0 F.2 flag815
    SELECTF flag815 0.0 tmpf815 F.0

    ADDF F.0 240.0 VH_M
  else806_2:
  endif806:
  else795_2:
  endif795:
  else794_2:
  endif794:
    JR_NEQF VMAX_M 0.0 else817_1
    MOVEF_F 0.0 VS_M
    JR endif817
  else817_1:
    DATAF tmpf818
    DATA8 flag818
    DIVF VMIN_M VMAX_M tmpf818
    CP_EQF 0.0 VMAX_M flag818
    SELECTF flag818 0.0 tmpf818 F.0

    SUBF 1.0 F.0 VS_M
  else817_2:
  endif817:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 200.0 and822
    JR_LTF VH_M 360.0 or821
  and822:
    JR_LTF VH_M 0.0 else820_1
    JR_GTF VH_M 30.0 else820_1
    JR_LTEQF VS_M 0.3 else820_1
    JR_GTF VS_M 1.0 else820_1
    JR_LTF VV_M 0.0 else820_1
    JR_GTEQF VV_M 0.02 else820_1
  or821:
    MOVEF_F 5.0 VCOLOR_M
    JR endif820
  else820_1:
    JR_LTF VH_M 0.0 else820_2
    JR_GTEQF VH_M 60.0 else820_2
    JR_LTF VS_M 0.4 else820_2
    JR_GTF VS_M 1.0 else820_2
    JR_LTEQF VV_M 0.003 else820_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif820
  else820_2:
    MOVEF_F 6.0 VCOLOR_M
  else820_3:
  endif820:
RETSUB_HSV_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_D:
SUB_HSV_RGB_B:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer823
	DATA8 no823
	DATA8 mode8823
	
	MOVEF_8 1.0 no823
	SUB8 no823 1 no823
	DIV8 no823 4 layer823
	MATH MOD8 no823 4 no823

	MOVEF_8 2.0 mode8823
	
	INPUT_DEVICE READY_RAW layer823 no823 0 mode8823 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV:CALLSUB825 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB825:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    DATA32 milliseconds834
	MOVEF_32 100.0 milliseconds834
	DATA32 timer834
	TIMER_WAIT milliseconds834 timer834
	TIMER_READY timer834
    MOVEF_F 1.0 VP_M
  for835:
    JR_GTF VP_M 100.0 endfor835
  forbody835:
    WRITE32 ENDSUB_HSV_B:CALLSUB836 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_B
CALLSUB836:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody835
  endfor835:
    DATAF tmpf839
    DATA8 flag839
    DIVF VX_M 100.0 tmpf839
    CP_EQF 0.0 100.0 flag839
    SELECTF flag839 0.0 tmpf839 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds843
	MOVEF_32 100.0 milliseconds843
	DATA32 timer843
	TIMER_WAIT milliseconds843 timer843
	TIMER_READY timer843
    JR_LTEQF VH_M 100.0 and846
    JR_LTF VH_M 360.0 or845
  and846:
    JR_LTF VH_M 0.0 else844_1
    JR_GTF VH_M 20.0 else844_1
    JR_LTEQF VS_M 0.3 else844_1
    JR_GTF VS_M 1.0 else844_1
    JR_LTEQF VV_M 0.025 else844_1
    JR_GTEQF VV_M 0.1 else844_1
  or845:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif844
  else844_1:
    JR_LTF VH_M 20.0 else844_2
    JR_GTEQF VH_M 60.0 else844_2
    JR_LTF VS_M 0.4 else844_2
    JR_LTEQF VV_M 0.03 else844_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif844
  else844_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else844_3:
  endif844:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds856
	MOVEF_32 1000.0 milliseconds856
	DATA32 timer856
	TIMER_WAIT milliseconds856 timer856
	TIMER_READY timer856
RETSUB_HSV_RGB_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_B:
SUB_HSV_RGB_D:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer857
	DATA8 no857
	DATA8 mode8857
	
	MOVEF_8 1.0 no857
	SUB8 no857 1 no857
	DIV8 no857 4 layer857
	MATH MOD8 no857 4 no857

	MOVEF_8 2.0 mode8857
	
	INPUT_DEVICE READY_RAW layer857 no857 0 mode8857 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV_D:CALLSUB859 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB859:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    MOVEF_F 1.0 VP_M
  for868:
    JR_GTF VP_M 100.0 endfor868
  forbody868:
    WRITE32 ENDSUB_HSV_D:CALLSUB869 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB869:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody868
  endfor868:
    DATAF tmpf872
    DATA8 flag872
    DIVF VX_M 100.0 tmpf872
    CP_EQF 0.0 100.0 flag872
    SELECTF flag872 0.0 tmpf872 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    JR_LTEQF VH_M 200.0 and878
    JR_LTF VH_M 360.0 or877
  and878:
    JR_LTF VH_M 0.0 else876_1
    JR_GTF VH_M 40.0 else876_1
    JR_LTEQF VS_M 0.3 else876_1
    JR_GTF VS_M 1.0 else876_1
    JR_LTF VV_M 0.0 else876_1
    JR_GTEQF VV_M 0.02 else876_1
  or877:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif876
  else876_1:
    JR_LTF VH_M 0.0 else876_2
    JR_GTEQF VH_M 100.0 else876_2
    JR_LTF VS_M 0.4 else876_2
    JR_GTF VS_M 1.0 else876_2
    JR_LTEQF VV_M 0.003 else876_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif876
  else876_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else876_3:
  endif876:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds888
	MOVEF_32 1000.0 milliseconds888
	DATA32 timer888
	TIMER_WAIT milliseconds888 timer888
	TIMER_READY timer888
RETSUB_HSV_RGB_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_D:
SUB_A3:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN3_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX3_M VMIN3_M F.1
    DATAF tmpf893
    DATA8 flag893
    DIVF F.0 F.1 tmpf893
    CP_EQF 0.0 F.1 flag893
    SELECTF flag893 0.0 tmpf893 VS3_M

RETSUB_A3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A3:
SUB_A2:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf898
    DATA8 flag898
    DIVF F.0 F.1 tmpf898
    CP_EQF 0.0 F.1 flag898
    SELECTF flag898 0.0 tmpf898 VS2_M

RETSUB_A2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A2:
SUB_POLIN2D:
    WRITE32 ENDSUB_A3:CALLSUB899 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB899:
    WRITE32 ENDSUB_A2:CALLSUB900 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB900:
    SUBF VS2_M VS3_M VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2D:
SUB_POLIN2DUS:
    WRITE32 ENDSUB_A3:CALLSUB910 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB910:
    WRITE32 ENDSUB_A2:CALLSUB911 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB911:
    SUBF VS2_M VS3_M VE_M
    MULF VK3_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2DUS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2DUS:
SUB_ZAMOROZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_ZAMOROZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZAMOROZ:
SUB_ZADVIG:
    CALL MOTOR.START 'a' 80.0
    DATA32 milliseconds925
	MOVEF_32 100.0 milliseconds925
	DATA32 timer925
	TIMER_WAIT milliseconds925 timer925
	TIMER_READY timer925
  while926:
    CALL MOTOR.GETSPEED 'a' F.0
    JR_LTEQF F.0 20.0 endwhile926
  whilebody926:
    CALL MOTOR.START 'a' 80.0
    CALL MOTOR.GETSPEED 'a' F.0
    JR_GTF F.0 20.0 whilebody926
  endwhile926:
    CALL MOTOR.STOP 'a' 'true'
RETSUB_ZADVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZADVIG:
SUB_VIDVIG:
    CALL MOTOR.START 'a' -80.0
    DATA32 milliseconds932
	MOVEF_32 350.0 milliseconds932
	DATA32 timer932
	TIMER_WAIT milliseconds932 timer932
	TIMER_READY timer932
    CALL MOTOR.STOP 'a' 'true'
RETSUB_VIDVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIDVIG:
SUB_VIRAV_NAZ:
    DATA8 layer934
	DATA8 no934
	DATA8 mode8934
	
	MOVEF_8 2.0 no934
	SUB8 no934 1 no934
	DIV8 no934 4 layer934
	MATH MOD8 no934 4 no934

	MOVEF_8 0.0 mode8934
	
	INPUT_DEVICE READY_RAW layer934 no934 0 mode8934 0
    DATA8 layer935
	DATA8 no935
	DATA8 mode8935
	
	MOVEF_8 3.0 no935
	SUB8 no935 1 no935
	DIV8 no935 4 layer935
	MATH MOD8 no935 4 no935

	MOVEF_8 0.0 mode8935
	
	INPUT_DEVICE READY_RAW layer935 no935 0 mode8935 0
  while936:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile936
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile936
  whilebody936:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and940
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody936
  and940:
  endwhile936:
    CALL MOTOR.STOP 'BC' 'True'
  while944:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile944
  whilebody944:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody944
  endwhile944:
    CALL MOTOR.STOP 'B' 'True'
  while949:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile949
  whilebody949:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody949
  endwhile949:
    CALL MOTOR.STOP 'C' 'True'
  while954:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile954
  whilebody954:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody954
  endwhile954:
    CALL MOTOR.STOP 'B' 'True'
  while959:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile959
  whilebody959:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody959
  endwhile959:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV_NAZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_NAZ:
SUB_VIRAV:
    DATA8 layer964
	DATA8 no964
	DATA8 mode8964
	
	MOVEF_8 2.0 no964
	SUB8 no964 1 no964
	DIV8 no964 4 layer964
	MATH MOD8 no964 4 no964

	MOVEF_8 0.0 mode8964
	
	INPUT_DEVICE READY_RAW layer964 no964 0 mode8964 0
    DATA8 layer965
	DATA8 no965
	DATA8 mode8965
	
	MOVEF_8 3.0 no965
	SUB8 no965 1 no965
	DIV8 no965 4 layer965
	MATH MOD8 no965 4 no965

	MOVEF_8 0.0 mode8965
	
	INPUT_DEVICE READY_RAW layer965 no965 0 mode8965 0
  while966:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile966
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile966
  whilebody966:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 and970
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody966
  and970:
  endwhile966:
    CALL MOTOR.STOP 'BC' 'True'
  while974:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile974
  whilebody974:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 7.0 whilebody974
  endwhile974:
    CALL MOTOR.STOP 'B' 'True'
  while979:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile979
  whilebody979:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody979
  endwhile979:
    CALL MOTOR.STOP 'C' 'True'
  while984:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 7.0 endwhile984
  whilebody984:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 7.0 whilebody984
  endwhile984:
    CALL MOTOR.STOP 'B' 'True'
  while989:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile989
  whilebody989:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody989
  endwhile989:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV:
SUB_RGB:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 F.0 VRECVARRAY_M
    CALL ARRAYSTORE_FLOAT VI_M F.0 VA_M
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 5.0 or1019
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 14.0 or1019
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 6.0 else1018_1
  or1019:
    CALL SPEAKER.NOTE 100.0 'C#1' 500.0
    JR endif1018
  else1018_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 1.0 or1024
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 10.0 or1024
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 7.0 or1024
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 8.0 else1018_2
  or1024:
    CALL SPEAKER.NOTE 100.0 'C#5' 500.0
    JR endif1018
  else1018_2:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 3.0 or1030
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 2.0 or1030
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 4.0 else1018_3
  or1030:
    CALL SPEAKER.NOTE 50.0 'C#9' 1000.0
  else1018_3:
  endif1018:
RETSUB_RGB:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RGB:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
