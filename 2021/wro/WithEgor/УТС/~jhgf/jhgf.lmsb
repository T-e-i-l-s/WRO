DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VGV_G
DATAF VGV_R
DATAF VGV_Y
DATAF VGV_W
DATAF VGV_COLOR
DATAF VGV_X
DATAF VGV_C
DATAF VGV_S
DATAF VGV_MAX2
DATAF VGV_MAX3
DATAF VGV_MIN2
DATAF VGV_MIN3
DATAF VGV_K1
DATAF VGV_K2
DATAF VGV_K3
DATAF VGV_S3
DATAF VGV_S2
DATAF VGV_SPEED
DATAF VGV_SPEEDL
DATAF VGV_SPEEDR
DATAF VGV_EOLD
DATAF VGV_N
DATAF VGV_P
DATAF VGV_I
DATAF VGV_I2CPORT
DATAF VGV_I2CSLVADDR
DATAF VGV_F
DATAF VGV_L
DATAF VGV_E
DATAF VGV_U
ARRAY16 VGV_SENDARRAY 2
ARRAY16 VGV_RECVARRAY 2
DATAF VGV_SNUM
DATAF VGV_SRED
DATAF VGV_SGREEN
DATAF VGV_SBLUE
DATAF VGV_MAX
DATAF VGV_MIN
DATAF VGV_H
DATAF VGV_V
DATA32 RUNCOUNTER_F_ZADVIG_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_C
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    MOVEF_F 0.0 VGV_K1
    MOVEF_F 0.0 VGV_K2
    MOVEF_F 0.0 VGV_K3
    MOVEF_F 0.0 VGV_S3
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_I2CPORT
    MOVEF_F 0.0 VGV_I2CSLVADDR
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_E
    MOVEF_F 0.0 VGV_U
    CALL ARRAYCREATE_FLOAT VGV_SENDARRAY
    CALL ARRAYCREATE_FLOAT VGV_RECVARRAY
    MOVEF_F 0.0 VGV_SNUM
    MOVEF_F 0.0 VGV_SRED
    MOVEF_F 0.0 VGV_SGREEN
    MOVEF_F 0.0 VGV_SBLUE
    MOVEF_F 0.0 VGV_MAX
    MOVEF_F 0.0 VGV_MIN
    MOVEF_F 0.0 VGV_H
    MOVEF_F 0.0 VGV_V
    MOVE32_32 0 RUNCOUNTER_F_ZADVIG_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_ZADVIG_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_ZADVIG_0 0
    CALL GETANDINC32 RUNCOUNTER_F_ZADVIG_0 -1 RUNCOUNTER_F_ZADVIG_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_ZADVIG_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch470
    WRITE32 ENDSUB_F_ZADVIG_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZADVIG_0
  dispatch470:
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_C
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    MOVEF_F 0.0 VGV_K1
    MOVEF_F 0.0 VGV_K2
    MOVEF_F 0.0 VGV_K3
    MOVEF_F 0.0 VGV_S3
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 0.0 VGV_I2CPORT
    MOVEF_F 0.0 VGV_I2CSLVADDR
    MOVEF_F 0.0 VGV_F
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_E
    MOVEF_F 0.0 VGV_U
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_Y
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_COLOR
    MOVEF_F 0.0 VGV_X
    MOVEF_F 0.0 VGV_C
    MOVEF_F 0.0 VGV_S
    MOVEF_F 0.0 VGV_MAX2
    MOVEF_F 0.0 VGV_MAX3
    MOVEF_F 0.0 VGV_MIN2
    MOVEF_F 0.0 VGV_MIN3
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 1.0 no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 2.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 2.0 no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 3.0 no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 0.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    MOVEF_F 0.22 VGV_K1
    MOVEF_F 4.0 VGV_K2
    MOVEF_F 0.15 VGV_K3
    MOVEF_F 0.0 VGV_S3
    MOVEF_F 0.0 VGV_S2
    MOVEF_F 0.0 VGV_SPEED
    MOVEF_F 0.0 VGV_SPEEDL
    MOVEF_F 0.0 VGV_SPEEDR
    MOVEF_F 0.0 VGV_EOLD
    MOVEF_F 0.0 VGV_N
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_I
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    CALL MOTOR.STOP 'bc' 'true'
    CALL EV3FILE.OPENREAD 'a123/colib.dat' VGV_F
    CALL EV3FILE.READLINE VGV_F S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VGV_MIN2
    CALL EV3FILE.READLINE VGV_F S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VGV_MIN3
    CALL EV3FILE.READLINE VGV_F S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VGV_MAX2
    CALL EV3FILE.READLINE VGV_F S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VGV_MAX3
    CALL EV3FILE.CLOSE VGV_F
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_MIN2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 1.0 S.0
    STRINGS VALUE_FORMATTED VGV_MIN3 '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 1.0 S.0
    STRINGS VALUE_FORMATTED VGV_MAX2 '%g' 99 S.0
    CALL LCD.TEXT 1.0 30.0 30.0 1.0 S.0
    STRINGS VALUE_FORMATTED VGV_MAX3 '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 1.0 S.0
    DATA32 milliseconds25
	MOVEF_32 100.0 milliseconds25
	DATA32 timer25
	TIMER_WAIT milliseconds25 timer25
	TIMER_READY timer25
    MOVEF_F 0.0 VGV_S
    WRITE32 ENDSUB_F_US_0:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_US_0
CALLSUB26:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 30.0 133.0 'true'

	DATA8 layer27
	DATA8 nos27
	DATA8 busy27
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer27 nos27
	JR_EQ8 0 nos27 motornotbusy27
  motorwaiting27:
	OUTPUT_TEST layer27 nos27 busy27
	JR_EQ8 busy27 0 motornotbusy27
	SLEEP
	JR motorwaiting27
  motornotbusy27:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 133.0 'true'

	DATA8 layer28
	DATA8 nos28
	DATA8 busy28
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer28 nos28
	JR_EQ8 0 nos28 motornotbusy28
  motorwaiting28:
	OUTPUT_TEST layer28 nos28 busy28
	JR_EQ8 busy28 0 motornotbusy28
	SLEEP
	JR motorwaiting28
  motornotbusy28:
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer29
	DATA8 nos29
	DATA8 busy29
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer29 nos29
	JR_EQ8 0 nos29 motornotbusy29
  motorwaiting29:
	OUTPUT_TEST layer29 nos29 busy29
	JR_EQ8 busy29 0 motornotbusy29
	SLEEP
	JR motorwaiting29
  motornotbusy29:
    PROGRAM_STOP -1
ENDTHREAD:
    RETURN
SUB_F_US_0:
    MOVEF_F 260.62 VGV_L
    MOVEF_F 0.0 VGV_X
    DATAF tmpf31
    DATA8 flag31
    DIVF 360.0 VGV_L tmpf31
    CP_EQF 0.0 VGV_L flag31
    SELECTF flag31 0.0 tmpf31 F.0

    MULF F.0 VGV_S VGV_X
    MOVEF_F 20.0 VGV_SPEED
    CALL MOTOR.RESETCOUNT 'bc'
  while34:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf38
    DATA8 flag38
    DIVF F.1 2.0 tmpf38
    CP_EQF 0.0 2.0 flag38
    SELECTF flag38 0.0 tmpf38 F.0

    JR_GTEQF F.0 VGV_X endwhile34
  whilebody34:
    WRITE32 ENDSUB_F_A3_0:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB39:
    WRITE32 ENDSUB_F_A2_0:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB40:
    JR_GTEQF VGV_SPEED 80.0 else41_1
    ADDF VGV_SPEED 0.1 VGV_SPEED
  else41_1:
  endif41:
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB43:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf47
    DATA8 flag47
    DIVF F.1 2.0 tmpf47
    CP_EQF 0.0 2.0 flag47
    SELECTF flag47 0.0 tmpf47 F.0

    JR_LTF F.0 VGV_X whilebody34
  endwhile34:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.3 VGV_K1
    MOVEF_F 0.0 VGV_K2
    WRITE32 ENDSUB_F_A3_0:CALLSUB49 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB49:
    WRITE32 ENDSUB_F_A2_0:CALLSUB50 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB50:
  while51:
    JR_LTEQF VGV_S3 15.0 and53
    JR_GTF VGV_S2 15.0 or52
  and53:
    JR_GTEQF VGV_S3 15.0 endwhile51
    JR_GTEQF VGV_S2 15.0 endwhile51
  or52:
  whilebody51:
    WRITE32 ENDSUB_F_A3_0:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB54:
    WRITE32 ENDSUB_F_A2_0:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB55:
    MOVEF_F 20.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB56:
    JR_LTEQF VGV_S3 15.0 and57
    JR_GTF VGV_S2 15.0 whilebody51
  and57:
    JR_GTEQF VGV_S3 15.0 and58
    JR_LTF VGV_S2 15.0 whilebody51
  and58:
  endwhile51:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.15 VGV_K1
    MOVEF_F 8.0 VGV_K2
RETSUB_F_US_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_US_0:
SUB_F_PL_0:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 40.0 'true'

	DATA8 layer60
	DATA8 nos60
	DATA8 busy60
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer60 nos60
	JR_EQ8 0 nos60 motornotbusy60
  motorwaiting60:
	OUTPUT_TEST layer60 nos60 busy60
	JR_EQ8 busy60 0 motornotbusy60
	SLEEP
	JR motorwaiting60
  motornotbusy60:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 50.0 'true'

	DATA8 layer62
	DATA8 nos62
	DATA8 busy62
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer62 nos62
	JR_EQ8 0 nos62 motornotbusy62
  motorwaiting62:
	OUTPUT_TEST layer62 nos62 busy62
	JR_EQ8 busy62 0 motornotbusy62
	SLEEP
	JR motorwaiting62
  motornotbusy62:
    WRITE32 ENDSUB_F_A3_0:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB63:
    WRITE32 ENDSUB_F_A2_0:CALLSUB64 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB64:
  while65:
    JR_LTEQF VGV_S2 15.0 endwhile65
  whilebody65:
    WRITE32 ENDSUB_F_A3_0:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB66:
    WRITE32 ENDSUB_F_A2_0:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB67:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VGV_S2 15.0 whilebody65
  endwhile65:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB70:
    WRITE32 ENDSUB_F_A2_0:CALLSUB71 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB71:
  while72:
    JR_GTEQF VGV_S2 55.0 endwhile72
  whilebody72:
    WRITE32 ENDSUB_F_A3_0:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB73:
    WRITE32 ENDSUB_F_A2_0:CALLSUB74 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB74:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VGV_S2 55.0 whilebody72
  endwhile72:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_F_PL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PL_0:
SUB_F_PR_0:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 65.0 'true'

	DATA8 layer77
	DATA8 nos77
	DATA8 busy77
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer77 nos77
	JR_EQ8 0 nos77 motornotbusy77
  motorwaiting77:
	OUTPUT_TEST layer77 nos77 busy77
	JR_EQ8 busy77 0 motornotbusy77
	SLEEP
	JR motorwaiting77
  motornotbusy77:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 15.0 -15.0 50.0 'true'

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    WRITE32 ENDSUB_F_A3_0:CALLSUB80 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB80:
    WRITE32 ENDSUB_F_A2_0:CALLSUB81 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB81:
  while82:
    JR_LTEQF VGV_S3 15.0 endwhile82
  whilebody82:
    WRITE32 ENDSUB_F_A3_0:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB83:
    WRITE32 ENDSUB_F_A2_0:CALLSUB84 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB84:
    CALL MOTOR.STARTSYNC 'bc' 15.0 -15.0
    JR_GTF VGV_S3 15.0 whilebody82
  endwhile82:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB87:
    WRITE32 ENDSUB_F_A2_0:CALLSUB88 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB88:
  while89:
    JR_GTEQF VGV_S3 60.0 endwhile89
  whilebody89:
    WRITE32 ENDSUB_F_A3_0:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB90:
    WRITE32 ENDSUB_F_A2_0:CALLSUB91 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB91:
    CALL MOTOR.STARTSYNC 'bc' 15.0 -15.0
    JR_LTF VGV_S3 60.0 whilebody89
  endwhile89:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_F_PR_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_PR_0:
SUB_F_NPL_0:
    WRITE32 ENDSUB_F_A2_0:CALLSUB94 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB94:
    WRITE32 ENDSUB_F_A3_0:CALLSUB95 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB95:
  while96:
    JR_LTEQF VGV_S2 9.0 and98
    JR_GTF VGV_S3 9.0 or97
  and98:
    JR_GTEQF VGV_S2 9.0 and99
    JR_GTF VGV_S3 9.0 or97
  and99:
    JR_LTEQF VGV_S2 9.0 endwhile96
    JR_GTEQF VGV_S3 9.0 endwhile96
  or97:
  whilebody96:
    WRITE32 ENDSUB_F_A2_0:CALLSUB100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB100:
    WRITE32 ENDSUB_F_A3_0:CALLSUB101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB101:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    JR_LTEQF VGV_S2 9.0 and103
    JR_GTF VGV_S3 9.0 whilebody96
  and103:
    JR_GTEQF VGV_S2 9.0 and104
    JR_GTF VGV_S3 9.0 whilebody96
  and104:
    JR_LTEQF VGV_S2 9.0 and105
    JR_LTF VGV_S3 9.0 whilebody96
  and105:
  endwhile96:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 53.0 'true'

	DATA8 layer106
	DATA8 nos106
	DATA8 busy106
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer106 nos106
	JR_EQ8 0 nos106 motornotbusy106
  motorwaiting106:
	OUTPUT_TEST layer106 nos106 busy106
	JR_EQ8 busy106 0 motornotbusy106
	SLEEP
	JR motorwaiting106
  motornotbusy106:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer108
	DATA8 nos108
	DATA8 busy108
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer108 nos108
	JR_EQ8 0 nos108 motornotbusy108
  motorwaiting108:
	OUTPUT_TEST layer108 nos108 busy108
	JR_EQ8 busy108 0 motornotbusy108
	SLEEP
	JR motorwaiting108
  motornotbusy108:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB110 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB110:
    WRITE32 ENDSUB_F_A2_0:CALLSUB111 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB111:
  while112:
    JR_LTEQF VGV_S2 10.0 endwhile112
  whilebody112:
    WRITE32 ENDSUB_F_A3_0:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB113:
    WRITE32 ENDSUB_F_A2_0:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB114:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VGV_S2 10.0 whilebody112
  endwhile112:
    WRITE32 ENDSUB_F_A3_0:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB116:
    WRITE32 ENDSUB_F_A2_0:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB117:
  while118:
    JR_GTEQF VGV_S2 60.0 endwhile118
  whilebody118:
    WRITE32 ENDSUB_F_A3_0:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB119:
    WRITE32 ENDSUB_F_A2_0:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB120:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VGV_S2 60.0 whilebody118
  endwhile118:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_F_NPL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_NPL_0:
SUB_F_REDL_0:
    DATA32 tmp123
    CALL GETANDINC32 RUNCOUNTER_F_ZADVIG_0 1  RUNCOUNTER_F_ZADVIG_0 tmp123
    JR_NEQ32 0 tmp123 alreadylaunched123
    OBJECT_START TF_ZADVIG_0
  alreadylaunched123:
    WRITE32 ENDSUB_F_A3_0:CALLSUB124 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB124:
    WRITE32 ENDSUB_F_A2_0:CALLSUB125 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB125:
  while126:
    JR_LTEQF VGV_S3 15.0 and128
    JR_GTF VGV_S2 15.0 or127
  and128:
    JR_GTEQF VGV_S3 15.0 and129
    JR_GTF VGV_S2 15.0 or127
  and129:
    JR_LTEQF VGV_S3 15.0 endwhile126
    JR_GTEQF VGV_S2 15.0 endwhile126
  or127:
  whilebody126:
    WRITE32 ENDSUB_F_A3_0:CALLSUB130 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB130:
    WRITE32 ENDSUB_F_A2_0:CALLSUB131 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB131:
    MOVEF_F 80.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB132 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB132:
    JR_LTEQF VGV_S3 15.0 and133
    JR_GTF VGV_S2 15.0 whilebody126
  and133:
    JR_GTEQF VGV_S3 15.0 and134
    JR_GTF VGV_S2 15.0 whilebody126
  and134:
    JR_LTEQF VGV_S3 15.0 and135
    JR_LTF VGV_S2 15.0 whilebody126
  and135:
  endwhile126:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer137
	DATA8 nos137
	DATA8 busy137
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer137 nos137
	JR_EQ8 0 nos137 motornotbusy137
  motorwaiting137:
	OUTPUT_TEST layer137 nos137 busy137
	JR_EQ8 busy137 0 motornotbusy137
	SLEEP
	JR motorwaiting137
  motornotbusy137:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer138
	DATA8 nos138
	DATA8 busy138
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer138 nos138
	JR_EQ8 0 nos138 motornotbusy138
  motorwaiting138:
	OUTPUT_TEST layer138 nos138 busy138
	JR_EQ8 busy138 0 motornotbusy138
	SLEEP
	JR motorwaiting138
  motornotbusy138:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_F_A2_0:CALLSUB141 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB141:
    WRITE32 ENDSUB_F_A3_0:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB142:
  while143:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile143
  whilebody143:
    WRITE32 ENDSUB_F_A2_0:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB145:
    WRITE32 ENDSUB_F_A3_0:CALLSUB146 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB146:
    MOVEF_F 30.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB147 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB147:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody143
  endwhile143:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds151
	MOVEF_32 500.0 milliseconds151
	DATA32 timer151
	TIMER_WAIT milliseconds151 timer151
	TIMER_READY timer151
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer153
	DATA8 nos153
	DATA8 busy153
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer153 nos153
	JR_EQ8 0 nos153 motornotbusy153
  motorwaiting153:
	OUTPUT_TEST layer153 nos153 busy153
	JR_EQ8 busy153 0 motornotbusy153
	SLEEP
	JR motorwaiting153
  motornotbusy153:
    CALL MOTOR.STARTSYNC 'bc' -20.0 -100.0
    DATA32 milliseconds155
	MOVEF_32 1400.0 milliseconds155
	DATA32 timer155
	TIMER_WAIT milliseconds155 timer155
	TIMER_READY timer155
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer157
	DATA8 nos157
	DATA8 busy157
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer157 nos157
	JR_EQ8 0 nos157 motornotbusy157
  motorwaiting157:
	OUTPUT_TEST layer157 nos157 busy157
	JR_EQ8 busy157 0 motornotbusy157
	SLEEP
	JR motorwaiting157
  motornotbusy157:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer158
	DATA8 nos158
	DATA8 busy158
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer158 nos158
	JR_EQ8 0 nos158 motornotbusy158
  motorwaiting158:
	OUTPUT_TEST layer158 nos158 busy158
	JR_EQ8 busy158 0 motornotbusy158
	SLEEP
	JR motorwaiting158
  motornotbusy158:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer159
	DATA8 nos159
	DATA8 busy159
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer159 nos159
	JR_EQ8 0 nos159 motornotbusy159
  motorwaiting159:
	OUTPUT_TEST layer159 nos159 busy159
	JR_EQ8 busy159 0 motornotbusy159
	SLEEP
	JR motorwaiting159
  motornotbusy159:
    WRITE32 ENDSUB_F_VIRAV_0:CALLSUB160 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_VIRAV_0
CALLSUB160:
    MOVEF_F 0.5 VGV_K3
    MOVEF_F 4.0 VGV_K2
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 45.0 'true'

	DATA8 layer161
	DATA8 nos161
	DATA8 busy161
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer161 nos161
	JR_EQ8 0 nos161 motornotbusy161
  motorwaiting161:
	OUTPUT_TEST layer161 nos161 busy161
	JR_EQ8 busy161 0 motornotbusy161
	SLEEP
	JR motorwaiting161
  motornotbusy161:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 100.0 'true'

	DATA8 layer162
	DATA8 nos162
	DATA8 busy162
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer162 nos162
	JR_EQ8 0 nos162 motornotbusy162
  motorwaiting162:
	OUTPUT_TEST layer162 nos162 busy162
	JR_EQ8 busy162 0 motornotbusy162
	SLEEP
	JR motorwaiting162
  motornotbusy162:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB164:
    WRITE32 ENDSUB_F_A2_0:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB165:
  while166:
    JR_LTEQF VGV_S2 15.0 endwhile166
  whilebody166:
    WRITE32 ENDSUB_F_A3_0:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB167:
    WRITE32 ENDSUB_F_A2_0:CALLSUB168 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB168:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VGV_S2 15.0 whilebody166
  endwhile166:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB171:
    WRITE32 ENDSUB_F_A2_0:CALLSUB172 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB172:
  while173:
    JR_GTEQF VGV_S2 50.0 endwhile173
  whilebody173:
    WRITE32 ENDSUB_F_A3_0:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB174:
    WRITE32 ENDSUB_F_A2_0:CALLSUB175 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB175:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VGV_S2 50.0 whilebody173
  endwhile173:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.5 VGV_K3
    MOVEF_F 4.0 VGV_K2
    WRITE32 ENDSUB_F_A3_0:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB178:
    WRITE32 ENDSUB_F_A2_0:CALLSUB179 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB179:
  while180:
    JR_LTEQF VGV_S3 15.0 and182
    JR_GTF VGV_S2 15.0 or181
  and182:
    JR_GTEQF VGV_S3 15.0 endwhile180
    JR_GTEQF VGV_S2 15.0 endwhile180
  or181:
  whilebody180:
    WRITE32 ENDSUB_F_A3_0:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB183:
    WRITE32 ENDSUB_F_A2_0:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB184:
    MOVEF_F 30.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB185:
    JR_LTEQF VGV_S3 15.0 and186
    JR_GTF VGV_S2 15.0 whilebody180
  and186:
    JR_GTEQF VGV_S3 15.0 and187
    JR_LTF VGV_S2 15.0 whilebody180
  and187:
  endwhile180:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.15 VGV_K3
    MOVEF_F 8.0 VGV_K2
RETSUB_F_REDL_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_REDL_0:
SUB_F_BELLAM_0:
    WRITE32 ENDSUB_F_PR_0:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_PR_0
CALLSUB189:
    CALL MOTOR.RESETCOUNT 'bc'
  while191:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf195
    DATA8 flag195
    DIVF F.1 2.0 tmpf195
    CP_EQF 0.0 2.0 flag195
    SELECTF flag195 0.0 tmpf195 F.0

    JR_GTEQF F.0 200.0 endwhile191
  whilebody191:
    MOVEF_F 20.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB196:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf200
    DATA8 flag200
    DIVF F.1 2.0 tmpf200
    CP_EQF 0.0 2.0 flag200
    SELECTF flag200 0.0 tmpf200 F.0

    JR_LTF F.0 200.0 whilebody191
  endwhile191:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB202:
    WRITE32 ENDSUB_F_A2_0:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB203:
    MOVEF_F 0.2 VGV_K1
    MOVEF_F 0.0 VGV_K2
    MOVEF_F 1.0 VGV_I
  for204:
    JR_GTF VGV_I 1.0 endfor204
  forbody204:
    MOVEF_F 0.4 VGV_K1
    MOVEF_F 0.0 VGV_K2
    WRITE32 ENDSUB_F_A3_0:CALLSUB205 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB205:
    WRITE32 ENDSUB_F_A2_0:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB206:
  while207:
    JR_LTEQF VGV_S3 15.0 and209
    JR_GTF VGV_S2 15.0 or208
  and209:
    JR_GTEQF VGV_S3 15.0 endwhile207
    JR_GTEQF VGV_S2 15.0 endwhile207
  or208:
  whilebody207:
    WRITE32 ENDSUB_F_A3_0:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB210:
    WRITE32 ENDSUB_F_A2_0:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB211:
    MOVEF_F 30.0 VGV_SPEED
    WRITE32 ENDSUB_F_POLIN2D_0:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_POLIN2D_0
CALLSUB212:
    JR_LTEQF VGV_S3 15.0 and213
    JR_GTF VGV_S2 15.0 whilebody207
  and213:
    JR_GTEQF VGV_S3 15.0 and214
    JR_LTF VGV_S2 15.0 whilebody207
  and214:
  endwhile207:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.15 VGV_K1
    MOVEF_F 8.0 VGV_K2
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 30.0 'true'

	DATA8 layer216
	DATA8 nos216
	DATA8 busy216
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer216 nos216
	JR_EQ8 0 nos216 motornotbusy216
  motorwaiting216:
	OUTPUT_TEST layer216 nos216 busy216
	JR_EQ8 busy216 0 motornotbusy216
	SLEEP
	JR motorwaiting216
  motornotbusy216:
    ADDF VGV_I 1.0 VGV_I
    JR_LTEQF VGV_I 1.0 forbody204
  endfor204:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 0.2 VGV_K1
    MOVEF_F 8.0 VGV_K2
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 15.0 'true'

	DATA8 layer219
	DATA8 nos219
	DATA8 busy219
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer219 nos219
	JR_EQ8 0 nos219 motornotbusy219
  motorwaiting219:
	OUTPUT_TEST layer219 nos219 busy219
	JR_EQ8 busy219 0 motornotbusy219
	SLEEP
	JR motorwaiting219
  motornotbusy219:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 185.0 'true'

	DATA8 layer220
	DATA8 nos220
	DATA8 busy220
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer220 nos220
	JR_EQ8 0 nos220 motornotbusy220
  motorwaiting220:
	OUTPUT_TEST layer220 nos220 busy220
	JR_EQ8 busy220 0 motornotbusy220
	SLEEP
	JR motorwaiting220
  motornotbusy220:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 130.0 'true'

	DATA8 layer221
	DATA8 nos221
	DATA8 busy221
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer221 nos221
	JR_EQ8 0 nos221 motornotbusy221
  motorwaiting221:
	OUTPUT_TEST layer221 nos221 busy221
	JR_EQ8 busy221 0 motornotbusy221
	SLEEP
	JR motorwaiting221
  motornotbusy221:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds223
	MOVEF_32 500.0 milliseconds223
	DATA32 timer223
	TIMER_WAIT milliseconds223 timer223
	TIMER_READY timer223
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 110.0 'true'

	DATA8 layer225
	DATA8 nos225
	DATA8 busy225
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer225 nos225
	JR_EQ8 0 nos225 motornotbusy225
  motorwaiting225:
	OUTPUT_TEST layer225 nos225 busy225
	JR_EQ8 busy225 0 motornotbusy225
	SLEEP
	JR motorwaiting225
  motornotbusy225:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 415.0 'true'

	DATA8 layer226
	DATA8 nos226
	DATA8 busy226
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer226 nos226
	JR_EQ8 0 nos226 motornotbusy226
  motorwaiting226:
	OUTPUT_TEST layer226 nos226 busy226
	JR_EQ8 busy226 0 motornotbusy226
	SLEEP
	JR motorwaiting226
  motornotbusy226:
    WRITE32 ENDSUB_F_A2_0:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB227:
    WRITE32 ENDSUB_F_A3_0:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB228:
  while229:
    JR_LTEQF VGV_S3 10.0 and231
    JR_GTF VGV_S2 10.0 or230
  and231:
    JR_GTEQF VGV_S3 10.0 and232
    JR_GTF VGV_S2 10.0 or230
  and232:
    JR_LTEQF VGV_S3 6.0 endwhile229
    JR_GTEQF VGV_S2 6.0 endwhile229
  or230:
  whilebody229:
    WRITE32 ENDSUB_F_A2_0:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB233:
    WRITE32 ENDSUB_F_A3_0:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB234:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VGV_S3 10.0 and236
    JR_GTF VGV_S2 10.0 whilebody229
  and236:
    JR_GTEQF VGV_S3 10.0 and237
    JR_GTF VGV_S2 10.0 whilebody229
  and237:
    JR_LTEQF VGV_S3 6.0 and238
    JR_LTF VGV_S2 6.0 whilebody229
  and238:
  endwhile229:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer240
	DATA8 nos240
	DATA8 busy240
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer240 nos240
	JR_EQ8 0 nos240 motornotbusy240
  motorwaiting240:
	OUTPUT_TEST layer240 nos240 busy240
	JR_EQ8 busy240 0 motornotbusy240
	SLEEP
	JR motorwaiting240
  motornotbusy240:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB242 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB242:
    WRITE32 ENDSUB_F_A2_0:CALLSUB243 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB243:
  while244:
    JR_LTEQF VGV_S3 10.0 endwhile244
  whilebody244:
    WRITE32 ENDSUB_F_A3_0:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB245:
    WRITE32 ENDSUB_F_A2_0:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB246:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VGV_S3 10.0 whilebody244
  endwhile244:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_F_A3_0:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB249:
    WRITE32 ENDSUB_F_A2_0:CALLSUB250 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB250:
  while251:
    JR_GTEQF VGV_S3 60.0 endwhile251
  whilebody251:
    WRITE32 ENDSUB_F_A3_0:CALLSUB252 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB252:
    WRITE32 ENDSUB_F_A2_0:CALLSUB253 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB253:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VGV_S3 60.0 whilebody251
  endwhile251:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds256
	MOVEF_32 100.0 milliseconds256
	DATA32 timer256
	TIMER_WAIT milliseconds256 timer256
	TIMER_READY timer256
RETSUB_F_BELLAM_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BELLAM_0:
SUB_F_HSV_0:
    DATA8 layer257
	DATA8 no257
	DATA8 mode8257
	
	MOVEF_8 1.0 no257
	SUB8 no257 1 no257
	DIV8 no257 4 layer257
	MATH MOD8 no257 4 no257

	MOVEF_8 2.0 mode8257
	
	INPUT_DEVICE READY_RAW layer257 no257 0 mode8257 0
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C VGV_I2CPORT VGV_I2CSLVADDR 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_SNUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_SRED VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_SGREEN VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_SBLUE VGV_RECVARRAY
    DATAF tmpf264
    DATA8 flag264
    DIVF VGV_SRED 255.0 tmpf264
    CP_EQF 0.0 255.0 flag264
    SELECTF flag264 0.0 tmpf264 VGV_SRED

    DATAF tmpf265
    DATA8 flag265
    DIVF VGV_SGREEN 255.0 tmpf265
    CP_EQF 0.0 255.0 flag265
    SELECTF flag265 0.0 tmpf265 VGV_SGREEN

    DATAF tmpf266
    DATA8 flag266
    DIVF VGV_SBLUE 255.0 tmpf266
    CP_EQF 0.0 255.0 flag266
    SELECTF flag266 0.0 tmpf266 VGV_SBLUE

    JR_LTEQF VGV_SRED VGV_SGREEN else267_1
    JR_LTEQF VGV_SRED VGV_SBLUE else267_1
    MOVEF_F VGV_SRED VGV_MAX
    JR endif267
  else267_1:
    JR_LTEQF VGV_SGREEN VGV_SRED else267_2
    JR_LTEQF VGV_SGREEN VGV_SBLUE else267_2
    MOVEF_F VGV_SGREEN VGV_MAX
    JR endif267
  else267_2:
    JR_LTEQF VGV_SBLUE VGV_SRED else267_3
    JR_LTEQF VGV_SBLUE VGV_SGREEN else267_3
    MOVEF_F VGV_SBLUE VGV_MAX
  else267_3:
  endif267:
    JR_GTEQF VGV_SRED VGV_SGREEN else268_1
    JR_GTEQF VGV_SRED VGV_SBLUE else268_1
    MOVEF_F VGV_SRED VGV_MIN
    JR endif268
  else268_1:
    JR_GTEQF VGV_SGREEN VGV_SRED else268_2
    JR_GTEQF VGV_SGREEN VGV_SBLUE else268_2
    MOVEF_F VGV_SGREEN VGV_MIN
    JR endif268
  else268_2:
    JR_GTEQF VGV_SBLUE VGV_SRED else268_3
    JR_GTEQF VGV_SBLUE VGV_SGREEN else268_3
    MOVEF_F VGV_SBLUE VGV_MIN
  else268_3:
  endif268:
    JR_NEQF VGV_MAX VGV_MIN else269_1
    MOVEF_F 0.0 VGV_H
    JR endif269
  else269_1:
    JR_NEQF VGV_SRED VGV_MAX else270_1
    JR_LTF VGV_SGREEN VGV_SBLUE else271_1
    SUBF VGV_SGREEN VGV_SBLUE F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf275
    DATA8 flag275
    DIVF F.0 F.1 tmpf275
    CP_EQF 0.0 F.1 flag275
    SELECTF flag275 0.0 tmpf275 VGV_H

    JR endif271
  else271_1:
    SUBF VGV_SGREEN VGV_SBLUE F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf279
    DATA8 flag279
    DIVF F.1 F.2 tmpf279
    CP_EQF 0.0 F.2 flag279
    SELECTF flag279 0.0 tmpf279 F.0

    ADDF F.0 360.0 VGV_H
  else271_2:
  endif271:
    JR endif270
  else270_1:
    JR_NEQF VGV_MAX VGV_SGREEN else281_1
    SUBF VGV_SBLUE VGV_SRED F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf285
    DATA8 flag285
    DIVF F.1 F.2 tmpf285
    CP_EQF 0.0 F.2 flag285
    SELECTF flag285 0.0 tmpf285 F.0

    ADDF F.0 120.0 VGV_H
    JR endif281
  else281_1:
    SUBF VGV_SRED VGV_SGREEN F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf290
    DATA8 flag290
    DIVF F.1 F.2 tmpf290
    CP_EQF 0.0 F.2 flag290
    SELECTF flag290 0.0 tmpf290 F.0

    ADDF F.0 240.0 VGV_H
  else281_2:
  endif281:
  else270_2:
  endif270:
  else269_2:
  endif269:
    JR_NEQF VGV_MAX 0.0 else292_1
    MOVEF_F 0.0 VGV_S
    JR endif292
  else292_1:
    DATAF tmpf293
    DATA8 flag293
    DIVF VGV_MIN VGV_MAX tmpf293
    CP_EQF 0.0 VGV_MAX flag293
    SELECTF flag293 0.0 tmpf293 F.0

    SUBF 1.0 F.0 VGV_S
  else292_2:
  endif292:
    MOVEF_F VGV_MAX VGV_V
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_H '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VGV_S '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VGV_V '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_F_HSV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_0:
SUB_F_HSV_B_0:
    DATA8 layer302
	DATA8 no302
	DATA8 mode8302
	
	MOVEF_8 1.0 no302
	SUB8 no302 1 no302
	DIV8 no302 4 layer302
	MATH MOD8 no302 4 no302

	MOVEF_8 2.0 mode8302
	
	INPUT_DEVICE READY_RAW layer302 no302 0 mode8302 0
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C VGV_I2CPORT VGV_I2CSLVADDR 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_SNUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_SRED VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_SGREEN VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_SBLUE VGV_RECVARRAY
    DATAF tmpf309
    DATA8 flag309
    DIVF VGV_SRED 255.0 tmpf309
    CP_EQF 0.0 255.0 flag309
    SELECTF flag309 0.0 tmpf309 VGV_SRED

    DATAF tmpf310
    DATA8 flag310
    DIVF VGV_SGREEN 255.0 tmpf310
    CP_EQF 0.0 255.0 flag310
    SELECTF flag310 0.0 tmpf310 VGV_SGREEN

    DATAF tmpf311
    DATA8 flag311
    DIVF VGV_SBLUE 255.0 tmpf311
    CP_EQF 0.0 255.0 flag311
    SELECTF flag311 0.0 tmpf311 VGV_SBLUE

    JR_LTEQF VGV_SRED VGV_SGREEN else312_1
    JR_LTEQF VGV_SRED VGV_SBLUE else312_1
    MOVEF_F VGV_SRED VGV_MAX
    JR endif312
  else312_1:
    JR_LTEQF VGV_SGREEN VGV_SRED else312_2
    JR_LTEQF VGV_SGREEN VGV_SBLUE else312_2
    MOVEF_F VGV_SGREEN VGV_MAX
    JR endif312
  else312_2:
    JR_LTEQF VGV_SBLUE VGV_SRED else312_3
    JR_LTEQF VGV_SBLUE VGV_SGREEN else312_3
    MOVEF_F VGV_SBLUE VGV_MAX
  else312_3:
  endif312:
    JR_GTEQF VGV_SRED VGV_SGREEN else313_1
    JR_GTEQF VGV_SRED VGV_SBLUE else313_1
    MOVEF_F VGV_SRED VGV_MIN
    JR endif313
  else313_1:
    JR_GTEQF VGV_SGREEN VGV_SRED else313_2
    JR_GTEQF VGV_SGREEN VGV_SBLUE else313_2
    MOVEF_F VGV_SGREEN VGV_MIN
    JR endif313
  else313_2:
    JR_GTEQF VGV_SBLUE VGV_SRED else313_3
    JR_GTEQF VGV_SBLUE VGV_SGREEN else313_3
    MOVEF_F VGV_SBLUE VGV_MIN
  else313_3:
  endif313:
    JR_NEQF VGV_MAX VGV_MIN else314_1
    MOVEF_F 0.0 VGV_H
    JR endif314
  else314_1:
    JR_NEQF VGV_SRED VGV_MAX else315_1
    JR_LTF VGV_SGREEN VGV_SBLUE else316_1
    SUBF VGV_SGREEN VGV_SBLUE F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf320
    DATA8 flag320
    DIVF F.0 F.1 tmpf320
    CP_EQF 0.0 F.1 flag320
    SELECTF flag320 0.0 tmpf320 VGV_H

    JR endif316
  else316_1:
    SUBF VGV_SGREEN VGV_SBLUE F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf324
    DATA8 flag324
    DIVF F.1 F.2 tmpf324
    CP_EQF 0.0 F.2 flag324
    SELECTF flag324 0.0 tmpf324 F.0

    ADDF F.0 360.0 VGV_H
  else316_2:
  endif316:
    JR endif315
  else315_1:
    JR_NEQF VGV_MAX VGV_SGREEN else326_1
    SUBF VGV_SBLUE VGV_SRED F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf330
    DATA8 flag330
    DIVF F.1 F.2 tmpf330
    CP_EQF 0.0 F.2 flag330
    SELECTF flag330 0.0 tmpf330 F.0

    ADDF F.0 120.0 VGV_H
    JR endif326
  else326_1:
    SUBF VGV_SRED VGV_SGREEN F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf335
    DATA8 flag335
    DIVF F.1 F.2 tmpf335
    CP_EQF 0.0 F.2 flag335
    SELECTF flag335 0.0 tmpf335 F.0

    ADDF F.0 240.0 VGV_H
  else326_2:
  endif326:
  else315_2:
  endif315:
  else314_2:
  endif314:
    JR_NEQF VGV_MAX 0.0 else337_1
    MOVEF_F 0.0 VGV_S
    JR endif337
  else337_1:
    DATAF tmpf338
    DATA8 flag338
    DIVF VGV_MIN VGV_MAX tmpf338
    CP_EQF 0.0 VGV_MAX flag338
    SELECTF flag338 0.0 tmpf338 F.0

    SUBF 1.0 F.0 VGV_S
  else337_2:
  endif337:
    MOVEF_F VGV_MAX VGV_V
    JR_LTEQF VGV_H 300.0 and342
    JR_LTF VGV_H 360.0 or341
  and342:
    JR_LTF VGV_H 0.0 else340_1
    JR_GTF VGV_H 20.0 else340_1
    JR_LTEQF VGV_S 0.3 else340_1
    JR_GTF VGV_S 1.0 else340_1
    JR_LTEQF VGV_V 0.025 else340_1
    JR_GTEQF VGV_V 0.1 else340_1
  or341:
    MOVEF_F 5.0 VGV_COLOR
    JR endif340
  else340_1:
    JR_LTF VGV_H 20.0 else340_2
    JR_GTEQF VGV_H 60.0 else340_2
    JR_LTF VGV_S 0.4 else340_2
    JR_LTEQF VGV_V 0.03 else340_2
    MOVEF_F 4.0 VGV_COLOR
    JR endif340
  else340_2:
    MOVEF_F 6.0 VGV_COLOR
  else340_3:
  endif340:
RETSUB_F_HSV_B_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_B_0:
SUB_F_HSV_D_0:
    DATA8 layer343
	DATA8 no343
	DATA8 mode8343
	
	MOVEF_8 1.0 no343
	SUB8 no343 1 no343
	DIV8 no343 4 layer343
	MATH MOD8 no343 4 no343

	MOVEF_8 2.0 mode8343
	
	INPUT_DEVICE READY_RAW layer343 no343 0 mode8343 0
    MOVEF_F 1.0 VGV_I2CPORT
    MOVEF_F 1.0 VGV_I2CSLVADDR
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VGV_SENDARRAY
    CALL SENSOR.COMMUNICATEI2C VGV_I2CPORT VGV_I2CSLVADDR 1.0 4.0 VGV_SENDARRAY VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 0.0 VGV_SNUM VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 1.0 VGV_SRED VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 2.0 VGV_SGREEN VGV_RECVARRAY
    CALL ARRAYGET_FLOAT 3.0 VGV_SBLUE VGV_RECVARRAY
    DATAF tmpf350
    DATA8 flag350
    DIVF VGV_SRED 255.0 tmpf350
    CP_EQF 0.0 255.0 flag350
    SELECTF flag350 0.0 tmpf350 VGV_SRED

    DATAF tmpf351
    DATA8 flag351
    DIVF VGV_SGREEN 255.0 tmpf351
    CP_EQF 0.0 255.0 flag351
    SELECTF flag351 0.0 tmpf351 VGV_SGREEN

    DATAF tmpf352
    DATA8 flag352
    DIVF VGV_SBLUE 255.0 tmpf352
    CP_EQF 0.0 255.0 flag352
    SELECTF flag352 0.0 tmpf352 VGV_SBLUE

    JR_LTEQF VGV_SRED VGV_SGREEN else353_1
    JR_LTEQF VGV_SRED VGV_SBLUE else353_1
    MOVEF_F VGV_SRED VGV_MAX
    JR endif353
  else353_1:
    JR_LTEQF VGV_SGREEN VGV_SRED else353_2
    JR_LTEQF VGV_SGREEN VGV_SBLUE else353_2
    MOVEF_F VGV_SGREEN VGV_MAX
    JR endif353
  else353_2:
    JR_LTEQF VGV_SBLUE VGV_SRED else353_3
    JR_LTEQF VGV_SBLUE VGV_SGREEN else353_3
    MOVEF_F VGV_SBLUE VGV_MAX
  else353_3:
  endif353:
    JR_GTEQF VGV_SRED VGV_SGREEN else354_1
    JR_GTEQF VGV_SRED VGV_SBLUE else354_1
    MOVEF_F VGV_SRED VGV_MIN
    JR endif354
  else354_1:
    JR_GTEQF VGV_SGREEN VGV_SRED else354_2
    JR_GTEQF VGV_SGREEN VGV_SBLUE else354_2
    MOVEF_F VGV_SGREEN VGV_MIN
    JR endif354
  else354_2:
    JR_GTEQF VGV_SBLUE VGV_SRED else354_3
    JR_GTEQF VGV_SBLUE VGV_SGREEN else354_3
    MOVEF_F VGV_SBLUE VGV_MIN
  else354_3:
  endif354:
    JR_NEQF VGV_MAX VGV_MIN else355_1
    MOVEF_F 0.0 VGV_H
    JR endif355
  else355_1:
    JR_NEQF VGV_SRED VGV_MAX else356_1
    JR_LTF VGV_SGREEN VGV_SBLUE else357_1
    SUBF VGV_SGREEN VGV_SBLUE F.1
    MULF 60.0 F.1 F.0
    SUBF VGV_MAX VGV_MIN F.1
    DATAF tmpf361
    DATA8 flag361
    DIVF F.0 F.1 tmpf361
    CP_EQF 0.0 F.1 flag361
    SELECTF flag361 0.0 tmpf361 VGV_H

    JR endif357
  else357_1:
    SUBF VGV_SGREEN VGV_SBLUE F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf365
    DATA8 flag365
    DIVF F.1 F.2 tmpf365
    CP_EQF 0.0 F.2 flag365
    SELECTF flag365 0.0 tmpf365 F.0

    ADDF F.0 360.0 VGV_H
  else357_2:
  endif357:
    JR endif356
  else356_1:
    JR_NEQF VGV_MAX VGV_SGREEN else367_1
    SUBF VGV_SBLUE VGV_SRED F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf371
    DATA8 flag371
    DIVF F.1 F.2 tmpf371
    CP_EQF 0.0 F.2 flag371
    SELECTF flag371 0.0 tmpf371 F.0

    ADDF F.0 120.0 VGV_H
    JR endif367
  else367_1:
    SUBF VGV_SRED VGV_SGREEN F.2
    MULF 60.0 F.2 F.1
    SUBF VGV_MAX VGV_MIN F.2
    DATAF tmpf376
    DATA8 flag376
    DIVF F.1 F.2 tmpf376
    CP_EQF 0.0 F.2 flag376
    SELECTF flag376 0.0 tmpf376 F.0

    ADDF F.0 240.0 VGV_H
  else367_2:
  endif367:
  else356_2:
  endif356:
  else355_2:
  endif355:
    JR_NEQF VGV_MAX 0.0 else378_1
    MOVEF_F 0.0 VGV_S
    JR endif378
  else378_1:
    DATAF tmpf379
    DATA8 flag379
    DIVF VGV_MIN VGV_MAX tmpf379
    CP_EQF 0.0 VGV_MAX flag379
    SELECTF flag379 0.0 tmpf379 F.0

    SUBF 1.0 F.0 VGV_S
  else378_2:
  endif378:
    MOVEF_F VGV_MAX VGV_V
    JR_LTEQF VGV_H 200.0 and383
    JR_LTF VGV_H 360.0 or382
  and383:
    JR_LTF VGV_H 0.0 else381_1
    JR_GTF VGV_H 30.0 else381_1
    JR_LTEQF VGV_S 0.3 else381_1
    JR_GTF VGV_S 1.0 else381_1
    JR_LTF VGV_V 0.0 else381_1
    JR_GTEQF VGV_V 0.02 else381_1
  or382:
    MOVEF_F 5.0 VGV_COLOR
    JR endif381
  else381_1:
    JR_LTF VGV_H 0.0 else381_2
    JR_GTEQF VGV_H 60.0 else381_2
    JR_LTF VGV_S 0.4 else381_2
    JR_GTF VGV_S 1.0 else381_2
    JR_LTEQF VGV_V 0.003 else381_2
    MOVEF_F 4.0 VGV_COLOR
    JR endif381
  else381_2:
    MOVEF_F 6.0 VGV_COLOR
  else381_3:
  endif381:
RETSUB_F_HSV_D_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_HSV_D_0:
SUB_F_A3_0:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VGV_MIN3 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX3 VGV_MIN3 F.1
    DATAF tmpf388
    DATA8 flag388
    DIVF F.0 F.1 tmpf388
    CP_EQF 0.0 F.1 flag388
    SELECTF flag388 0.0 tmpf388 VGV_S3

RETSUB_F_A3_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_A3_0:
SUB_F_A2_0:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VGV_MIN2 F.1
    MULF 100.0 F.1 F.0
    SUBF VGV_MAX2 VGV_MIN2 F.1
    DATAF tmpf393
    DATA8 flag393
    DIVF F.0 F.1 tmpf393
    CP_EQF 0.0 F.1 flag393
    SELECTF flag393 0.0 tmpf393 VGV_S2

RETSUB_F_A2_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_A2_0:
SUB_F_POLIN2D_0:
    WRITE32 ENDSUB_F_A3_0:CALLSUB394 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB394:
    WRITE32 ENDSUB_F_A2_0:CALLSUB395 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB395:
    SUBF VGV_S2 VGV_S3 VGV_E
    MULF VGV_K3 VGV_E F.0
    SUBF VGV_E VGV_EOLD F.2
    MULF VGV_K2 F.2 F.1
    ADDF F.0 F.1 VGV_U
    MOVEF_F VGV_E VGV_EOLD
    ADDF VGV_SPEED VGV_U VGV_SPEEDL
    SUBF VGV_SPEED VGV_U VGV_SPEEDR
    CALL MOTOR.STARTPOWER 'B' VGV_SPEEDL
    CALL MOTOR.STARTPOWER 'C' VGV_SPEEDR
RETSUB_F_POLIN2D_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_POLIN2D_0:
SUB_F_ZAMOROZ_0:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_F_ZAMOROZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZAMOROZ_0:
SUB_F_ZADVIG_0:
    CALL MOTOR.START 'a' 80.0
    DATA32 milliseconds409
	MOVEF_32 100.0 milliseconds409
	DATA32 timer409
	TIMER_WAIT milliseconds409 timer409
	TIMER_READY timer409
  while410:
    CALL MOTOR.GETSPEED 'a' F.0
    JR_LTEQF F.0 20.0 endwhile410
  whilebody410:
    CALL MOTOR.START 'a' 80.0
    CALL MOTOR.GETSPEED 'a' F.0
    JR_GTF F.0 20.0 whilebody410
  endwhile410:
    CALL MOTOR.STOP 'a' 'true'
RETSUB_F_ZADVIG_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZADVIG_0:
SUB_F_VIDVIG_0:
    CALL MOTOR.START 'a' -80.0
    DATA32 milliseconds416
	MOVEF_32 250.0 milliseconds416
	DATA32 timer416
	TIMER_WAIT milliseconds416 timer416
	TIMER_READY timer416
    CALL MOTOR.STOP 'a' 'true'
RETSUB_F_VIDVIG_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_VIDVIG_0:
SUB_F_VIRAV_NAZ_0:
    WRITE32 ENDSUB_F_A2_0:CALLSUB418 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB418:
    WRITE32 ENDSUB_F_A3_0:CALLSUB419 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB419:
  while420:
    JR_LTEQF VGV_S2 9.0 and422
    JR_GTF VGV_S3 9.0 or421
  and422:
    JR_GTEQF VGV_S2 9.0 and423
    JR_GTF VGV_S3 9.0 or421
  and423:
    JR_LTEQF VGV_S2 9.0 endwhile420
    JR_GTEQF VGV_S3 9.0 endwhile420
  or421:
  whilebody420:
    WRITE32 ENDSUB_F_A2_0:CALLSUB424 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A2_0
CALLSUB424:
    WRITE32 ENDSUB_F_A3_0:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_A3_0
CALLSUB425:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    JR_LTEQF VGV_S2 9.0 and427
    JR_GTF VGV_S3 9.0 whilebody420
  and427:
    JR_GTEQF VGV_S2 9.0 and428
    JR_GTF VGV_S3 9.0 whilebody420
  and428:
    JR_LTEQF VGV_S2 9.0 and429
    JR_LTF VGV_S3 9.0 whilebody420
  and429:
  endwhile420:
  while430:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile430
  whilebody430:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody430
  endwhile430:
    CALL MOTOR.STOP 'B' 'True'
  while435:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile435
  whilebody435:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody435
  endwhile435:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_F_VIRAV_NAZ_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_VIRAV_NAZ_0:
SUB_F_VIRAV_0:
    DATA8 layer440
	DATA8 no440
	DATA8 mode8440
	
	MOVEF_8 2.0 no440
	SUB8 no440 1 no440
	DIV8 no440 4 layer440
	MATH MOD8 no440 4 no440

	MOVEF_8 0.0 mode8440
	
	INPUT_DEVICE READY_RAW layer440 no440 0 mode8440 0
    DATA8 layer441
	DATA8 no441
	DATA8 mode8441
	
	MOVEF_8 3.0 no441
	SUB8 no441 1 no441
	DIV8 no441 4 layer441
	MATH MOD8 no441 4 no441

	MOVEF_8 0.0 mode8441
	
	INPUT_DEVICE READY_RAW layer441 no441 0 mode8441 0
  while442:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 6.0 endwhile442
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile442
  whilebody442:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 6.0 and446
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody442
  and446:
  endwhile442:
    CALL MOTOR.STOP 'BC' 'True'
  while450:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 6.0 endwhile450
  whilebody450:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 6.0 whilebody450
  endwhile450:
    CALL MOTOR.STOP 'B' 'True'
  while455:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile455
  whilebody455:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody455
  endwhile455:
    CALL MOTOR.STOP 'C' 'True'
  while460:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 6.0 endwhile460
  whilebody460:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 6.0 whilebody460
  endwhile460:
    CALL MOTOR.STOP 'B' 'True'
  while465:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 6.0 endwhile465
  whilebody465:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 6.0 whilebody465
  endwhile465:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_F_VIRAV_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_VIRAV_0:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.GETSPEED // SF      MOTORDECODEPORTDESCRIPTOR
{
	IN_S ports 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA8 speed
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR ports layer no
	JR_LT8 no 0 no_port

	OUTPUT_READ layer no speed tacho
	MOVE8_F speed result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

no_port:
	MOVE8_f 0 result
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
