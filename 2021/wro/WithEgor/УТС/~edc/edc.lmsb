DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VG_M
DATAF VR_M
DATAF VY_M
DATAF VW_M
DATAF VCOLOR_M
DATAF VX_M
DATAF VC_M
DATAF VS_M
DATAF VMAX2_M
DATAF VMAX3_M
DATAF VMIN2_M
DATAF VMIN3_M
DATAF VK1_M
DATAF VK2_M
DATAF VK3_M
DATAF VS3_M
DATAF VS2_M
DATAF VSPEED_M
DATAF VSPEEDL_M
DATAF VSPEEDR_M
DATAF VEOLD_M
DATAF VN_M
DATAF VP_M
DATAF VI_M
DATAF VI2CPORT_M
DATAF VI2CSLVADDR_M
DATAF VL_M
DATAF VJ_M
ARRAY16 VSENDARRAY_M 2
ARRAY16 VRECVARRAY_M 2
DATAF VSNUM_M
DATAF VSRED_M
DATAF VSGREEN_M
DATAF VSBLUE_M
DATAF VMAX_M
DATAF VMIN_M
DATAF VH_M
DATAF VV_M
DATAF VD_M
DATAF VZ_M
DATAF VE_M
DATAF VU_M
ARRAY16 VA_M 2
DATAF VF_M
DATA32 RUNCOUNTER_ZADVIG
DATA32 RUNCOUNTER_VIDVIG

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    CALL ARRAYCREATE_FLOAT VSENDARRAY_M
    CALL ARRAYCREATE_FLOAT VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYCREATE_FLOAT VA_M
    MOVEF_F 0.0 VF_M
    MOVE32_32 0 RUNCOUNTER_ZADVIG
    MOVE32_32 0 RUNCOUNTER_VIDVIG
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TZADVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_ZADVIG 0
    CALL GETANDINC32 RUNCOUNTER_ZADVIG -1 RUNCOUNTER_ZADVIG tmp
    JR_GT32 tmp 1 launch
}
vmthread TVIDVIG
{
    DATA32 tmp
  launch:
    CALL PROGRAM_VIDVIG 1
    CALL GETANDINC32 RUNCOUNTER_VIDVIG -1 RUNCOUNTER_VIDVIG tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_ZADVIG
subcall PROGRAM_VIDVIG
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    DATAF F.3
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch1146
    WRITE32 ENDSUB_ZADVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZADVIG
  dispatch1146:
    JR_NEQ32 SUBPROGRAM 1 dispatch1147
    WRITE32 ENDSUB_VIDVIG:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_VIDVIG
  dispatch1147:
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    MOVEF_F 0.0 VK1_M
    MOVEF_F 0.0 VK2_M
    MOVEF_F 0.0 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 0.0 VI2CPORT_M
    MOVEF_F 0.0 VI2CSLVADDR_M
    MOVEF_F 0.0 VL_M
    MOVEF_F 0.0 VJ_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VSENDARRAY_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VRECVARRAY_M
    MOVEF_F 0.0 VSNUM_M
    MOVEF_F 0.0 VSRED_M
    MOVEF_F 0.0 VSGREEN_M
    MOVEF_F 0.0 VSBLUE_M
    MOVEF_F 0.0 VMAX_M
    MOVEF_F 0.0 VMIN_M
    MOVEF_F 0.0 VH_M
    MOVEF_F 0.0 VV_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    MOVEF_F 0.0 VE_M
    MOVEF_F 0.0 VU_M
    CALL ARRAYSTORE_FLOAT 0.0 0.0 VA_M
    MOVEF_F 0.0 VF_M
    CALL MOTOR.INVERT 'b'
    MOVEF_F 0.0 VG_M
    MOVEF_F 0.0 VR_M
    MOVEF_F 0.0 VY_M
    MOVEF_F 0.0 VW_M
    MOVEF_F 0.0 VCOLOR_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VC_M
    MOVEF_F 0.0 VS_M
    MOVEF_F 0.0 VMAX2_M
    MOVEF_F 0.0 VMAX3_M
    MOVEF_F 0.0 VMIN2_M
    MOVEF_F 0.0 VMIN3_M
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 1.0 no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 2.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    DATA8 layer5
	DATA8 no5
	DATA8 mode85
	
	MOVEF_8 2.0 no5
	SUB8 no5 1 no5
	DIV8 no5 4 layer5
	MATH MOD8 no5 4 no5

	MOVEF_8 0.0 mode85
	
	INPUT_DEVICE READY_RAW layer5 no5 0 mode85 0
    DATA8 layer6
	DATA8 no6
	DATA8 mode86
	
	MOVEF_8 3.0 no6
	SUB8 no6 1 no6
	DIV8 no6 4 layer6
	MATH MOD8 no6 4 no6

	MOVEF_8 0.0 mode86
	
	INPUT_DEVICE READY_RAW layer6 no6 0 mode86 0
    MOVEF_F 0.15 VK1_M
    MOVEF_F 8.0 VK2_M
    MOVEF_F 0.2 VK3_M
    MOVEF_F 0.0 VS3_M
    MOVEF_F 0.0 VS2_M
    MOVEF_F 0.0 VSPEED_M
    MOVEF_F 0.0 VSPEEDL_M
    MOVEF_F 0.0 VSPEEDR_M
    MOVEF_F 0.0 VEOLD_M
    MOVEF_F 0.0 VN_M
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VI_M
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL EV3FILE.OPENREAD 'WRO2021/colib.dat' VF_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMIN3_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX2_M
    CALL EV3FILE.READLINE VF_M S.0
    CALL EV3FILE.CONVERTTONUMBER S.0 VMAX3_M
    CALL EV3FILE.CLOSE VF_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VMIN2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 10.0 10.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMIN3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 20.0 20.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX2_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 30.0 30.0 1.0 S.0
    STRINGS VALUE_FORMATTED VMAX3_M '%g' 99 S.0
    CALL LCD.TEXT 1.0 40.0 40.0 1.0 S.0
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 130.0 'true'

	DATA8 layer1069
	DATA8 nos1069
	DATA8 busy1069
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1069 nos1069
	JR_EQ8 0 nos1069 motornotbusy1069
  motorwaiting1069:
	OUTPUT_TEST layer1069 nos1069 busy1069
	JR_EQ8 busy1069 0 motornotbusy1069
	SLEEP
	JR motorwaiting1069
  motornotbusy1069:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 30.0 130.0 'true'

	DATA8 layer1070
	DATA8 nos1070
	DATA8 busy1070
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1070 nos1070
	JR_EQ8 0 nos1070 motornotbusy1070
  motorwaiting1070:
	OUTPUT_TEST layer1070 nos1070 busy1070
	JR_EQ8 busy1070 0 motornotbusy1070
	SLEEP
	JR motorwaiting1070
  motornotbusy1070:
    CALL MOTOR.RESETCOUNT 'bc'
    CALL MOTOR.START 'bc' 40.0
  while1073:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1077
    DATA8 flag1077
    DIVF F.1 2.0 tmpf1077
    CP_EQF 0.0 2.0 flag1077
    SELECTF flag1077 0.0 tmpf1077 F.0

    JR_GTEQF F.0 500.0 endwhile1073
  whilebody1073:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 VMAX2_M else1078_1
    CALL SENSOR.READPERCENT 2.0 VMAX2_M
  else1078_1:
  endif1078:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 VMIN2_M else1081_1
    CALL SENSOR.READPERCENT 2.0 VMIN2_M
  else1081_1:
  endif1081:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 VMAX3_M else1084_1
    CALL SENSOR.READPERCENT 3.0 VMAX3_M
  else1084_1:
  endif1084:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 VMIN3_M else1087_1
    CALL SENSOR.READPERCENT 3.0 VMIN3_M
  else1087_1:
  endif1087:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf1093
    DATA8 flag1093
    DIVF F.1 2.0 tmpf1093
    CP_EQF 0.0 2.0 flag1093
    SELECTF flag1093 0.0 tmpf1093 F.0

    JR_LTF F.0 500.0 whilebody1073
  endwhile1073:
    WRITE32 ENDSUB_A2:CALLSUB1094 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1094:
    WRITE32 ENDSUB_A3:CALLSUB1095 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1095:
    WRITE32 ENDSUB_A2:CALLSUB1096 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1096:
    WRITE32 ENDSUB_A3:CALLSUB1097 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1097:
    WRITE32 ENDSUB_ZAMOROZ:CALLSUB1098 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZAMOROZ
CALLSUB1098:
    DATA32 tmp1099
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp1099
    JR_NEQ32 0 tmp1099 alreadylaunched1099
    OBJECT_START TZADVIG
  alreadylaunched1099:
    WRITE32 ENDSUB_A3:CALLSUB1100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1100:
    WRITE32 ENDSUB_A2:CALLSUB1101 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1101:
  while1102:
    JR_LTEQF VS3_M 10.0 and1104
    JR_GTF VS2_M 10.0 or1103
  and1104:
    JR_GTEQF VS3_M 10.0 and1105
    JR_GTF VS2_M 10.0 or1103
  and1105:
    JR_LTEQF VS3_M 10.0 endwhile1102
    JR_GTEQF VS2_M 10.0 endwhile1102
  or1103:
  whilebody1102:
    WRITE32 ENDSUB_A3:CALLSUB1106 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1106:
    WRITE32 ENDSUB_A2:CALLSUB1107 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1107:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1108 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1108:
    JR_LTEQF VS3_M 10.0 and1109
    JR_GTF VS2_M 10.0 whilebody1102
  and1109:
    JR_GTEQF VS3_M 10.0 and1110
    JR_GTF VS2_M 10.0 whilebody1102
  and1110:
    JR_LTEQF VS3_M 10.0 and1111
    JR_LTF VS2_M 10.0 whilebody1102
  and1111:
  endwhile1102:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer1113
	DATA8 nos1113
	DATA8 busy1113
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1113 nos1113
	JR_EQ8 0 nos1113 motornotbusy1113
  motorwaiting1113:
	OUTPUT_TEST layer1113 nos1113 busy1113
	JR_EQ8 busy1113 0 motornotbusy1113
	SLEEP
	JR motorwaiting1113
  motornotbusy1113:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer1114
	DATA8 nos1114
	DATA8 busy1114
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1114 nos1114
	JR_EQ8 0 nos1114 motornotbusy1114
  motorwaiting1114:
	OUTPUT_TEST layer1114 nos1114 busy1114
	JR_EQ8 busy1114 0 motornotbusy1114
	SLEEP
	JR motorwaiting1114
  motornotbusy1114:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB1117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1117:
    WRITE32 ENDSUB_A3:CALLSUB1118 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1118:
  while1119:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile1119
  whilebody1119:
    WRITE32 ENDSUB_A2:CALLSUB1121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1121:
    WRITE32 ENDSUB_A3:CALLSUB1122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1122:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1123:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody1119
  endwhile1119:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds1127
	MOVEF_32 500.0 milliseconds1127
	DATA32 timer1127
	TIMER_WAIT milliseconds1127 timer1127
	TIMER_READY timer1127
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer1129
	DATA8 nos1129
	DATA8 busy1129
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1129 nos1129
	JR_EQ8 0 nos1129 motornotbusy1129
  motorwaiting1129:
	OUTPUT_TEST layer1129 nos1129 busy1129
	JR_EQ8 busy1129 0 motornotbusy1129
	SLEEP
	JR motorwaiting1129
  motornotbusy1129:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer1130
	DATA8 nos1130
	DATA8 busy1130
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1130 nos1130
	JR_EQ8 0 nos1130 motornotbusy1130
  motorwaiting1130:
	OUTPUT_TEST layer1130 nos1130 busy1130
	JR_EQ8 busy1130 0 motornotbusy1130
	SLEEP
	JR motorwaiting1130
  motornotbusy1130:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer1131
	DATA8 nos1131
	DATA8 busy1131
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1131 nos1131
	JR_EQ8 0 nos1131 motornotbusy1131
  motorwaiting1131:
	OUTPUT_TEST layer1131 nos1131 busy1131
	JR_EQ8 busy1131 0 motornotbusy1131
	SLEEP
	JR motorwaiting1131
  motornotbusy1131:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer1132
	DATA8 nos1132
	DATA8 busy1132
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1132 nos1132
	JR_EQ8 0 nos1132 motornotbusy1132
  motorwaiting1132:
	OUTPUT_TEST layer1132 nos1132 busy1132
	JR_EQ8 busy1132 0 motornotbusy1132
	SLEEP
	JR motorwaiting1132
  motornotbusy1132:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer1133
	DATA8 nos1133
	DATA8 busy1133
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1133 nos1133
	JR_EQ8 0 nos1133 motornotbusy1133
  motorwaiting1133:
	OUTPUT_TEST layer1133 nos1133 busy1133
	JR_EQ8 busy1133 0 motornotbusy1133
	SLEEP
	JR motorwaiting1133
  motornotbusy1133:
    WRITE32 ENDSUB_A2:CALLSUB1134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1134:
    WRITE32 ENDSUB_A3:CALLSUB1135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1135:
  while1136:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 6.0 endwhile1136
  whilebody1136:
    WRITE32 ENDSUB_A2:CALLSUB1138 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB1138:
    WRITE32 ENDSUB_A3:CALLSUB1139 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB1139:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB1140 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB1140:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 6.0 whilebody1136
  endwhile1136:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer1143
	DATA8 nos1143
	DATA8 busy1143
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1143 nos1143
	JR_EQ8 0 nos1143 motornotbusy1143
  motorwaiting1143:
	OUTPUT_TEST layer1143 nos1143 busy1143
	JR_EQ8 busy1143 0 motornotbusy1143
	SLEEP
	JR motorwaiting1143
  motornotbusy1143:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer1144
	DATA8 nos1144
	DATA8 busy1144
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer1144 nos1144
	JR_EQ8 0 nos1144 motornotbusy1144
  motorwaiting1144:
	OUTPUT_TEST layer1144 nos1144 busy1144
	JR_EQ8 busy1144 0 motornotbusy1144
	SLEEP
	JR motorwaiting1144
  motornotbusy1144:
    CALL MOTOR.STOP 'bc' 'true'
ENDTHREAD:
    RETURN
SUB_US:
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf7
    DATA8 flag7
    DIVF 360.0 VL_M tmpf7
    CP_EQF 0.0 VL_M flag7
    SELECTF flag7 0.0 tmpf7 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while10:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf14
    DATA8 flag14
    DIVF F.1 2.0 tmpf14
    CP_EQF 0.0 2.0 flag14
    SELECTF flag14 0.0 tmpf14 F.0

    JR_GTEQF F.0 VX_M endwhile10
  whilebody10:
    WRITE32 ENDSUB_A3:CALLSUB15 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB15:
    WRITE32 ENDSUB_A2:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB16:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB17:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf21
    DATA8 flag21
    DIVF F.1 2.0 tmpf21
    CP_EQF 0.0 2.0 flag21
    SELECTF flag21 0.0 tmpf21 F.0

    JR_LTF F.0 VX_M whilebody10
  endwhile10:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB23:
    WRITE32 ENDSUB_A2:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB24:
  while25:
    JR_LTEQF VS3_M 15.0 and27
    JR_GTF VS2_M 15.0 or26
  and27:
    JR_GTEQF VS3_M 15.0 endwhile25
    JR_GTEQF VS2_M 15.0 endwhile25
  or26:
  whilebody25:
    WRITE32 ENDSUB_A3:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB28:
    WRITE32 ENDSUB_A2:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB29:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB30:
    JR_LTEQF VS3_M 15.0 and31
    JR_GTF VS2_M 15.0 whilebody25
  and31:
    JR_GTEQF VS3_M 15.0 and32
    JR_LTF VS2_M 15.0 whilebody25
  and32:
  endwhile25:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_US:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_US:
SUB_PL:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer34
	DATA8 nos34
	DATA8 busy34
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer34 nos34
	JR_EQ8 0 nos34 motornotbusy34
  motorwaiting34:
	OUTPUT_TEST layer34 nos34 busy34
	JR_EQ8 busy34 0 motornotbusy34
	SLEEP
	JR motorwaiting34
  motornotbusy34:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB36:
    WRITE32 ENDSUB_A2:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB37:
  while38:
    JR_LTEQF VS2_M 15.0 endwhile38
  whilebody38:
    WRITE32 ENDSUB_A3:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB39:
    WRITE32 ENDSUB_A2:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB40:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 15.0 whilebody38
  endwhile38:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB43:
    WRITE32 ENDSUB_A2:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB44:
  while45:
    JR_GTEQF VS2_M 15.0 endwhile45
  whilebody45:
    WRITE32 ENDSUB_A3:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB46:
    WRITE32 ENDSUB_A2:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB47:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody45
  endwhile45:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PL:
SUB_PR:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 80.0 'true'

	DATA8 layer50
	DATA8 nos50
	DATA8 busy50
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer50 nos50
	JR_EQ8 0 nos50 motornotbusy50
  motorwaiting50:
	OUTPUT_TEST layer50 nos50 busy50
	JR_EQ8 busy50 0 motornotbusy50
	SLEEP
	JR motorwaiting50
  motornotbusy50:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB52:
    WRITE32 ENDSUB_A2:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB53:
  while54:
    JR_LTEQF VS3_M 15.0 endwhile54
  whilebody54:
    WRITE32 ENDSUB_A3:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB55:
    WRITE32 ENDSUB_A2:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB56:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 15.0 whilebody54
  endwhile54:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB59:
    WRITE32 ENDSUB_A2:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB60:
  while61:
    JR_GTEQF VS3_M 15.0 endwhile61
  whilebody61:
    WRITE32 ENDSUB_A3:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB62:
    WRITE32 ENDSUB_A2:CALLSUB63 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB63:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody61
  endwhile61:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_PR:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_PR:
SUB_NPL:
    WRITE32 ENDSUB_A2:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB66:
    WRITE32 ENDSUB_A3:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB67:
  while68:
    JR_LTEQF VS3_M 10.0 and70
    JR_GTF VS2_M 10.0 or69
  and70:
    JR_GTEQF VS3_M 10.0 and71
    JR_GTF VS2_M 10.0 or69
  and71:
    JR_LTEQF VS3_M 10.0 endwhile68
    JR_GTEQF VS2_M 10.0 endwhile68
  or69:
  whilebody68:
    WRITE32 ENDSUB_A2:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB72:
    WRITE32 ENDSUB_A3:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB73:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    JR_LTEQF VS3_M 10.0 and75
    JR_GTF VS2_M 10.0 whilebody68
  and75:
    JR_GTEQF VS3_M 10.0 and76
    JR_GTF VS2_M 10.0 whilebody68
  and76:
    JR_LTEQF VS3_M 10.0 and77
    JR_LTF VS2_M 10.0 whilebody68
  and77:
  endwhile68:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer79
	DATA8 nos79
	DATA8 busy79
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer79 nos79
	JR_EQ8 0 nos79 motornotbusy79
  motorwaiting79:
	OUTPUT_TEST layer79 nos79 busy79
	JR_EQ8 busy79 0 motornotbusy79
	SLEEP
	JR motorwaiting79
  motornotbusy79:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -20.0 20.0 90.0 'true'

	DATA8 layer81
	DATA8 nos81
	DATA8 busy81
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer81 nos81
	JR_EQ8 0 nos81 motornotbusy81
  motorwaiting81:
	OUTPUT_TEST layer81 nos81 busy81
	JR_EQ8 busy81 0 motornotbusy81
	SLEEP
	JR motorwaiting81
  motornotbusy81:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB83 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB83:
    WRITE32 ENDSUB_A2:CALLSUB84 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB84:
  while85:
    JR_LTEQF VS2_M 10.0 endwhile85
  whilebody85:
    WRITE32 ENDSUB_A3:CALLSUB86 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB86:
    WRITE32 ENDSUB_A2:CALLSUB87 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB87:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 10.0 whilebody85
  endwhile85:
    WRITE32 ENDSUB_A3:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB89:
    WRITE32 ENDSUB_A2:CALLSUB90 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB90:
  while91:
    JR_GTEQF VS2_M 60.0 endwhile91
  whilebody91:
    WRITE32 ENDSUB_A3:CALLSUB92 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB92:
    WRITE32 ENDSUB_A2:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB93:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 60.0 whilebody91
  endwhile91:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPL:
SUB_NPP:
    WRITE32 ENDSUB_A2:CALLSUB96 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB96:
    WRITE32 ENDSUB_A3:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB97:
  while98:
    JR_LTEQF VS3_M 10.0 and100
    JR_GTF VS2_M 10.0 or99
  and100:
    JR_GTEQF VS3_M 10.0 and101
    JR_GTF VS2_M 10.0 or99
  and101:
    JR_LTEQF VS3_M 10.0 endwhile98
    JR_GTEQF VS2_M 10.0 endwhile98
  or99:
  whilebody98:
    WRITE32 ENDSUB_A2:CALLSUB102 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB102:
    WRITE32 ENDSUB_A3:CALLSUB103 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB103:
    CALL MOTOR.STARTPOWER 'bc' -60.0
    JR_LTEQF VS3_M 10.0 and105
    JR_GTF VS2_M 10.0 whilebody98
  and105:
    JR_GTEQF VS3_M 10.0 and106
    JR_GTF VS2_M 10.0 whilebody98
  and106:
    JR_LTEQF VS3_M 10.0 and107
    JR_LTF VS2_M 10.0 whilebody98
  and107:
  endwhile98:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 90.0 'true'

	DATA8 layer109
	DATA8 nos109
	DATA8 busy109
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer109 nos109
	JR_EQ8 0 nos109 motornotbusy109
  motorwaiting109:
	OUTPUT_TEST layer109 nos109 busy109
	JR_EQ8 busy109 0 motornotbusy109
	SLEEP
	JR motorwaiting109
  motornotbusy109:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 90.0 'true'

	DATA8 layer111
	DATA8 nos111
	DATA8 busy111
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer111 nos111
	JR_EQ8 0 nos111 motornotbusy111
  motorwaiting111:
	OUTPUT_TEST layer111 nos111 busy111
	JR_EQ8 busy111 0 motornotbusy111
	SLEEP
	JR motorwaiting111
  motornotbusy111:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB113:
    WRITE32 ENDSUB_A2:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB114:
  while115:
    JR_LTEQF VS3_M 10.0 endwhile115
  whilebody115:
    WRITE32 ENDSUB_A3:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB116:
    WRITE32 ENDSUB_A2:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB117:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody115
  endwhile115:
    WRITE32 ENDSUB_A3:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB119:
    WRITE32 ENDSUB_A2:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB120:
  while121:
    JR_GTEQF VS3_M 60.0 endwhile121
  whilebody121:
    WRITE32 ENDSUB_A3:CALLSUB122 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB122:
    WRITE32 ENDSUB_A2:CALLSUB123 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB123:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 60.0 whilebody121
  endwhile121:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_NPP:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_NPP:
SUB_REDL:
    DATA32 tmp126
    CALL GETANDINC32 RUNCOUNTER_ZADVIG 1  RUNCOUNTER_ZADVIG tmp126
    JR_NEQ32 0 tmp126 alreadylaunched126
    OBJECT_START TZADVIG
  alreadylaunched126:
    WRITE32 ENDSUB_A3:CALLSUB127 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB127:
    WRITE32 ENDSUB_A2:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB128:
  while129:
    JR_LTEQF VS3_M 10.0 and131
    JR_GTF VS2_M 10.0 or130
  and131:
    JR_GTEQF VS3_M 10.0 and132
    JR_GTF VS2_M 10.0 or130
  and132:
    JR_LTEQF VS3_M 10.0 endwhile129
    JR_GTEQF VS2_M 10.0 endwhile129
  or130:
  whilebody129:
    WRITE32 ENDSUB_A3:CALLSUB133 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB133:
    WRITE32 ENDSUB_A2:CALLSUB134 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB134:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB135 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB135:
    JR_LTEQF VS3_M 10.0 and136
    JR_GTF VS2_M 10.0 whilebody129
  and136:
    JR_GTEQF VS3_M 10.0 and137
    JR_GTF VS2_M 10.0 whilebody129
  and137:
    JR_LTEQF VS3_M 10.0 and138
    JR_LTF VS2_M 10.0 whilebody129
  and138:
  endwhile129:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer140
	DATA8 nos140
	DATA8 busy140
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer140 nos140
	JR_EQ8 0 nos140 motornotbusy140
  motorwaiting140:
	OUTPUT_TEST layer140 nos140 busy140
	JR_EQ8 busy140 0 motornotbusy140
	SLEEP
	JR motorwaiting140
  motornotbusy140:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer141
	DATA8 nos141
	DATA8 busy141
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer141 nos141
	JR_EQ8 0 nos141 motornotbusy141
  motorwaiting141:
	OUTPUT_TEST layer141 nos141 busy141
	JR_EQ8 busy141 0 motornotbusy141
	SLEEP
	JR motorwaiting141
  motornotbusy141:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
    WRITE32 ENDSUB_A2:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB144:
    WRITE32 ENDSUB_A3:CALLSUB145 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB145:
  while146:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 400.0 endwhile146
  whilebody146:
    WRITE32 ENDSUB_A2:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB148:
    WRITE32 ENDSUB_A3:CALLSUB149 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB149:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB150 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB150:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 400.0 whilebody146
  endwhile146:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds154
	MOVEF_32 500.0 milliseconds154
	DATA32 timer154
	TIMER_WAIT milliseconds154 timer154
	TIMER_READY timer154
    CALL MOTOR.STOP 'd' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 40.0 40.0 150.0 'true'

	DATA8 layer156
	DATA8 nos156
	DATA8 busy156
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer156 nos156
	JR_EQ8 0 nos156 motornotbusy156
  motorwaiting156:
	OUTPUT_TEST layer156 nos156 busy156
	JR_EQ8 busy156 0 motornotbusy156
	SLEEP
	JR motorwaiting156
  motornotbusy156:
    CALL MOTOR.SCHEDULESYNC 'bc' 0.0 -80.0 400.0 'true'

	DATA8 layer157
	DATA8 nos157
	DATA8 busy157
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer157 nos157
	JR_EQ8 0 nos157 motornotbusy157
  motorwaiting157:
	OUTPUT_TEST layer157 nos157 busy157
	JR_EQ8 busy157 0 motornotbusy157
	SLEEP
	JR motorwaiting157
  motornotbusy157:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 100.0 'true'

	DATA8 layer158
	DATA8 nos158
	DATA8 busy158
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer158 nos158
	JR_EQ8 0 nos158 motornotbusy158
  motorwaiting158:
	OUTPUT_TEST layer158 nos158 busy158
	JR_EQ8 busy158 0 motornotbusy158
	SLEEP
	JR motorwaiting158
  motornotbusy158:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer159
	DATA8 nos159
	DATA8 busy159
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer159 nos159
	JR_EQ8 0 nos159 motornotbusy159
  motorwaiting159:
	OUTPUT_TEST layer159 nos159 busy159
	JR_EQ8 busy159 0 motornotbusy159
	SLEEP
	JR motorwaiting159
  motornotbusy159:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 180.0 'true'

	DATA8 layer160
	DATA8 nos160
	DATA8 busy160
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer160 nos160
	JR_EQ8 0 nos160 motornotbusy160
  motorwaiting160:
	OUTPUT_TEST layer160 nos160 busy160
	JR_EQ8 busy160 0 motornotbusy160
	SLEEP
	JR motorwaiting160
  motornotbusy160:
    WRITE32 ENDSUB_A2:CALLSUB161 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB161:
    WRITE32 ENDSUB_A3:CALLSUB162 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB162:
  while163:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 9.0 endwhile163
  whilebody163:
    WRITE32 ENDSUB_A2:CALLSUB165 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB165:
    WRITE32 ENDSUB_A3:CALLSUB166 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB166:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB167:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 9.0 whilebody163
  endwhile163:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer170
	DATA8 nos170
	DATA8 busy170
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer170 nos170
	JR_EQ8 0 nos170 motornotbusy170
  motorwaiting170:
	OUTPUT_TEST layer170 nos170 busy170
	JR_EQ8 busy170 0 motornotbusy170
	SLEEP
	JR motorwaiting170
  motornotbusy170:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer171
	DATA8 nos171
	DATA8 busy171
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer171 nos171
	JR_EQ8 0 nos171 motornotbusy171
  motorwaiting171:
	OUTPUT_TEST layer171 nos171 busy171
	JR_EQ8 busy171 0 motornotbusy171
	SLEEP
	JR motorwaiting171
  motornotbusy171:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_REDL:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_REDL:
SUB_BELLAM:
  while173:
    JR_LTEQF VS3_M 15.0 and175
    JR_GTF VS2_M 15.0 or174
  and175:
    JR_GTEQF VS3_M 15.0 endwhile173
    JR_GTEQF VS2_M 15.0 endwhile173
  or174:
  whilebody173:
    WRITE32 ENDSUB_A3:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB176:
    WRITE32 ENDSUB_A2:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB177:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB178:
    JR_LTEQF VS3_M 15.0 and179
    JR_GTF VS2_M 15.0 whilebody173
  and179:
    JR_GTEQF VS3_M 15.0 and180
    JR_LTF VS2_M 15.0 whilebody173
  and180:
  endwhile173:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer182
	DATA8 nos182
	DATA8 busy182
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer182 nos182
	JR_EQ8 0 nos182 motornotbusy182
  motorwaiting182:
	OUTPUT_TEST layer182 nos182 busy182
	JR_EQ8 busy182 0 motornotbusy182
	SLEEP
	JR motorwaiting182
  motornotbusy182:
    WRITE32 ENDSUB_A3:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB183:
    WRITE32 ENDSUB_A2:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB184:
  while185:
    JR_LTEQF VS3_M 10.0 endwhile185
  whilebody185:
    WRITE32 ENDSUB_A3:CALLSUB186 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB186:
    WRITE32 ENDSUB_A2:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB187:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody185
  endwhile185:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB190:
    WRITE32 ENDSUB_A2:CALLSUB191 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB191:
  while192:
    JR_GTEQF VS3_M 15.0 endwhile192
  whilebody192:
    WRITE32 ENDSUB_A3:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB193:
    WRITE32 ENDSUB_A2:CALLSUB194 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB194:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody192
  endwhile192:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while198:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 200.0 endwhile198
  whilebody198:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB200:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 200.0 whilebody198
  endwhile198:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB203:
    WRITE32 ENDSUB_A2:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB204:
    MOVEF_F 1.0 VI_M
  for205:
    JR_GTF VI_M 1.0 endfor205
  forbody205:
    WRITE32 ENDSUB_A3:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB206:
    WRITE32 ENDSUB_A2:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB207:
  while208:
    JR_LTEQF VS3_M 15.0 and210
    JR_GTF VS2_M 15.0 or209
  and210:
    JR_GTEQF VS3_M 15.0 endwhile208
    JR_GTEQF VS2_M 15.0 endwhile208
  or209:
  whilebody208:
    WRITE32 ENDSUB_A3:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB211:
    WRITE32 ENDSUB_A2:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB212:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB213:
    JR_LTEQF VS3_M 15.0 and214
    JR_GTF VS2_M 15.0 whilebody208
  and214:
    JR_GTEQF VS3_M 15.0 and215
    JR_LTF VS2_M 15.0 whilebody208
  and215:
  endwhile208:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer217
	DATA8 nos217
	DATA8 busy217
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer217 nos217
	JR_EQ8 0 nos217 motornotbusy217
  motorwaiting217:
	OUTPUT_TEST layer217 nos217 busy217
	JR_EQ8 busy217 0 motornotbusy217
	SLEEP
	JR motorwaiting217
  motornotbusy217:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody205
  endfor205:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 20.0 'true'

	DATA8 layer219
	DATA8 nos219
	DATA8 busy219
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer219 nos219
	JR_EQ8 0 nos219 motornotbusy219
  motorwaiting219:
	OUTPUT_TEST layer219 nos219 busy219
	JR_EQ8 busy219 0 motornotbusy219
	SLEEP
	JR motorwaiting219
  motornotbusy219:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB221 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB221:
    WRITE32 ENDSUB_A2:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB222:
    MOVEF_F 80.0 VJ_M
  while223:
    JR_LTEQF VS3_M 15.0 endwhile223
  whilebody223:
    WRITE32 ENDSUB_A3:CALLSUB224 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB224:
    WRITE32 ENDSUB_A2:CALLSUB225 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB225:
    JR_LTEQF VJ_M 30.0 else226_1
    SUBF VJ_M 0.1 VJ_M
  else226_1:
  endif226:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 15.0 whilebody223
  endwhile223:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB230 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB230:
    WRITE32 ENDSUB_A2:CALLSUB231 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB231:
    MOVEF_F 80.0 VJ_M
  while232:
    JR_GTEQF VS3_M 15.0 endwhile232
  whilebody232:
    WRITE32 ENDSUB_A3:CALLSUB233 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB233:
    WRITE32 ENDSUB_A2:CALLSUB234 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB234:
    JR_LTEQF VJ_M 30.0 else235_1
    SUBF VJ_M 0.1 VJ_M
  else235_1:
  endif235:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody232
  endwhile232:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while240:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf244
    DATA8 flag244
    DIVF F.1 2.0 tmpf244
    CP_EQF 0.0 2.0 flag244
    SELECTF flag244 0.0 tmpf244 F.0

    JR_GTEQF F.0 50.0 endwhile240
  whilebody240:
    WRITE32 ENDSUB_A3:CALLSUB245 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB245:
    WRITE32 ENDSUB_A2:CALLSUB246 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB246:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB247 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB247:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf251
    DATA8 flag251
    DIVF F.1 2.0 tmpf251
    CP_EQF 0.0 2.0 flag251
    SELECTF flag251 0.0 tmpf251 F.0

    JR_LTF F.0 50.0 whilebody240
  endwhile240:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 150.0 'true'

	DATA8 layer253
	DATA8 nos253
	DATA8 busy253
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer253 nos253
	JR_EQ8 0 nos253 motornotbusy253
  motorwaiting253:
	OUTPUT_TEST layer253 nos253 busy253
	JR_EQ8 busy253 0 motornotbusy253
	SLEEP
	JR motorwaiting253
  motornotbusy253:
    CALL MOTOR.START 'd' 50.0
    DATA32 milliseconds255
	MOVEF_32 500.0 milliseconds255
	DATA32 timer255
	TIMER_WAIT milliseconds255 timer255
	TIMER_READY timer255
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 -30.0 100.0 'true'

	DATA8 layer257
	DATA8 nos257
	DATA8 busy257
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer257 nos257
	JR_EQ8 0 nos257 motornotbusy257
  motorwaiting257:
	OUTPUT_TEST layer257 nos257 busy257
	JR_EQ8 busy257 0 motornotbusy257
	SLEEP
	JR motorwaiting257
  motornotbusy257:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 0.0 350.0 'true'

	DATA8 layer258
	DATA8 nos258
	DATA8 busy258
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer258 nos258
	JR_EQ8 0 nos258 motornotbusy258
  motorwaiting258:
	OUTPUT_TEST layer258 nos258 busy258
	JR_EQ8 busy258 0 motornotbusy258
	SLEEP
	JR motorwaiting258
  motornotbusy258:
    WRITE32 ENDSUB_A2:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB259:
    WRITE32 ENDSUB_A3:CALLSUB260 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB260:
  while261:
    JR_LTEQF VS3_M 10.0 and263
    JR_GTF VS2_M 10.0 or262
  and263:
    JR_GTEQF VS3_M 10.0 and264
    JR_GTF VS2_M 10.0 or262
  and264:
    JR_LTEQF VS3_M 6.0 endwhile261
    JR_GTEQF VS2_M 6.0 endwhile261
  or262:
  whilebody261:
    WRITE32 ENDSUB_A2:CALLSUB265 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB265:
    WRITE32 ENDSUB_A3:CALLSUB266 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB266:
    CALL MOTOR.STARTPOWER 'bc' 20.0
    JR_LTEQF VS3_M 10.0 and268
    JR_GTF VS2_M 10.0 whilebody261
  and268:
    JR_GTEQF VS3_M 10.0 and269
    JR_GTF VS2_M 10.0 whilebody261
  and269:
    JR_LTEQF VS3_M 6.0 and270
    JR_LTF VS2_M 6.0 whilebody261
  and270:
  endwhile261:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer272
	DATA8 nos272
	DATA8 busy272
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer272 nos272
	JR_EQ8 0 nos272 motornotbusy272
  motorwaiting272:
	OUTPUT_TEST layer272 nos272 busy272
	JR_EQ8 busy272 0 motornotbusy272
	SLEEP
	JR motorwaiting272
  motornotbusy272:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB274 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB274:
    WRITE32 ENDSUB_A2:CALLSUB275 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB275:
  while276:
    JR_LTEQF VS3_M 10.0 endwhile276
  whilebody276:
    WRITE32 ENDSUB_A3:CALLSUB277 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB277:
    WRITE32 ENDSUB_A2:CALLSUB278 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB278:
    CALL MOTOR.STARTSYNC 'bc' 5.0 -5.0
    JR_GTF VS3_M 10.0 whilebody276
  endwhile276:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB281 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB281:
    WRITE32 ENDSUB_A2:CALLSUB282 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB282:
  while283:
    JR_GTEQF VS3_M 15.0 endwhile283
  whilebody283:
    WRITE32 ENDSUB_A3:CALLSUB284 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB284:
    WRITE32 ENDSUB_A2:CALLSUB285 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB285:
    CALL MOTOR.STARTSYNC 'bc' 5.0 -5.0
    JR_LTF VS3_M 15.0 whilebody283
  endwhile283:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_ZAMOROZ:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_ZAMOROZ
CALLSUB288:
    DATA32 milliseconds289
	MOVEF_32 100.0 milliseconds289
	DATA32 timer289
	TIMER_WAIT milliseconds289 timer289
	TIMER_READY timer289
RETSUB_BELLAM:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM:
SUB_BELLAM2:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 70.0 'true'

	DATA8 layer290
	DATA8 nos290
	DATA8 busy290
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer290 nos290
	JR_EQ8 0 nos290 motornotbusy290
  motorwaiting290:
	OUTPUT_TEST layer290 nos290 busy290
	JR_EQ8 busy290 0 motornotbusy290
	SLEEP
	JR motorwaiting290
  motornotbusy290:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 180.0 'true'

	DATA8 layer291
	DATA8 nos291
	DATA8 busy291
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer291 nos291
	JR_EQ8 0 nos291 motornotbusy291
  motorwaiting291:
	OUTPUT_TEST layer291 nos291 busy291
	JR_EQ8 busy291 0 motornotbusy291
	SLEEP
	JR motorwaiting291
  motornotbusy291:
    WRITE32 ENDSUB_A2:CALLSUB292 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB292:
    WRITE32 ENDSUB_A3:CALLSUB293 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB293:
  while294:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 60.0 endwhile294
  whilebody294:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 60.0 whilebody294
  endwhile294:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB299 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB299:
    WRITE32 ENDSUB_A3:CALLSUB300 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB300:
  while301:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf305
    DATA8 flag305
    DIVF F.1 2.0 tmpf305
    CP_EQF 0.0 2.0 flag305
    SELECTF flag305 0.0 tmpf305 F.0

    JR_GTEQF F.0 80.0 endwhile301
  whilebody301:
    WRITE32 ENDSUB_A3:CALLSUB306 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB306:
    WRITE32 ENDSUB_A2:CALLSUB307 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB307:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB308 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB308:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf312
    DATA8 flag312
    DIVF F.1 2.0 tmpf312
    CP_EQF 0.0 2.0 flag312
    SELECTF flag312 0.0 tmpf312 F.0

    JR_LTF F.0 80.0 whilebody301
  endwhile301:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB314 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB314:
    WRITE32 ENDSUB_A2:CALLSUB315 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB315:
  while316:
    JR_LTEQF VS3_M 10.0 and318
    JR_GTF VS2_M 10.0 or317
  and318:
    JR_GTEQF VS3_M 10.0 endwhile316
    JR_GTEQF VS2_M 10.0 endwhile316
  or317:
  whilebody316:
    WRITE32 ENDSUB_A3:CALLSUB319 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB319:
    WRITE32 ENDSUB_A2:CALLSUB320 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB320:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB321 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB321:
    JR_LTEQF VS3_M 10.0 and322
    JR_GTF VS2_M 10.0 whilebody316
  and322:
    JR_GTEQF VS3_M 10.0 and323
    JR_LTF VS2_M 10.0 whilebody316
  and323:
  endwhile316:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer325
	DATA8 nos325
	DATA8 busy325
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer325 nos325
	JR_EQ8 0 nos325 motornotbusy325
  motorwaiting325:
	OUTPUT_TEST layer325 nos325 busy325
	JR_EQ8 busy325 0 motornotbusy325
	SLEEP
	JR motorwaiting325
  motornotbusy325:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB327:
    WRITE32 ENDSUB_A2:CALLSUB328 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB328:
  while329:
    JR_LTEQF VS3_M 10.0 endwhile329
  whilebody329:
    WRITE32 ENDSUB_A3:CALLSUB330 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB330:
    WRITE32 ENDSUB_A2:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB331:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody329
  endwhile329:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB334 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB334:
    WRITE32 ENDSUB_A2:CALLSUB335 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB335:
  while336:
    JR_GTEQF VS3_M 15.0 endwhile336
  whilebody336:
    WRITE32 ENDSUB_A3:CALLSUB337 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB337:
    WRITE32 ENDSUB_A2:CALLSUB338 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB338:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody336
  endwhile336:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB341 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB341:
    WRITE32 ENDSUB_A2:CALLSUB342 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB342:
    MOVEF_F 1.0 VI_M
  for343:
    JR_GTF VI_M 2.0 endfor343
  forbody343:
    WRITE32 ENDSUB_A3:CALLSUB344 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB344:
    WRITE32 ENDSUB_A2:CALLSUB345 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB345:
  while346:
    JR_LTEQF VS3_M 15.0 and348
    JR_GTF VS2_M 15.0 or347
  and348:
    JR_GTEQF VS3_M 15.0 endwhile346
    JR_GTEQF VS2_M 15.0 endwhile346
  or347:
  whilebody346:
    WRITE32 ENDSUB_A3:CALLSUB349 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB349:
    WRITE32 ENDSUB_A2:CALLSUB350 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB350:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB351 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB351:
    JR_LTEQF VS3_M 15.0 and352
    JR_GTF VS2_M 15.0 whilebody346
  and352:
    JR_GTEQF VS3_M 15.0 and353
    JR_LTF VS2_M 15.0 whilebody346
  and353:
  endwhile346:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer354
	DATA8 nos354
	DATA8 busy354
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer354 nos354
	JR_EQ8 0 nos354 motornotbusy354
  motorwaiting354:
	OUTPUT_TEST layer354 nos354 busy354
	JR_EQ8 busy354 0 motornotbusy354
	SLEEP
	JR motorwaiting354
  motornotbusy354:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 2.0 forbody343
  endfor343:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 20.0 'true'

	DATA8 layer356
	DATA8 nos356
	DATA8 busy356
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer356 nos356
	JR_EQ8 0 nos356 motornotbusy356
  motorwaiting356:
	OUTPUT_TEST layer356 nos356 busy356
	JR_EQ8 busy356 0 motornotbusy356
	SLEEP
	JR motorwaiting356
  motornotbusy356:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB358 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB358:
    WRITE32 ENDSUB_A2:CALLSUB359 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB359:
    MOVEF_F 80.0 VJ_M
  while360:
    JR_LTEQF VS3_M 10.0 endwhile360
  whilebody360:
    WRITE32 ENDSUB_A3:CALLSUB361 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB361:
    WRITE32 ENDSUB_A2:CALLSUB362 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB362:
    JR_LTEQF VJ_M 30.0 else363_1
    SUBF VJ_M 0.1 VJ_M
  else363_1:
  endif363:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_GTF VS3_M 10.0 whilebody360
  endwhile360:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB367 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB367:
    WRITE32 ENDSUB_A2:CALLSUB368 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB368:
    MOVEF_F 80.0 VJ_M
  while369:
    JR_GTEQF VS3_M 15.0 endwhile369
  whilebody369:
    WRITE32 ENDSUB_A3:CALLSUB370 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB370:
    WRITE32 ENDSUB_A2:CALLSUB371 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB371:
    JR_LTEQF VJ_M 30.0 else372_1
    SUBF VJ_M 0.1 VJ_M
  else372_1:
  endif372:
    CALL MOTOR.STARTSYNC 'bc' 20.0 -20.0
    JR_LTF VS3_M 15.0 whilebody369
  endwhile369:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while377:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf381
    DATA8 flag381
    DIVF F.1 2.0 tmpf381
    CP_EQF 0.0 2.0 flag381
    SELECTF flag381 0.0 tmpf381 F.0

    JR_GTEQF F.0 50.0 endwhile377
  whilebody377:
    WRITE32 ENDSUB_A3:CALLSUB382 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB382:
    WRITE32 ENDSUB_A2:CALLSUB383 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB383:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB384 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB384:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf388
    DATA8 flag388
    DIVF F.1 2.0 tmpf388
    CP_EQF 0.0 2.0 flag388
    SELECTF flag388 0.0 tmpf388 F.0

    JR_LTF F.0 50.0 whilebody377
  endwhile377:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer390
	DATA8 nos390
	DATA8 busy390
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer390 nos390
	JR_EQ8 0 nos390 motornotbusy390
  motorwaiting390:
	OUTPUT_TEST layer390 nos390 busy390
	JR_EQ8 busy390 0 motornotbusy390
	SLEEP
	JR motorwaiting390
  motornotbusy390:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds392
	MOVEF_32 500.0 milliseconds392
	DATA32 timer392
	TIMER_WAIT milliseconds392 timer392
	TIMER_READY timer392
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while395:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf399
    DATA8 flag399
    DIVF F.1 2.0 tmpf399
    CP_EQF 0.0 2.0 flag399
    SELECTF flag399 0.0 tmpf399 F.0

    JR_LTEQF F.0 -200.0 endwhile395
  whilebody395:
    CALL MOTOR.STARTPOWER 'bc' -20.0
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf404
    DATA8 flag404
    DIVF F.1 2.0 tmpf404
    CP_EQF 0.0 2.0 flag404
    SELECTF flag404 0.0 tmpf404 F.0

    JR_GTF F.0 -200.0 whilebody395
  endwhile395:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 -20.0 180.0 'true'

	DATA8 layer406
	DATA8 nos406
	DATA8 busy406
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer406 nos406
	JR_EQ8 0 nos406 motornotbusy406
  motorwaiting406:
	OUTPUT_TEST layer406 nos406 busy406
	JR_EQ8 busy406 0 motornotbusy406
	SLEEP
	JR motorwaiting406
  motornotbusy406:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB408 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB408:
    WRITE32 ENDSUB_A3:CALLSUB409 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB409:
  while410:
    JR_LTEQF VS3_M 10.0 and412
    JR_GTF VS2_M 10.0 or411
  and412:
    JR_LTEQF VS3_M 10.0 and413
    JR_LTF VS2_M 10.0 or411
  and413:
    JR_GTEQF VS3_M 10.0 endwhile410
    JR_LTEQF VS2_M 10.0 endwhile410
  or411:
  whilebody410:
    WRITE32 ENDSUB_A2:CALLSUB414 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB414:
    WRITE32 ENDSUB_A3:CALLSUB415 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB415:
    CALL MOTOR.STARTPOWER 'bc' 40.0
    JR_LTEQF VS3_M 10.0 and417
    JR_GTF VS2_M 10.0 whilebody410
  and417:
    JR_LTEQF VS3_M 10.0 and418
    JR_LTF VS2_M 10.0 whilebody410
  and418:
    JR_GTEQF VS3_M 10.0 and419
    JR_GTF VS2_M 10.0 whilebody410
  and419:
  endwhile410:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer421
	DATA8 nos421
	DATA8 busy421
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer421 nos421
	JR_EQ8 0 nos421 motornotbusy421
  motorwaiting421:
	OUTPUT_TEST layer421 nos421 busy421
	JR_EQ8 busy421 0 motornotbusy421
	SLEEP
	JR motorwaiting421
  motornotbusy421:
    WRITE32 ENDSUB_A3:CALLSUB422 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB422:
    WRITE32 ENDSUB_A2:CALLSUB423 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB423:
  while424:
    JR_LTEQF VS3_M 10.0 endwhile424
  whilebody424:
    WRITE32 ENDSUB_A3:CALLSUB425 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB425:
    WRITE32 ENDSUB_A2:CALLSUB426 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB426:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody424
  endwhile424:
    WRITE32 ENDSUB_A3:CALLSUB428 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB428:
    WRITE32 ENDSUB_A2:CALLSUB429 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB429:
  while430:
    JR_GTEQF VS3_M 15.0 endwhile430
  whilebody430:
    WRITE32 ENDSUB_A3:CALLSUB431 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB431:
    WRITE32 ENDSUB_A2:CALLSUB432 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB432:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody430
  endwhile430:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM2:
SUB_BELLAM3:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 90.0 'true'

	DATA8 layer435
	DATA8 nos435
	DATA8 busy435
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer435 nos435
	JR_EQ8 0 nos435 motornotbusy435
  motorwaiting435:
	OUTPUT_TEST layer435 nos435 busy435
	JR_EQ8 busy435 0 motornotbusy435
	SLEEP
	JR motorwaiting435
  motornotbusy435:
    CALL MOTOR.SCHEDULESYNC 'bc' -30.0 30.0 230.0 'true'

	DATA8 layer436
	DATA8 nos436
	DATA8 busy436
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer436 nos436
	JR_EQ8 0 nos436 motornotbusy436
  motorwaiting436:
	OUTPUT_TEST layer436 nos436 busy436
	JR_EQ8 busy436 0 motornotbusy436
	SLEEP
	JR motorwaiting436
  motornotbusy436:
    WRITE32 ENDSUB_A2:CALLSUB437 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB437:
    WRITE32 ENDSUB_A3:CALLSUB438 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB438:
  while439:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 60.0 endwhile439
  whilebody439:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 60.0 whilebody439
  endwhile439:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A2:CALLSUB444 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB444:
    WRITE32 ENDSUB_A3:CALLSUB445 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB445:
  while446:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf450
    DATA8 flag450
    DIVF F.1 2.0 tmpf450
    CP_EQF 0.0 2.0 flag450
    SELECTF flag450 0.0 tmpf450 F.0

    JR_GTEQF F.0 80.0 endwhile446
  whilebody446:
    WRITE32 ENDSUB_A3:CALLSUB451 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB451:
    WRITE32 ENDSUB_A2:CALLSUB452 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB452:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB453 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB453:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf457
    DATA8 flag457
    DIVF F.1 2.0 tmpf457
    CP_EQF 0.0 2.0 flag457
    SELECTF flag457 0.0 tmpf457 F.0

    JR_LTF F.0 80.0 whilebody446
  endwhile446:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB459 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB459:
    WRITE32 ENDSUB_A2:CALLSUB460 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB460:
  while461:
    JR_LTEQF VS3_M 10.0 and463
    JR_GTF VS2_M 10.0 or462
  and463:
    JR_GTEQF VS3_M 10.0 endwhile461
    JR_GTEQF VS2_M 10.0 endwhile461
  or462:
  whilebody461:
    WRITE32 ENDSUB_A3:CALLSUB464 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB464:
    WRITE32 ENDSUB_A2:CALLSUB465 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB465:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB466 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB466:
    JR_LTEQF VS3_M 10.0 and467
    JR_GTF VS2_M 10.0 whilebody461
  and467:
    JR_GTEQF VS3_M 10.0 and468
    JR_LTF VS2_M 10.0 whilebody461
  and468:
  endwhile461:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer470
	DATA8 nos470
	DATA8 busy470
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer470 nos470
	JR_EQ8 0 nos470 motornotbusy470
  motorwaiting470:
	OUTPUT_TEST layer470 nos470 busy470
	JR_EQ8 busy470 0 motornotbusy470
	SLEEP
	JR motorwaiting470
  motornotbusy470:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB472 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB472:
    WRITE32 ENDSUB_A2:CALLSUB473 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB473:
  while474:
    JR_LTEQF VS3_M 10.0 endwhile474
  whilebody474:
    WRITE32 ENDSUB_A3:CALLSUB475 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB475:
    WRITE32 ENDSUB_A2:CALLSUB476 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB476:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_GTF VS3_M 10.0 whilebody474
  endwhile474:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB479 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB479:
    WRITE32 ENDSUB_A2:CALLSUB480 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB480:
  while481:
    JR_GTEQF VS3_M 15.0 endwhile481
  whilebody481:
    WRITE32 ENDSUB_A3:CALLSUB482 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB482:
    WRITE32 ENDSUB_A2:CALLSUB483 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB483:
    CALL MOTOR.STARTSYNC 'bc' 30.0 -30.0
    JR_LTF VS3_M 15.0 whilebody481
  endwhile481:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB486 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB486:
    WRITE32 ENDSUB_A2:CALLSUB487 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB487:
    MOVEF_F 1.0 VI_M
  for488:
    JR_GTF VI_M 3.0 endfor488
  forbody488:
    WRITE32 ENDSUB_A3:CALLSUB489 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB489:
    WRITE32 ENDSUB_A2:CALLSUB490 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB490:
  while491:
    JR_LTEQF VS3_M 15.0 and493
    JR_GTF VS2_M 15.0 or492
  and493:
    JR_GTEQF VS3_M 15.0 endwhile491
    JR_GTEQF VS2_M 15.0 endwhile491
  or492:
  whilebody491:
    WRITE32 ENDSUB_A3:CALLSUB494 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB494:
    WRITE32 ENDSUB_A2:CALLSUB495 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB495:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB496 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB496:
    JR_LTEQF VS3_M 15.0 and497
    JR_GTF VS2_M 15.0 whilebody491
  and497:
    JR_GTEQF VS3_M 15.0 and498
    JR_LTF VS2_M 15.0 whilebody491
  and498:
  endwhile491:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer499
	DATA8 nos499
	DATA8 busy499
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer499 nos499
	JR_EQ8 0 nos499 motornotbusy499
  motorwaiting499:
	OUTPUT_TEST layer499 nos499 busy499
	JR_EQ8 busy499 0 motornotbusy499
	SLEEP
	JR motorwaiting499
  motornotbusy499:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 3.0 forbody488
  endfor488:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 20.0 'true'

	DATA8 layer502
	DATA8 nos502
	DATA8 busy502
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer502 nos502
	JR_EQ8 0 nos502 motornotbusy502
  motorwaiting502:
	OUTPUT_TEST layer502 nos502 busy502
	JR_EQ8 busy502 0 motornotbusy502
	SLEEP
	JR motorwaiting502
  motornotbusy502:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 100.0 'true'

	DATA8 layer503
	DATA8 nos503
	DATA8 busy503
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer503 nos503
	JR_EQ8 0 nos503 motornotbusy503
  motorwaiting503:
	OUTPUT_TEST layer503 nos503 busy503
	JR_EQ8 busy503 0 motornotbusy503
	SLEEP
	JR motorwaiting503
  motornotbusy503:
    CALL MOTOR.SCHEDULESYNC 'bc' 50.0 -30.0 70.0 'true'

	DATA8 layer504
	DATA8 nos504
	DATA8 busy504
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer504 nos504
	JR_EQ8 0 nos504 motornotbusy504
  motorwaiting504:
	OUTPUT_TEST layer504 nos504 busy504
	JR_EQ8 busy504 0 motornotbusy504
	SLEEP
	JR motorwaiting504
  motornotbusy504:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 50.0 'true'

	DATA8 layer505
	DATA8 nos505
	DATA8 busy505
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer505 nos505
	JR_EQ8 0 nos505 motornotbusy505
  motorwaiting505:
	OUTPUT_TEST layer505 nos505 busy505
	JR_EQ8 busy505 0 motornotbusy505
	SLEEP
	JR motorwaiting505
  motornotbusy505:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 -30.0 30.0 'true'

	DATA8 layer506
	DATA8 nos506
	DATA8 busy506
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer506 nos506
	JR_EQ8 0 nos506 motornotbusy506
  motorwaiting506:
	OUTPUT_TEST layer506 nos506 busy506
	JR_EQ8 busy506 0 motornotbusy506
	SLEEP
	JR motorwaiting506
  motornotbusy506:
    CALL MOTOR.RESETCOUNT 'bc'
  while508:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf512
    DATA8 flag512
    DIVF F.1 2.0 tmpf512
    CP_EQF 0.0 2.0 flag512
    SELECTF flag512 0.0 tmpf512 F.0

    JR_GTEQF F.0 50.0 endwhile508
  whilebody508:
    WRITE32 ENDSUB_A3:CALLSUB513 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB513:
    WRITE32 ENDSUB_A2:CALLSUB514 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB514:
    MOVEF_F 30.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB515 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB515:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf519
    DATA8 flag519
    DIVF F.1 2.0 tmpf519
    CP_EQF 0.0 2.0 flag519
    SELECTF flag519 0.0 tmpf519 F.0

    JR_LTF F.0 50.0 whilebody508
  endwhile508:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer521
	DATA8 nos521
	DATA8 busy521
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer521 nos521
	JR_EQ8 0 nos521 motornotbusy521
  motorwaiting521:
	OUTPUT_TEST layer521 nos521 busy521
	JR_EQ8 busy521 0 motornotbusy521
	SLEEP
	JR motorwaiting521
  motornotbusy521:
    CALL MOTOR.START 'd' 30.0
    DATA32 milliseconds523
	MOVEF_32 500.0 milliseconds523
	DATA32 timer523
	TIMER_WAIT milliseconds523 timer523
	TIMER_READY timer523
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 150.0 'true'

	DATA8 layer525
	DATA8 nos525
	DATA8 busy525
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer525 nos525
	JR_EQ8 0 nos525 motornotbusy525
  motorwaiting525:
	OUTPUT_TEST layer525 nos525 busy525
	JR_EQ8 busy525 0 motornotbusy525
	SLEEP
	JR motorwaiting525
  motornotbusy525:
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 0.0 400.0 'true'

	DATA8 layer526
	DATA8 nos526
	DATA8 busy526
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer526 nos526
	JR_EQ8 0 nos526 motornotbusy526
  motorwaiting526:
	OUTPUT_TEST layer526 nos526 busy526
	JR_EQ8 busy526 0 motornotbusy526
	SLEEP
	JR motorwaiting526
  motornotbusy526:
    WRITE32 ENDSUB_A2:CALLSUB527 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB527:
    WRITE32 ENDSUB_A3:CALLSUB528 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB528:
  while529:
    JR_LTEQF VS3_M 10.0 and531
    JR_GTF VS2_M 10.0 or530
  and531:
    JR_GTEQF VS3_M 10.0 and532
    JR_GTF VS2_M 10.0 or530
  and532:
    JR_LTEQF VS3_M 10.0 endwhile529
    JR_GTEQF VS2_M 10.0 endwhile529
  or530:
  whilebody529:
    WRITE32 ENDSUB_A2:CALLSUB533 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB533:
    WRITE32 ENDSUB_A3:CALLSUB534 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB534:
    CALL MOTOR.STARTPOWER 'bc' 80.0
    JR_LTEQF VS3_M 10.0 and536
    JR_GTF VS2_M 10.0 whilebody529
  and536:
    JR_GTEQF VS3_M 10.0 and537
    JR_GTF VS2_M 10.0 whilebody529
  and537:
    JR_LTEQF VS3_M 10.0 and538
    JR_LTF VS2_M 10.0 whilebody529
  and538:
  endwhile529:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 60.0 60.0 70.0 'true'

	DATA8 layer540
	DATA8 nos540
	DATA8 busy540
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer540 nos540
	JR_EQ8 0 nos540 motornotbusy540
  motorwaiting540:
	OUTPUT_TEST layer540 nos540 busy540
	JR_EQ8 busy540 0 motornotbusy540
	SLEEP
	JR motorwaiting540
  motornotbusy540:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB542 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB542:
    WRITE32 ENDSUB_A2:CALLSUB543 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB543:
  while544:
    JR_LTEQF VS3_M 10.0 endwhile544
  whilebody544:
    WRITE32 ENDSUB_A3:CALLSUB545 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB545:
    WRITE32 ENDSUB_A2:CALLSUB546 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB546:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_GTF VS3_M 10.0 whilebody544
  endwhile544:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB549 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB549:
    WRITE32 ENDSUB_A2:CALLSUB550 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB550:
  while551:
    JR_GTEQF VS3_M 15.0 endwhile551
  whilebody551:
    WRITE32 ENDSUB_A3:CALLSUB552 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB552:
    WRITE32 ENDSUB_A2:CALLSUB553 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB553:
    CALL MOTOR.STARTSYNC 'bc' 10.0 -10.0
    JR_LTF VS3_M 15.0 whilebody551
  endwhile551:
    CALL MOTOR.STOP 'bc' 'true'
    MOVEF_F 1.0 VI_M
  for556:
    JR_GTF VI_M 1.0 endfor556
  forbody556:
    WRITE32 ENDSUB_A3:CALLSUB557 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB557:
    WRITE32 ENDSUB_A2:CALLSUB558 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB558:
  while559:
    JR_LTEQF VS3_M 10.0 and561
    JR_GTF VS2_M 10.0 or560
  and561:
    JR_GTEQF VS3_M 10.0 endwhile559
    JR_GTEQF VS2_M 10.0 endwhile559
  or560:
  whilebody559:
    WRITE32 ENDSUB_A3:CALLSUB562 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB562:
    WRITE32 ENDSUB_A2:CALLSUB563 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB563:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB564 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB564:
    JR_LTEQF VS3_M 10.0 and565
    JR_GTF VS2_M 10.0 whilebody559
  and565:
    JR_GTEQF VS3_M 10.0 and566
    JR_LTF VS2_M 10.0 whilebody559
  and566:
  endwhile559:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer568
	DATA8 nos568
	DATA8 busy568
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer568 nos568
	JR_EQ8 0 nos568 motornotbusy568
  motorwaiting568:
	OUTPUT_TEST layer568 nos568 busy568
	JR_EQ8 busy568 0 motornotbusy568
	SLEEP
	JR motorwaiting568
  motornotbusy568:
    ADDF VI_M 1.0 VI_M
    JR_LTEQF VI_M 1.0 forbody556
  endfor556:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_BELLAM3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_BELLAM3:
SUB_RED_1:
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 50.0 'true'

	DATA8 layer571
	DATA8 nos571
	DATA8 busy571
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer571 nos571
	JR_EQ8 0 nos571 motornotbusy571
  motorwaiting571:
	OUTPUT_TEST layer571 nos571 busy571
	JR_EQ8 busy571 0 motornotbusy571
	SLEEP
	JR motorwaiting571
  motornotbusy571:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB573 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB573:
    WRITE32 ENDSUB_A2:CALLSUB574 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB574:
  while575:
    JR_LTEQF VS2_M 15.0 endwhile575
  whilebody575:
    WRITE32 ENDSUB_A3:CALLSUB576 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB576:
    WRITE32 ENDSUB_A2:CALLSUB577 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB577:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody575
  endwhile575:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB580 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB580:
    WRITE32 ENDSUB_A2:CALLSUB581 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB581:
  while582:
    JR_GTEQF VS2_M 15.0 endwhile582
  whilebody582:
    WRITE32 ENDSUB_A3:CALLSUB583 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB583:
    WRITE32 ENDSUB_A2:CALLSUB584 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB584:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody582
  endwhile582:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while589:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf593
    DATA8 flag593
    DIVF F.1 2.0 tmpf593
    CP_EQF 0.0 2.0 flag593
    SELECTF flag593 0.0 tmpf593 F.0

    JR_GTEQF F.0 270.0 endwhile589
  whilebody589:
    MOVEF_F 50.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB594 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB594:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf598
    DATA8 flag598
    DIVF F.1 2.0 tmpf598
    CP_EQF 0.0 2.0 flag598
    SELECTF flag598 0.0 tmpf598 F.0

    JR_LTF F.0 270.0 whilebody589
  endwhile589:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds600
	MOVEF_32 100.0 milliseconds600
	DATA32 timer600
	TIMER_WAIT milliseconds600 timer600
	TIMER_READY timer600
    CALL MOTOR.START 'd' 20.0
    DATA32 milliseconds602
	MOVEF_32 500.0 milliseconds602
	DATA32 timer602
	TIMER_WAIT milliseconds602 timer602
	TIMER_READY timer602
    CALL MOTOR.STOP 'd' 'true'
    WRITE32 ENDSUB_NPL:CALLSUB604 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB604:
    MOVEF_F 1470.0 VS_M
    MOVEF_F 251.2 VL_M
    MOVEF_F 0.0 VX_M
    DATAF tmpf605
    DATA8 flag605
    DIVF 360.0 VL_M tmpf605
    CP_EQF 0.0 VL_M flag605
    SELECTF flag605 0.0 tmpf605 F.0

    MULF F.0 VS_M VX_M
    CALL MOTOR.RESETCOUNT 'bc'
  while608:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_GTEQF F.0 VX_M endwhile608
  whilebody608:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2DUS:CALLSUB610 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2DUS
CALLSUB610:
    CALL MOTOR.GETCOUNT 'b' F.0
    JR_LTF F.0 VX_M whilebody608
  endwhile608:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_REDL:CALLSUB613 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_REDL
CALLSUB613:
    WRITE32 ENDSUB_BELLAM:CALLSUB614 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_BELLAM
CALLSUB614:
    MOVEF_F 1400.0 VS_M
    WRITE32 ENDSUB_US:CALLSUB615 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_US
CALLSUB615:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 20.0 20.0 70.0 'true'

	DATA8 layer617
	DATA8 nos617
	DATA8 busy617
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer617 nos617
	JR_EQ8 0 nos617 motornotbusy617
  motorwaiting617:
	OUTPUT_TEST layer617 nos617 busy617
	JR_EQ8 busy617 0 motornotbusy617
	SLEEP
	JR motorwaiting617
  motornotbusy617:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB619 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB619:
    WRITE32 ENDSUB_A2:CALLSUB620 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB620:
  while621:
    JR_LTEQF VS2_M 15.0 endwhile621
  whilebody621:
    WRITE32 ENDSUB_A3:CALLSUB622 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB622:
    WRITE32 ENDSUB_A2:CALLSUB623 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB623:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_GTF VS2_M 15.0 whilebody621
  endwhile621:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB626 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB626:
    WRITE32 ENDSUB_A2:CALLSUB627 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB627:
  while628:
    JR_GTEQF VS2_M 15.0 endwhile628
  whilebody628:
    WRITE32 ENDSUB_A3:CALLSUB629 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB629:
    WRITE32 ENDSUB_A2:CALLSUB630 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB630:
    CALL MOTOR.STARTSYNC 'bc' -20.0 20.0
    JR_LTF VS2_M 15.0 whilebody628
  endwhile628:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.RESETCOUNT 'bc'
  while634:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf638
    DATA8 flag638
    DIVF F.1 2.0 tmpf638
    CP_EQF 0.0 2.0 flag638
    SELECTF flag638 0.0 tmpf638 F.0

    JR_GTEQF F.0 200.0 endwhile634
  whilebody634:
    WRITE32 ENDSUB_A3:CALLSUB639 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB639:
    WRITE32 ENDSUB_A2:CALLSUB640 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB640:
    MOVEF_F 80.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB641 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB641:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf645
    DATA8 flag645
    DIVF F.1 2.0 tmpf645
    CP_EQF 0.0 2.0 flag645
    SELECTF flag645 0.0 tmpf645 F.0

    JR_LTF F.0 200.0 whilebody634
  endwhile634:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.START 'd' -30.0
    DATA32 milliseconds648
	MOVEF_32 500.0 milliseconds648
	DATA32 timer648
	TIMER_WAIT milliseconds648 timer648
	TIMER_READY timer648
    CALL MOTOR.STOP 'd' 'true'
    DATA32 tmp650
    CALL GETANDINC32 RUNCOUNTER_VIDVIG 1  RUNCOUNTER_VIDVIG tmp650
    JR_NEQ32 0 tmp650 alreadylaunched650
    OBJECT_START TVIDVIG
  alreadylaunched650:
    WRITE32 ENDSUB_NPL:CALLSUB651 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_NPL
CALLSUB651:
    WRITE32 ENDSUB_A3:CALLSUB652 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB652:
    WRITE32 ENDSUB_A2:CALLSUB653 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB653:
  while654:
    JR_LTEQF VS3_M 15.0 and656
    JR_GTF VS2_M 15.0 or655
  and656:
    JR_GTEQF VS3_M 15.0 endwhile654
    JR_GTEQF VS2_M 15.0 endwhile654
  or655:
  whilebody654:
    WRITE32 ENDSUB_A3:CALLSUB657 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB657:
    WRITE32 ENDSUB_A2:CALLSUB658 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB658:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB659 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB659:
    JR_LTEQF VS3_M 15.0 and660
    JR_GTF VS2_M 15.0 whilebody654
  and660:
    JR_GTEQF VS3_M 15.0 and661
    JR_LTF VS2_M 15.0 whilebody654
  and661:
  endwhile654:
    CALL MOTOR.STOP 'bc' 'true'
    CALL MOTOR.SCHEDULESYNC 'bc' 30.0 30.0 50.0 'true'

	DATA8 layer663
	DATA8 nos663
	DATA8 busy663
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer663 nos663
	JR_EQ8 0 nos663 motornotbusy663
  motorwaiting663:
	OUTPUT_TEST layer663 nos663 busy663
	JR_EQ8 busy663 0 motornotbusy663
	SLEEP
	JR motorwaiting663
  motornotbusy663:
    WRITE32 ENDSUB_A3:CALLSUB664 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB664:
    WRITE32 ENDSUB_A2:CALLSUB665 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB665:
  while666:
    JR_LTEQF VS3_M 15.0 and668
    JR_GTF VS2_M 15.0 or667
  and668:
    JR_GTEQF VS3_M 15.0 endwhile666
    JR_GTEQF VS2_M 15.0 endwhile666
  or667:
  whilebody666:
    WRITE32 ENDSUB_A3:CALLSUB669 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB669:
    WRITE32 ENDSUB_A2:CALLSUB670 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB670:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB671 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB671:
    JR_LTEQF VS3_M 15.0 and672
    JR_GTF VS2_M 15.0 whilebody666
  and672:
    JR_GTEQF VS3_M 15.0 and673
    JR_LTF VS2_M 15.0 whilebody666
  and673:
  endwhile666:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_RED_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RED_1:
SUB_SB1:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 -40.0 200.0 'true'

	DATA8 layer675
	DATA8 nos675
	DATA8 busy675
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer675 nos675
	JR_EQ8 0 nos675 motornotbusy675
  motorwaiting675:
	OUTPUT_TEST layer675 nos675 busy675
	JR_EQ8 busy675 0 motornotbusy675
	SLEEP
	JR motorwaiting675
  motornotbusy675:
    CALL MOTOR.SCHEDULESYNC 'bc' -40.0 40.0 300.0 'true'

	DATA8 layer676
	DATA8 nos676
	DATA8 busy676
	CALL MOTORDECODEPORTSDESCRIPTOR 'bc' layer676 nos676
	JR_EQ8 0 nos676 motornotbusy676
  motorwaiting676:
	OUTPUT_TEST layer676 nos676 busy676
	JR_EQ8 busy676 0 motornotbusy676
	SLEEP
	JR motorwaiting676
  motornotbusy676:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB678 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB678:
    WRITE32 ENDSUB_A2:CALLSUB679 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB679:
  while680:
    JR_LTEQF VS2_M 10.0 endwhile680
  whilebody680:
    WRITE32 ENDSUB_A3:CALLSUB681 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB681:
    WRITE32 ENDSUB_A2:CALLSUB682 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB682:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_GTF VS2_M 10.0 whilebody680
  endwhile680:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB685 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB685:
    WRITE32 ENDSUB_A2:CALLSUB686 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB686:
  while687:
    JR_GTEQF VS2_M 15.0 endwhile687
  whilebody687:
    WRITE32 ENDSUB_A3:CALLSUB688 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB688:
    WRITE32 ENDSUB_A2:CALLSUB689 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB689:
    CALL MOTOR.STARTSYNC 'bc' -30.0 30.0
    JR_LTF VS2_M 15.0 whilebody687
  endwhile687:
    CALL MOTOR.STOP 'bc' 'true'
    DATA32 milliseconds692
	MOVEF_32 100.0 milliseconds692
	DATA32 timer692
	TIMER_WAIT milliseconds692 timer692
	TIMER_READY timer692
    CALL MOTOR.RESETCOUNT 'bc'
  while694:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf698
    DATA8 flag698
    DIVF F.1 2.0 tmpf698
    CP_EQF 0.0 2.0 flag698
    SELECTF flag698 0.0 tmpf698 F.0

    JR_GTEQF F.0 200.0 endwhile694
  whilebody694:
    WRITE32 ENDSUB_A3:CALLSUB699 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB699:
    WRITE32 ENDSUB_A2:CALLSUB700 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB700:
    MOVEF_F 20.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB701 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB701:
    CALL MOTOR.GETCOUNT 'b' F.2
    CALL MOTOR.GETCOUNT 'c' F.3
    ADDF F.2 F.3 F.1
    DATAF tmpf705
    DATA8 flag705
    DIVF F.1 2.0 tmpf705
    CP_EQF 0.0 2.0 flag705
    SELECTF flag705 0.0 tmpf705 F.0

    JR_LTF F.0 200.0 whilebody694
  endwhile694:
    CALL MOTOR.STOP 'bc' 'true'
    WRITE32 ENDSUB_A3:CALLSUB707 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB707:
    WRITE32 ENDSUB_A2:CALLSUB708 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB708:
  while709:
    JR_LTEQF VS3_M 10.0 and711
    JR_GTF VS2_M 10.0 or710
  and711:
    JR_GTEQF VS3_M 10.0 endwhile709
    JR_GTEQF VS2_M 10.0 endwhile709
  or710:
  whilebody709:
    WRITE32 ENDSUB_A3:CALLSUB712 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB712:
    WRITE32 ENDSUB_A2:CALLSUB713 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB713:
    MOVEF_F 60.0 VSPEED_M
    WRITE32 ENDSUB_POLIN2D:CALLSUB714 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_POLIN2D
CALLSUB714:
    JR_LTEQF VS3_M 10.0 and715
    JR_GTF VS2_M 10.0 whilebody709
  and715:
    JR_GTEQF VS3_M 10.0 and716
    JR_LTF VS2_M 10.0 whilebody709
  and716:
  endwhile709:
    CALL MOTOR.STOP 'bc' 'true'
RETSUB_SB1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_SB1:
SUB_HSV:
    DATA8 layer718
	DATA8 no718
	DATA8 mode8718
	
	MOVEF_8 1.0 no718
	SUB8 no718 1 no718
	DIV8 no718 4 layer718
	MATH MOD8 no718 4 no718

	MOVEF_8 2.0 mode8718
	
	INPUT_DEVICE READY_RAW layer718 no718 0 mode8718 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf725
    DATA8 flag725
    DIVF VSRED_M 255.0 tmpf725
    CP_EQF 0.0 255.0 flag725
    SELECTF flag725 0.0 tmpf725 VSRED_M

    DATAF tmpf726
    DATA8 flag726
    DIVF VSGREEN_M 255.0 tmpf726
    CP_EQF 0.0 255.0 flag726
    SELECTF flag726 0.0 tmpf726 VSGREEN_M

    DATAF tmpf727
    DATA8 flag727
    DIVF VSBLUE_M 255.0 tmpf727
    CP_EQF 0.0 255.0 flag727
    SELECTF flag727 0.0 tmpf727 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else728_1
    JR_LTEQF VSRED_M VSBLUE_M else728_1
    MOVEF_F VSRED_M VMAX_M
    JR endif728
  else728_1:
    JR_LTEQF VSGREEN_M VSRED_M else728_2
    JR_LTEQF VSGREEN_M VSBLUE_M else728_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif728
  else728_2:
    JR_LTEQF VSBLUE_M VSRED_M else728_3
    JR_LTEQF VSBLUE_M VSGREEN_M else728_3
    MOVEF_F VSBLUE_M VMAX_M
  else728_3:
  endif728:
    JR_GTEQF VSRED_M VSGREEN_M else729_1
    JR_GTEQF VSRED_M VSBLUE_M else729_1
    MOVEF_F VSRED_M VMIN_M
    JR endif729
  else729_1:
    JR_GTEQF VSGREEN_M VSRED_M else729_2
    JR_GTEQF VSGREEN_M VSBLUE_M else729_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif729
  else729_2:
    JR_GTEQF VSBLUE_M VSRED_M else729_3
    JR_GTEQF VSBLUE_M VSGREEN_M else729_3
    MOVEF_F VSBLUE_M VMIN_M
  else729_3:
  endif729:
    JR_NEQF VMAX_M VMIN_M else730_1
    MOVEF_F 0.0 VH_M
    JR endif730
  else730_1:
    JR_NEQF VSRED_M VMAX_M else731_1
    JR_LTF VSGREEN_M VSBLUE_M else732_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf736
    DATA8 flag736
    DIVF F.0 F.1 tmpf736
    CP_EQF 0.0 F.1 flag736
    SELECTF flag736 0.0 tmpf736 VH_M

    JR endif732
  else732_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf740
    DATA8 flag740
    DIVF F.1 F.2 tmpf740
    CP_EQF 0.0 F.2 flag740
    SELECTF flag740 0.0 tmpf740 F.0

    ADDF F.0 360.0 VH_M
  else732_2:
  endif732:
    JR endif731
  else731_1:
    JR_NEQF VMAX_M VSGREEN_M else742_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf746
    DATA8 flag746
    DIVF F.1 F.2 tmpf746
    CP_EQF 0.0 F.2 flag746
    SELECTF flag746 0.0 tmpf746 F.0

    ADDF F.0 120.0 VH_M
    JR endif742
  else742_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf751
    DATA8 flag751
    DIVF F.1 F.2 tmpf751
    CP_EQF 0.0 F.2 flag751
    SELECTF flag751 0.0 tmpf751 F.0

    ADDF F.0 240.0 VH_M
  else742_2:
  endif742:
  else731_2:
  endif731:
  else730_2:
  endif730:
    JR_NEQF VMAX_M 0.0 else753_1
    MOVEF_F 0.0 VS_M
    JR endif753
  else753_1:
    DATAF tmpf754
    DATA8 flag754
    DIVF VMIN_M VMAX_M tmpf754
    CP_EQF 0.0 VMAX_M flag754
    SELECTF flag754 0.0 tmpf754 F.0

    SUBF 1.0 F.0 VS_M
  else753_2:
  endif753:
    MOVEF_F VMAX_M VV_M
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV:
SUB_HSV_100:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    MOVEF_F 0.0 VD_M
    MOVEF_F 0.0 VZ_M
    DATA8 layer763
	DATA8 no763
	DATA8 mode8763
	
	MOVEF_8 1.0 no763
	SUB8 no763 1 no763
	DIV8 no763 4 layer763
	MATH MOD8 no763 4 no763

	MOVEF_8 2.0 mode8763
	
	INPUT_DEVICE READY_RAW layer763 no763 0 mode8763 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    MOVEF_F 1.0 VP_M
  for764:
    JR_GTF VP_M 100.0 endfor764
  forbody764:
    WRITE32 ENDSUB_HSV:CALLSUB765 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB765:
    ADDF VX_M VH_M VX_M
    ADDF VZ_M VS_M VZ_M
    ADDF VD_M VV_M VD_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody764
  endfor764:
    DATAF tmpf770
    DATA8 flag770
    DIVF VX_M 100.0 tmpf770
    CP_EQF 0.0 100.0 flag770
    SELECTF flag770 0.0 tmpf770 VH_M

    DATAF tmpf771
    DATA8 flag771
    DIVF VZ_M 100.0 tmpf771
    CP_EQF 0.0 100.0 flag771
    SELECTF flag771 0.0 tmpf771 VS_M

    DATAF tmpf772
    DATA8 flag772
    DIVF VD_M 100.0 tmpf772
    CP_EQF 0.0 100.0 flag772
    SELECTF flag772 0.0 tmpf772 VV_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
RETSUB_HSV_100:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_100:
SUB_HSV_B:
    DATA8 layer780
	DATA8 no780
	DATA8 mode8780
	
	MOVEF_8 1.0 no780
	SUB8 no780 1 no780
	DIV8 no780 4 layer780
	MATH MOD8 no780 4 no780

	MOVEF_8 2.0 mode8780
	
	INPUT_DEVICE READY_RAW layer780 no780 0 mode8780 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf787
    DATA8 flag787
    DIVF VSRED_M 255.0 tmpf787
    CP_EQF 0.0 255.0 flag787
    SELECTF flag787 0.0 tmpf787 VSRED_M

    DATAF tmpf788
    DATA8 flag788
    DIVF VSGREEN_M 255.0 tmpf788
    CP_EQF 0.0 255.0 flag788
    SELECTF flag788 0.0 tmpf788 VSGREEN_M

    DATAF tmpf789
    DATA8 flag789
    DIVF VSBLUE_M 255.0 tmpf789
    CP_EQF 0.0 255.0 flag789
    SELECTF flag789 0.0 tmpf789 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else790_1
    JR_LTEQF VSRED_M VSBLUE_M else790_1
    MOVEF_F VSRED_M VMAX_M
    JR endif790
  else790_1:
    JR_LTEQF VSGREEN_M VSRED_M else790_2
    JR_LTEQF VSGREEN_M VSBLUE_M else790_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif790
  else790_2:
    JR_LTEQF VSBLUE_M VSRED_M else790_3
    JR_LTEQF VSBLUE_M VSGREEN_M else790_3
    MOVEF_F VSBLUE_M VMAX_M
  else790_3:
  endif790:
    JR_GTEQF VSRED_M VSGREEN_M else791_1
    JR_GTEQF VSRED_M VSBLUE_M else791_1
    MOVEF_F VSRED_M VMIN_M
    JR endif791
  else791_1:
    JR_GTEQF VSGREEN_M VSRED_M else791_2
    JR_GTEQF VSGREEN_M VSBLUE_M else791_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif791
  else791_2:
    JR_GTEQF VSBLUE_M VSRED_M else791_3
    JR_GTEQF VSBLUE_M VSGREEN_M else791_3
    MOVEF_F VSBLUE_M VMIN_M
  else791_3:
  endif791:
    JR_NEQF VMAX_M VMIN_M else792_1
    MOVEF_F 0.0 VH_M
    JR endif792
  else792_1:
    JR_NEQF VSRED_M VMAX_M else793_1
    JR_LTF VSGREEN_M VSBLUE_M else794_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf798
    DATA8 flag798
    DIVF F.0 F.1 tmpf798
    CP_EQF 0.0 F.1 flag798
    SELECTF flag798 0.0 tmpf798 VH_M

    JR endif794
  else794_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf802
    DATA8 flag802
    DIVF F.1 F.2 tmpf802
    CP_EQF 0.0 F.2 flag802
    SELECTF flag802 0.0 tmpf802 F.0

    ADDF F.0 360.0 VH_M
  else794_2:
  endif794:
    JR endif793
  else793_1:
    JR_NEQF VMAX_M VSGREEN_M else804_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf808
    DATA8 flag808
    DIVF F.1 F.2 tmpf808
    CP_EQF 0.0 F.2 flag808
    SELECTF flag808 0.0 tmpf808 F.0

    ADDF F.0 120.0 VH_M
    JR endif804
  else804_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf813
    DATA8 flag813
    DIVF F.1 F.2 tmpf813
    CP_EQF 0.0 F.2 flag813
    SELECTF flag813 0.0 tmpf813 F.0

    ADDF F.0 240.0 VH_M
  else804_2:
  endif804:
  else793_2:
  endif793:
  else792_2:
  endif792:
    JR_NEQF VMAX_M 0.0 else815_1
    MOVEF_F 0.0 VS_M
    JR endif815
  else815_1:
    DATAF tmpf816
    DATA8 flag816
    DIVF VMIN_M VMAX_M tmpf816
    CP_EQF 0.0 VMAX_M flag816
    SELECTF flag816 0.0 tmpf816 F.0

    SUBF 1.0 F.0 VS_M
  else815_2:
  endif815:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 300.0 and820
    JR_LTF VH_M 360.0 or819
  and820:
    JR_LTF VH_M 0.0 else818_1
    JR_GTF VH_M 20.0 else818_1
    JR_LTEQF VS_M 0.3 else818_1
    JR_GTF VS_M 1.0 else818_1
    JR_LTEQF VV_M 0.025 else818_1
    JR_GTEQF VV_M 0.1 else818_1
  or819:
    MOVEF_F 5.0 VCOLOR_M
    JR endif818
  else818_1:
    JR_LTF VH_M 20.0 else818_2
    JR_GTEQF VH_M 60.0 else818_2
    JR_LTF VS_M 0.4 else818_2
    JR_LTEQF VV_M 0.03 else818_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif818
  else818_2:
    MOVEF_F 6.0 VCOLOR_M
  else818_3:
  endif818:
RETSUB_HSV_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_B:
SUB_HSV_D:
    DATA8 layer821
	DATA8 no821
	DATA8 mode8821
	
	MOVEF_8 1.0 no821
	SUB8 no821 1 no821
	DIV8 no821 4 layer821
	MATH MOD8 no821 4 no821

	MOVEF_8 2.0 mode8821
	
	INPUT_DEVICE READY_RAW layer821 no821 0 mode8821 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 VSNUM_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 1.0 VSRED_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 2.0 VSGREEN_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 3.0 VSBLUE_M VRECVARRAY_M
    DATAF tmpf828
    DATA8 flag828
    DIVF VSRED_M 255.0 tmpf828
    CP_EQF 0.0 255.0 flag828
    SELECTF flag828 0.0 tmpf828 VSRED_M

    DATAF tmpf829
    DATA8 flag829
    DIVF VSGREEN_M 255.0 tmpf829
    CP_EQF 0.0 255.0 flag829
    SELECTF flag829 0.0 tmpf829 VSGREEN_M

    DATAF tmpf830
    DATA8 flag830
    DIVF VSBLUE_M 255.0 tmpf830
    CP_EQF 0.0 255.0 flag830
    SELECTF flag830 0.0 tmpf830 VSBLUE_M

    JR_LTEQF VSRED_M VSGREEN_M else831_1
    JR_LTEQF VSRED_M VSBLUE_M else831_1
    MOVEF_F VSRED_M VMAX_M
    JR endif831
  else831_1:
    JR_LTEQF VSGREEN_M VSRED_M else831_2
    JR_LTEQF VSGREEN_M VSBLUE_M else831_2
    MOVEF_F VSGREEN_M VMAX_M
    JR endif831
  else831_2:
    JR_LTEQF VSBLUE_M VSRED_M else831_3
    JR_LTEQF VSBLUE_M VSGREEN_M else831_3
    MOVEF_F VSBLUE_M VMAX_M
  else831_3:
  endif831:
    JR_GTEQF VSRED_M VSGREEN_M else832_1
    JR_GTEQF VSRED_M VSBLUE_M else832_1
    MOVEF_F VSRED_M VMIN_M
    JR endif832
  else832_1:
    JR_GTEQF VSGREEN_M VSRED_M else832_2
    JR_GTEQF VSGREEN_M VSBLUE_M else832_2
    MOVEF_F VSGREEN_M VMIN_M
    JR endif832
  else832_2:
    JR_GTEQF VSBLUE_M VSRED_M else832_3
    JR_GTEQF VSBLUE_M VSGREEN_M else832_3
    MOVEF_F VSBLUE_M VMIN_M
  else832_3:
  endif832:
    JR_NEQF VMAX_M VMIN_M else833_1
    MOVEF_F 0.0 VH_M
    JR endif833
  else833_1:
    JR_NEQF VSRED_M VMAX_M else834_1
    JR_LTF VSGREEN_M VSBLUE_M else835_1
    SUBF VSGREEN_M VSBLUE_M F.1
    MULF 60.0 F.1 F.0
    SUBF VMAX_M VMIN_M F.1
    DATAF tmpf839
    DATA8 flag839
    DIVF F.0 F.1 tmpf839
    CP_EQF 0.0 F.1 flag839
    SELECTF flag839 0.0 tmpf839 VH_M

    JR endif835
  else835_1:
    SUBF VSGREEN_M VSBLUE_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf843
    DATA8 flag843
    DIVF F.1 F.2 tmpf843
    CP_EQF 0.0 F.2 flag843
    SELECTF flag843 0.0 tmpf843 F.0

    ADDF F.0 360.0 VH_M
  else835_2:
  endif835:
    JR endif834
  else834_1:
    JR_NEQF VMAX_M VSGREEN_M else845_1
    SUBF VSBLUE_M VSRED_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf849
    DATA8 flag849
    DIVF F.1 F.2 tmpf849
    CP_EQF 0.0 F.2 flag849
    SELECTF flag849 0.0 tmpf849 F.0

    ADDF F.0 120.0 VH_M
    JR endif845
  else845_1:
    SUBF VSRED_M VSGREEN_M F.2
    MULF 60.0 F.2 F.1
    SUBF VMAX_M VMIN_M F.2
    DATAF tmpf854
    DATA8 flag854
    DIVF F.1 F.2 tmpf854
    CP_EQF 0.0 F.2 flag854
    SELECTF flag854 0.0 tmpf854 F.0

    ADDF F.0 240.0 VH_M
  else845_2:
  endif845:
  else834_2:
  endif834:
  else833_2:
  endif833:
    JR_NEQF VMAX_M 0.0 else856_1
    MOVEF_F 0.0 VS_M
    JR endif856
  else856_1:
    DATAF tmpf857
    DATA8 flag857
    DIVF VMIN_M VMAX_M tmpf857
    CP_EQF 0.0 VMAX_M flag857
    SELECTF flag857 0.0 tmpf857 F.0

    SUBF 1.0 F.0 VS_M
  else856_2:
  endif856:
    MOVEF_F VMAX_M VV_M
    JR_LTEQF VH_M 200.0 and861
    JR_LTF VH_M 360.0 or860
  and861:
    JR_LTF VH_M 0.0 else859_1
    JR_GTF VH_M 30.0 else859_1
    JR_LTEQF VS_M 0.3 else859_1
    JR_GTF VS_M 1.0 else859_1
    JR_LTF VV_M 0.0 else859_1
    JR_GTEQF VV_M 0.02 else859_1
  or860:
    MOVEF_F 5.0 VCOLOR_M
    JR endif859
  else859_1:
    JR_LTF VH_M 0.0 else859_2
    JR_GTEQF VH_M 60.0 else859_2
    JR_LTF VS_M 0.4 else859_2
    JR_GTF VS_M 1.0 else859_2
    JR_LTEQF VV_M 0.003 else859_2
    MOVEF_F 4.0 VCOLOR_M
    JR endif859
  else859_2:
    MOVEF_F 6.0 VCOLOR_M
  else859_3:
  endif859:
RETSUB_HSV_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_D:
SUB_HSV_RGB_B:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer862
	DATA8 no862
	DATA8 mode8862
	
	MOVEF_8 1.0 no862
	SUB8 no862 1 no862
	DIV8 no862 4 layer862
	MATH MOD8 no862 4 no862

	MOVEF_8 2.0 mode8862
	
	INPUT_DEVICE READY_RAW layer862 no862 0 mode8862 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV:CALLSUB864 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV
CALLSUB864:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    DATA32 milliseconds873
	MOVEF_32 100.0 milliseconds873
	DATA32 timer873
	TIMER_WAIT milliseconds873 timer873
	TIMER_READY timer873
    MOVEF_F 1.0 VP_M
  for874:
    JR_GTF VP_M 100.0 endfor874
  forbody874:
    WRITE32 ENDSUB_HSV_B:CALLSUB875 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_B
CALLSUB875:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody874
  endfor874:
    DATAF tmpf878
    DATA8 flag878
    DIVF VX_M 100.0 tmpf878
    CP_EQF 0.0 100.0 flag878
    SELECTF flag878 0.0 tmpf878 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds882
	MOVEF_32 100.0 milliseconds882
	DATA32 timer882
	TIMER_WAIT milliseconds882 timer882
	TIMER_READY timer882
    JR_LTEQF VH_M 100.0 and885
    JR_LTF VH_M 360.0 or884
  and885:
    JR_LTF VH_M 0.0 else883_1
    JR_GTF VH_M 20.0 else883_1
    JR_LTEQF VS_M 0.3 else883_1
    JR_GTF VS_M 1.0 else883_1
    JR_LTEQF VV_M 0.025 else883_1
    JR_GTEQF VV_M 0.1 else883_1
  or884:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif883
  else883_1:
    JR_LTF VH_M 20.0 else883_2
    JR_GTEQF VH_M 60.0 else883_2
    JR_LTF VS_M 0.4 else883_2
    JR_LTEQF VV_M 0.03 else883_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif883
  else883_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else883_3:
  endif883:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds895
	MOVEF_32 1000.0 milliseconds895
	DATA32 timer895
	TIMER_WAIT milliseconds895 timer895
	TIMER_READY timer895
RETSUB_HSV_RGB_B:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_B:
SUB_HSV_RGB_D:
    MOVEF_F 0.0 VP_M
    MOVEF_F 0.0 VX_M
    DATA8 layer896
	DATA8 no896
	DATA8 mode8896
	
	MOVEF_8 1.0 no896
	SUB8 no896 1 no896
	DIV8 no896 4 layer896
	MATH MOD8 no896 4 no896

	MOVEF_8 2.0 mode8896
	
	INPUT_DEVICE READY_RAW layer896 no896 0 mode8896 0
    MOVEF_F 1.0 VI2CPORT_M
    MOVEF_F 1.0 VI2CSLVADDR_M
    CALL LCD.CLEAR
    WRITE32 ENDSUB_HSV_D:CALLSUB898 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB898:
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    STRINGS VALUE_FORMATTED VS_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 30.0 S.0
    STRINGS VALUE_FORMATTED VV_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 60.0 S.0
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 80.0 S.0
    MOVEF_F 1.0 VP_M
  for907:
    JR_GTF VP_M 100.0 endfor907
  forbody907:
    WRITE32 ENDSUB_HSV_D:CALLSUB908 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_HSV_D
CALLSUB908:
    ADDF VX_M VH_M VX_M
    ADDF VP_M 1.0 VP_M
    JR_LTEQF VP_M 100.0 forbody907
  endfor907:
    DATAF tmpf911
    DATA8 flag911
    DIVF VX_M 100.0 tmpf911
    CP_EQF 0.0 100.0 flag911
    SELECTF flag911 0.0 tmpf911 VH_M

    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VH_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    JR_LTEQF VH_M 200.0 and917
    JR_LTF VH_M 360.0 or916
  and917:
    JR_LTF VH_M 0.0 else915_1
    JR_GTF VH_M 40.0 else915_1
    JR_LTEQF VS_M 0.3 else915_1
    JR_GTF VS_M 1.0 else915_1
    JR_LTF VV_M 0.0 else915_1
    JR_GTEQF VV_M 0.02 else915_1
  or916:
    MOVEF_F 5.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Red'
    SOUND_READY
    JR endif915
  else915_1:
    JR_LTF VH_M 0.0 else915_2
    JR_GTEQF VH_M 100.0 else915_2
    JR_LTF VS_M 0.4 else915_2
    JR_GTF VS_M 1.0 else915_2
    JR_LTEQF VV_M 0.003 else915_2
    MOVEF_F 4.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Yellow'
    SOUND_READY
    JR endif915
  else915_2:
    MOVEF_F 6.0 VCOLOR_M
    CALL SPEAKER.PLAY 100.0 '/home/root/lms2012/prjs/WRO2021/Zero'
    SOUND_READY
  else915_3:
  endif915:
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VCOLOR_M '%g' 99 S.0
    CALL LCD.WRITE 10.0 10.0 S.0
    DATA32 milliseconds927
	MOVEF_32 1000.0 milliseconds927
	DATA32 timer927
	TIMER_WAIT milliseconds927 timer927
	TIMER_READY timer927
RETSUB_HSV_RGB_D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_HSV_RGB_D:
SUB_A3:
    CALL SENSOR.READPERCENT 3.0 F.2
    SUBF F.2 VMIN3_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX3_M VMIN3_M F.1
    DATAF tmpf932
    DATA8 flag932
    DIVF F.0 F.1 tmpf932
    CP_EQF 0.0 F.1 flag932
    SELECTF flag932 0.0 tmpf932 VS3_M

RETSUB_A3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A3:
SUB_A2:
    CALL SENSOR.READPERCENT 2.0 F.2
    SUBF F.2 VMIN2_M F.1
    MULF 100.0 F.1 F.0
    SUBF VMAX2_M VMIN2_M F.1
    DATAF tmpf937
    DATA8 flag937
    DIVF F.0 F.1 tmpf937
    CP_EQF 0.0 F.1 flag937
    SELECTF flag937 0.0 tmpf937 VS2_M

RETSUB_A2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_A2:
SUB_POLIN2D:
    WRITE32 ENDSUB_A3:CALLSUB938 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB938:
    WRITE32 ENDSUB_A2:CALLSUB939 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB939:
    SUBF VS2_M VS3_M VE_M
    MULF VK1_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2D:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2D:
SUB_POLIN2DUS:
    WRITE32 ENDSUB_A3:CALLSUB949 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A3
CALLSUB949:
    WRITE32 ENDSUB_A2:CALLSUB950 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_A2
CALLSUB950:
    SUBF VS2_M VS3_M VE_M
    MULF VK3_M VE_M F.0
    SUBF VE_M VEOLD_M F.2
    MULF VK2_M F.2 F.1
    ADDF F.0 F.1 VU_M
    MOVEF_F VE_M VEOLD_M
    ADDF VSPEED_M VU_M VSPEEDL_M
    SUBF VSPEED_M VU_M VSPEEDR_M
    CALL MOTOR.STARTPOWER 'B' VSPEEDL_M
    CALL MOTOR.STARTPOWER 'C' VSPEEDR_M
RETSUB_POLIN2DUS:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_POLIN2DUS:
SUB_ZAMOROZ:
    UI_BUTTON FLUSH
    CALL MOTOR.STOP 'BC' 'true'
    UI_BUTTON WAIT_FOR_PRESS
RETSUB_ZAMOROZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZAMOROZ:
SUB_ZADVIG:
    CALL MOTOR.START 'a' 20.0
    DATA32 milliseconds964
	MOVEF_32 100.0 milliseconds964
	DATA32 timer964
	TIMER_WAIT milliseconds964 timer964
	TIMER_READY timer964
    CALL MOTOR.STOP 'a' 'true'
RETSUB_ZADVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_ZADVIG:
SUB_VIDVIG:
    CALL MOTOR.START 'a' -20.0
    DATA32 milliseconds967
	MOVEF_32 100.0 milliseconds967
	DATA32 timer967
	TIMER_WAIT milliseconds967 timer967
	TIMER_READY timer967
    CALL MOTOR.STOP 'a' 'true'
RETSUB_VIDVIG:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIDVIG:
SUB_VIRAV_NAZ:
    DATA8 layer969
	DATA8 no969
	DATA8 mode8969
	
	MOVEF_8 2.0 no969
	SUB8 no969 1 no969
	DIV8 no969 4 layer969
	MATH MOD8 no969 4 no969

	MOVEF_8 0.0 mode8969
	
	INPUT_DEVICE READY_RAW layer969 no969 0 mode8969 0
    DATA8 layer970
	DATA8 no970
	DATA8 mode8970
	
	MOVEF_8 3.0 no970
	SUB8 no970 1 no970
	DIV8 no970 4 layer970
	MATH MOD8 no970 4 no970

	MOVEF_8 0.0 mode8970
	
	INPUT_DEVICE READY_RAW layer970 no970 0 mode8970 0
  while971:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile971
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile971
  whilebody971:
    CALL MOTOR.STARTSYNC 'BC' -20.0 -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 and975
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody971
  and975:
  endwhile971:
    CALL MOTOR.STOP 'BC' 'True'
  while979:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 10.0 endwhile979
  whilebody979:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 10.0 whilebody979
  endwhile979:
    CALL MOTOR.STOP 'B' 'True'
  while984:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 10.0 endwhile984
  whilebody984:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 10.0 whilebody984
  endwhile984:
    CALL MOTOR.STOP 'C' 'True'
  while989:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 10.0 endwhile989
  whilebody989:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 10.0 whilebody989
  endwhile989:
    CALL MOTOR.STOP 'B' 'True'
  while994:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 10.0 endwhile994
  whilebody994:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 10.0 whilebody994
  endwhile994:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV_NAZ:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV_NAZ:
SUB_VIRAV:
    DATA8 layer999
	DATA8 no999
	DATA8 mode8999
	
	MOVEF_8 2.0 no999
	SUB8 no999 1 no999
	DIV8 no999 4 layer999
	MATH MOD8 no999 4 no999

	MOVEF_8 0.0 mode8999
	
	INPUT_DEVICE READY_RAW layer999 no999 0 mode8999 0
    DATA8 layer1000
	DATA8 no1000
	DATA8 mode81000
	
	MOVEF_8 3.0 no1000
	SUB8 no1000 1 no1000
	DIV8 no1000 4 layer1000
	MATH MOD8 no1000 4 no1000

	MOVEF_8 0.0 mode81000
	
	INPUT_DEVICE READY_RAW layer1000 no1000 0 mode81000 0
  while1001:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile1001
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile1001
  whilebody1001:
    CALL MOTOR.STARTSYNC 'BC' 20.0 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 and1005
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody1001
  and1005:
  endwhile1001:
    CALL MOTOR.STOP 'BC' 'True'
  while1009:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTEQF F.0 7.0 endwhile1009
  whilebody1009:
    CALL MOTOR.START 'B' 20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTF F.0 7.0 whilebody1009
  endwhile1009:
    CALL MOTOR.STOP 'B' 'True'
  while1014:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTEQF F.0 7.0 endwhile1014
  whilebody1014:
    CALL MOTOR.START 'C' 20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTF F.0 7.0 whilebody1014
  endwhile1014:
    CALL MOTOR.STOP 'C' 'True'
  while1019:
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_GTEQF F.0 7.0 endwhile1019
  whilebody1019:
    CALL MOTOR.START 'B' -20.0
    CALL SENSOR.READPERCENT 2.0 F.0
    JR_LTF F.0 7.0 whilebody1019
  endwhile1019:
    CALL MOTOR.STOP 'B' 'True'
  while1024:
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_GTEQF F.0 7.0 endwhile1024
  whilebody1024:
    CALL MOTOR.START 'C' -20.0
    CALL SENSOR.READPERCENT 3.0 F.0
    JR_LTF F.0 7.0 whilebody1024
  endwhile1024:
    CALL MOTOR.STOP 'C' 'True'
RETSUB_VIRAV:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_VIRAV:
SUB_RGB:
    CALL ARRAYSTORE_FLOAT 0.0 66.0 VSENDARRAY_M
    CALL SENSOR.COMMUNICATEI2C VI2CPORT_M VI2CSLVADDR_M 1.0 4.0 VSENDARRAY_M VRECVARRAY_M
    CALL ARRAYGET_FLOAT 0.0 F.0 VRECVARRAY_M
    CALL ARRAYSTORE_FLOAT VI_M F.0 VA_M
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 5.0 or1034
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 14.0 or1034
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 6.0 else1033_1
  or1034:
    CALL SPEAKER.NOTE 100.0 'C#1' 500.0
    JR endif1033
  else1033_1:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 1.0 or1039
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 10.0 or1039
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 7.0 or1039
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 8.0 else1033_2
  or1039:
    CALL SPEAKER.NOTE 100.0 'C#5' 500.0
    JR endif1033
  else1033_2:
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 3.0 or1045
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_EQF F.0 2.0 or1045
    CALL ARRAYGET_FLOAT VI_M F.0 VA_M
    JR_NEQF F.0 4.0 else1033_3
  or1045:
    CALL SPEAKER.NOTE 50.0 'C#9' 1000.0
  else1033_3:
  endif1033:
RETSUB_RGB:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_RGB:
}
subcall ARRAYSTORE_FLOAT   // FFFV
{
	IN_F index
	IN_F value	
	IN_16 handle
	
	DATA32 index32
	DATA32 len	
	MOVEF_32 index index32

	ARRAY SIZE handle len
	JR_LT32 index32 0 negativeindex
	JR_LT32 index32 len arraybigenough

increasesize:	
	DATA32 doublelen
	ADD32 len len doublelen
	ARRAY RESIZE handle doublelen
writeloop:	
	ARRAY_WRITE handle len 0.0
	ADD32 len 1 len
	JR_LT32 len doublelen writeloop
	JR_GTEQ32 index32 len increasesize
	
arraybigenough:
	ARRAY_WRITE handle index32 value
negativeindex:
}
subcall MOTOR.INVERT      // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 nomotorselected

	OUTPUT_POLARITY layer nos -1

	DATA8 inv
	READ8 layer MOTORISINVERTED inv
	OR8 nos inv inv
	WRITE8 inv layer MOTORISINVERTED 
nomotorselected:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
subcall MOTOR.STARTSYNC      // SFFV       MOTORSTARTSTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2

	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed1 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:

	CALL MOTORSTARTSTEERIMPL ports speed turn
}
subcall MOTORSTARTSTEERIMPL      // SFFV       MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn

	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn 0 0
not_two_ports:
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.COMMUNICATEI2C     // FFFFAA
{
	IN_F port
	IN_F address
	IN_F writebytes
	IN_F readbytes
	IN_16 writedata
	IN_16 resultarray

	DATA8 layer
	DATA8 no
	DATA8 adr
	DATA32 wrt
	DATA32 rd
	DATA32 writedatalength
	ARRAY8 outdata 32
	ARRAY8 indata 32

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no
	MOVEF_8 address adr
	MOVEF_32 writebytes wrt
	MOVEF_32 readbytes rd

	JR_GTEQ32 wrt 0 wrtnottoless
	MOVE32_32 0 wrt
wrtnottoless:
	JR_LTEQ32 wrt 32 wrtnottomuch
	MOVE32_32 32 wrt
wrtnottomuch:
	JR_GTEQ32 rd 1 rdnottoless
	MOVE32_32 1 rd
rdnottoless:
	JR_LTEQ32 rd 32 rdnottomuch
	MOVE32_32 32 rd
rdnottomuch:

	ARRAY SIZE writedata writedatalength

	WRITE8 adr 0 outdata		// put adress in first byte of output buffer

	// decode float values from array and put in outdata buffer
	DATA32 i
	DATA8 i8
	MOVE32_32 0 i
	JR_GTEQ32 i wrt endwritecopy
writecopyloop:
	JR_GTEQ32 i writedatalength addzeroelements
	DATAF v
	DATA32 v32
	DATA8 v8
	ARRAY_READ writedata i v 
	MOVEF_32 v v32
	EXTRACTLOWBYTE v32 v8
	ADD32 i 1 i
	MOVE32_8 i i8
	WRITE8 v8 i8 outdata
	JR_LT32 i wrt writecopyloop
	JR endwritecopy
addzeroelements:
	ADD32 i 1 i 
	MOVE32_8 i i8
	WRITE8 0 i8 outdata
	JR_LT32 i wrt addzeroelements	
endwritecopy:

	// do the communciation
	DATA8 wrt8
	MOVE32_8 wrt wrt8
	ADD8 wrt8 1 wrt8
	DATA8 rd8
	MOVE32_8 rd rd8
	INPUT_DEVICE SETUP layer no 1 0 wrt8 outdata rd8 indata 

	// decode response
	ARRAY RESIZE resultarray rd
	MOVE32_32 0 i
readcopy:
	DATA32 tmp32
	SUB32 rd i tmp32
	SUB32 tmp32 1 tmp32
	MOVE32_8 tmp32 i8
	READ8 indata i8 v8
	MOVE8_32 0 tmp32
	INJECTLOWBYTE v8 tmp32
	MOVE32_F tmp32 v
	ARRAY_WRITE resultarray i v
	ADD32 i 1 i
	JR_LT32 i rd readcopy
}
subcall ARRAYGET_FLOAT     // FFF
{
	IN_F index
	OUT_F value
	IN_16 handle
	
	DATA32 index32
	DATA32 len
	MOVEF_32 index index32
	
	ARRAY SIZE handle len
	JR_LT32 index32 0 outofbounds
	JR_GTEQ32 index32 len outofbounds
	
	ARRAY_READ handle index32 value
	RETURN
outofbounds:
	MOVE8_F 0 value	
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.WRITE     // FFSV
{
	IN_F x
	IN_F y
	IN_S text 252
	
	DATA16 x_16
	DATA16 y_16
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	
	UI_DRAW SELECT_FONT 1
	UI_DRAW TEXT 1 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SPEAKER.PLAY    // FSV 
{
	IN_F volume
	IN_S filename 252	

	// prepend a path to really reach the target file from the current working directory
	DATA8 vol 
	DATAS fullname 300
	MOVEF_8 volume vol

	STRINGS ADD '../../../..' filename fullname  // when using absolute path, go to file system top from the VM directory and then back down
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/' - using absolute path
	STRINGS ADD '../prjs/' filename fullname      // by default use path relative to prjs folder (must go from the current VM directory to there)
absolutepath:
	
	SOUND PLAY vol fullname
}
subcall SPEAKER.NOTE      // FSFV
{
	IN_F volume
	IN_S note 8
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	NOTE_TO_FREQ note tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall EV3FILE.OPENREAD       // SF
{
	IN_S filename 252
	OUT_F handle

	DATAS fullname 300
	DATA16 handle16
	DATA32 dummylength

	STRINGS DUPLICATE filename fullname
	JR_EQ8 filename 47 absolutepath               // filename begins with a '/'
	STRINGS ADD '/home/root/lms2012/prjs/' filename fullname
absolutepath:
	FILE OPEN_READ fullname handle16 dummylength

	MOVE16_F handle16 handle
}
subcall EV3FILE.READLINE     // FS
{
	IN_F handle
	OUT_S text 252

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE READ_TEXT handle16 6 127 text
	RETURN

invalidhandle:
	STRINGS DUPLICATE '' text
}
subcall EV3FILE.CONVERTTONUMBER            // SF
{
	IN_S s 252
	OUT_F value

	STRINGS STRING_TO_VALUE s value
}
subcall EV3FILE.CLOSE          // FV
{
	IN_F handle

	JR_LTF handle 1.0 invalidhandle
	JR_GTF handle 32767.0 invalidhandle
	DATA16 handle16
	MOVEF_16 handle handle16
	FILE CLOSE handle16
invalidhandle:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall ARRAYCREATE_FLOAT   // F
{
	OUT_16 handle
	
	ARRAY CREATEF 8 handle			// create with 8 elements
	ARRAY FILL handle 0.0
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
